
JuliaSetVisualizer_Linux.elf:     file format elf32-littlenios2
JuliaSetVisualizer_Linux.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00100224

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001d34 memsz 0x00002014 flags rw-
    LOAD off    0x00003000 vaddr 0x00100000 paddr 0x00100000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00003020 vaddr 0x00100020 paddr 0x00100020 align 2**12
         filesz 0x0001386c memsz 0x0001386c flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00100000  00100000  00003000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00100020  00100020  00003020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012e50  00100224  00100224  00003224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000818  00113074  00113074  00016074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d34  00010000  00010000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  00011d34  00011d34  00002d34  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_1 00000000  00012014  00012014  0001688c  2**0
                  CONTENTS
  7 .onchip_flash_0_data 00000000  0011388c  0011388c  0001688c  2**0
                  CONTENTS
  8 .comment      0000002c  00000000  00000000  0001688c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f90  00000000  00000000  000168b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0004cdec  00000000  00000000  00017848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000f40b  00000000  00000000  00064634  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000197d6  00000000  00000000  00073a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000028e4  00000000  00000000  0008d218  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004c0a  00000000  00000000  0008fafc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001c694  00000000  00000000  00094706  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000b0d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c80  00000000  00000000  000b0de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000b634e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000b6351  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000b635d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000b635e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000b635f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000b6363  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000b6367  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000b636b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000b6376  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000b6381  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000003  00000000  00000000  000b638c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000034  00000000  00000000  000b638f  2**0
                  CONTENTS, READONLY
 30 .jdi          00005d95  00000000  00000000  000b63c3  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000a162d  00000000  00000000  000bc158  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00100000 l    d  .entry	00000000 .entry
00100020 l    d  .exceptions	00000000 .exceptions
00100224 l    d  .text	00000000 .text
00113074 l    d  .rodata	00000000 .rodata
00010000 l    d  .rwdata	00000000 .rwdata
00011d34 l    d  .bss	00000000 .bss
00012014 l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
0011388c l    d  .onchip_flash_0_data	00000000 .onchip_flash_0_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../JuliaSetVisualizer_Linux_bsp//obj/HAL/src/crt0.o
00100258 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00011cd0 l     O .rwdata	00000004 vga_ctrl
00011cd4 l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
00011d44 l     O .bss	00000004 usb_delay.2681
00011d48 l     O .bss	00000001 tmp_addr.2682
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00105324 l     F .text	000000c0 __sbprintf
00113342 l     O .rodata	00000010 blanks.5226
00113332 l     O .rodata	00000010 zeroes.5227
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00105544 l     F .text	00000234 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
001070f0 l     F .text	00000008 __fp_lock
00107104 l     F .text	00000168 __sinit.part.0
0010726c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010030 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00113364 l     O .rodata	0000000c p05.4024
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0010a498 l     F .text	000000f4 __sprint_r.part.0
0010b8f8 l     F .text	000000c0 __sbprintf
00113498 l     O .rodata	00000010 blanks.5203
00113488 l     O .rodata	00000010 zeroes.5204
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0010f918 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0010fa30 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0010fa5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0010fb54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0010fc40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0010fe10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011d14 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00110248 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00110388 l     F .text	00000034 alt_dev_reg
00010b70 l     O .rwdata	00001060 jtag_uart_0
00011bd0 l     O .rwdata	00000100 onchip_flash_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00110688 l     F .text	00000204 altera_avalon_jtag_uart_irq
0011088c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
001110c4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_onchip_flash.c
001111b8 l     F .text	00000034 alt_flash_device_register
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00112364 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00112794 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
001128e4 l     F .text	0000003c alt_get_errno
00112920 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00011d78 g     O .bss	00000004 alt_instruction_exception_handler
00102ff8 g     F .text	00000018 putchar
001099d4 g     F .text	00000074 _mprec_log10
00109ab4 g     F .text	00000074 __any_on
0010bff4 g     F .text	00000058 _isatty_r
00113370 g     O .rodata	00000028 __mprec_tinytens
0010fd5c g     F .text	0000006c alt_main
00011ce0 g     O .rwdata	00000008 ctrl_xfers
00100730 g     F .text	00000050 textVGAClr
00103010 g     F .text	000000cc _puts_r
00011f14 g     O .bss	00000100 alt_irq
0010c0dc g     F .text	00000064 _lseek_r
00102464 g     F .text	00000630 USB_Task
0010e2e0 g     F .text	00000080 .hidden __eqdf2
00012014 g       *ABS*	00000000 __alt_heap_start
00102fb8 g     F .text	00000038 printf
0010c2cc g     F .text	0000006c _wcrtomb_r
00101544 g     F .text	00000084 kbdPoll
0010a434 g     F .text	0000005c __sseek
001073fc g     F .text	00000010 __sinit
0010b9b8 g     F .text	00000148 __swbuf_r
0010c04c g     F .text	00000070 _setlocale_r
00107274 g     F .text	00000078 __sfmoreglue
0010fdec g     F .text	00000024 __malloc_unlock
0010025c g     F .text	000001e8 GetDriverandReport
00108958 g     F .text	0000012c memmove
001073e8 g     F .text	00000014 _cleanup
00108b74 g     F .text	000000a4 _Balloc
001016a8 g     F .text	000000d0 MAXreg_wr
00010000 g     O .rwdata	00000030 ClientDriverTable
0010e360 g     F .text	000000f0 .hidden __gtdf2
00112b5c g     F .text	00000024 altera_nios2_gen2_irq_init
00102a94 g     F .text	0000002c MSDProbe
00100000 g     F .entry	00000000 __reset
00107e88 g     F .text	00000008 __localeconv_l
00101f68 g     F .text	000000ec XferCtrlData
00011d7c g     O .bss	00000010 hid_ep
0010bf94 g     F .text	00000060 _fstat_r
00011d58 g     O .bss	00000004 errno
0010a3ac g     F .text	00000008 __seofread
00011d64 g     O .bss	00000004 alt_argv
00019cd0 g       *ABS*	00000000 _gp
00110218 g     F .text	00000030 usleep
00101854 g     F .text	000000bc MAXreg_rd
00112024 g     F .text	00000094 alt_onchip_flash_poll_for_status_write_passed
000109f0 g     O .rwdata	00000180 alt_fd_list
00101488 g     F .text	00000038 HID_init
00102ff0 g     F .text	00000008 _putchar_r
00112b80 g     F .text	00000090 alt_find_dev
00102e88 g     F .text	00000100 memcpy
00100000 g       *ABS*	00000000 __alt_mem_onchip_flash_0_data
001070f8 g     F .text	0000000c _cleanup_r
0010f760 g     F .text	000000c8 .hidden __floatsidf
00112868 g     F .text	0000007c alt_io_redirect
0010e450 g     F .text	000000f0 .hidden __ltdf2
00011cdc g     O .rwdata	00000004 SPI_MASTER_BASE
001030dc g     F .text	00000010 puts
00112dd0 g     F .text	00000098 alt_exception_cause_generated_bad_addr
00109930 g     F .text	000000a4 __ratio
0010b8e0 g     F .text	00000018 __vfiprintf_internal
00110a88 g     F .text	0000021c altera_avalon_jtag_uart_read
00102f88 g     F .text	00000030 _printf_r
00102da0 g     F .text	00000064 .hidden __udivsi3
0010fb90 g     F .text	000000b0 isatty
00111f90 g     F .text	00000094 alt_onchip_flash_poll_for_status_erase_passed
001133c0 g     O .rodata	000000c8 __mprec_tens
00011d54 g     O .bss	00000004 __malloc_top_pad
00011d20 g     O .rwdata	00000008 altera_onchip_flash_list
00011ce8 g     O .rwdata	00000001 usb_task_state
00107e90 g     F .text	0000000c _localeconv_r
00108f9c g     F .text	00000034 __i2b
0010785c g     F .text	000004d4 __sfvwrite_r
0010a300 g     F .text	00000058 _sbrk_r
0010c190 g     F .text	00000064 _read_r
00101c24 g     F .text	00000094 MAX3421E_init
00100700 g     F .text	00000030 setKeycode
0011233c g     F .text	00000028 alt_dcache_flush
00111354 g     F .text	00000168 alt_onchip_flash_erase_block
00011d0c g     O .rwdata	00000004 alt_max_fd
0010bc9c g     F .text	000000f8 _fclose_r
001070c8 g     F .text	00000028 fflush
00011d50 g     O .bss	00000004 __malloc_max_sbrked_mem
0010cfdc g     F .text	000009a0 .hidden __adddf3
001096e4 g     F .text	00000104 __b2d
0010ca14 g     F .text	000005c8 .hidden __umoddi3
0010fc7c g     F .text	000000e0 lseek
00011cec g     O .rwdata	00000004 _global_impure_ptr
00109cd4 g     F .text	0000062c _realloc_r
00012014 g       *ABS*	00000000 __bss_end
001126b0 g     F .text	000000e4 alt_iic_isr_register
00110110 g     F .text	00000108 alt_tick
0010c3f8 g     F .text	0000061c .hidden __udivdi3
0010bef4 g     F .text	00000024 _fputwc_r
00113398 g     O .rodata	00000028 __mprec_bigtens
00108d78 g     F .text	00000110 __s2b
0010f828 g     F .text	0000009c .hidden __floatunsidf
00109474 g     F .text	00000058 __mcmp
0010741c g     F .text	00000014 __fp_lock_all
00112664 g     F .text	0000004c alt_ic_irq_enabled
00110074 g     F .text	0000009c alt_alarm_stop
00011d74 g     O .bss	00000004 alt_irq_active
00102b64 g     F .text	0000002c DummyProbe
001000fc g     F .exceptions	000000c8 alt_irq_handler
000109c8 g     O .rwdata	00000028 alt_dev_null
001014c0 g     F .text	00000084 mousePoll
00101a78 g     F .text	00000024 Vbus_power
00108e88 g     F .text	00000064 __hi0bits
0010f6e0 g     F .text	00000080 .hidden __fixdfsi
00011d04 g     O .rwdata	00000008 alt_dev_list
00110284 g     F .text	00000104 write
00109b28 g     F .text	000000cc _putc_r
00011d49 g     O .bss	00000001 usb_error
0010fa98 g     F .text	000000bc fstat
0010e450 g     F .text	000000f0 .hidden __ledf2
00109210 g     F .text	00000128 __pow5mult
0010a5a4 g     F .text	0000133c ___vfiprintf_internal_r
00102e04 g     F .text	0000005c .hidden __umodsi3
00012014 g       *ABS*	00000000 end
001105c8 g     F .text	000000c0 altera_avalon_jtag_uart_init
001001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
001020d4 g     F .text	00000180 XferDispatchPkt
00018000 g       *ABS*	00000000 __alt_stack_pointer
0011113c g     F .text	0000007c alt_avalon_timer_sc_init
0010f8c4 g     F .text	00000054 .hidden __clzsi2
00110ca4 g     F .text	00000224 altera_avalon_jtag_uart_write
0010740c g     F .text	00000004 __sfp_lock_acquire
00108870 g     F .text	000000e8 memchr
00103184 g     F .text	00002188 ___vfprintf_internal_r
00101de0 g     F .text	00000034 MaxGpxHandler
001112b8 g     F .text	0000009c alt_onchip_flash_get_info
00107560 g     F .text	000002fc _free_r
001135b9 g     O .rodata	00000180 _ctype_b
0010c0bc g     F .text	0000000c __locale_mb_cur_max
00112f28 g     F .text	00000118 __call_exitprocs
00011cf4 g     O .rwdata	00000004 __malloc_sbrk_base
00100224 g     F .text	00000038 _start
00011d6c g     O .bss	00000004 _alt_tick_rate
00101910 g     F .text	000000d0 MAXbytes_rd
00109338 g     F .text	0000013c __lshift
00110ec8 g     F .text	000001fc alt_avalon_spi_command
00011d70 g     O .bss	00000004 _alt_nticks
0010fe4c g     F .text	00000108 read
001103f4 g     F .text	00000070 alt_sys_init
00011ecc g     O .bss	00000048 devtable
001010a4 g     F .text	000003e4 HIDKProbe
00011d8c g     O .bss	00000018 msd_ep
00011cd8 g     O .rwdata	00000004 BTN_PIO
00108fd0 g     F .text	00000240 __multiply
0011092c g     F .text	00000068 altera_avalon_jtag_uart_close
001023dc g     F .text	00000088 USB_init
00011dcc g     O .bss	00000100 bigbuf
00102e60 g     F .text	00000028 .hidden __mulsi3
00011da4 g     O .bss	00000028 __malloc_current_mallinfo
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00011d40 g     O .bss	00000001 last_usb_task_state
001097e8 g     F .text	00000148 __d2b
00011d38 g     O .bss	00000008 dev0ep
00100480 g     F .text	00000040 clearLED
00110464 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00112d18 g     F .text	000000b8 alt_get_fd
001121e4 g     F .text	00000158 alt_busy_sleep
00102ac0 g     F .text	0000003c MSDEventHandler
0010bb78 g     F .text	00000058 _close_r
00112e9c g     F .text	0000008c memcmp
00110524 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00012014 g       *ABS*	00000000 __alt_stack_base
00110574 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
001053e4 g     F .text	00000160 __swsetup_r
0010d97c g     F .text	00000964 .hidden __divdf3
001111ec g     F .text	000000cc alt_onchip_flash_read
001072ec g     F .text	000000fc __sfp
00109a48 g     F .text	0000006c __copybits
00010454 g     O .rwdata	00000408 __malloc_av_
00107418 g     F .text	00000004 __sinit_lock_release
00102b28 g     F .text	0000003c CDCEventHandler
0010e540 g     F .text	000007e0 .hidden __muldf3
00102b90 g     F .text	0000003c DummyEventHandler
0010a358 g     F .text	00000054 __sread
00112c10 g     F .text	00000108 alt_find_file
001123a0 g     F .text	000000a4 alt_dev_llist_insert
0010fdc8 g     F .text	00000024 __malloc_lock
0010ffc4 g     F .text	000000b0 sbrk
00107068 g     F .text	00000060 _fflush_r
0010bbd0 g     F .text	000000cc _calloc_r
00011d28 g     O .rwdata	00000008 alt_flash_dev_list
00011d34 g       *ABS*	00000000 __bss_start
00101a9c g     F .text	00000188 MAX_busprobe
00011d34 g     O .bss	00000002 hid_device
00108a84 g     F .text	000000f0 memset
00100780 g     F .text	00000540 main
00101cb8 g     F .text	0000005c MAX3421E_Task
00011d68 g     O .bss	00000004 alt_envp
00011d4c g     O .bss	00000004 __malloc_max_total_mem
001104c4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0010bb00 g     F .text	00000014 __swbuf
00102c24 g     F .text	00000084 ConvUTF8ToStr
0010a490 g     F .text	00000008 __sclose
00018000 g       *ABS*	00000000 __alt_heap_limit
0010bd94 g     F .text	00000010 fclose
00105778 g     F .text	000016c8 _dtoa_r
0010807c g     F .text	000007f4 _malloc_r
0010c3c8 g     F .text	00000030 __ascii_wctomb
00011d10 g     O .rwdata	00000004 alt_errno
00111f00 g     F .text	00000090 alt_onchip_flash_poll_for_status_to_go_idle
00107d30 g     F .text	000000a4 _fwalk
0010c140 g     F .text	0000000c _mbtowc_r
00109bf4 g     F .text	000000e0 putc
00102ca8 g     F .text	00000080 .hidden __divsi3
00102254 g     F .text	00000188 XferInTransfer
001005d0 g     F .text	00000130 printSignedHex1
00107444 g     F .text	0000011c _malloc_trim_r
00111a60 g     F .text	000004a0 altera_onchip_flash_init
00102bec g     F .text	00000038 GetDevtable
0010c1f4 g     F .text	000000d8 strcmp
00102054 g     F .text	00000080 XferCtrlND
0010e2e0 g     F .text	00000080 .hidden __nedf2
001019e0 g     F .text	00000098 MAX3421E_reset
001103bc g     F .text	00000038 alt_irq_init
0010ff54 g     F .text	00000070 alt_release_fd
00113739 g     O .rodata	00000100 .hidden __clz_tab
00011d5c g     O .bss	00000004 _PathLocale
0010bb14 g     F .text	00000064 _write_r
0010c0c8 g     F .text	00000014 setlocale
00011cf0 g     O .rwdata	00000004 _impure_ptr
00011d60 g     O .bss	00000004 alt_argc
00106e40 g     F .text	00000228 __sflush_r
00101778 g     F .text	000000dc MAXbytes_wr
00100020 g       .exceptions	00000000 alt_irq_entry
0010c14c g     F .text	00000044 __ascii_mbtowc
00109688 g     F .text	0000005c __ulp
00107430 g     F .text	00000014 __fp_unlock_all
00011cfc g     O .rwdata	00000008 alt_fs_list
001114bc g     F .text	000002d8 alt_onchip_flash_write_block
00102afc g     F .text	0000002c CDCProbe
00107e9c g     F .text	0000000c localeconv
00100444 g     F .text	0000003c setLED
00102bcc g     F .text	00000020 GetUsbTaskState
00107ea8 g     F .text	00000098 __swhatbuf_r
00112500 g     F .text	00000050 alt_ic_isr_register
001130b0 g     O .rodata	00000010 devclasses
00011d34 g       *ABS*	00000000 _edata
00101604 g     F .text	0000003c HIDKEventHandler
00111794 g     F .text	000002cc alt_onchip_flash_write
00012014 g       *ABS*	00000000 _end
00112444 g     F .text	00000068 alt_flash_open_dev
00101d14 g     F .text	000000cc MaxIntHandler
0010bda4 g     F .text	00000150 __fputwc
00110994 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00101640 g     F .text	00000040 SPI_init
001125d8 g     F .text	0000008c alt_ic_irq_disable
0010a3b4 g     F .text	00000080 __swrite
00011cf8 g     O .rwdata	00000004 __malloc_trim_threshold
00112e68 g     F .text	00000034 exit
00107dd4 g     F .text	000000b4 _fwalk_reent
001094cc g     F .text	000001bc __mdiff
001124ac g     F .text	00000054 alt_flash_close_dev
00102d28 g     F .text	00000078 .hidden __modsi3
00018000 g       *ABS*	00000000 __alt_data_end
00100020 g     F .exceptions	00000000 alt_exception
00107410 g     F .text	00000004 __sfp_lock_release
001134b8 g     O .rodata	00000101 _ctype_
0010f68c g     F .text	00000054 .hidden __unorddf2
001015c8 g     F .text	0000003c HIDMEventHandler
00113040 g     F .text	00000034 _exit
001120b8 g     F .text	0000012c alt_alarm_start
001004c0 g     F .text	00000110 printSignedHex0
00107f40 g     F .text	0000013c __smakebuf_r
001030ec g     F .text	00000098 strlen
001129fc g     F .text	00000160 open
0010e360 g     F .text	000000f0 .hidden __gedf2
0010a58c g     F .text	00000018 __sprint_r
00011d30 g     O .rwdata	00000004 alt_priority_mask
00112550 g     F .text	00000088 alt_ic_irq_enable
0010530c g     F .text	00000018 __vfprintf_internal
00100cc0 g     F .text	000003e4 HIDMProbe
0010c3bc g     F .text	0000000c _wctomb_r
00101680 g     F .text	00000028 SPI_wr
0010ed20 g     F .text	0000096c .hidden __subdf3
00108eec g     F .text	000000b0 __lo0bits
00011d18 g     O .rwdata	00000008 alt_alarm_list
0010c338 g     F .text	00000084 wcrtomb
0010f954 g     F .text	000000dc close
0001085c g     O .rwdata	0000016c __global_locale
0010bf18 g     F .text	0000007c fputwc
00107414 g     F .text	00000004 __sinit_lock_acquire
00101e14 g     F .text	00000154 XferCtrlReq
00108c3c g     F .text	0000013c __multadd
00108c18 g     F .text	00000024 _Bfree



Disassembly of section .exceptions:

00100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  10002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  10003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  10004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  10005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  10006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  10007c:	10000326 	beq	r2,zero,10008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  100080:	20000226 	beq	r4,zero,10008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  100084:	01000fc0 	call	1000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  100088:	00000706 	br	1000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  10008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  100098:	01001c40 	call	1001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  10009c:	1000021e 	bne	r2,zero,1000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  1000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  1000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  1000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  1000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  1000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  1000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  1000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  1000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  1000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  1000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  1000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  1000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  1000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  1000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  1000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  1000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  1000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  1000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  1000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  1000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  1000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  1000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  1000f8:	ef80083a 	eret

001000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  1000fc:	defff904 	addi	sp,sp,-28
  100100:	dfc00615 	stw	ra,24(sp)
  100104:	df000515 	stw	fp,20(sp)
  100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  10010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  100110:	0005313a 	rdctl	r2,ipending
  100114:	e0bffc15 	stw	r2,-16(fp)

  return active;
  100118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  10011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  100124:	00800044 	movi	r2,1
  100128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  10012c:	e0ffff17 	ldw	r3,-4(fp)
  100130:	e0bffe17 	ldw	r2,-8(fp)
  100134:	1884703a 	and	r2,r3,r2
  100138:	10001126 	beq	r2,zero,100180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  10013c:	e0bffd17 	ldw	r2,-12(fp)
  100140:	100690fa 	slli	r3,r2,3
  100144:	00800074 	movhi	r2,1
  100148:	1885883a 	add	r2,r3,r2
  10014c:	10c7c517 	ldw	r3,7956(r2)
  100150:	e0bffd17 	ldw	r2,-12(fp)
  100154:	100890fa 	slli	r4,r2,3
  100158:	00800074 	movhi	r2,1
  10015c:	2085883a 	add	r2,r4,r2
  100160:	1087c617 	ldw	r2,7960(r2)
  100164:	1009883a 	mov	r4,r2
  100168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  10016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
  100170:	0005313a 	rdctl	r2,ipending
  100174:	e0bffb15 	stw	r2,-20(fp)
  return active;
  100178:	e0bffb17 	ldw	r2,-20(fp)
  10017c:	00000706 	br	10019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
  100180:	e0bffe17 	ldw	r2,-8(fp)
  100184:	1085883a 	add	r2,r2,r2
  100188:	e0bffe15 	stw	r2,-8(fp)
      i++;
  10018c:	e0bffd17 	ldw	r2,-12(fp)
  100190:	10800044 	addi	r2,r2,1
  100194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
  100198:	003fe406 	br	10012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
  10019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  1001a0:	e0bfff17 	ldw	r2,-4(fp)
  1001a4:	103fde1e 	bne	r2,zero,100120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  1001a8:	0001883a 	nop
}
  1001ac:	0001883a 	nop
  1001b0:	e037883a 	mov	sp,fp
  1001b4:	dfc00117 	ldw	ra,4(sp)
  1001b8:	df000017 	ldw	fp,0(sp)
  1001bc:	dec00204 	addi	sp,sp,8
  1001c0:	f800283a 	ret

001001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  1001c4:	defffb04 	addi	sp,sp,-20
  1001c8:	dfc00415 	stw	ra,16(sp)
  1001cc:	df000315 	stw	fp,12(sp)
  1001d0:	df000304 	addi	fp,sp,12
  1001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  1001d8:	00bfffc4 	movi	r2,-1
  1001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
  1001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  1001e4:	d0a02a17 	ldw	r2,-32600(gp)
  1001e8:	10000726 	beq	r2,zero,100208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  1001ec:	d0a02a17 	ldw	r2,-32600(gp)
  1001f0:	e0ffff17 	ldw	r3,-4(fp)
  1001f4:	e1bffe17 	ldw	r6,-8(fp)
  1001f8:	e17ffd17 	ldw	r5,-12(fp)
  1001fc:	1809883a 	mov	r4,r3
  100200:	103ee83a 	callr	r2
  100204:	00000206 	br	100210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  100208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  10020c:	0005883a 	mov	r2,zero
}
  100210:	e037883a 	mov	sp,fp
  100214:	dfc00117 	ldw	ra,4(sp)
  100218:	df000017 	ldw	fp,0(sp)
  10021c:	dec00204 	addi	sp,sp,8
  100220:	f800283a 	ret

Disassembly of section .text:

00100224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  100224:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
  100228:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
  10022c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
  100230:	d6a73414 	ori	gp,gp,40144
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  100234:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
  100238:	10874d14 	ori	r2,r2,7476

    movhi r3, %hi(__bss_end)
  10023c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
  100240:	18c80514 	ori	r3,r3,8212

    beq r2, r3, 1f
  100244:	10c00326 	beq	r2,r3,100254 <_start+0x30>

0:
    stw zero, (r2)
  100248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  10024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  100250:	10fffd36 	bltu	r2,r3,100248 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  100254:	010fd5c0 	call	10fd5c <alt_main>

00100258 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  100258:	003fff06 	br	100258 <alt_after_alt_main>

0010025c <GetDriverandReport>:
static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };

volatile unsigned int *BTN_PIO = (unsigned int*)0x00000050; //make a pointer to access the PIO block

BYTE GetDriverandReport() {
  10025c:	defff604 	addi	sp,sp,-40
  100260:	dfc00915 	stw	ra,36(sp)
  100264:	df000815 	stw	fp,32(sp)
  100268:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
  10026c:	00bfffc4 	movi	r2,-1
  100270:	e0bfff85 	stb	r2,-2(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
  100274:	01000474 	movhi	r4,17
  100278:	210c3004 	addi	r4,r4,12480
  10027c:	01030dc0 	call	1030dc <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
  100280:	00800044 	movi	r2,1
  100284:	e0bfffc5 	stb	r2,-1(fp)
  100288:	00001d06 	br	100300 <GetDriverandReport+0xa4>
		tpl_ptr = GetDevtable(i);
  10028c:	e0bfffc3 	ldbu	r2,-1(fp)
  100290:	1009883a 	mov	r4,r2
  100294:	0102bec0 	call	102bec <GetDevtable>
  100298:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
  10029c:	e0bffe17 	ldw	r2,-8(fp)
  1002a0:	10800017 	ldw	r2,0(r2)
  1002a4:	10001326 	beq	r2,zero,1002f4 <GetDriverandReport+0x98>
			printf("Device: %d", i);
  1002a8:	e0bfffc3 	ldbu	r2,-1(fp)
  1002ac:	100b883a 	mov	r5,r2
  1002b0:	01000474 	movhi	r4,17
  1002b4:	210c3904 	addi	r4,r4,12516
  1002b8:	0102fb80 	call	102fb8 <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
  1002bc:	e0bffe17 	ldw	r2,-8(fp)
  1002c0:	10800103 	ldbu	r2,4(r2)
  1002c4:	10803fcc 	andi	r2,r2,255
  1002c8:	100690ba 	slli	r3,r2,2
  1002cc:	00800474 	movhi	r2,17
  1002d0:	1885883a 	add	r2,r3,r2
  1002d4:	108c2c17 	ldw	r2,12464(r2)
  1002d8:	100b883a 	mov	r5,r2
  1002dc:	01000474 	movhi	r4,17
  1002e0:	210c3c04 	addi	r4,r4,12528
  1002e4:	0102fb80 	call	102fb8 <printf>
			device = tpl_ptr->devclass;
  1002e8:	e0bffe17 	ldw	r2,-8(fp)
  1002ec:	10800103 	ldbu	r2,4(r2)
  1002f0:	e0bfff85 	stb	r2,-2(fp)
	for (i = 1; i < USB_NUMDEVICES; i++) {
  1002f4:	e0bfffc3 	ldbu	r2,-1(fp)
  1002f8:	10800044 	addi	r2,r2,1
  1002fc:	e0bfffc5 	stb	r2,-1(fp)
  100300:	e0bfffc3 	ldbu	r2,-1(fp)
  100304:	10800230 	cmpltui	r2,r2,8
  100308:	103fe01e 	bne	r2,zero,10028c <GetDriverandReport+0x30>
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
  10030c:	d0a00103 	ldbu	r2,-32764(gp)
  100310:	11003fcc 	andi	r4,r2,255
  100314:	d0a01943 	ldbu	r2,-32667(gp)
  100318:	10803fcc 	andi	r2,r2,255
  10031c:	e0fffd84 	addi	r3,fp,-10
  100320:	d8c00415 	stw	r3,16(sp)
  100324:	00c00044 	movi	r3,1
  100328:	d8c00315 	stw	r3,12(sp)
  10032c:	d8800215 	stw	r2,8(sp)
  100330:	d8000115 	stw	zero,4(sp)
  100334:	d8000015 	stw	zero,0(sp)
  100338:	01c00084 	movi	r7,2
  10033c:	01802844 	movi	r6,161
  100340:	000b883a 	mov	r5,zero
  100344:	0101e140 	call	101e14 <XferCtrlReq>
  100348:	e0bffdc5 	stb	r2,-9(fp)
	if (rcode) {   //error handling
  10034c:	e0bffdc3 	ldbu	r2,-9(fp)
  100350:	10000926 	beq	r2,zero,100378 <GetDriverandReport+0x11c>
		printf("GetIdle Error. Error code: ");
  100354:	01000474 	movhi	r4,17
  100358:	210c3e04 	addi	r4,r4,12536
  10035c:	0102fb80 	call	102fb8 <printf>
		printf("%x \n", rcode);
  100360:	e0bffdc3 	ldbu	r2,-9(fp)
  100364:	100b883a 	mov	r5,r2
  100368:	01000474 	movhi	r4,17
  10036c:	210c4504 	addi	r4,r4,12564
  100370:	0102fb80 	call	102fb8 <printf>
  100374:	00000906 	br	10039c <GetDriverandReport+0x140>
	} else {
		printf("Update rate: ");
  100378:	01000474 	movhi	r4,17
  10037c:	210c4704 	addi	r4,r4,12572
  100380:	0102fb80 	call	102fb8 <printf>
		printf("%x \n", tmpbyte);
  100384:	e0bffd83 	ldbu	r2,-10(fp)
  100388:	10803fcc 	andi	r2,r2,255
  10038c:	100b883a 	mov	r5,r2
  100390:	01000474 	movhi	r4,17
  100394:	210c4504 	addi	r4,r4,12564
  100398:	0102fb80 	call	102fb8 <printf>
	}
	printf("Protocol: ");
  10039c:	01000474 	movhi	r4,17
  1003a0:	210c4b04 	addi	r4,r4,12588
  1003a4:	0102fb80 	call	102fb8 <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
  1003a8:	d0a00103 	ldbu	r2,-32764(gp)
  1003ac:	11003fcc 	andi	r4,r2,255
  1003b0:	d0a01943 	ldbu	r2,-32667(gp)
  1003b4:	10803fcc 	andi	r2,r2,255
  1003b8:	e0fffd84 	addi	r3,fp,-10
  1003bc:	d8c00415 	stw	r3,16(sp)
  1003c0:	00c00044 	movi	r3,1
  1003c4:	d8c00315 	stw	r3,12(sp)
  1003c8:	d8800215 	stw	r2,8(sp)
  1003cc:	d8000115 	stw	zero,4(sp)
  1003d0:	d8000015 	stw	zero,0(sp)
  1003d4:	01c000c4 	movi	r7,3
  1003d8:	01802844 	movi	r6,161
  1003dc:	000b883a 	mov	r5,zero
  1003e0:	0101e140 	call	101e14 <XferCtrlReq>
  1003e4:	e0bffdc5 	stb	r2,-9(fp)
	if (rcode) {   //error handling
  1003e8:	e0bffdc3 	ldbu	r2,-9(fp)
  1003ec:	10000926 	beq	r2,zero,100414 <GetDriverandReport+0x1b8>
		printf("GetProto Error. Error code ");
  1003f0:	01000474 	movhi	r4,17
  1003f4:	210c4e04 	addi	r4,r4,12600
  1003f8:	0102fb80 	call	102fb8 <printf>
		printf("%x \n", rcode);
  1003fc:	e0bffdc3 	ldbu	r2,-9(fp)
  100400:	100b883a 	mov	r5,r2
  100404:	01000474 	movhi	r4,17
  100408:	210c4504 	addi	r4,r4,12564
  10040c:	0102fb80 	call	102fb8 <printf>
  100410:	00000606 	br	10042c <GetDriverandReport+0x1d0>
	} else {
		printf("%d \n", tmpbyte);
  100414:	e0bffd83 	ldbu	r2,-10(fp)
  100418:	10803fcc 	andi	r2,r2,255
  10041c:	100b883a 	mov	r5,r2
  100420:	01000474 	movhi	r4,17
  100424:	210c5504 	addi	r4,r4,12628
  100428:	0102fb80 	call	102fb8 <printf>
	}
	return device;
  10042c:	e0bfff83 	ldbu	r2,-2(fp)
}
  100430:	e037883a 	mov	sp,fp
  100434:	dfc00117 	ldw	ra,4(sp)
  100438:	df000017 	ldw	fp,0(sp)
  10043c:	dec00204 	addi	sp,sp,8
  100440:	f800283a 	ret

00100444 <setLED>:

void setLED(int LED) {
  100444:	defffe04 	addi	sp,sp,-8
  100448:	df000115 	stw	fp,4(sp)
  10044c:	df000104 	addi	fp,sp,4
  100450:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
  100454:	00c06c37 	ldwio	r3,432(zero)
  100458:	01000044 	movi	r4,1
  10045c:	e0bfff17 	ldw	r2,-4(fp)
  100460:	2084983a 	sll	r2,r4,r2
  100464:	1884b03a 	or	r2,r3,r2
  100468:	00806c35 	stwio	r2,432(zero)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
  10046c:	0001883a 	nop
  100470:	e037883a 	mov	sp,fp
  100474:	df000017 	ldw	fp,0(sp)
  100478:	dec00104 	addi	sp,sp,4
  10047c:	f800283a 	ret

00100480 <clearLED>:

void clearLED(int LED) {
  100480:	defffe04 	addi	sp,sp,-8
  100484:	df000115 	stw	fp,4(sp)
  100488:	df000104 	addi	fp,sp,4
  10048c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
  100490:	00c06c37 	ldwio	r3,432(zero)
  100494:	01000044 	movi	r4,1
  100498:	e0bfff17 	ldw	r2,-4(fp)
  10049c:	2084983a 	sll	r2,r4,r2
  1004a0:	0084303a 	nor	r2,zero,r2
  1004a4:	1884703a 	and	r2,r3,r2
  1004a8:	00806c35 	stwio	r2,432(zero)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
  1004ac:	0001883a 	nop
  1004b0:	e037883a 	mov	sp,fp
  1004b4:	df000017 	ldw	fp,0(sp)
  1004b8:	dec00104 	addi	sp,sp,4
  1004bc:	f800283a 	ret

001004c0 <printSignedHex0>:

void printSignedHex0(signed char value) {
  1004c0:	defffc04 	addi	sp,sp,-16
  1004c4:	dfc00315 	stw	ra,12(sp)
  1004c8:	df000215 	stw	fp,8(sp)
  1004cc:	df000204 	addi	fp,sp,8
  1004d0:	2005883a 	mov	r2,r4
  1004d4:	e0bffe05 	stb	r2,-8(fp)
	BYTE tens = 0;
  1004d8:	e03fffc5 	stb	zero,-1(fp)
	BYTE ones = 0;
  1004dc:	e03fff85 	stb	zero,-2(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
  1004e0:	00807037 	ldwio	r2,448(zero)
  1004e4:	e0bfff0d 	sth	r2,-4(fp)
	if (value < 0) {
  1004e8:	e0bffe07 	ldb	r2,-8(fp)
  1004ec:	1000060e 	bge	r2,zero,100508 <printSignedHex0+0x48>
		setLED(11);
  1004f0:	010002c4 	movi	r4,11
  1004f4:	01004440 	call	100444 <setLED>
		value = -value;
  1004f8:	e0bffe03 	ldbu	r2,-8(fp)
  1004fc:	0085c83a 	sub	r2,zero,r2
  100500:	e0bffe05 	stb	r2,-8(fp)
  100504:	00000206 	br	100510 <printSignedHex0+0x50>
	} else {
		clearLED(11);
  100508:	010002c4 	movi	r4,11
  10050c:	01004800 	call	100480 <clearLED>
	}
	//handled hundreds
	if (value / 100)
  100510:	e0bffe03 	ldbu	r2,-8(fp)
  100514:	108018c4 	addi	r2,r2,99
  100518:	10803fcc 	andi	r2,r2,255
  10051c:	108031f0 	cmpltui	r2,r2,199
  100520:	1000031e 	bne	r2,zero,100530 <printSignedHex0+0x70>
		setLED(13);
  100524:	01000344 	movi	r4,13
  100528:	01004440 	call	100444 <setLED>
  10052c:	00000206 	br	100538 <printSignedHex0+0x78>
	else
		clearLED(13);
  100530:	01000344 	movi	r4,13
  100534:	01004800 	call	100480 <clearLED>

	value = value % 100;
  100538:	e0bffe07 	ldb	r2,-8(fp)
  10053c:	01401904 	movi	r5,100
  100540:	1009883a 	mov	r4,r2
  100544:	0102d280 	call	102d28 <__modsi3>
  100548:	e0bffe05 	stb	r2,-8(fp)
	tens = value / 10;
  10054c:	e0bffe07 	ldb	r2,-8(fp)
  100550:	01400284 	movi	r5,10
  100554:	1009883a 	mov	r4,r2
  100558:	0102ca80 	call	102ca8 <__divsi3>
  10055c:	e0bfffc5 	stb	r2,-1(fp)
	ones = value % 10;
  100560:	e0bffe07 	ldb	r2,-8(fp)
  100564:	01400284 	movi	r5,10
  100568:	1009883a 	mov	r4,r2
  10056c:	0102d280 	call	102d28 <__modsi3>
  100570:	e0bfff85 	stb	r2,-2(fp)

	pio_val &= 0x00FF;
  100574:	e0bfff0b 	ldhu	r2,-4(fp)
  100578:	10803fcc 	andi	r2,r2,255
  10057c:	e0bfff0d 	sth	r2,-4(fp)
	pio_val |= (tens << 12);
  100580:	e0bfffc3 	ldbu	r2,-1(fp)
  100584:	1004933a 	slli	r2,r2,12
  100588:	1007883a 	mov	r3,r2
  10058c:	e0bfff0b 	ldhu	r2,-4(fp)
  100590:	1884b03a 	or	r2,r3,r2
  100594:	e0bfff0d 	sth	r2,-4(fp)
	pio_val |= (ones << 8);
  100598:	e0bfff83 	ldbu	r2,-2(fp)
  10059c:	1004923a 	slli	r2,r2,8
  1005a0:	1007883a 	mov	r3,r2
  1005a4:	e0bfff0b 	ldhu	r2,-4(fp)
  1005a8:	1884b03a 	or	r2,r3,r2
  1005ac:	e0bfff0d 	sth	r2,-4(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
  1005b0:	e0bfff0b 	ldhu	r2,-4(fp)
  1005b4:	00807035 	stwio	r2,448(zero)
}
  1005b8:	0001883a 	nop
  1005bc:	e037883a 	mov	sp,fp
  1005c0:	dfc00117 	ldw	ra,4(sp)
  1005c4:	df000017 	ldw	fp,0(sp)
  1005c8:	dec00204 	addi	sp,sp,8
  1005cc:	f800283a 	ret

001005d0 <printSignedHex1>:

void printSignedHex1(signed char value) {
  1005d0:	defffb04 	addi	sp,sp,-20
  1005d4:	dfc00415 	stw	ra,16(sp)
  1005d8:	df000315 	stw	fp,12(sp)
  1005dc:	df000304 	addi	fp,sp,12
  1005e0:	2005883a 	mov	r2,r4
  1005e4:	e0bffd05 	stb	r2,-12(fp)
	BYTE tens = 0;
  1005e8:	e03fffc5 	stb	zero,-1(fp)
	BYTE ones = 0;
  1005ec:	e03fff85 	stb	zero,-2(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
  1005f0:	00807037 	ldwio	r2,448(zero)
  1005f4:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
  1005f8:	e0bffd07 	ldb	r2,-12(fp)
  1005fc:	1000060e 	bge	r2,zero,100618 <printSignedHex1+0x48>
		setLED(10);
  100600:	01000284 	movi	r4,10
  100604:	01004440 	call	100444 <setLED>
		value = -value;
  100608:	e0bffd03 	ldbu	r2,-12(fp)
  10060c:	0085c83a 	sub	r2,zero,r2
  100610:	e0bffd05 	stb	r2,-12(fp)
  100614:	00000206 	br	100620 <printSignedHex1+0x50>
	} else {
		clearLED(10);
  100618:	01000284 	movi	r4,10
  10061c:	01004800 	call	100480 <clearLED>
	}
	//handled hundreds
	if (value / 100)
  100620:	e0bffd03 	ldbu	r2,-12(fp)
  100624:	108018c4 	addi	r2,r2,99
  100628:	10803fcc 	andi	r2,r2,255
  10062c:	108031f0 	cmpltui	r2,r2,199
  100630:	1000031e 	bne	r2,zero,100640 <printSignedHex1+0x70>
		setLED(12);
  100634:	01000304 	movi	r4,12
  100638:	01004440 	call	100444 <setLED>
  10063c:	00000206 	br	100648 <printSignedHex1+0x78>
	else
		clearLED(12);
  100640:	01000304 	movi	r4,12
  100644:	01004800 	call	100480 <clearLED>

	value = value % 100;
  100648:	e0bffd07 	ldb	r2,-12(fp)
  10064c:	01401904 	movi	r5,100
  100650:	1009883a 	mov	r4,r2
  100654:	0102d280 	call	102d28 <__modsi3>
  100658:	e0bffd05 	stb	r2,-12(fp)
	tens = value / 10;
  10065c:	e0bffd07 	ldb	r2,-12(fp)
  100660:	01400284 	movi	r5,10
  100664:	1009883a 	mov	r4,r2
  100668:	0102ca80 	call	102ca8 <__divsi3>
  10066c:	e0bfffc5 	stb	r2,-1(fp)
	ones = value % 10;
  100670:	e0bffd07 	ldb	r2,-12(fp)
  100674:	01400284 	movi	r5,10
  100678:	1009883a 	mov	r4,r2
  10067c:	0102d280 	call	102d28 <__modsi3>
  100680:	e0bfff85 	stb	r2,-2(fp)
	tens = value / 10;
  100684:	e0bffd07 	ldb	r2,-12(fp)
  100688:	01400284 	movi	r5,10
  10068c:	1009883a 	mov	r4,r2
  100690:	0102ca80 	call	102ca8 <__divsi3>
  100694:	e0bfffc5 	stb	r2,-1(fp)
	ones = value % 10;
  100698:	e0bffd07 	ldb	r2,-12(fp)
  10069c:	01400284 	movi	r5,10
  1006a0:	1009883a 	mov	r4,r2
  1006a4:	0102d280 	call	102d28 <__modsi3>
  1006a8:	e0bfff85 	stb	r2,-2(fp)

	pio_val &= 0xFF00;
  1006ac:	e0bffe17 	ldw	r2,-8(fp)
  1006b0:	10bfc00c 	andi	r2,r2,65280
  1006b4:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
  1006b8:	e0bfffc3 	ldbu	r2,-1(fp)
  1006bc:	1004913a 	slli	r2,r2,4
  1006c0:	1007883a 	mov	r3,r2
  1006c4:	e0bffe17 	ldw	r2,-8(fp)
  1006c8:	10c4b03a 	or	r2,r2,r3
  1006cc:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
  1006d0:	e0bfff83 	ldbu	r2,-2(fp)
  1006d4:	e0fffe17 	ldw	r3,-8(fp)
  1006d8:	1884b03a 	or	r2,r3,r2
  1006dc:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
  1006e0:	e0bffe17 	ldw	r2,-8(fp)
  1006e4:	00807035 	stwio	r2,448(zero)
}
  1006e8:	0001883a 	nop
  1006ec:	e037883a 	mov	sp,fp
  1006f0:	dfc00117 	ldw	ra,4(sp)
  1006f4:	df000017 	ldw	fp,0(sp)
  1006f8:	dec00204 	addi	sp,sp,8
  1006fc:	f800283a 	ret

00100700 <setKeycode>:

void setKeycode(WORD keycode)
{
  100700:	defffe04 	addi	sp,sp,-8
  100704:	df000115 	stw	fp,4(sp)
  100708:	df000104 	addi	fp,sp,4
  10070c:	2005883a 	mov	r2,r4
  100710:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, keycode);
  100714:	e0bfff0b 	ldhu	r2,-4(fp)
  100718:	00808035 	stwio	r2,512(zero)
}
  10071c:	0001883a 	nop
  100720:	e037883a 	mov	sp,fp
  100724:	df000017 	ldw	fp,0(sp)
  100728:	dec00104 	addi	sp,sp,4
  10072c:	f800283a 	ret

00100730 <textVGAClr>:



void textVGAClr()
{
  100730:	defffe04 	addi	sp,sp,-8
  100734:	df000115 	stw	fp,4(sp)
  100738:	df000104 	addi	fp,sp,4
	for (int i = 0; i<(ROWS*COLUMNS); i++)
  10073c:	e03fff15 	stw	zero,-4(fp)
  100740:	00000706 	br	100760 <textVGAClr+0x30>
	{
		vga_ctrl->VRAM[i] = 0x00;
  100744:	d0e00017 	ldw	r3,-32768(gp)
  100748:	e0bfff17 	ldw	r2,-4(fp)
  10074c:	1885883a 	add	r2,r3,r2
  100750:	10000005 	stb	zero,0(r2)
	for (int i = 0; i<(ROWS*COLUMNS); i++)
  100754:	e0bfff17 	ldw	r2,-4(fp)
  100758:	10800044 	addi	r2,r2,1
  10075c:	e0bfff15 	stw	r2,-4(fp)
  100760:	e0bfff17 	ldw	r2,-4(fp)
  100764:	10825810 	cmplti	r2,r2,2400
  100768:	103ff61e 	bne	r2,zero,100744 <textVGAClr+0x14>
	}
}
  10076c:	0001883a 	nop
  100770:	e037883a 	mov	sp,fp
  100774:	df000017 	ldw	fp,0(sp)
  100778:	dec00104 	addi	sp,sp,4
  10077c:	f800283a 	ret

00100780 <main>:

int main() {
  100780:	deffeb04 	addi	sp,sp,-84
  100784:	dfc01415 	stw	ra,80(sp)
  100788:	df001315 	stw	fp,76(sp)
  10078c:	dc001215 	stw	r16,72(sp)
  100790:	df001304 	addi	fp,sp,76
	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
  100794:	e03ffec5 	stb	zero,-5(fp)
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
  100798:	e03ffe85 	stb	zero,-6(fp)
	BYTE device;
	WORD keycode;
	WORD prev_keycode;


	printf("initializing MAX3421E...\n");
  10079c:	01000474 	movhi	r4,17
  1007a0:	210c5704 	addi	r4,r4,12636
  1007a4:	01030dc0 	call	1030dc <puts>
	MAX3421E_init();
  1007a8:	0101c240 	call	101c24 <MAX3421E_init>
	printf("initializing USB...\n");
  1007ac:	01000474 	movhi	r4,17
  1007b0:	210c5e04 	addi	r4,r4,12664
  1007b4:	01030dc0 	call	1030dc <puts>
	USB_init();
  1007b8:	01023dc0 	call	1023dc <USB_init>

	char coord_prompt[] = "BRUH";
  1007bc:	00949084 	movi	r2,21058
  1007c0:	e0bff38d 	sth	r2,-50(fp)
  1007c4:	00921544 	movi	r2,18517
  1007c8:	e0bff40d 	sth	r2,-48(fp)
  1007cc:	e03ff485 	stb	zero,-46(fp)
	char color_prompt[] = "Enter color selection.";
  1007d0:	e0ffedc4 	addi	r3,fp,-73
  1007d4:	00800474 	movhi	r2,17
  1007d8:	108c7304 	addi	r2,r2,12748
  1007dc:	010005c4 	movi	r4,23
  1007e0:	200d883a 	mov	r6,r4
  1007e4:	100b883a 	mov	r5,r2
  1007e8:	1809883a 	mov	r4,r3
  1007ec:	0102e880 	call	102e88 <memcpy>

	IOWR_ALTERA_AVALON_PIO_DATA(REAL_VAL_BASE, 0xFFFFFFFF);
  1007f0:	00bfffc4 	movi	r2,-1
  1007f4:	00806035 	stwio	r2,384(zero)
	IOWR_ALTERA_AVALON_PIO_DATA(IMAG_VAL_BASE, 0xFFFFFFFF);
  1007f8:	00bfffc4 	movi	r2,-1
  1007fc:	00800035 	stwio	r2,0(zero)
	
	while (1) {
		printf(".");
  100800:	01000b84 	movi	r4,46
  100804:	0102ff80 	call	102ff8 <putchar>
		MAX3421E_Task();
  100808:	0101cb80 	call	101cb8 <MAX3421E_Task>
		USB_Task();
  10080c:	01024640 	call	102464 <USB_Task>
		
		//usleep (500000);
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
  100810:	0102bcc0 	call	102bcc <GetUsbTaskState>
  100814:	10803fcc 	andi	r2,r2,255
  100818:	10801018 	cmpnei	r2,r2,64
  10081c:	1001061e 	bne	r2,zero,100c38 <main+0x4b8>
			if (!runningdebugflag) {
  100820:	e0bffec3 	ldbu	r2,-5(fp)
  100824:	1000071e 	bne	r2,zero,100844 <main+0xc4>
				runningdebugflag = 1;
  100828:	00800044 	movi	r2,1
  10082c:	e0bffec5 	stb	r2,-5(fp)
				setLED(9);
  100830:	01000244 	movi	r4,9
  100834:	01004440 	call	100444 <setLED>
				device = GetDriverandReport();
  100838:	010025c0 	call	10025c <GetDriverandReport>
  10083c:	e0bffe45 	stb	r2,-7(fp)
  100840:	003fef06 	br	100800 <main+0x80>
			} else if (device == 1) {
  100844:	e0bffe43 	ldbu	r2,-7(fp)
  100848:	10800058 	cmpnei	r2,r2,1
  10084c:	103fec1e 	bne	r2,zero,100800 <main+0x80>
				//run keyboard debug polling
				if (*BTN_PIO == 2){
  100850:	d0a00217 	ldw	r2,-32760(gp)
  100854:	10800017 	ldw	r2,0(r2)
  100858:	10800098 	cmpnei	r2,r2,2
  10085c:	1000071e 	bne	r2,zero,10087c <main+0xfc>
					textVGAClr();
  100860:	01007300 	call	100730 <textVGAClr>
					IOWR_ALTERA_AVALON_PIO_DATA(TRANSITION_BASE, 0x0);
  100864:	0005883a 	mov	r2,zero
  100868:	00806835 	stwio	r2,416(zero)
					IOWR_ALTERA_AVALON_PIO_DATA(REAL_VAL_BASE, 0xFFFFFFFF);
  10086c:	00bfffc4 	movi	r2,-1
  100870:	00806035 	stwio	r2,384(zero)
					IOWR_ALTERA_AVALON_PIO_DATA(IMAG_VAL_BASE, 0xFFFFFFFF);
  100874:	00bfffc4 	movi	r2,-1
  100878:	00800035 	stwio	r2,0(zero)
				}
				
				int state = IORD_ALTERA_AVALON_PIO_DATA(STATE_BASE);
  10087c:	00805c37 	ldwio	r2,368(zero)
  100880:	e0bff915 	stw	r2,-28(fp)

				rcode = kbdPoll(&kbdbuf);
  100884:	e0bff4c4 	addi	r2,fp,-45
  100888:	1009883a 	mov	r4,r2
  10088c:	01015440 	call	101544 <kbdPoll>
  100890:	e0bff8c5 	stb	r2,-29(fp)
				if (rcode == hrNAK) {
  100894:	e0bff8c3 	ldbu	r2,-29(fp)
  100898:	10800118 	cmpnei	r2,r2,4
  10089c:	10010626 	beq	r2,zero,100cb8 <main+0x538>
					continue; //NAK means no new data
				} else if (rcode) {
  1008a0:	e0bff8c3 	ldbu	r2,-29(fp)
  1008a4:	10000926 	beq	r2,zero,1008cc <main+0x14c>
					printf("Rcode: ");
  1008a8:	01000474 	movhi	r4,17
  1008ac:	210c6304 	addi	r4,r4,12684
  1008b0:	0102fb80 	call	102fb8 <printf>
					printf("%x \n", rcode);
  1008b4:	e0bff8c3 	ldbu	r2,-29(fp)
  1008b8:	100b883a 	mov	r5,r2
  1008bc:	01000474 	movhi	r4,17
  1008c0:	210c4504 	addi	r4,r4,12564
  1008c4:	0102fb80 	call	102fb8 <printf>
					continue;
  1008c8:	0000fc06 	br	100cbc <main+0x53c>
				}
				printf("keycodes: ");
  1008cc:	01000474 	movhi	r4,17
  1008d0:	210c6504 	addi	r4,r4,12692
  1008d4:	0102fb80 	call	102fb8 <printf>
				for (int i = 0; i < 6; i++) {
  1008d8:	e03ffc15 	stw	zero,-16(fp)
  1008dc:	00000c06 	br	100910 <main+0x190>
					printf("%x ", kbdbuf.keycode[i]);
  1008e0:	e0bffc17 	ldw	r2,-16(fp)
  1008e4:	e0ffff04 	addi	r3,fp,-4
  1008e8:	1885883a 	add	r2,r3,r2
  1008ec:	10bff643 	ldbu	r2,-39(r2)
  1008f0:	10803fcc 	andi	r2,r2,255
  1008f4:	100b883a 	mov	r5,r2
  1008f8:	01000474 	movhi	r4,17
  1008fc:	210c6804 	addi	r4,r4,12704
  100900:	0102fb80 	call	102fb8 <printf>
				for (int i = 0; i < 6; i++) {
  100904:	e0bffc17 	ldw	r2,-16(fp)
  100908:	10800044 	addi	r2,r2,1
  10090c:	e0bffc15 	stw	r2,-16(fp)
  100910:	e0bffc17 	ldw	r2,-16(fp)
  100914:	10800190 	cmplti	r2,r2,6
  100918:	103ff11e 	bne	r2,zero,1008e0 <main+0x160>
				}

				if (prev_keycode == NULL){
  10091c:	e0bffd8b 	ldhu	r2,-10(fp)
  100920:	1000031e 	bne	r2,zero,100930 <main+0x1b0>
					prev_keycode = kbdbuf.keycode[0];
  100924:	e0bff543 	ldbu	r2,-43(fp)
  100928:	10803fcc 	andi	r2,r2,255
  10092c:	e0bffd8d 	sth	r2,-10(fp)
				}

				if (state == 0){ // ASSIGN FRACTAL CONSTANTS
  100930:	e0bff917 	ldw	r2,-28(fp)
  100934:	10005c1e 	bne	r2,zero,100aa8 <main+0x328>
                    for (int j = 0; j < ROWS; j++){
  100938:	e03ffb15 	stw	zero,-20(fp)
  10093c:	00001606 	br	100998 <main+0x218>
                        memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+(ROWS-j),coord_prompt, sizeof(coord_prompt));
  100940:	d4200017 	ldw	r16,-32768(gp)
  100944:	01401404 	movi	r5,80
  100948:	e13ffb17 	ldw	r4,-20(fp)
  10094c:	0102e600 	call	102e60 <__mulsi3>
  100950:	8085883a 	add	r2,r16,r2
  100954:	01000784 	movi	r4,30
  100958:	e0fffb17 	ldw	r3,-20(fp)
  10095c:	20c7c83a 	sub	r3,r4,r3
  100960:	10c5883a 	add	r2,r2,r3
  100964:	e0fff383 	ldbu	r3,-50(fp)
  100968:	10c00005 	stb	r3,0(r2)
  10096c:	e0fff3c3 	ldbu	r3,-49(fp)
  100970:	10c00045 	stb	r3,1(r2)
  100974:	e0fff403 	ldbu	r3,-48(fp)
  100978:	10c00085 	stb	r3,2(r2)
  10097c:	e0fff443 	ldbu	r3,-47(fp)
  100980:	10c000c5 	stb	r3,3(r2)
  100984:	e0fff483 	ldbu	r3,-46(fp)
  100988:	10c00105 	stb	r3,4(r2)
                    for (int j = 0; j < ROWS; j++){
  10098c:	e0bffb17 	ldw	r2,-20(fp)
  100990:	10800044 	addi	r2,r2,1
  100994:	e0bffb15 	stw	r2,-20(fp)
  100998:	e0bffb17 	ldw	r2,-20(fp)
  10099c:	10800790 	cmplti	r2,r2,30
  1009a0:	103fe71e 	bne	r2,zero,100940 <main+0x1c0>
                    }
                    if ((prev_keycode == 0x00) && (kbdbuf.keycode[0] != 0x00)){
  1009a4:	e0bffd8b 	ldhu	r2,-10(fp)
  1009a8:	10003b1e 	bne	r2,zero,100a98 <main+0x318>
  1009ac:	e0bff543 	ldbu	r2,-43(fp)
  1009b0:	10803fcc 	andi	r2,r2,255
  1009b4:	10003826 	beq	r2,zero,100a98 <main+0x318>
                        switch(kbdbuf.keycode[0]){
  1009b8:	e0bff543 	ldbu	r2,-43(fp)
  1009bc:	10803fcc 	andi	r2,r2,255
  1009c0:	10bff884 	addi	r2,r2,-30
  1009c4:	10c002a8 	cmpgeui	r3,r2,10
  1009c8:	1800301e 	bne	r3,zero,100a8c <main+0x30c>
  1009cc:	100690ba 	slli	r3,r2,2
  1009d0:	00800434 	movhi	r2,16
  1009d4:	1885883a 	add	r2,r3,r2
  1009d8:	10827817 	ldw	r2,2528(r2)
  1009dc:	1000683a 	jmp	r2
  1009e0:	00100a20 	cmpeqi	zero,zero,16424
  1009e4:	00100a34 	movhi	zero,16424
  1009e8:	00100a48 	cmpgei	zero,zero,16425
  1009ec:	00100a5c 	xori	zero,zero,16425
  1009f0:	00100a74 	movhi	zero,16425
  1009f4:	00100a8c 	andi	zero,zero,16426
  1009f8:	00100a8c 	andi	zero,zero,16426
  1009fc:	00100a8c 	andi	zero,zero,16426
  100a00:	00100a8c 	andi	zero,zero,16426
  100a04:	00100a08 	cmpgei	zero,zero,16424
                                case KEY_0:
                                	IOWR_ALTERA_AVALON_PIO_DATA(REAL_VAL_BASE, 0xFFFF3334);
  100a08:	00bffff4 	movhi	r2,65535
  100a0c:	108ccd04 	addi	r2,r2,13108
  100a10:	00806035 	stwio	r2,384(zero)
                                	IOWR_ALTERA_AVALON_PIO_DATA(IMAG_VAL_BASE, 0x000027EF);
  100a14:	0089fbc4 	movi	r2,10223
  100a18:	00800035 	stwio	r2,0(zero)
                                	break;
  100a1c:	00001b06 	br	100a8c <main+0x30c>
                                case KEY_1:
                                	IOWR_ALTERA_AVALON_PIO_DATA(REAL_VAL_BASE, 0xFFFF999A);
  100a20:	00a66684 	movi	r2,-26214
  100a24:	00806035 	stwio	r2,384(zero)
                                	IOWR_ALTERA_AVALON_PIO_DATA(IMAG_VAL_BASE, 0x00009999);
  100a28:	00a66654 	movui	r2,39321
  100a2c:	00800035 	stwio	r2,0(zero)
                                	break;
  100a30:	00001606 	br	100a8c <main+0x30c>
                                case KEY_2:
                                	IOWR_ALTERA_AVALON_PIO_DATA(REAL_VAL_BASE, 0x000048F5);
  100a34:	00923d44 	movi	r2,18677
  100a38:	00806035 	stwio	r2,384(zero)
                                	IOWR_ALTERA_AVALON_PIO_DATA(IMAG_VAL_BASE, 0x00000000);
  100a3c:	0005883a 	mov	r2,zero
  100a40:	00800035 	stwio	r2,0(zero)
                                	break;
  100a44:	00001106 	br	100a8c <main+0x30c>
                                case KEY_3:
                                	IOWR_ALTERA_AVALON_PIO_DATA(REAL_VAL_BASE, 0x0000416F);
  100a48:	00905bc4 	movi	r2,16751
  100a4c:	00806035 	stwio	r2,384(zero)
                                	IOWR_ALTERA_AVALON_PIO_DATA(IMAG_VAL_BASE, 0x00008D0E);
  100a50:	00a34394 	movui	r2,36110
  100a54:	00800035 	stwio	r2,0(zero)
                                	break;
  100a58:	00000c06 	br	100a8c <main+0x30c>
                                case KEY_4:
                                	IOWR_ALTERA_AVALON_PIO_DATA(REAL_VAL_BASE, 0xFFFF399A);
  100a5c:	00bffff4 	movhi	r2,65535
  100a60:	108e6684 	addi	r2,r2,14746
  100a64:	00806035 	stwio	r2,384(zero)
                                	IOWR_ALTERA_AVALON_PIO_DATA(IMAG_VAL_BASE, 0X00000000);
  100a68:	0005883a 	mov	r2,zero
  100a6c:	00800035 	stwio	r2,0(zero)
                                	break;
  100a70:	00000606 	br	100a8c <main+0x30c>
                                case KEY_5:
                                	IOWR_ALTERA_AVALON_PIO_DATA(REAL_VAL_BASE, 0xFFFF45EA);
  100a74:	00bffff4 	movhi	r2,65535
  100a78:	10917a84 	addi	r2,r2,17898
  100a7c:	00806035 	stwio	r2,384(zero)
                                	IOWR_ALTERA_AVALON_PIO_DATA(IMAG_VAL_BASE, 0x0000305B);
  100a80:	008c16c4 	movi	r2,12379
  100a84:	00800035 	stwio	r2,0(zero)
                                	break;
  100a88:	0001883a 	nop
                                // case KEY_8:
                                //     real_val += (80.1);
                                // case KEY_9:
                                //     real_val += (90.1);
                        }
                        textVGAClr();
  100a8c:	01007300 	call	100730 <textVGAClr>
                        IOWR_ALTERA_AVALON_PIO_DATA(TRANSITION_BASE, 0x1);
  100a90:	00800044 	movi	r2,1
  100a94:	00806835 	stwio	r2,416(zero)
                    }
					prev_keycode = kbdbuf.keycode[0];
  100a98:	e0bff543 	ldbu	r2,-43(fp)
  100a9c:	10803fcc 	andi	r2,r2,255
  100aa0:	e0bffd8d 	sth	r2,-10(fp)
  100aa4:	00005106 	br	100bec <main+0x46c>
                }
                else if (state == 1){ // ASSIGN COLOR
  100aa8:	e0bff917 	ldw	r2,-28(fp)
  100aac:	10800058 	cmpnei	r2,r2,1
  100ab0:	10004e1e 	bne	r2,zero,100bec <main+0x46c>
					for (int j = 0; j < ROWS; j++){
  100ab4:	e03ffa15 	stw	zero,-24(fp)
  100ab8:	00001206 	br	100b04 <main+0x384>
                        memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+(ROWS-j),color_prompt, sizeof(color_prompt));
  100abc:	d4200017 	ldw	r16,-32768(gp)
  100ac0:	01401404 	movi	r5,80
  100ac4:	e13ffa17 	ldw	r4,-24(fp)
  100ac8:	0102e600 	call	102e60 <__mulsi3>
  100acc:	8085883a 	add	r2,r16,r2
  100ad0:	01000784 	movi	r4,30
  100ad4:	e0fffa17 	ldw	r3,-24(fp)
  100ad8:	20c7c83a 	sub	r3,r4,r3
  100adc:	10c5883a 	add	r2,r2,r3
  100ae0:	1009883a 	mov	r4,r2
  100ae4:	e0bfedc4 	addi	r2,fp,-73
  100ae8:	00c005c4 	movi	r3,23
  100aec:	180d883a 	mov	r6,r3
  100af0:	100b883a 	mov	r5,r2
  100af4:	0102e880 	call	102e88 <memcpy>
					for (int j = 0; j < ROWS; j++){
  100af8:	e0bffa17 	ldw	r2,-24(fp)
  100afc:	10800044 	addi	r2,r2,1
  100b00:	e0bffa15 	stw	r2,-24(fp)
  100b04:	e0bffa17 	ldw	r2,-24(fp)
  100b08:	10800790 	cmplti	r2,r2,30
  100b0c:	103feb1e 	bne	r2,zero,100abc <main+0x33c>
                    }
                    if ((prev_keycode == 0x00) && (kbdbuf.keycode[0] != 0x00)){
  100b10:	e0bffd8b 	ldhu	r2,-10(fp)
  100b14:	1000321e 	bne	r2,zero,100be0 <main+0x460>
  100b18:	e0bff543 	ldbu	r2,-43(fp)
  100b1c:	10803fcc 	andi	r2,r2,255
  100b20:	10002f26 	beq	r2,zero,100be0 <main+0x460>
                        switch(kbdbuf.keycode[0]){
  100b24:	e0bff543 	ldbu	r2,-43(fp)
  100b28:	10803fcc 	andi	r2,r2,255
  100b2c:	10bff884 	addi	r2,r2,-30
  100b30:	10c002a8 	cmpgeui	r3,r2,10
  100b34:	1800271e 	bne	r3,zero,100bd4 <main+0x454>
  100b38:	100690ba 	slli	r3,r2,2
  100b3c:	00800434 	movhi	r2,16
  100b40:	1885883a 	add	r2,r3,r2
  100b44:	1082d317 	ldw	r2,2892(r2)
  100b48:	1000683a 	jmp	r2
  100b4c:	00100b80 	call	100b8 <impure_data+0x88>
  100b50:	00100b8c 	andi	zero,zero,16430
  100b54:	00100b98 	cmpnei	zero,zero,16430
  100b58:	00100ba4 	muli	zero,zero,16430
  100b5c:	00100bb0 	cmpltui	zero,zero,16430
  100b60:	00100bbc 	xorhi	zero,zero,16430
  100b64:	00100bc8 	cmpgei	zero,zero,16431
  100b68:	00100bd4 	movui	zero,16431
  100b6c:	00100bd4 	movui	zero,16431
  100b70:	00100b74 	movhi	zero,16429
                                case KEY_0:
                                	IOWR_ALTERA_AVALON_PIO_DATA(COLOR_BASE, 0x00000000);
  100b74:	0005883a 	mov	r2,zero
  100b78:	00806435 	stwio	r2,400(zero)
                                	break;
  100b7c:	00001506 	br	100bd4 <main+0x454>
                                case KEY_1:
                                	IOWR_ALTERA_AVALON_PIO_DATA(COLOR_BASE, 0x00000001);
  100b80:	00800044 	movi	r2,1
  100b84:	00806435 	stwio	r2,400(zero)
                                	break;
  100b88:	00001206 	br	100bd4 <main+0x454>
                                case KEY_2:
                                	IOWR_ALTERA_AVALON_PIO_DATA(COLOR_BASE, 0x00000002);
  100b8c:	00800084 	movi	r2,2
  100b90:	00806435 	stwio	r2,400(zero)
                                	break;
  100b94:	00000f06 	br	100bd4 <main+0x454>
                                case KEY_3:
                                	IOWR_ALTERA_AVALON_PIO_DATA(COLOR_BASE, 0x00000003);
  100b98:	008000c4 	movi	r2,3
  100b9c:	00806435 	stwio	r2,400(zero)
                                	break;
  100ba0:	00000c06 	br	100bd4 <main+0x454>
                                case KEY_4:
                                	IOWR_ALTERA_AVALON_PIO_DATA(COLOR_BASE, 0x00000004);
  100ba4:	00800104 	movi	r2,4
  100ba8:	00806435 	stwio	r2,400(zero)
                                	break;
  100bac:	00000906 	br	100bd4 <main+0x454>
                                case KEY_5:
                                	IOWR_ALTERA_AVALON_PIO_DATA(COLOR_BASE, 0x00000005);
  100bb0:	00800144 	movi	r2,5
  100bb4:	00806435 	stwio	r2,400(zero)
                                	break;
  100bb8:	00000606 	br	100bd4 <main+0x454>
                                case KEY_6:
                                	IOWR_ALTERA_AVALON_PIO_DATA(COLOR_BASE, 0x00000006);
  100bbc:	00800184 	movi	r2,6
  100bc0:	00806435 	stwio	r2,400(zero)
                                	break;
  100bc4:	00000306 	br	100bd4 <main+0x454>
                                case KEY_7:
                                	IOWR_ALTERA_AVALON_PIO_DATA(COLOR_BASE, 0x00000007);
  100bc8:	008001c4 	movi	r2,7
  100bcc:	00806435 	stwio	r2,400(zero)
                                	break;
  100bd0:	0001883a 	nop
                                // case KEY_8:
                                //     real_val += (80.1);
                                // case KEY_9:
                                //     real_val += (90.1);
                        }
                        textVGAClr();
  100bd4:	01007300 	call	100730 <textVGAClr>
                        IOWR_ALTERA_AVALON_PIO_DATA(TRANSITION_BASE, 0x1);
  100bd8:	00800044 	movi	r2,1
  100bdc:	00806835 	stwio	r2,416(zero)
                    }
					prev_keycode = kbdbuf.keycode[0];
  100be0:	e0bff543 	ldbu	r2,-43(fp)
  100be4:	10803fcc 	andi	r2,r2,255
  100be8:	e0bffd8d 	sth	r2,-10(fp)
				// 	}
				// }
				// const char * = "0x320";
  				// int hex_value = (int)strtol(, NULL, 0);

				setKeycode(kbdbuf.keycode[0]);
  100bec:	e0bff543 	ldbu	r2,-43(fp)
  100bf0:	10803fcc 	andi	r2,r2,255
  100bf4:	1009883a 	mov	r4,r2
  100bf8:	01007000 	call	100700 <setKeycode>
				printSignedHex0(kbdbuf.keycode[0]);
  100bfc:	e0bff543 	ldbu	r2,-43(fp)
  100c00:	10803fcc 	andi	r2,r2,255
  100c04:	1080201c 	xori	r2,r2,128
  100c08:	10bfe004 	addi	r2,r2,-128
  100c0c:	1009883a 	mov	r4,r2
  100c10:	01004c00 	call	1004c0 <printSignedHex0>
				printSignedHex1(kbdbuf.keycode[1]);
  100c14:	e0bff583 	ldbu	r2,-42(fp)
  100c18:	10803fcc 	andi	r2,r2,255
  100c1c:	1080201c 	xori	r2,r2,128
  100c20:	10bfe004 	addi	r2,r2,-128
  100c24:	1009883a 	mov	r4,r2
  100c28:	01005d00 	call	1005d0 <printSignedHex1>
				printf("\n");
  100c2c:	01000284 	movi	r4,10
  100c30:	0102ff80 	call	102ff8 <putchar>
  100c34:	003ef206 	br	100800 <main+0x80>
//				if (buf.button & 0x01)
//					setLED(0);
//				else
//					clearLED(0);
//			}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
  100c38:	0102bcc0 	call	102bcc <GetUsbTaskState>
  100c3c:	10803fcc 	andi	r2,r2,255
  100c40:	10803fd8 	cmpnei	r2,r2,255
  100c44:	10000a1e 	bne	r2,zero,100c70 <main+0x4f0>
			if (!errorflag) {
  100c48:	e0bffe83 	ldbu	r2,-6(fp)
  100c4c:	103eec1e 	bne	r2,zero,100800 <main+0x80>
				errorflag = 1;
  100c50:	00800044 	movi	r2,1
  100c54:	e0bffe85 	stb	r2,-6(fp)
				clearLED(9);
  100c58:	01000244 	movi	r4,9
  100c5c:	01004800 	call	100480 <clearLED>
				printf("USB Error State\n");
  100c60:	01000474 	movhi	r4,17
  100c64:	210c6904 	addi	r4,r4,12708
  100c68:	01030dc0 	call	1030dc <puts>
  100c6c:	003ee406 	br	100800 <main+0x80>
				//print out string descriptor here
			}
		} else //not in USB running state
		{

			printf("USB task state: ");
  100c70:	01000474 	movhi	r4,17
  100c74:	210c6d04 	addi	r4,r4,12724
  100c78:	0102fb80 	call	102fb8 <printf>
			printf("%x\n", GetUsbTaskState());
  100c7c:	0102bcc0 	call	102bcc <GetUsbTaskState>
  100c80:	10803fcc 	andi	r2,r2,255
  100c84:	100b883a 	mov	r5,r2
  100c88:	01000474 	movhi	r4,17
  100c8c:	210c7204 	addi	r4,r4,12744
  100c90:	0102fb80 	call	102fb8 <printf>
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
  100c94:	e0bffec3 	ldbu	r2,-5(fp)
  100c98:	10000326 	beq	r2,zero,100ca8 <main+0x528>
				runningdebugflag = 0;
  100c9c:	e03ffec5 	stb	zero,-5(fp)
				MAX3421E_init();
  100ca0:	0101c240 	call	101c24 <MAX3421E_init>
				USB_init();
  100ca4:	01023dc0 	call	1023dc <USB_init>
			}
			errorflag = 0;
  100ca8:	e03ffe85 	stb	zero,-6(fp)
			clearLED(9);
  100cac:	01000244 	movi	r4,9
  100cb0:	01004800 	call	100480 <clearLED>
  100cb4:	003ed206 	br	100800 <main+0x80>
					continue; //NAK means no new data
  100cb8:	0001883a 	nop
		printf(".");
  100cbc:	003ed006 	br	100800 <main+0x80>

00100cc0 <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
  100cc0:	defff204 	addi	sp,sp,-56
  100cc4:	dfc00d15 	stw	ra,52(sp)
  100cc8:	df000c15 	stw	fp,48(sp)
  100ccc:	df000c04 	addi	fp,sp,48
  100cd0:	2005883a 	mov	r2,r4
  100cd4:	e17ff915 	stw	r5,-28(fp)
  100cd8:	e0bffa05 	stb	r2,-24(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
  100cdc:	00800074 	movhi	r2,1
  100ce0:	10877304 	addi	r2,r2,7628
  100ce4:	e0bffe15 	stw	r2,-8(fp)
	BYTE* byte_ptr = bigbuf;
  100ce8:	00800074 	movhi	r2,1
  100cec:	10877304 	addi	r2,r2,7628
  100cf0:	e0bffd15 	stw	r2,-12(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
  100cf4:	e0fffa03 	ldbu	r3,-24(fp)
  100cf8:	00800074 	movhi	r2,1
  100cfc:	10877304 	addi	r2,r2,7628
  100d00:	d8800415 	stw	r2,16(sp)
  100d04:	00800244 	movi	r2,9
  100d08:	d8800315 	stw	r2,12(sp)
  100d0c:	d8000215 	stw	zero,8(sp)
  100d10:	00800084 	movi	r2,2
  100d14:	d8800115 	stw	r2,4(sp)
  100d18:	d8000015 	stw	zero,0(sp)
  100d1c:	01c00184 	movi	r7,6
  100d20:	01802004 	movi	r6,128
  100d24:	000b883a 	mov	r5,zero
  100d28:	1809883a 	mov	r4,r3
  100d2c:	0101e140 	call	101e14 <XferCtrlReq>
  100d30:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling
  100d34:	e0bffcc3 	ldbu	r2,-13(fp)
  100d38:	10000226 	beq	r2,zero,100d44 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
  100d3c:	0005883a 	mov	r2,zero
  100d40:	0000d306 	br	101090 <HIDMProbe+0x3d0>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
  100d44:	e0bffe17 	ldw	r2,-8(fp)
  100d48:	1080008b 	ldhu	r2,2(r2)
  100d4c:	10bfffcc 	andi	r2,r2,65535
  100d50:	10804070 	cmpltui	r2,r2,257
  100d54:	1000031e 	bne	r2,zero,100d64 <HIDMProbe+0xa4>
		total_length = 256;
  100d58:	00804004 	movi	r2,256
  100d5c:	e0bfff8d 	sth	r2,-2(fp)
  100d60:	00000306 	br	100d70 <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
  100d64:	e0bffe17 	ldw	r2,-8(fp)
  100d68:	1080008b 	ldhu	r2,2(r2)
  100d6c:	e0bfff8d 	sth	r2,-2(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
  100d70:	e13ffa03 	ldbu	r4,-24(fp)
  100d74:	e0ffff8b 	ldhu	r3,-2(fp)
  100d78:	00800074 	movhi	r2,1
  100d7c:	10877304 	addi	r2,r2,7628
  100d80:	d8800415 	stw	r2,16(sp)
  100d84:	d8c00315 	stw	r3,12(sp)
  100d88:	d8000215 	stw	zero,8(sp)
  100d8c:	00800084 	movi	r2,2
  100d90:	d8800115 	stw	r2,4(sp)
  100d94:	d8000015 	stw	zero,0(sp)
  100d98:	01c00184 	movi	r7,6
  100d9c:	01802004 	movi	r6,128
  100da0:	000b883a 	mov	r5,zero
  100da4:	0101e140 	call	101e14 <XferCtrlReq>
  100da8:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling
  100dac:	e0bffcc3 	ldbu	r2,-13(fp)
  100db0:	10000226 	beq	r2,zero,100dbc <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
  100db4:	0005883a 	mov	r2,zero
  100db8:	0000b506 	br	101090 <HIDMProbe+0x3d0>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
  100dbc:	e0bffe17 	ldw	r2,-8(fp)
  100dc0:	10800143 	ldbu	r2,5(r2)
  100dc4:	e0bffc85 	stb	r2,-14(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
  100dc8:	0000aa06 	br	101074 <HIDMProbe+0x3b4>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
  100dcc:	e0bffe17 	ldw	r2,-8(fp)
  100dd0:	10800043 	ldbu	r2,1(r2)
  100dd4:	10803fcc 	andi	r2,r2,255
  100dd8:	10800120 	cmpeqi	r2,r2,4
  100ddc:	1000091e 	bne	r2,zero,100e04 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
  100de0:	e0bffe17 	ldw	r2,-8(fp)
  100de4:	10800003 	ldbu	r2,0(r2)
  100de8:	10803fcc 	andi	r2,r2,255
  100dec:	e0fffd17 	ldw	r3,-12(fp)
  100df0:	1885883a 	add	r2,r3,r2
  100df4:	e0bffd15 	stw	r2,-12(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
  100df8:	e0bffd17 	ldw	r2,-12(fp)
  100dfc:	e0bffe15 	stw	r2,-8(fp)
  100e00:	00009c06 	br	101074 <HIDMProbe+0x3b4>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
  100e04:	e0bffe17 	ldw	r2,-8(fp)
  100e08:	10800143 	ldbu	r2,5(r2)
  100e0c:	e0bffc45 	stb	r2,-15(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
  100e10:	e0bffe17 	ldw	r2,-8(fp)
  100e14:	10800183 	ldbu	r2,6(r2)
  100e18:	e0bffc05 	stb	r2,-16(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
  100e1c:	e0bffe17 	ldw	r2,-8(fp)
  100e20:	108001c3 	ldbu	r2,7(r2)
  100e24:	e0bffbc5 	stb	r2,-17(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
  100e28:	e0bffc43 	ldbu	r2,-15(fp)
  100e2c:	108000d8 	cmpnei	r2,r2,3
  100e30:	10008e1e 	bne	r2,zero,10106c <HIDMProbe+0x3ac>
  100e34:	e0bffc03 	ldbu	r2,-16(fp)
  100e38:	10800058 	cmpnei	r2,r2,1
  100e3c:	10008b1e 	bne	r2,zero,10106c <HIDMProbe+0x3ac>
					&& protocol == HID_PROTOCOL_MOUSE) {
  100e40:	e0bffbc3 	ldbu	r2,-17(fp)
  100e44:	10800098 	cmpnei	r2,r2,2
  100e48:	1000881e 	bne	r2,zero,10106c <HIDMProbe+0x3ac>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
  100e4c:	e0bffa03 	ldbu	r2,-24(fp)
  100e50:	100890fa 	slli	r4,r2,3
  100e54:	00c00084 	movi	r3,2
  100e58:	00800074 	movhi	r2,1
  100e5c:	2085883a 	add	r2,r4,r2
  100e60:	10c7b405 	stb	r3,7888(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
  100e64:	e0bffa03 	ldbu	r2,-24(fp)
  100e68:	100690fa 	slli	r3,r2,3
  100e6c:	00800074 	movhi	r2,1
  100e70:	1885883a 	add	r2,r3,r2
  100e74:	1087b317 	ldw	r2,7884(r2)
  100e78:	1080008b 	ldhu	r2,2(r2)
  100e7c:	e0bffb85 	stb	r2,-18(fp)
				HID_init();                         //initialize data structures
  100e80:	01014880 	call	101488 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
  100e84:	e0bffa03 	ldbu	r2,-24(fp)
  100e88:	100890fa 	slli	r4,r2,3
  100e8c:	00c00074 	movhi	r3,1
  100e90:	18c75f04 	addi	r3,r3,7548
  100e94:	00800074 	movhi	r2,1
  100e98:	2085883a 	add	r2,r4,r2
  100e9c:	10c7b315 	stw	r3,7884(r2)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
  100ea0:	e0bffa03 	ldbu	r2,-24(fp)
  100ea4:	100690fa 	slli	r3,r2,3
  100ea8:	00800074 	movhi	r2,1
  100eac:	1885883a 	add	r2,r3,r2
  100eb0:	1087b317 	ldw	r2,7884(r2)
  100eb4:	e0fffb83 	ldbu	r3,-18(fp)
  100eb8:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
  100ebc:	e0bffe17 	ldw	r2,-8(fp)
  100ec0:	10800083 	ldbu	r2,2(r2)
				hid_device.interface =
  100ec4:	d0a01945 	stb	r2,-32667(gp)
				hid_device.addr = addr;
  100ec8:	e0bffa03 	ldbu	r2,-24(fp)
  100ecc:	d0a01905 	stb	r2,-32668(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
  100ed0:	e0bffe17 	ldw	r2,-8(fp)
  100ed4:	10800003 	ldbu	r2,0(r2)
  100ed8:	10803fcc 	andi	r2,r2,255
  100edc:	e0fffd17 	ldw	r3,-12(fp)
  100ee0:	1885883a 	add	r2,r3,r2
  100ee4:	e0bffd15 	stw	r2,-12(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
  100ee8:	e0bffd17 	ldw	r2,-12(fp)
  100eec:	e0bffe15 	stw	r2,-8(fp)
				while (byte_ptr < bigbuf + total_length) {
  100ef0:	00005706 	br	101050 <HIDMProbe+0x390>
					if (data_ptr->descr.config.bDescriptorType
  100ef4:	e0bffe17 	ldw	r2,-8(fp)
  100ef8:	10800043 	ldbu	r2,1(r2)
  100efc:	10803fcc 	andi	r2,r2,255
  100f00:	10800160 	cmpeqi	r2,r2,5
  100f04:	1000091e 	bne	r2,zero,100f2c <HIDMProbe+0x26c>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
  100f08:	e0bffe17 	ldw	r2,-8(fp)
  100f0c:	10800003 	ldbu	r2,0(r2)
  100f10:	10803fcc 	andi	r2,r2,255
  100f14:	e0fffd17 	ldw	r3,-12(fp)
  100f18:	1885883a 	add	r2,r3,r2
  100f1c:	e0bffd15 	stw	r2,-12(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
  100f20:	e0bffd17 	ldw	r2,-12(fp)
  100f24:	e0bffe15 	stw	r2,-8(fp)
  100f28:	00004906 	br	101050 <HIDMProbe+0x390>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
  100f2c:	e0bffa03 	ldbu	r2,-24(fp)
  100f30:	100690fa 	slli	r3,r2,3
  100f34:	00800074 	movhi	r2,1
  100f38:	1885883a 	add	r2,r3,r2
  100f3c:	1087b317 	ldw	r2,7884(r2)
  100f40:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
  100f44:	e0fffe17 	ldw	r3,-8(fp)
  100f48:	18c00083 	ldbu	r3,2(r3)
						devtable[addr].epinfo[1].epAddr =
  100f4c:	10c00005 	stb	r3,0(r2)
						devtable[addr].epinfo[1].Attr =
  100f50:	e0bffa03 	ldbu	r2,-24(fp)
  100f54:	100690fa 	slli	r3,r2,3
  100f58:	00800074 	movhi	r2,1
  100f5c:	1885883a 	add	r2,r3,r2
  100f60:	1087b317 	ldw	r2,7884(r2)
  100f64:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
  100f68:	e0fffe17 	ldw	r3,-8(fp)
  100f6c:	18c000c3 	ldbu	r3,3(r3)
						devtable[addr].epinfo[1].Attr =
  100f70:	10c00045 	stb	r3,1(r2)
						devtable[addr].epinfo[1].MaxPktSize =
  100f74:	e0bffa03 	ldbu	r2,-24(fp)
  100f78:	100690fa 	slli	r3,r2,3
  100f7c:	00800074 	movhi	r2,1
  100f80:	1885883a 	add	r2,r3,r2
  100f84:	1087b317 	ldw	r2,7884(r2)
  100f88:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
  100f8c:	e0fffe17 	ldw	r3,-8(fp)
  100f90:	18c0010b 	ldhu	r3,4(r3)
						devtable[addr].epinfo[1].MaxPktSize =
  100f94:	10c0008d 	sth	r3,2(r2)
						devtable[addr].epinfo[1].Interval =
  100f98:	e0bffa03 	ldbu	r2,-24(fp)
  100f9c:	100690fa 	slli	r3,r2,3
  100fa0:	00800074 	movhi	r2,1
  100fa4:	1885883a 	add	r2,r3,r2
  100fa8:	1087b317 	ldw	r2,7884(r2)
  100fac:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
  100fb0:	e0fffe17 	ldw	r3,-8(fp)
  100fb4:	18c00183 	ldbu	r3,6(r3)
						devtable[addr].epinfo[1].Interval =
  100fb8:	10c00105 	stb	r3,4(r2)
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
  100fbc:	e0fffa03 	ldbu	r3,-24(fp)
  100fc0:	e0bffc83 	ldbu	r2,-14(fp)
  100fc4:	d8000415 	stw	zero,16(sp)
  100fc8:	d8000315 	stw	zero,12(sp)
  100fcc:	d8000215 	stw	zero,8(sp)
  100fd0:	d8000115 	stw	zero,4(sp)
  100fd4:	d8800015 	stw	r2,0(sp)
  100fd8:	01c00244 	movi	r7,9
  100fdc:	000d883a 	mov	r6,zero
  100fe0:	000b883a 	mov	r5,zero
  100fe4:	1809883a 	mov	r4,r3
  100fe8:	0101e140 	call	101e14 <XferCtrlReq>
  100fec:	e0bffcc5 	stb	r2,-13(fp)
						if (rcode) {   //error handling
  100ff0:	e0bffcc3 	ldbu	r2,-13(fp)
  100ff4:	10000226 	beq	r2,zero,101000 <HIDMProbe+0x340>
							return (FALSE);
  100ff8:	0005883a 	mov	r2,zero
  100ffc:	00002406 	br	101090 <HIDMProbe+0x3d0>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
  101000:	e0fffa03 	ldbu	r3,-24(fp)
  101004:	d0a01943 	ldbu	r2,-32667(gp)
  101008:	10803fcc 	andi	r2,r2,255
  10100c:	d8000415 	stw	zero,16(sp)
  101010:	d8000315 	stw	zero,12(sp)
  101014:	d8800215 	stw	r2,8(sp)
  101018:	d8000115 	stw	zero,4(sp)
  10101c:	d8000015 	stw	zero,0(sp)
  101020:	01c002c4 	movi	r7,11
  101024:	01800844 	movi	r6,33
  101028:	000b883a 	mov	r5,zero
  10102c:	1809883a 	mov	r4,r3
  101030:	0101e140 	call	101e14 <XferCtrlReq>
  101034:	e0bffcc5 	stb	r2,-13(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
  101038:	e0bffcc3 	ldbu	r2,-13(fp)
  10103c:	10000226 	beq	r2,zero,101048 <HIDMProbe+0x388>
							return (FALSE);
  101040:	0005883a 	mov	r2,zero
  101044:	00001206 	br	101090 <HIDMProbe+0x3d0>
						} else {
							return (TRUE);
  101048:	00800044 	movi	r2,1
  10104c:	00001006 	br	101090 <HIDMProbe+0x3d0>
				while (byte_ptr < bigbuf + total_length) {
  101050:	e0ffff8b 	ldhu	r3,-2(fp)
  101054:	00800074 	movhi	r2,1
  101058:	10877304 	addi	r2,r2,7628
  10105c:	1885883a 	add	r2,r3,r2
  101060:	e0fffd17 	ldw	r3,-12(fp)
  101064:	18bfa336 	bltu	r3,r2,100ef4 <HIDMProbe+0x234>
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
  101068:	00000206 	br	101074 <HIDMProbe+0x3b4>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
  10106c:	0005883a 	mov	r2,zero
  101070:	00000706 	br	101090 <HIDMProbe+0x3d0>
	while (byte_ptr < bigbuf + total_length) {
  101074:	e0ffff8b 	ldhu	r3,-2(fp)
  101078:	00800074 	movhi	r2,1
  10107c:	10877304 	addi	r2,r2,7628
  101080:	1885883a 	add	r2,r3,r2
  101084:	e0fffd17 	ldw	r3,-12(fp)
  101088:	18bf5036 	bltu	r3,r2,100dcc <HIDMProbe+0x10c>
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
  10108c:	0005883a 	mov	r2,zero
}
  101090:	e037883a 	mov	sp,fp
  101094:	dfc00117 	ldw	ra,4(sp)
  101098:	df000017 	ldw	fp,0(sp)
  10109c:	dec00204 	addi	sp,sp,8
  1010a0:	f800283a 	ret

001010a4 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
  1010a4:	defff204 	addi	sp,sp,-56
  1010a8:	dfc00d15 	stw	ra,52(sp)
  1010ac:	df000c15 	stw	fp,48(sp)
  1010b0:	df000c04 	addi	fp,sp,48
  1010b4:	2005883a 	mov	r2,r4
  1010b8:	e17ff915 	stw	r5,-28(fp)
  1010bc:	e0bffa05 	stb	r2,-24(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
  1010c0:	00800074 	movhi	r2,1
  1010c4:	10877304 	addi	r2,r2,7628
  1010c8:	e0bffe15 	stw	r2,-8(fp)
	BYTE* byte_ptr = bigbuf;
  1010cc:	00800074 	movhi	r2,1
  1010d0:	10877304 	addi	r2,r2,7628
  1010d4:	e0bffd15 	stw	r2,-12(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
  1010d8:	e0fffa03 	ldbu	r3,-24(fp)
  1010dc:	00800074 	movhi	r2,1
  1010e0:	10877304 	addi	r2,r2,7628
  1010e4:	d8800415 	stw	r2,16(sp)
  1010e8:	00800244 	movi	r2,9
  1010ec:	d8800315 	stw	r2,12(sp)
  1010f0:	d8000215 	stw	zero,8(sp)
  1010f4:	00800084 	movi	r2,2
  1010f8:	d8800115 	stw	r2,4(sp)
  1010fc:	d8000015 	stw	zero,0(sp)
  101100:	01c00184 	movi	r7,6
  101104:	01802004 	movi	r6,128
  101108:	000b883a 	mov	r5,zero
  10110c:	1809883a 	mov	r4,r3
  101110:	0101e140 	call	101e14 <XferCtrlReq>
  101114:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling           
  101118:	e0bffcc3 	ldbu	r2,-13(fp)
  10111c:	10000226 	beq	r2,zero,101128 <HIDKProbe+0x84>
		return (FALSE);
  101120:	0005883a 	mov	r2,zero
  101124:	0000d306 	br	101474 <HIDKProbe+0x3d0>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
  101128:	e0bffe17 	ldw	r2,-8(fp)
  10112c:	1080008b 	ldhu	r2,2(r2)
  101130:	10bfffcc 	andi	r2,r2,65535
  101134:	10804070 	cmpltui	r2,r2,257
  101138:	1000031e 	bne	r2,zero,101148 <HIDKProbe+0xa4>
		total_length = 256;
  10113c:	00804004 	movi	r2,256
  101140:	e0bfff8d 	sth	r2,-2(fp)
  101144:	00000306 	br	101154 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
  101148:	e0bffe17 	ldw	r2,-8(fp)
  10114c:	1080008b 	ldhu	r2,2(r2)
  101150:	e0bfff8d 	sth	r2,-2(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
  101154:	e13ffa03 	ldbu	r4,-24(fp)
  101158:	e0ffff8b 	ldhu	r3,-2(fp)
  10115c:	00800074 	movhi	r2,1
  101160:	10877304 	addi	r2,r2,7628
  101164:	d8800415 	stw	r2,16(sp)
  101168:	d8c00315 	stw	r3,12(sp)
  10116c:	d8000215 	stw	zero,8(sp)
  101170:	00800084 	movi	r2,2
  101174:	d8800115 	stw	r2,4(sp)
  101178:	d8000015 	stw	zero,0(sp)
  10117c:	01c00184 	movi	r7,6
  101180:	01802004 	movi	r6,128
  101184:	000b883a 	mov	r5,zero
  101188:	0101e140 	call	101e14 <XferCtrlReq>
  10118c:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling
  101190:	e0bffcc3 	ldbu	r2,-13(fp)
  101194:	10000226 	beq	r2,zero,1011a0 <HIDKProbe+0xfc>
		return (FALSE);
  101198:	0005883a 	mov	r2,zero
  10119c:	0000b506 	br	101474 <HIDKProbe+0x3d0>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
  1011a0:	e0bffe17 	ldw	r2,-8(fp)
  1011a4:	10800143 	ldbu	r2,5(r2)
  1011a8:	e0bffc85 	stb	r2,-14(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
  1011ac:	0000aa06 	br	101458 <HIDKProbe+0x3b4>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
  1011b0:	e0bffe17 	ldw	r2,-8(fp)
  1011b4:	10800043 	ldbu	r2,1(r2)
  1011b8:	10803fcc 	andi	r2,r2,255
  1011bc:	10800120 	cmpeqi	r2,r2,4
  1011c0:	1000091e 	bne	r2,zero,1011e8 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
  1011c4:	e0bffe17 	ldw	r2,-8(fp)
  1011c8:	10800003 	ldbu	r2,0(r2)
  1011cc:	10803fcc 	andi	r2,r2,255
  1011d0:	e0fffd17 	ldw	r3,-12(fp)
  1011d4:	1885883a 	add	r2,r3,r2
  1011d8:	e0bffd15 	stw	r2,-12(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
  1011dc:	e0bffd17 	ldw	r2,-12(fp)
  1011e0:	e0bffe15 	stw	r2,-8(fp)
  1011e4:	00009c06 	br	101458 <HIDKProbe+0x3b4>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
  1011e8:	e0bffe17 	ldw	r2,-8(fp)
  1011ec:	10800143 	ldbu	r2,5(r2)
  1011f0:	e0bffc45 	stb	r2,-15(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
  1011f4:	e0bffe17 	ldw	r2,-8(fp)
  1011f8:	10800183 	ldbu	r2,6(r2)
  1011fc:	e0bffc05 	stb	r2,-16(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
  101200:	e0bffe17 	ldw	r2,-8(fp)
  101204:	108001c3 	ldbu	r2,7(r2)
  101208:	e0bffbc5 	stb	r2,-17(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
  10120c:	e0bffc43 	ldbu	r2,-15(fp)
  101210:	108000d8 	cmpnei	r2,r2,3
  101214:	10008e1e 	bne	r2,zero,101450 <HIDKProbe+0x3ac>
  101218:	e0bffc03 	ldbu	r2,-16(fp)
  10121c:	10800058 	cmpnei	r2,r2,1
  101220:	10008b1e 	bne	r2,zero,101450 <HIDKProbe+0x3ac>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
  101224:	e0bffbc3 	ldbu	r2,-17(fp)
  101228:	10800058 	cmpnei	r2,r2,1
  10122c:	1000881e 	bne	r2,zero,101450 <HIDKProbe+0x3ac>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
  101230:	e0bffa03 	ldbu	r2,-24(fp)
  101234:	100890fa 	slli	r4,r2,3
  101238:	00c00044 	movi	r3,1
  10123c:	00800074 	movhi	r2,1
  101240:	2085883a 	add	r2,r4,r2
  101244:	10c7b405 	stb	r3,7888(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
  101248:	e0bffa03 	ldbu	r2,-24(fp)
  10124c:	100690fa 	slli	r3,r2,3
  101250:	00800074 	movhi	r2,1
  101254:	1885883a 	add	r2,r3,r2
  101258:	1087b317 	ldw	r2,7884(r2)
  10125c:	1080008b 	ldhu	r2,2(r2)
  101260:	e0bffb85 	stb	r2,-18(fp)
				HID_init();                         //initialize data structures
  101264:	01014880 	call	101488 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
  101268:	e0bffa03 	ldbu	r2,-24(fp)
  10126c:	100890fa 	slli	r4,r2,3
  101270:	00c00074 	movhi	r3,1
  101274:	18c75f04 	addi	r3,r3,7548
  101278:	00800074 	movhi	r2,1
  10127c:	2085883a 	add	r2,r4,r2
  101280:	10c7b315 	stw	r3,7884(r2)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
  101284:	e0bffa03 	ldbu	r2,-24(fp)
  101288:	100690fa 	slli	r3,r2,3
  10128c:	00800074 	movhi	r2,1
  101290:	1885883a 	add	r2,r3,r2
  101294:	1087b317 	ldw	r2,7884(r2)
  101298:	e0fffb83 	ldbu	r3,-18(fp)
  10129c:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
  1012a0:	e0bffe17 	ldw	r2,-8(fp)
  1012a4:	10800083 	ldbu	r2,2(r2)
				hid_device.interface =
  1012a8:	d0a01945 	stb	r2,-32667(gp)
				hid_device.addr = addr;                        //fill in address
  1012ac:	e0bffa03 	ldbu	r2,-24(fp)
  1012b0:	d0a01905 	stb	r2,-32668(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
  1012b4:	e0bffe17 	ldw	r2,-8(fp)
  1012b8:	10800003 	ldbu	r2,0(r2)
  1012bc:	10803fcc 	andi	r2,r2,255
  1012c0:	e0fffd17 	ldw	r3,-12(fp)
  1012c4:	1885883a 	add	r2,r3,r2
  1012c8:	e0bffd15 	stw	r2,-12(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
  1012cc:	e0bffd17 	ldw	r2,-12(fp)
  1012d0:	e0bffe15 	stw	r2,-8(fp)
				while (byte_ptr < bigbuf + total_length) {
  1012d4:	00005706 	br	101434 <HIDKProbe+0x390>
					if (data_ptr->descr.config.bDescriptorType
  1012d8:	e0bffe17 	ldw	r2,-8(fp)
  1012dc:	10800043 	ldbu	r2,1(r2)
  1012e0:	10803fcc 	andi	r2,r2,255
  1012e4:	10800160 	cmpeqi	r2,r2,5
  1012e8:	1000091e 	bne	r2,zero,101310 <HIDKProbe+0x26c>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
  1012ec:	e0bffe17 	ldw	r2,-8(fp)
  1012f0:	10800003 	ldbu	r2,0(r2)
  1012f4:	10803fcc 	andi	r2,r2,255
  1012f8:	e0fffd17 	ldw	r3,-12(fp)
  1012fc:	1885883a 	add	r2,r3,r2
  101300:	e0bffd15 	stw	r2,-12(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
  101304:	e0bffd17 	ldw	r2,-12(fp)
  101308:	e0bffe15 	stw	r2,-8(fp)
  10130c:	00004906 	br	101434 <HIDKProbe+0x390>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
  101310:	e0bffa03 	ldbu	r2,-24(fp)
  101314:	100690fa 	slli	r3,r2,3
  101318:	00800074 	movhi	r2,1
  10131c:	1885883a 	add	r2,r3,r2
  101320:	1087b317 	ldw	r2,7884(r2)
  101324:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
  101328:	e0fffe17 	ldw	r3,-8(fp)
  10132c:	18c00083 	ldbu	r3,2(r3)
						devtable[addr].epinfo[1].epAddr =
  101330:	10c00005 	stb	r3,0(r2)
						devtable[addr].epinfo[1].Attr =
  101334:	e0bffa03 	ldbu	r2,-24(fp)
  101338:	100690fa 	slli	r3,r2,3
  10133c:	00800074 	movhi	r2,1
  101340:	1885883a 	add	r2,r3,r2
  101344:	1087b317 	ldw	r2,7884(r2)
  101348:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
  10134c:	e0fffe17 	ldw	r3,-8(fp)
  101350:	18c000c3 	ldbu	r3,3(r3)
						devtable[addr].epinfo[1].Attr =
  101354:	10c00045 	stb	r3,1(r2)
						devtable[addr].epinfo[1].MaxPktSize =
  101358:	e0bffa03 	ldbu	r2,-24(fp)
  10135c:	100690fa 	slli	r3,r2,3
  101360:	00800074 	movhi	r2,1
  101364:	1885883a 	add	r2,r3,r2
  101368:	1087b317 	ldw	r2,7884(r2)
  10136c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
  101370:	e0fffe17 	ldw	r3,-8(fp)
  101374:	18c0010b 	ldhu	r3,4(r3)
						devtable[addr].epinfo[1].MaxPktSize =
  101378:	10c0008d 	sth	r3,2(r2)
						devtable[addr].epinfo[1].Interval =
  10137c:	e0bffa03 	ldbu	r2,-24(fp)
  101380:	100690fa 	slli	r3,r2,3
  101384:	00800074 	movhi	r2,1
  101388:	1885883a 	add	r2,r3,r2
  10138c:	1087b317 	ldw	r2,7884(r2)
  101390:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
  101394:	e0fffe17 	ldw	r3,-8(fp)
  101398:	18c00183 	ldbu	r3,6(r3)
						devtable[addr].epinfo[1].Interval =
  10139c:	10c00105 	stb	r3,4(r2)
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
  1013a0:	e0fffa03 	ldbu	r3,-24(fp)
  1013a4:	e0bffc83 	ldbu	r2,-14(fp)
  1013a8:	d8000415 	stw	zero,16(sp)
  1013ac:	d8000315 	stw	zero,12(sp)
  1013b0:	d8000215 	stw	zero,8(sp)
  1013b4:	d8000115 	stw	zero,4(sp)
  1013b8:	d8800015 	stw	r2,0(sp)
  1013bc:	01c00244 	movi	r7,9
  1013c0:	000d883a 	mov	r6,zero
  1013c4:	000b883a 	mov	r5,zero
  1013c8:	1809883a 	mov	r4,r3
  1013cc:	0101e140 	call	101e14 <XferCtrlReq>
  1013d0:	e0bffcc5 	stb	r2,-13(fp)
						if (rcode) {   //error handling
  1013d4:	e0bffcc3 	ldbu	r2,-13(fp)
  1013d8:	10000226 	beq	r2,zero,1013e4 <HIDKProbe+0x340>
							return (FALSE);
  1013dc:	0005883a 	mov	r2,zero
  1013e0:	00002406 	br	101474 <HIDKProbe+0x3d0>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
  1013e4:	e0fffa03 	ldbu	r3,-24(fp)
  1013e8:	d0a01943 	ldbu	r2,-32667(gp)
  1013ec:	10803fcc 	andi	r2,r2,255
  1013f0:	d8000415 	stw	zero,16(sp)
  1013f4:	d8000315 	stw	zero,12(sp)
  1013f8:	d8800215 	stw	r2,8(sp)
  1013fc:	d8000115 	stw	zero,4(sp)
  101400:	d8000015 	stw	zero,0(sp)
  101404:	01c002c4 	movi	r7,11
  101408:	01800844 	movi	r6,33
  10140c:	000b883a 	mov	r5,zero
  101410:	1809883a 	mov	r4,r3
  101414:	0101e140 	call	101e14 <XferCtrlReq>
  101418:	e0bffcc5 	stb	r2,-13(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
  10141c:	e0bffcc3 	ldbu	r2,-13(fp)
  101420:	10000226 	beq	r2,zero,10142c <HIDKProbe+0x388>
							return (FALSE);
  101424:	0005883a 	mov	r2,zero
  101428:	00001206 	br	101474 <HIDKProbe+0x3d0>
						} else {
							return (TRUE);
  10142c:	00800044 	movi	r2,1
  101430:	00001006 	br	101474 <HIDKProbe+0x3d0>
				while (byte_ptr < bigbuf + total_length) {
  101434:	e0ffff8b 	ldhu	r3,-2(fp)
  101438:	00800074 	movhi	r2,1
  10143c:	10877304 	addi	r2,r2,7628
  101440:	1885883a 	add	r2,r3,r2
  101444:	e0fffd17 	ldw	r3,-12(fp)
  101448:	18bfa336 	bltu	r3,r2,1012d8 <HIDKProbe+0x234>
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
  10144c:	00000206 	br	101458 <HIDKProbe+0x3b4>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
  101450:	0005883a 	mov	r2,zero
  101454:	00000706 	br	101474 <HIDKProbe+0x3d0>
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
  101458:	e0ffff8b 	ldhu	r3,-2(fp)
  10145c:	00800074 	movhi	r2,1
  101460:	10877304 	addi	r2,r2,7628
  101464:	1885883a 	add	r2,r3,r2
  101468:	e0fffd17 	ldw	r3,-12(fp)
  10146c:	18bf5036 	bltu	r3,r2,1011b0 <HIDKProbe+0x10c>
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
  101470:	0005883a 	mov	r2,zero
}
  101474:	e037883a 	mov	sp,fp
  101478:	dfc00117 	ldw	ra,4(sp)
  10147c:	df000017 	ldw	fp,0(sp)
  101480:	dec00204 	addi	sp,sp,8
  101484:	f800283a 	ret

00101488 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
  101488:	deffff04 	addi	sp,sp,-4
  10148c:	df000015 	stw	fp,0(sp)
  101490:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
  101494:	00c01004 	movi	r3,64
  101498:	00800074 	movhi	r2,1
  10149c:	10c76245 	stb	r3,7561(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
  1014a0:	00c00404 	movi	r3,16
  1014a4:	00800074 	movhi	r2,1
  1014a8:	10c76285 	stb	r3,7562(r2)
}
  1014ac:	0001883a 	nop
  1014b0:	e037883a 	mov	sp,fp
  1014b4:	df000017 	ldw	fp,0(sp)
  1014b8:	dec00104 	addi	sp,sp,4
  1014bc:	f800283a 	ret

001014c0 <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
  1014c0:	defffb04 	addi	sp,sp,-20
  1014c4:	dfc00415 	stw	ra,16(sp)
  1014c8:	df000315 	stw	fp,12(sp)
  1014cc:	df000304 	addi	fp,sp,12
  1014d0:	e13ffe15 	stw	r4,-8(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
  1014d4:	d0a01903 	ldbu	r2,-32668(gp)
  1014d8:	10803fcc 	andi	r2,r2,255
  1014dc:	100b883a 	mov	r5,r2
  1014e0:	01003804 	movi	r4,224
  1014e4:	01016a80 	call	1016a8 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
  1014e8:	d0a01903 	ldbu	r2,-32668(gp)
  1014ec:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
  1014f0:	d0a01903 	ldbu	r2,-32668(gp)
  1014f4:	10803fcc 	andi	r2,r2,255
  1014f8:	100690fa 	slli	r3,r2,3
  1014fc:	00800074 	movhi	r2,1
  101500:	1885883a 	add	r2,r3,r2
  101504:	1087b317 	ldw	r2,7884(r2)
  101508:	10800204 	addi	r2,r2,8
  10150c:	1080008b 	ldhu	r2,2(r2)
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
  101510:	10803fcc 	andi	r2,r2,255
  101514:	d8800015 	stw	r2,0(sp)
  101518:	e1fffe17 	ldw	r7,-8(fp)
  10151c:	01800204 	movi	r6,8
  101520:	01400044 	movi	r5,1
  101524:	01022540 	call	102254 <XferInTransfer>
  101528:	e0bfffc5 	stb	r2,-1(fp)
	return (rcode);
  10152c:	e0bfffc3 	ldbu	r2,-1(fp)
}
  101530:	e037883a 	mov	sp,fp
  101534:	dfc00117 	ldw	ra,4(sp)
  101538:	df000017 	ldw	fp,0(sp)
  10153c:	dec00204 	addi	sp,sp,8
  101540:	f800283a 	ret

00101544 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
  101544:	defffb04 	addi	sp,sp,-20
  101548:	dfc00415 	stw	ra,16(sp)
  10154c:	df000315 	stw	fp,12(sp)
  101550:	df000304 	addi	fp,sp,12
  101554:	e13ffe15 	stw	r4,-8(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
  101558:	d0a01903 	ldbu	r2,-32668(gp)
  10155c:	10803fcc 	andi	r2,r2,255
  101560:	100b883a 	mov	r5,r2
  101564:	01003804 	movi	r4,224
  101568:	01016a80 	call	1016a8 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
  10156c:	d0a01903 	ldbu	r2,-32668(gp)
  101570:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
  101574:	d0a01903 	ldbu	r2,-32668(gp)
  101578:	10803fcc 	andi	r2,r2,255
  10157c:	100690fa 	slli	r3,r2,3
  101580:	00800074 	movhi	r2,1
  101584:	1885883a 	add	r2,r3,r2
  101588:	1087b317 	ldw	r2,7884(r2)
  10158c:	10800204 	addi	r2,r2,8
  101590:	1080008b 	ldhu	r2,2(r2)
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
  101594:	10803fcc 	andi	r2,r2,255
  101598:	d8800015 	stw	r2,0(sp)
  10159c:	e1fffe17 	ldw	r7,-8(fp)
  1015a0:	01800204 	movi	r6,8
  1015a4:	01400044 	movi	r5,1
  1015a8:	01022540 	call	102254 <XferInTransfer>
  1015ac:	e0bfffc5 	stb	r2,-1(fp)
	return (rcode);
  1015b0:	e0bfffc3 	ldbu	r2,-1(fp)
}
  1015b4:	e037883a 	mov	sp,fp
  1015b8:	dfc00117 	ldw	ra,4(sp)
  1015bc:	df000017 	ldw	fp,0(sp)
  1015c0:	dec00204 	addi	sp,sp,8
  1015c4:	f800283a 	ret

001015c8 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
  1015c8:	defffb04 	addi	sp,sp,-20
  1015cc:	df000415 	stw	fp,16(sp)
  1015d0:	df000404 	addi	fp,sp,16
  1015d4:	2005883a 	mov	r2,r4
  1015d8:	2807883a 	mov	r3,r5
  1015dc:	e1bffd15 	stw	r6,-12(fp)
  1015e0:	e1fffc15 	stw	r7,-16(fp)
  1015e4:	e0bfff05 	stb	r2,-4(fp)
  1015e8:	1805883a 	mov	r2,r3
  1015ec:	e0bffe05 	stb	r2,-8(fp)
	return (FALSE);
  1015f0:	0005883a 	mov	r2,zero
}
  1015f4:	e037883a 	mov	sp,fp
  1015f8:	df000017 	ldw	fp,0(sp)
  1015fc:	dec00104 	addi	sp,sp,4
  101600:	f800283a 	ret

00101604 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
  101604:	defffb04 	addi	sp,sp,-20
  101608:	df000415 	stw	fp,16(sp)
  10160c:	df000404 	addi	fp,sp,16
  101610:	2005883a 	mov	r2,r4
  101614:	2807883a 	mov	r3,r5
  101618:	e1bffd15 	stw	r6,-12(fp)
  10161c:	e1fffc15 	stw	r7,-16(fp)
  101620:	e0bfff05 	stb	r2,-4(fp)
  101624:	1805883a 	mov	r2,r3
  101628:	e0bffe05 	stb	r2,-8(fp)
	return (FALSE);
  10162c:	0005883a 	mov	r2,zero
}
  101630:	e037883a 	mov	sp,fp
  101634:	df000017 	ldw	fp,0(sp)
  101638:	dec00104 	addi	sp,sp,4
  10163c:	f800283a 	ret

00101640 <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
  101640:	defffc04 	addi	sp,sp,-16
  101644:	df000315 	stw	fp,12(sp)
  101648:	df000304 	addi	fp,sp,12
  10164c:	2005883a 	mov	r2,r4
  101650:	2809883a 	mov	r4,r5
  101654:	3007883a 	mov	r3,r6
  101658:	e0bfff05 	stb	r2,-4(fp)
  10165c:	2005883a 	mov	r2,r4
  101660:	e0bffe05 	stb	r2,-8(fp)
  101664:	1805883a 	mov	r2,r3
  101668:	e0bffd05 	stb	r2,-12(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
  10166c:	0001883a 	nop
  101670:	e037883a 	mov	sp,fp
  101674:	df000017 	ldw	fp,0(sp)
  101678:	dec00104 	addi	sp,sp,4
  10167c:	f800283a 	ret

00101680 <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
  101680:	defffe04 	addi	sp,sp,-8
  101684:	df000115 	stw	fp,4(sp)
  101688:	df000104 	addi	fp,sp,4
  10168c:	2005883a 	mov	r2,r4
  101690:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
  101694:	0001883a 	nop
  101698:	e037883a 	mov	sp,fp
  10169c:	df000017 	ldw	fp,0(sp)
  1016a0:	dec00104 	addi	sp,sp,4
  1016a4:	f800283a 	ret

001016a8 <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
  1016a8:	defff804 	addi	sp,sp,-32
  1016ac:	dfc00715 	stw	ra,28(sp)
  1016b0:	df000615 	stw	fp,24(sp)
  1016b4:	df000604 	addi	fp,sp,24
  1016b8:	2005883a 	mov	r2,r4
  1016bc:	2807883a 	mov	r3,r5
  1016c0:	e0bffe05 	stb	r2,-8(fp)
  1016c4:	1805883a 	mov	r2,r3
  1016c8:	e0bffd05 	stb	r2,-12(fp)
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	int rcode;
	reg = reg + 2;
  1016cc:	e0bffe03 	ldbu	r2,-8(fp)
  1016d0:	10800084 	addi	r2,r2,2
  1016d4:	e0bffe05 	stb	r2,-8(fp)
	rcode = alt_avalon_spi_command(SPI_MASTER_BASE, 0, 1, &reg, 0, NULL, ALT_AVALON_SPI_COMMAND_MERGE);
  1016d8:	d0a00317 	ldw	r2,-32756(gp)
  1016dc:	1009883a 	mov	r4,r2
  1016e0:	e0fffe04 	addi	r3,fp,-8
  1016e4:	00800044 	movi	r2,1
  1016e8:	d8800215 	stw	r2,8(sp)
  1016ec:	d8000115 	stw	zero,4(sp)
  1016f0:	d8000015 	stw	zero,0(sp)
  1016f4:	180f883a 	mov	r7,r3
  1016f8:	01800044 	movi	r6,1
  1016fc:	000b883a 	mov	r5,zero
  101700:	0110ec80 	call	110ec8 <alt_avalon_spi_command>
  101704:	e0bfff15 	stw	r2,-4(fp)
	if (rcode < 0)
  101708:	e0bfff17 	ldw	r2,-4(fp)
  10170c:	1000030e 	bge	r2,zero,10171c <MAXreg_wr+0x74>
		{
			printf("Error Writing Single Val");
  101710:	01000474 	movhi	r4,17
  101714:	210c7904 	addi	r4,r4,12772
  101718:	0102fb80 	call	102fb8 <printf>
		}
	rcode = alt_avalon_spi_command(SPI_MASTER_BASE, 0, 1, &val, 0, NULL, 0);
  10171c:	d0a00317 	ldw	r2,-32756(gp)
  101720:	1007883a 	mov	r3,r2
  101724:	e0bffd04 	addi	r2,fp,-12
  101728:	d8000215 	stw	zero,8(sp)
  10172c:	d8000115 	stw	zero,4(sp)
  101730:	d8000015 	stw	zero,0(sp)
  101734:	100f883a 	mov	r7,r2
  101738:	01800044 	movi	r6,1
  10173c:	000b883a 	mov	r5,zero
  101740:	1809883a 	mov	r4,r3
  101744:	0110ec80 	call	110ec8 <alt_avalon_spi_command>
  101748:	e0bfff15 	stw	r2,-4(fp)
	if (rcode < 0)
  10174c:	e0bfff17 	ldw	r2,-4(fp)
  101750:	1000030e 	bge	r2,zero,101760 <MAXreg_wr+0xb8>
	{
		printf("Error Writing Single Val");
  101754:	01000474 	movhi	r4,17
  101758:	210c7904 	addi	r4,r4,12772
  10175c:	0102fb80 	call	102fb8 <printf>
	}
}
  101760:	0001883a 	nop
  101764:	e037883a 	mov	sp,fp
  101768:	dfc00117 	ldw	ra,4(sp)
  10176c:	df000017 	ldw	fp,0(sp)
  101770:	dec00204 	addi	sp,sp,8
  101774:	f800283a 	ret

00101778 <MAXbytes_wr>:

//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
  101778:	defff704 	addi	sp,sp,-36
  10177c:	dfc00815 	stw	ra,32(sp)
  101780:	df000715 	stw	fp,28(sp)
  101784:	df000704 	addi	fp,sp,28
  101788:	2005883a 	mov	r2,r4
  10178c:	2807883a 	mov	r3,r5
  101790:	e1bffc15 	stw	r6,-16(fp)
  101794:	e0bffe05 	stb	r2,-8(fp)
  101798:	1805883a 	mov	r2,r3
  10179c:	e0bffd05 	stb	r2,-12(fp)
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	int rcode;
	reg = reg + 2;
  1017a0:	e0bffe03 	ldbu	r2,-8(fp)
  1017a4:	10800084 	addi	r2,r2,2
  1017a8:	e0bffe05 	stb	r2,-8(fp)
	rcode = alt_avalon_spi_command(SPI_MASTER_BASE, 0, 1, &reg, 0, NULL, ALT_AVALON_SPI_COMMAND_MERGE);
  1017ac:	d0a00317 	ldw	r2,-32756(gp)
  1017b0:	1009883a 	mov	r4,r2
  1017b4:	e0fffe04 	addi	r3,fp,-8
  1017b8:	00800044 	movi	r2,1
  1017bc:	d8800215 	stw	r2,8(sp)
  1017c0:	d8000115 	stw	zero,4(sp)
  1017c4:	d8000015 	stw	zero,0(sp)
  1017c8:	180f883a 	mov	r7,r3
  1017cc:	01800044 	movi	r6,1
  1017d0:	000b883a 	mov	r5,zero
  1017d4:	0110ec80 	call	110ec8 <alt_avalon_spi_command>
  1017d8:	e0bfff15 	stw	r2,-4(fp)
	if (rcode < 0)
  1017dc:	e0bfff17 	ldw	r2,-4(fp)
  1017e0:	1000030e 	bge	r2,zero,1017f0 <MAXbytes_wr+0x78>
		{
			printf("Error Writing Multiple Data");
  1017e4:	01000474 	movhi	r4,17
  1017e8:	210c8004 	addi	r4,r4,12800
  1017ec:	0102fb80 	call	102fb8 <printf>
		}
	rcode = alt_avalon_spi_command(SPI_MASTER_BASE, 0, nbytes, data, 0, NULL, 0);
  1017f0:	d0a00317 	ldw	r2,-32756(gp)
  1017f4:	1007883a 	mov	r3,r2
  1017f8:	e0bffd03 	ldbu	r2,-12(fp)
  1017fc:	d8000215 	stw	zero,8(sp)
  101800:	d8000115 	stw	zero,4(sp)
  101804:	d8000015 	stw	zero,0(sp)
  101808:	e1fffc17 	ldw	r7,-16(fp)
  10180c:	100d883a 	mov	r6,r2
  101810:	000b883a 	mov	r5,zero
  101814:	1809883a 	mov	r4,r3
  101818:	0110ec80 	call	110ec8 <alt_avalon_spi_command>
  10181c:	e0bfff15 	stw	r2,-4(fp)
	if (rcode < 0)
  101820:	e0bfff17 	ldw	r2,-4(fp)
  101824:	1000030e 	bge	r2,zero,101834 <MAXbytes_wr+0xbc>
	{
		printf("Error Writing Multiple Data");
  101828:	01000474 	movhi	r4,17
  10182c:	210c8004 	addi	r4,r4,12800
  101830:	0102fb80 	call	102fb8 <printf>
	}
	return (data + nbytes);
  101834:	e0bffd03 	ldbu	r2,-12(fp)
  101838:	e0fffc17 	ldw	r3,-16(fp)
  10183c:	1885883a 	add	r2,r3,r2
}
  101840:	e037883a 	mov	sp,fp
  101844:	dfc00117 	ldw	ra,4(sp)
  101848:	df000017 	ldw	fp,0(sp)
  10184c:	dec00204 	addi	sp,sp,8
  101850:	f800283a 	ret

00101854 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
  101854:	defff804 	addi	sp,sp,-32
  101858:	dfc00715 	stw	ra,28(sp)
  10185c:	df000615 	stw	fp,24(sp)
  101860:	df000604 	addi	fp,sp,24
  101864:	2005883a 	mov	r2,r4
  101868:	e0bffd05 	stb	r2,-12(fp)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val
	int rcode;
	BYTE val;
	rcode = alt_avalon_spi_command(SPI_MASTER_BASE, 0, 1, &reg, 0, NULL, ALT_AVALON_SPI_COMMAND_MERGE);
  10186c:	d0a00317 	ldw	r2,-32756(gp)
  101870:	1009883a 	mov	r4,r2
  101874:	e0fffd04 	addi	r3,fp,-12
  101878:	00800044 	movi	r2,1
  10187c:	d8800215 	stw	r2,8(sp)
  101880:	d8000115 	stw	zero,4(sp)
  101884:	d8000015 	stw	zero,0(sp)
  101888:	180f883a 	mov	r7,r3
  10188c:	01800044 	movi	r6,1
  101890:	000b883a 	mov	r5,zero
  101894:	0110ec80 	call	110ec8 <alt_avalon_spi_command>
  101898:	e0bfff15 	stw	r2,-4(fp)
	if (rcode < 0)
  10189c:	e0bfff17 	ldw	r2,-4(fp)
  1018a0:	1000030e 	bge	r2,zero,1018b0 <MAXreg_rd+0x5c>
			{
				printf("Error Reading Data Val");
  1018a4:	01000474 	movhi	r4,17
  1018a8:	210c8704 	addi	r4,r4,12828
  1018ac:	0102fb80 	call	102fb8 <printf>
			}
	rcode = alt_avalon_spi_command(SPI_MASTER_BASE, 0, 0, NULL, 1, &val, 0);
  1018b0:	d0a00317 	ldw	r2,-32756(gp)
  1018b4:	1007883a 	mov	r3,r2
  1018b8:	d8000215 	stw	zero,8(sp)
  1018bc:	e0bffec4 	addi	r2,fp,-5
  1018c0:	d8800115 	stw	r2,4(sp)
  1018c4:	00800044 	movi	r2,1
  1018c8:	d8800015 	stw	r2,0(sp)
  1018cc:	000f883a 	mov	r7,zero
  1018d0:	000d883a 	mov	r6,zero
  1018d4:	000b883a 	mov	r5,zero
  1018d8:	1809883a 	mov	r4,r3
  1018dc:	0110ec80 	call	110ec8 <alt_avalon_spi_command>
  1018e0:	e0bfff15 	stw	r2,-4(fp)
	if (rcode < 0)
  1018e4:	e0bfff17 	ldw	r2,-4(fp)
  1018e8:	1000030e 	bge	r2,zero,1018f8 <MAXreg_rd+0xa4>
		{
			printf("Error Reading Data Val");
  1018ec:	01000474 	movhi	r4,17
  1018f0:	210c8704 	addi	r4,r4,12828
  1018f4:	0102fb80 	call	102fb8 <printf>
		}
	return val;
  1018f8:	e0bffec3 	ldbu	r2,-5(fp)
}
  1018fc:	e037883a 	mov	sp,fp
  101900:	dfc00117 	ldw	ra,4(sp)
  101904:	df000017 	ldw	fp,0(sp)
  101908:	dec00204 	addi	sp,sp,8
  10190c:	f800283a 	ret

00101910 <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
  101910:	defff704 	addi	sp,sp,-36
  101914:	dfc00815 	stw	ra,32(sp)
  101918:	df000715 	stw	fp,28(sp)
  10191c:	df000704 	addi	fp,sp,28
  101920:	2005883a 	mov	r2,r4
  101924:	2807883a 	mov	r3,r5
  101928:	e1bffc15 	stw	r6,-16(fp)
  10192c:	e0bffe05 	stb	r2,-8(fp)
  101930:	1805883a 	mov	r2,r3
  101934:	e0bffd05 	stb	r2,-12(fp)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	//dereference reg and data
	int rcode;
	rcode = alt_avalon_spi_command(SPI_MASTER_BASE, 0, 1, &reg, 0, NULL, ALT_AVALON_SPI_COMMAND_MERGE);
  101938:	d0a00317 	ldw	r2,-32756(gp)
  10193c:	1009883a 	mov	r4,r2
  101940:	e0fffe04 	addi	r3,fp,-8
  101944:	00800044 	movi	r2,1
  101948:	d8800215 	stw	r2,8(sp)
  10194c:	d8000115 	stw	zero,4(sp)
  101950:	d8000015 	stw	zero,0(sp)
  101954:	180f883a 	mov	r7,r3
  101958:	01800044 	movi	r6,1
  10195c:	000b883a 	mov	r5,zero
  101960:	0110ec80 	call	110ec8 <alt_avalon_spi_command>
  101964:	e0bfff15 	stw	r2,-4(fp)
	if (rcode < 0)
  101968:	e0bfff17 	ldw	r2,-4(fp)
  10196c:	1000030e 	bge	r2,zero,10197c <MAXbytes_rd+0x6c>
		{
			printf("Error Reading Multiple Data");
  101970:	01000474 	movhi	r4,17
  101974:	210c8d04 	addi	r4,r4,12852
  101978:	0102fb80 	call	102fb8 <printf>
		}
	rcode = alt_avalon_spi_command(SPI_MASTER_BASE, 0, 0, NULL, nbytes, data, 0);
  10197c:	d0a00317 	ldw	r2,-32756(gp)
  101980:	1009883a 	mov	r4,r2
  101984:	e0bffd03 	ldbu	r2,-12(fp)
  101988:	d8000215 	stw	zero,8(sp)
  10198c:	e0fffc17 	ldw	r3,-16(fp)
  101990:	d8c00115 	stw	r3,4(sp)
  101994:	d8800015 	stw	r2,0(sp)
  101998:	000f883a 	mov	r7,zero
  10199c:	000d883a 	mov	r6,zero
  1019a0:	000b883a 	mov	r5,zero
  1019a4:	0110ec80 	call	110ec8 <alt_avalon_spi_command>
  1019a8:	e0bfff15 	stw	r2,-4(fp)
	if (rcode < 0)
  1019ac:	e0bfff17 	ldw	r2,-4(fp)
  1019b0:	1000030e 	bge	r2,zero,1019c0 <MAXbytes_rd+0xb0>
	{
		printf("Error Reading Multiple Data");
  1019b4:	01000474 	movhi	r4,17
  1019b8:	210c8d04 	addi	r4,r4,12852
  1019bc:	0102fb80 	call	102fb8 <printf>
	}
	return (data + nbytes);
  1019c0:	e0bffd03 	ldbu	r2,-12(fp)
  1019c4:	e0fffc17 	ldw	r3,-16(fp)
  1019c8:	1885883a 	add	r2,r3,r2
}
  1019cc:	e037883a 	mov	sp,fp
  1019d0:	dfc00117 	ldw	ra,4(sp)
  1019d4:	df000017 	ldw	fp,0(sp)
  1019d8:	dec00204 	addi	sp,sp,8
  1019dc:	f800283a 	ret

001019e0 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
  1019e0:	defffd04 	addi	sp,sp,-12
  1019e4:	dfc00215 	stw	ra,8(sp)
  1019e8:	df000115 	stw	fp,4(sp)
  1019ec:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
  1019f0:	0005883a 	mov	r2,zero
  1019f4:	00807435 	stwio	r2,464(zero)
	usleep(1000000);
  1019f8:	010003f4 	movhi	r4,15
  1019fc:	21109004 	addi	r4,r4,16960
  101a00:	01102180 	call	110218 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
  101a04:	00800044 	movi	r2,1
  101a08:	00807435 	stwio	r2,464(zero)
	BYTE tmp = 0;
  101a0c:	e03fffc5 	stb	zero,-1(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
  101a10:	01400804 	movi	r5,32
  101a14:	01001e04 	movi	r4,120
  101a18:	01016a80 	call	1016a8 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
  101a1c:	000b883a 	mov	r5,zero
  101a20:	01001e04 	movi	r4,120
  101a24:	01016a80 	call	1016a8 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
  101a28:	00000806 	br	101a4c <MAX3421E_reset+0x6c>
		tmp++;                                      //timeout after 256 attempts
  101a2c:	e0bfffc3 	ldbu	r2,-1(fp)
  101a30:	10800044 	addi	r2,r2,1
  101a34:	e0bfffc5 	stb	r2,-1(fp)
		if (tmp == 0) {
  101a38:	e0bfffc3 	ldbu	r2,-1(fp)
  101a3c:	1000031e 	bne	r2,zero,101a4c <MAX3421E_reset+0x6c>
			printf("reset timeout!");
  101a40:	01000474 	movhi	r4,17
  101a44:	210c9404 	addi	r4,r4,12880
  101a48:	0102fb80 	call	102fb8 <printf>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
  101a4c:	01001a04 	movi	r4,104
  101a50:	01018540 	call	101854 <MAXreg_rd>
  101a54:	10803fcc 	andi	r2,r2,255
  101a58:	1080004c 	andi	r2,r2,1
  101a5c:	103ff326 	beq	r2,zero,101a2c <MAX3421E_reset+0x4c>
		}
	}
}
  101a60:	0001883a 	nop
  101a64:	e037883a 	mov	sp,fp
  101a68:	dfc00117 	ldw	ra,4(sp)
  101a6c:	df000017 	ldw	fp,0(sp)
  101a70:	dec00204 	addi	sp,sp,8
  101a74:	f800283a 	ret

00101a78 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
  101a78:	defffe04 	addi	sp,sp,-8
  101a7c:	df000115 	stw	fp,4(sp)
  101a80:	df000104 	addi	fp,sp,4
  101a84:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
  101a88:	00800044 	movi	r2,1
}
  101a8c:	e037883a 	mov	sp,fp
  101a90:	df000017 	ldw	fp,0(sp)
  101a94:	dec00104 	addi	sp,sp,4
  101a98:	f800283a 	ret

00101a9c <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
  101a9c:	defffd04 	addi	sp,sp,-12
  101aa0:	dfc00215 	stw	ra,8(sp)
  101aa4:	df000115 	stw	fp,4(sp)
  101aa8:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
  101aac:	01003e04 	movi	r4,248
  101ab0:	01018540 	call	101854 <MAXreg_rd>
  101ab4:	e0bfffc5 	stb	r2,-1(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
  101ab8:	e0ffffc3 	ldbu	r3,-1(fp)
  101abc:	00bff004 	movi	r2,-64
  101ac0:	1884703a 	and	r2,r3,r2
  101ac4:	e0bfffc5 	stb	r2,-1(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
  101ac8:	e0bfffc3 	ldbu	r2,-1(fp)
  101acc:	10c01020 	cmpeqi	r3,r2,64
  101ad0:	1800221e 	bne	r3,zero,101b5c <MAX_busprobe+0xc0>
  101ad4:	10c01048 	cmpgei	r3,r2,65
  101ad8:	1800021e 	bne	r3,zero,101ae4 <MAX_busprobe+0x48>
  101adc:	10003b26 	beq	r2,zero,101bcc <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
  101ae0:	00004a06 	br	101c0c <MAX_busprobe+0x170>
	switch (bus_sample) {                   //start full-speed or low-speed host
  101ae4:	10c02020 	cmpeqi	r3,r2,128
  101ae8:	1800031e 	bne	r3,zero,101af8 <MAX_busprobe+0x5c>
  101aec:	10803020 	cmpeqi	r2,r2,192
  101af0:	1000331e 	bne	r2,zero,101bc0 <MAX_busprobe+0x124>
}
  101af4:	00004506 	br	101c0c <MAX_busprobe+0x170>
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
  101af8:	d0a00603 	ldbu	r2,-32744(gp)
  101afc:	10803fcc 	andi	r2,r2,255
  101b00:	108004e0 	cmpeqi	r2,r2,19
  101b04:	10003e1e 	bne	r2,zero,101c00 <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
  101b08:	01003604 	movi	r4,216
  101b0c:	01018540 	call	101854 <MAXreg_rd>
  101b10:	10803fcc 	andi	r2,r2,255
  101b14:	1080008c 	andi	r2,r2,2
  101b18:	1000071e 	bne	r2,zero,101b38 <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
  101b1c:	01403244 	movi	r5,201
  101b20:	01003604 	movi	r4,216
  101b24:	01016a80 	call	1016a8 <MAXreg_wr>
				printf("Starting in full speed\n");
  101b28:	01000474 	movhi	r4,17
  101b2c:	210c9804 	addi	r4,r4,12896
  101b30:	01030dc0 	call	1030dc <puts>
  101b34:	00000606 	br	101b50 <MAX_busprobe+0xb4>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
  101b38:	014032c4 	movi	r5,203
  101b3c:	01003604 	movi	r4,216
  101b40:	01016a80 	call	1016a8 <MAXreg_wr>
				printf("Starting in low speed\n");
  101b44:	01000474 	movhi	r4,17
  101b48:	210c9e04 	addi	r4,r4,12920
  101b4c:	01030dc0 	call	1030dc <puts>
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
  101b50:	00800404 	movi	r2,16
  101b54:	d0a00605 	stb	r2,-32744(gp)
		break;
  101b58:	00002906 	br	101c00 <MAX_busprobe+0x164>
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
  101b5c:	d0a00603 	ldbu	r2,-32744(gp)
  101b60:	10803fcc 	andi	r2,r2,255
  101b64:	108004e0 	cmpeqi	r2,r2,19
  101b68:	1000271e 	bne	r2,zero,101c08 <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
  101b6c:	01003604 	movi	r4,216
  101b70:	01018540 	call	101854 <MAXreg_rd>
  101b74:	10803fcc 	andi	r2,r2,255
  101b78:	1080008c 	andi	r2,r2,2
  101b7c:	1000071e 	bne	r2,zero,101b9c <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
  101b80:	014032c4 	movi	r5,203
  101b84:	01003604 	movi	r4,216
  101b88:	01016a80 	call	1016a8 <MAXreg_wr>
				printf("Starting in low speed\n");
  101b8c:	01000474 	movhi	r4,17
  101b90:	210c9e04 	addi	r4,r4,12920
  101b94:	01030dc0 	call	1030dc <puts>
  101b98:	00000606 	br	101bb4 <MAX_busprobe+0x118>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
  101b9c:	01403244 	movi	r5,201
  101ba0:	01003604 	movi	r4,216
  101ba4:	01016a80 	call	1016a8 <MAXreg_wr>
				printf("Starting in full speed\n");
  101ba8:	01000474 	movhi	r4,17
  101bac:	210c9804 	addi	r4,r4,12896
  101bb0:	01030dc0 	call	1030dc <puts>
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
  101bb4:	00800404 	movi	r2,16
  101bb8:	d0a00605 	stb	r2,-32744(gp)
		break;
  101bbc:	00001206 	br	101c08 <MAX_busprobe+0x16c>
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
  101bc0:	00800104 	movi	r2,4
  101bc4:	d0a00605 	stb	r2,-32744(gp)
		break;
  101bc8:	00001006 	br	101c0c <MAX_busprobe+0x170>
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
  101bcc:	d0a00603 	ldbu	r2,-32744(gp)
  101bd0:	10803fcc 	andi	r2,r2,255
  101bd4:	10803c0c 	andi	r2,r2,240
  101bd8:	10000326 	beq	r2,zero,101be8 <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
  101bdc:	00800044 	movi	r2,1
  101be0:	d0a00605 	stb	r2,-32744(gp)
		break;
  101be4:	00000906 	br	101c0c <MAX_busprobe+0x170>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
  101be8:	01403244 	movi	r5,201
  101bec:	01003604 	movi	r4,216
  101bf0:	01016a80 	call	1016a8 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
  101bf4:	008000c4 	movi	r2,3
  101bf8:	d0a00605 	stb	r2,-32744(gp)
		break;
  101bfc:	00000306 	br	101c0c <MAX_busprobe+0x170>
		break;
  101c00:	0001883a 	nop
  101c04:	00000106 	br	101c0c <MAX_busprobe+0x170>
		break;
  101c08:	0001883a 	nop
}
  101c0c:	0001883a 	nop
  101c10:	e037883a 	mov	sp,fp
  101c14:	dfc00117 	ldw	ra,4(sp)
  101c18:	df000017 	ldw	fp,0(sp)
  101c1c:	dec00204 	addi	sp,sp,8
  101c20:	f800283a 	ret

00101c24 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
  101c24:	defffe04 	addi	sp,sp,-8
  101c28:	dfc00115 	stw	ra,4(sp)
  101c2c:	df000015 	stw	fp,0(sp)
  101c30:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
  101c34:	01400684 	movi	r5,26
  101c38:	01002204 	movi	r4,136
  101c3c:	01016a80 	call	1016a8 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
  101c40:	01019e00 	call	1019e0 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
  101c44:	0009883a 	mov	r4,zero
  101c48:	0101a780 	call	101a78 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
  101c4c:	01402004 	movi	r5,128
  101c50:	01002e04 	movi	r4,184
  101c54:	01016a80 	call	1016a8 <MAXreg_wr>
	Vbus_power( ON);
  101c58:	01000044 	movi	r4,1
  101c5c:	0101a780 	call	101a78 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
  101c60:	01403444 	movi	r5,209
  101c64:	01003604 	movi	r4,216
  101c68:	01016a80 	call	1016a8 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
  101c6c:	01400804 	movi	r5,32
  101c70:	01003404 	movi	r4,208
  101c74:	01016a80 	call	1016a8 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
  101c78:	01400104 	movi	r5,4
  101c7c:	01003a04 	movi	r4,232
  101c80:	01016a80 	call	1016a8 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
  101c84:	0101a9c0 	call	101a9c <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
  101c88:	01400804 	movi	r5,32
  101c8c:	01003204 	movi	r4,200
  101c90:	01016a80 	call	1016a8 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
  101c94:	01400044 	movi	r5,1
  101c98:	01002004 	movi	r4,128
  101c9c:	01016a80 	call	1016a8 <MAXreg_wr>
}
  101ca0:	0001883a 	nop
  101ca4:	e037883a 	mov	sp,fp
  101ca8:	dfc00117 	ldw	ra,4(sp)
  101cac:	df000017 	ldw	fp,0(sp)
  101cb0:	dec00204 	addi	sp,sp,8
  101cb4:	f800283a 	ret

00101cb8 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
  101cb8:	defffe04 	addi	sp,sp,-8
  101cbc:	dfc00115 	stw	ra,4(sp)
  101cc0:	df000015 	stw	fp,0(sp)
  101cc4:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
  101cc8:	00807c37 	ldwio	r2,496(zero)
  101ccc:	1000041e 	bne	r2,zero,101ce0 <MAX3421E_Task+0x28>
		printf("MAX interrupt\n\r");
  101cd0:	01000474 	movhi	r4,17
  101cd4:	210ca404 	addi	r4,r4,12944
  101cd8:	0102fb80 	call	102fb8 <printf>
		MaxIntHandler();
  101cdc:	0101d140 	call	101d14 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
  101ce0:	00807837 	ldwio	r2,480(zero)
  101ce4:	10800058 	cmpnei	r2,r2,1
  101ce8:	1000041e 	bne	r2,zero,101cfc <MAX3421E_Task+0x44>
		printf("GPX interrupt\n\r");
  101cec:	01000474 	movhi	r4,17
  101cf0:	210ca804 	addi	r4,r4,12960
  101cf4:	0102fb80 	call	102fb8 <printf>
		MaxGpxHandler();
  101cf8:	0101de00 	call	101de0 <MaxGpxHandler>
	}
}
  101cfc:	0001883a 	nop
  101d00:	e037883a 	mov	sp,fp
  101d04:	dfc00117 	ldw	ra,4(sp)
  101d08:	df000017 	ldw	fp,0(sp)
  101d0c:	dec00204 	addi	sp,sp,8
  101d10:	f800283a 	ret

00101d14 <MaxIntHandler>:

void MaxIntHandler(void) {
  101d14:	defffd04 	addi	sp,sp,-12
  101d18:	dfc00215 	stw	ra,8(sp)
  101d1c:	df000115 	stw	fp,4(sp)
  101d20:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
  101d24:	e03fffc5 	stb	zero,-1(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
  101d28:	01003204 	movi	r4,200
  101d2c:	01018540 	call	101854 <MAXreg_rd>
  101d30:	e0bfff85 	stb	r2,-2(fp)
	printf("IRQ: %x\n", HIRQ);
  101d34:	e0bfff83 	ldbu	r2,-2(fp)
  101d38:	100b883a 	mov	r5,r2
  101d3c:	01000474 	movhi	r4,17
  101d40:	210cac04 	addi	r4,r4,12976
  101d44:	0102fb80 	call	102fb8 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
  101d48:	e0bfff83 	ldbu	r2,-2(fp)
  101d4c:	1080100c 	andi	r2,r2,64
  101d50:	10000326 	beq	r2,zero,101d60 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
  101d54:	e0bfffc3 	ldbu	r2,-1(fp)
  101d58:	10801014 	ori	r2,r2,64
  101d5c:	e0bfffc5 	stb	r2,-1(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
  101d60:	e0bfff83 	ldbu	r2,-2(fp)
  101d64:	1080080c 	andi	r2,r2,32
  101d68:	10000426 	beq	r2,zero,101d7c <MaxIntHandler+0x68>
		MAX_busprobe();
  101d6c:	0101a9c0 	call	101a9c <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
  101d70:	e0bfffc3 	ldbu	r2,-1(fp)
  101d74:	10800814 	ori	r2,r2,32
  101d78:	e0bfffc5 	stb	r2,-1(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
  101d7c:	e0bfff83 	ldbu	r2,-2(fp)
  101d80:	1080020c 	andi	r2,r2,8
  101d84:	10000326 	beq	r2,zero,101d94 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
  101d88:	000b883a 	mov	r5,zero
  101d8c:	01000e04 	movi	r4,56
  101d90:	01016a80 	call	1016a8 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
  101d94:	e0bfff83 	ldbu	r2,-2(fp)
  101d98:	1080004c 	andi	r2,r2,1
  101d9c:	10000626 	beq	r2,zero,101db8 <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
  101da0:	d0a00603 	ldbu	r2,-32744(gp)
  101da4:	10800044 	addi	r2,r2,1
  101da8:	d0a00605 	stb	r2,-32744(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
  101dac:	e0bfffc3 	ldbu	r2,-1(fp)
  101db0:	10800054 	ori	r2,r2,1
  101db4:	e0bfffc5 	stb	r2,-1(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
  101db8:	e0bfffc3 	ldbu	r2,-1(fp)
  101dbc:	100b883a 	mov	r5,r2
  101dc0:	01003204 	movi	r4,200
  101dc4:	01016a80 	call	1016a8 <MAXreg_wr>
}
  101dc8:	0001883a 	nop
  101dcc:	e037883a 	mov	sp,fp
  101dd0:	dfc00117 	ldw	ra,4(sp)
  101dd4:	df000017 	ldw	fp,0(sp)
  101dd8:	dec00204 	addi	sp,sp,8
  101ddc:	f800283a 	ret

00101de0 <MaxGpxHandler>:

void MaxGpxHandler(void) {
  101de0:	defffd04 	addi	sp,sp,-12
  101de4:	dfc00215 	stw	ra,8(sp)
  101de8:	df000115 	stw	fp,4(sp)
  101dec:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
  101df0:	01002c04 	movi	r4,176
  101df4:	01018540 	call	101854 <MAXreg_rd>
  101df8:	e0bfffc5 	stb	r2,-1(fp)
}
  101dfc:	0001883a 	nop
  101e00:	e037883a 	mov	sp,fp
  101e04:	dfc00117 	ldw	ra,4(sp)
  101e08:	df000017 	ldw	fp,0(sp)
  101e0c:	dec00204 	addi	sp,sp,8
  101e10:	f800283a 	ret

00101e14 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
  101e14:	defff104 	addi	sp,sp,-60
  101e18:	dfc00e15 	stw	ra,56(sp)
  101e1c:	df000d15 	stw	fp,52(sp)
  101e20:	df000d04 	addi	fp,sp,52
  101e24:	2015883a 	mov	r10,r4
  101e28:	2813883a 	mov	r9,r5
  101e2c:	3011883a 	mov	r8,r6
  101e30:	e1400217 	ldw	r5,8(fp)
  101e34:	e1000317 	ldw	r4,12(fp)
  101e38:	e0c00417 	ldw	r3,16(fp)
  101e3c:	e0800517 	ldw	r2,20(fp)
  101e40:	500d883a 	mov	r6,r10
  101e44:	e1bffb05 	stb	r6,-20(fp)
  101e48:	480d883a 	mov	r6,r9
  101e4c:	e1bffa05 	stb	r6,-24(fp)
  101e50:	400d883a 	mov	r6,r8
  101e54:	e1bff905 	stb	r6,-28(fp)
  101e58:	380d883a 	mov	r6,r7
  101e5c:	e1bff805 	stb	r6,-32(fp)
  101e60:	e17ff705 	stb	r5,-36(fp)
  101e64:	e13ff605 	stb	r4,-40(fp)
  101e68:	e0fff50d 	sth	r3,-44(fp)
  101e6c:	e0bff40d 	sth	r2,-48(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
  101e70:	e03fff15 	stw	zero,-4(fp)
 BYTE datastage = 1; //request data stage present or absent
  101e74:	00800044 	movi	r2,1
  101e78:	e0bffec5 	stb	r2,-5(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
  101e7c:	e0800617 	ldw	r2,24(fp)
  101e80:	1000011e 	bne	r2,zero,101e88 <XferCtrlReq+0x74>
        datastage = 0;
  101e84:	e03ffec5 	stb	zero,-5(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
  101e88:	e0bffb03 	ldbu	r2,-20(fp)
  101e8c:	100b883a 	mov	r5,r2
  101e90:	01003804 	movi	r4,224
  101e94:	01016a80 	call	1016a8 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
  101e98:	e0bff903 	ldbu	r2,-28(fp)
  101e9c:	10803fcc 	andi	r2,r2,255
  101ea0:	1080201c 	xori	r2,r2,128
  101ea4:	10bfe004 	addi	r2,r2,-128
  101ea8:	1000020e 	bge	r2,zero,101eb4 <XferCtrlReq+0xa0>
        direction = TRUE;                   		//determine request direction
  101eac:	00800044 	movi	r2,1
  101eb0:	e0bfff15 	stw	r2,-4(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
  101eb4:	e0bff903 	ldbu	r2,-28(fp)
  101eb8:	e0bffc85 	stb	r2,-14(fp)
    setup_pkt.bRequest = bRequest;
  101ebc:	e0bff803 	ldbu	r2,-32(fp)
  101ec0:	e0bffcc5 	stb	r2,-13(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
  101ec4:	e0bff703 	ldbu	r2,-36(fp)
  101ec8:	e0bffd05 	stb	r2,-12(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
  101ecc:	e0bff603 	ldbu	r2,-40(fp)
  101ed0:	e0bffd45 	stb	r2,-11(fp)
    setup_pkt.wIndex = wInd;
  101ed4:	e0bff50b 	ldhu	r2,-44(fp)
  101ed8:	e0bffd8d 	sth	r2,-10(fp)
    setup_pkt.wLength = nbytes;
  101edc:	e0bff40b 	ldhu	r2,-48(fp)
  101ee0:	e0bffe0d 	sth	r2,-8(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
  101ee4:	e0bffc84 	addi	r2,fp,-14
  101ee8:	100d883a 	mov	r6,r2
  101eec:	01400204 	movi	r5,8
  101ef0:	01000804 	movi	r4,32
  101ef4:	01017780 	call	101778 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
  101ef8:	e0bffa03 	ldbu	r2,-24(fp)
  101efc:	100b883a 	mov	r5,r2
  101f00:	01000404 	movi	r4,16
  101f04:	01020d40 	call	1020d4 <XferDispatchPkt>
  101f08:	e0bffe85 	stb	r2,-6(fp)
    if( rcode ) {                                       //return HRSLT if not zero
  101f0c:	e0bffe83 	ldbu	r2,-6(fp)
  101f10:	10000226 	beq	r2,zero,101f1c <XferCtrlReq+0x108>
        return( rcode );
  101f14:	e0bffe83 	ldbu	r2,-6(fp)
  101f18:	00000e06 	br	101f54 <XferCtrlReq+0x140>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
  101f1c:	e0bffec3 	ldbu	r2,-5(fp)
  101f20:	100690ba 	slli	r3,r2,2
  101f24:	d0a00404 	addi	r2,gp,-32752
  101f28:	1885883a 	add	r2,r3,r2
  101f2c:	10800017 	ldw	r2,0(r2)
  101f30:	e13ffb03 	ldbu	r4,-20(fp)
  101f34:	e17ffa03 	ldbu	r5,-24(fp)
  101f38:	e1bff40b 	ldhu	r6,-48(fp)
  101f3c:	e0ffff17 	ldw	r3,-4(fp)
  101f40:	d8c00015 	stw	r3,0(sp)
  101f44:	e1c00617 	ldw	r7,24(fp)
  101f48:	103ee83a 	callr	r2
  101f4c:	e0bffe85 	stb	r2,-6(fp)
    return( rcode );
  101f50:	e0bffe83 	ldbu	r2,-6(fp)
}
  101f54:	e037883a 	mov	sp,fp
  101f58:	dfc00117 	ldw	ra,4(sp)
  101f5c:	df000017 	ldw	fp,0(sp)
  101f60:	dec00204 	addi	sp,sp,8
  101f64:	f800283a 	ret

00101f68 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
  101f68:	defff804 	addi	sp,sp,-32
  101f6c:	dfc00715 	stw	ra,28(sp)
  101f70:	df000615 	stw	fp,24(sp)
  101f74:	df000604 	addi	fp,sp,24
  101f78:	2005883a 	mov	r2,r4
  101f7c:	2809883a 	mov	r4,r5
  101f80:	3007883a 	mov	r3,r6
  101f84:	e1fffb15 	stw	r7,-20(fp)
  101f88:	e0bffe05 	stb	r2,-8(fp)
  101f8c:	2005883a 	mov	r2,r4
  101f90:	e0bffd05 	stb	r2,-12(fp)
  101f94:	1805883a 	mov	r2,r3
  101f98:	e0bffc0d 	sth	r2,-16(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
  101f9c:	e0800217 	ldw	r2,8(fp)
  101fa0:	10002626 	beq	r2,zero,10203c <XferCtrlData+0xd4>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
  101fa4:	e0bffe03 	ldbu	r2,-8(fp)
  101fa8:	100690fa 	slli	r3,r2,3
  101fac:	00800074 	movhi	r2,1
  101fb0:	1885883a 	add	r2,r3,r2
  101fb4:	10c7b317 	ldw	r3,7884(r2)
  101fb8:	e0bffd03 	ldbu	r2,-12(fp)
  101fbc:	100490fa 	slli	r2,r2,3
  101fc0:	1885883a 	add	r2,r3,r2
  101fc4:	00c00804 	movi	r3,32
  101fc8:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
  101fcc:	e13ffe03 	ldbu	r4,-8(fp)
  101fd0:	e17ffd03 	ldbu	r5,-12(fp)
  101fd4:	e1bffc0b 	ldhu	r6,-16(fp)
  101fd8:	e0bffe03 	ldbu	r2,-8(fp)
  101fdc:	100690fa 	slli	r3,r2,3
  101fe0:	00800074 	movhi	r2,1
  101fe4:	1885883a 	add	r2,r3,r2
  101fe8:	10c7b317 	ldw	r3,7884(r2)
  101fec:	e0bffd03 	ldbu	r2,-12(fp)
  101ff0:	100490fa 	slli	r2,r2,3
  101ff4:	1885883a 	add	r2,r3,r2
  101ff8:	1080008b 	ldhu	r2,2(r2)
  101ffc:	10803fcc 	andi	r2,r2,255
  102000:	d8800015 	stw	r2,0(sp)
  102004:	e1fffb17 	ldw	r7,-20(fp)
  102008:	01022540 	call	102254 <XferInTransfer>
  10200c:	e0bfffc5 	stb	r2,-1(fp)
        if( rcode ) {
  102010:	e0bfffc3 	ldbu	r2,-1(fp)
  102014:	10000226 	beq	r2,zero,102020 <XferCtrlData+0xb8>
        return( rcode );
  102018:	e0bfffc3 	ldbu	r2,-1(fp)
  10201c:	00000806 	br	102040 <XferCtrlData+0xd8>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
  102020:	e0bffd03 	ldbu	r2,-12(fp)
  102024:	100b883a 	mov	r5,r2
  102028:	01002804 	movi	r4,160
  10202c:	01020d40 	call	1020d4 <XferDispatchPkt>
  102030:	e0bfffc5 	stb	r2,-1(fp)
        return( rcode );
  102034:	e0bfffc3 	ldbu	r2,-1(fp)
  102038:	00000106 	br	102040 <XferCtrlData+0xd8>
    }
    else {              //OUT not implemented
        return( 0xff );
  10203c:	00bfffc4 	movi	r2,-1
    }
}
  102040:	e037883a 	mov	sp,fp
  102044:	dfc00117 	ldw	ra,4(sp)
  102048:	df000017 	ldw	fp,0(sp)
  10204c:	dec00204 	addi	sp,sp,8
  102050:	f800283a 	ret

00102054 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
  102054:	defff904 	addi	sp,sp,-28
  102058:	dfc00615 	stw	ra,24(sp)
  10205c:	df000515 	stw	fp,20(sp)
  102060:	df000504 	addi	fp,sp,20
  102064:	2005883a 	mov	r2,r4
  102068:	2809883a 	mov	r4,r5
  10206c:	3007883a 	mov	r3,r6
  102070:	e1fffb15 	stw	r7,-20(fp)
  102074:	e0bffe05 	stb	r2,-8(fp)
  102078:	2005883a 	mov	r2,r4
  10207c:	e0bffd05 	stb	r2,-12(fp)
  102080:	1805883a 	mov	r2,r3
  102084:	e0bffc0d 	sth	r2,-16(fp)
  BYTE rcode;
    if( direction ) { //GET
  102088:	e0800217 	ldw	r2,8(fp)
  10208c:	10000626 	beq	r2,zero,1020a8 <XferCtrlND+0x54>
        rcode = XferDispatchPkt( tokOUTHS, ep );
  102090:	e0bffd03 	ldbu	r2,-12(fp)
  102094:	100b883a 	mov	r5,r2
  102098:	01002804 	movi	r4,160
  10209c:	01020d40 	call	1020d4 <XferDispatchPkt>
  1020a0:	e0bfffc5 	stb	r2,-1(fp)
  1020a4:	00000506 	br	1020bc <XferCtrlND+0x68>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
  1020a8:	e0bffd03 	ldbu	r2,-12(fp)
  1020ac:	100b883a 	mov	r5,r2
  1020b0:	01002004 	movi	r4,128
  1020b4:	01020d40 	call	1020d4 <XferDispatchPkt>
  1020b8:	e0bfffc5 	stb	r2,-1(fp)
    }
    return( rcode );
  1020bc:	e0bfffc3 	ldbu	r2,-1(fp)
}
  1020c0:	e037883a 	mov	sp,fp
  1020c4:	dfc00117 	ldw	ra,4(sp)
  1020c8:	df000017 	ldw	fp,0(sp)
  1020cc:	dec00204 	addi	sp,sp,8
  1020d0:	f800283a 	ret

001020d4 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
  1020d4:	defff904 	addi	sp,sp,-28
  1020d8:	dfc00615 	stw	ra,24(sp)
  1020dc:	df000515 	stw	fp,20(sp)
  1020e0:	df000504 	addi	fp,sp,20
  1020e4:	2005883a 	mov	r2,r4
  1020e8:	2807883a 	mov	r3,r5
  1020ec:	e0bffc05 	stb	r2,-16(fp)
  1020f0:	1805883a 	mov	r2,r3
  1020f4:	e0bffb05 	stb	r2,-20(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  1020f8:	d0a02817 	ldw	r2,-32608(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
  1020fc:	0140fa04 	movi	r5,1000
  102100:	1009883a 	mov	r4,r2
  102104:	0102e600 	call	102e60 <__mulsi3>
  102108:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
  10210c:	d0a02717 	ldw	r2,-32612(gp)
  102110:	100b883a 	mov	r5,r2
  102114:	1809883a 	mov	r4,r3
  102118:	0102da00 	call	102da0 <__udivsi3>
  10211c:	1084e204 	addi	r2,r2,5000
  102120:	e0bffe15 	stw	r2,-8(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
  102124:	e03fff85 	stb	zero,-2(fp)
 BYTE nak_count = 0;
  102128:	e03fff45 	stb	zero,-3(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
  10212c:	e0fffc03 	ldbu	r3,-16(fp)
  102130:	e0bffb03 	ldbu	r2,-20(fp)
  102134:	1884b03a 	or	r2,r3,r2
  102138:	10803fcc 	andi	r2,r2,255
  10213c:	100b883a 	mov	r5,r2
  102140:	01003c04 	movi	r4,240
  102144:	01016a80 	call	1016a8 <MAXreg_wr>
        rcode = 0xff;
  102148:	00bfffc4 	movi	r2,-1
  10214c:	e0bfffc5 	stb	r2,-1(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
  102150:	00000d06 	br	102188 <XferDispatchPkt+0xb4>
            tmpdata = MAXreg_rd( rHIRQ );
  102154:	01003204 	movi	r4,200
  102158:	01018540 	call	101854 <MAXreg_rd>
  10215c:	e0bffdc5 	stb	r2,-9(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
  102160:	e0bffdc3 	ldbu	r2,-9(fp)
  102164:	10803fcc 	andi	r2,r2,255
  102168:	1080201c 	xori	r2,r2,128
  10216c:	10bfe004 	addi	r2,r2,-128
  102170:	1000050e 	bge	r2,zero,102188 <XferDispatchPkt+0xb4>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
  102174:	01402004 	movi	r5,128
  102178:	01003204 	movi	r4,200
  10217c:	01016a80 	call	1016a8 <MAXreg_wr>
                rcode = 0x00;
  102180:	e03fffc5 	stb	zero,-1(fp)
                break;
  102184:	00000c06 	br	1021b8 <XferDispatchPkt+0xe4>
  return _alt_nticks;
  102188:	d0a02817 	ldw	r2,-32608(gp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
  10218c:	0140fa04 	movi	r5,1000
  102190:	1009883a 	mov	r4,r2
  102194:	0102e600 	call	102e60 <__mulsi3>
  102198:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
  10219c:	d0a02717 	ldw	r2,-32612(gp)
  1021a0:	100b883a 	mov	r5,r2
  1021a4:	1809883a 	mov	r4,r3
  1021a8:	0102da00 	call	102da0 <__udivsi3>
  1021ac:	1007883a 	mov	r3,r2
  1021b0:	e0bffe17 	ldw	r2,-8(fp)
  1021b4:	18bfe736 	bltu	r3,r2,102154 <XferDispatchPkt+0x80>
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
  1021b8:	e0bfffc3 	ldbu	r2,-1(fp)
  1021bc:	10000226 	beq	r2,zero,1021c8 <XferDispatchPkt+0xf4>
            return( rcode );
  1021c0:	e0bfffc3 	ldbu	r2,-1(fp)
  1021c4:	00001e06 	br	102240 <XferDispatchPkt+0x16c>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
  1021c8:	01003e04 	movi	r4,248
  1021cc:	01018540 	call	101854 <MAXreg_rd>
  1021d0:	108003cc 	andi	r2,r2,15
  1021d4:	e0bfffc5 	stb	r2,-1(fp)
        if( rcode == hrNAK ) {
  1021d8:	e0bfffc3 	ldbu	r2,-1(fp)
  1021dc:	10800118 	cmpnei	r2,r2,4
  1021e0:	1000071e 	bne	r2,zero,102200 <XferDispatchPkt+0x12c>
            nak_count++;
  1021e4:	e0bfff43 	ldbu	r2,-3(fp)
  1021e8:	10800044 	addi	r2,r2,1
  1021ec:	e0bfff45 	stb	r2,-3(fp)
            if( nak_count == USB_NAK_LIMIT ) {
  1021f0:	e0bfff43 	ldbu	r2,-3(fp)
  1021f4:	10803218 	cmpnei	r2,r2,200
  1021f8:	10000b1e 	bne	r2,zero,102228 <XferDispatchPkt+0x154>
                break;
  1021fc:	00000f06 	br	10223c <XferDispatchPkt+0x168>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
  102200:	e0bfffc3 	ldbu	r2,-1(fp)
  102204:	10800398 	cmpnei	r2,r2,14
  102208:	1000091e 	bne	r2,zero,102230 <XferDispatchPkt+0x15c>
            retry_count++;
  10220c:	e0bfff83 	ldbu	r2,-2(fp)
  102210:	10800044 	addi	r2,r2,1
  102214:	e0bfff85 	stb	r2,-2(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
  102218:	e0bfff87 	ldb	r2,-2(fp)
  10221c:	108000d8 	cmpnei	r2,r2,3
  102220:	10000526 	beq	r2,zero,102238 <XferDispatchPkt+0x164>
                break;
            }
            else {
                continue;
  102224:	00000106 	br	10222c <XferDispatchPkt+0x158>
                continue;
  102228:	0001883a 	nop
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
  10222c:	003fbf06 	br	10212c <XferDispatchPkt+0x58>
            }
        }
        else break;
  102230:	0001883a 	nop
  102234:	00000106 	br	10223c <XferDispatchPkt+0x168>
                break;
  102238:	0001883a 	nop
    }//while( 1 )
    return( rcode );
  10223c:	e0bfffc3 	ldbu	r2,-1(fp)
}
  102240:	e037883a 	mov	sp,fp
  102244:	dfc00117 	ldw	ra,4(sp)
  102248:	df000017 	ldw	fp,0(sp)
  10224c:	dec00204 	addi	sp,sp,8
  102250:	f800283a 	ret

00102254 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
  102254:	defff804 	addi	sp,sp,-32
  102258:	dfc00715 	stw	ra,28(sp)
  10225c:	df000615 	stw	fp,24(sp)
  102260:	df000604 	addi	fp,sp,24
  102264:	2007883a 	mov	r3,r4
  102268:	3009883a 	mov	r4,r6
  10226c:	e1fffb15 	stw	r7,-20(fp)
  102270:	e0800217 	ldw	r2,8(fp)
  102274:	e0fffe05 	stb	r3,-8(fp)
  102278:	2807883a 	mov	r3,r5
  10227c:	e0fffd05 	stb	r3,-12(fp)
  102280:	2007883a 	mov	r3,r4
  102284:	e0fffc0d 	sth	r3,-16(fp)
  102288:	e0bffa05 	stb	r2,-24(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
  10228c:	e03fff8d 	sth	zero,-2(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
  102290:	e0bffe03 	ldbu	r2,-8(fp)
  102294:	100690fa 	slli	r3,r2,3
  102298:	00800074 	movhi	r2,1
  10229c:	1885883a 	add	r2,r3,r2
  1022a0:	10c7b317 	ldw	r3,7884(r2)
  1022a4:	e0bffd03 	ldbu	r2,-12(fp)
  1022a8:	100490fa 	slli	r2,r2,3
  1022ac:	1885883a 	add	r2,r3,r2
  1022b0:	10800183 	ldbu	r2,6(r2)
  1022b4:	10803fcc 	andi	r2,r2,255
  1022b8:	100b883a 	mov	r5,r2
  1022bc:	01003a04 	movi	r4,232
  1022c0:	01016a80 	call	1016a8 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
  1022c4:	e0bffd03 	ldbu	r2,-12(fp)
  1022c8:	100b883a 	mov	r5,r2
  1022cc:	0009883a 	mov	r4,zero
  1022d0:	01020d40 	call	1020d4 <XferDispatchPkt>
  1022d4:	e0bfff45 	stb	r2,-3(fp)
        if( rcode ) {
  1022d8:	e0bfff43 	ldbu	r2,-3(fp)
  1022dc:	10000226 	beq	r2,zero,1022e8 <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
  1022e0:	e0bfff43 	ldbu	r2,-3(fp)
  1022e4:	00003806 	br	1023c8 <XferInTransfer+0x174>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
  1022e8:	01003204 	movi	r4,200
  1022ec:	01018540 	call	101854 <MAXreg_rd>
  1022f0:	10803fcc 	andi	r2,r2,255
  1022f4:	1080010c 	andi	r2,r2,4
  1022f8:	1000021e 	bne	r2,zero,102304 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
  1022fc:	00bffc04 	movi	r2,-16
  102300:	00003106 	br	1023c8 <XferInTransfer+0x174>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
  102304:	01000c04 	movi	r4,48
  102308:	01018540 	call	101854 <MAXreg_rd>
  10230c:	e0bfff05 	stb	r2,-4(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
  102310:	e0bfff03 	ldbu	r2,-4(fp)
  102314:	e1bffb17 	ldw	r6,-20(fp)
  102318:	100b883a 	mov	r5,r2
  10231c:	01000204 	movi	r4,8
  102320:	01019100 	call	101910 <MAXbytes_rd>
  102324:	e0bffb15 	stw	r2,-20(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
  102328:	01400104 	movi	r5,4
  10232c:	01003204 	movi	r4,200
  102330:	01016a80 	call	1016a8 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
  102334:	e0bfff03 	ldbu	r2,-4(fp)
  102338:	e0ffff8b 	ldhu	r3,-2(fp)
  10233c:	1885883a 	add	r2,r3,r2
  102340:	e0bfff8d 	sth	r2,-2(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
  102344:	e0ffff03 	ldbu	r3,-4(fp)
  102348:	e0bffa03 	ldbu	r2,-24(fp)
  10234c:	18800336 	bltu	r3,r2,10235c <XferInTransfer+0x108>
  102350:	e0ffff8b 	ldhu	r3,-2(fp)
  102354:	e0bffc0b 	ldhu	r2,-16(fp)
  102358:	18bfda36 	bltu	r3,r2,1022c4 <XferInTransfer+0x70>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
  10235c:	01003e04 	movi	r4,248
  102360:	01018540 	call	101854 <MAXreg_rd>
  102364:	10803fcc 	andi	r2,r2,255
  102368:	1080040c 	andi	r2,r2,16
  10236c:	10000b26 	beq	r2,zero,10239c <XferInTransfer+0x148>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
  102370:	e0bffe03 	ldbu	r2,-8(fp)
  102374:	100690fa 	slli	r3,r2,3
  102378:	00800074 	movhi	r2,1
  10237c:	1885883a 	add	r2,r3,r2
  102380:	10c7b317 	ldw	r3,7884(r2)
  102384:	e0bffd03 	ldbu	r2,-12(fp)
  102388:	100490fa 	slli	r2,r2,3
  10238c:	1885883a 	add	r2,r3,r2
  102390:	00c00804 	movi	r3,32
  102394:	10c00185 	stb	r3,6(r2)
  102398:	00000a06 	br	1023c4 <XferInTransfer+0x170>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
  10239c:	e0bffe03 	ldbu	r2,-8(fp)
  1023a0:	100690fa 	slli	r3,r2,3
  1023a4:	00800074 	movhi	r2,1
  1023a8:	1885883a 	add	r2,r3,r2
  1023ac:	10c7b317 	ldw	r3,7884(r2)
  1023b0:	e0bffd03 	ldbu	r2,-12(fp)
  1023b4:	100490fa 	slli	r2,r2,3
  1023b8:	1885883a 	add	r2,r3,r2
  1023bc:	00c00404 	movi	r3,16
  1023c0:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
  1023c4:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
  1023c8:	e037883a 	mov	sp,fp
  1023cc:	dfc00117 	ldw	ra,4(sp)
  1023d0:	df000017 	ldw	fp,0(sp)
  1023d4:	dec00204 	addi	sp,sp,8
  1023d8:	f800283a 	ret

001023dc <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
  1023dc:	defffe04 	addi	sp,sp,-8
  1023e0:	df000115 	stw	fp,4(sp)
  1023e4:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
  1023e8:	e03fffc5 	stb	zero,-1(fp)
  1023ec:	00000d06 	br	102424 <USB_init+0x48>
        devtable[ i ].epinfo = NULL;       //clear device table
  1023f0:	e0bfffc3 	ldbu	r2,-1(fp)
  1023f4:	100690fa 	slli	r3,r2,3
  1023f8:	00800074 	movhi	r2,1
  1023fc:	1885883a 	add	r2,r3,r2
  102400:	1007b315 	stw	zero,7884(r2)
        devtable[ i ].devclass = 0;
  102404:	e0bfffc3 	ldbu	r2,-1(fp)
  102408:	100690fa 	slli	r3,r2,3
  10240c:	00800074 	movhi	r2,1
  102410:	1885883a 	add	r2,r3,r2
  102414:	1007b405 	stb	zero,7888(r2)
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
  102418:	e0bfffc3 	ldbu	r2,-1(fp)
  10241c:	10800044 	addi	r2,r2,1
  102420:	e0bfffc5 	stb	r2,-1(fp)
  102424:	e0bfffc3 	ldbu	r2,-1(fp)
  102428:	10800270 	cmpltui	r2,r2,9
  10242c:	103ff01e 	bne	r2,zero,1023f0 <USB_init+0x14>
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
  102430:	d0e01a04 	addi	r3,gp,-32664
  102434:	00800074 	movhi	r2,1
  102438:	10c7b315 	stw	r3,7884(r2)
    dev0ep.MaxPktSize = 0;
  10243c:	d0201a8d 	sth	zero,-32662(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
  102440:	00801004 	movi	r2,64
  102444:	d0a01b45 	stb	r2,-32659(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
  102448:	00800404 	movi	r2,16
  10244c:	d0a01b85 	stb	r2,-32658(gp)
}
  102450:	0001883a 	nop
  102454:	e037883a 	mov	sp,fp
  102458:	df000017 	ldw	fp,0(sp)
  10245c:	dec00104 	addi	sp,sp,4
  102460:	f800283a 	ret

00102464 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
  102464:	deffb204 	addi	sp,sp,-312
  102468:	dfc04d15 	stw	ra,308(sp)
  10246c:	df004c15 	stw	fp,304(sp)
  102470:	dc004b15 	stw	r16,300(sp)
  102474:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
  102478:	d0a00603 	ldbu	r2,-32744(gp)
  10247c:	10803fcc 	andi	r2,r2,255
  102480:	10803c0c 	andi	r2,r2,240
  102484:	10c00820 	cmpeqi	r3,r2,32
  102488:	18010e1e 	bne	r3,zero,1028c4 <USB_Task+0x460>
  10248c:	10c00848 	cmpgei	r3,r2,33
  102490:	1800041e 	bne	r3,zero,1024a4 <USB_Task+0x40>
  102494:	10000a26 	beq	r2,zero,1024c0 <USB_Task+0x5c>
  102498:	10800420 	cmpeqi	r2,r2,16
  10249c:	10001a1e 	bne	r2,zero,102508 <USB_Task+0xa4>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
  1024a0:	00017506 	br	102a78 <USB_Task+0x614>
    switch( usb_task_state & USB_STATE_MASK ) {
  1024a4:	10c01020 	cmpeqi	r3,r2,64
  1024a8:	1801681e 	bne	r3,zero,102a4c <USB_Task+0x5e8>
  1024ac:	10c03fe0 	cmpeqi	r3,r2,255
  1024b0:	1801681e 	bne	r3,zero,102a54 <USB_Task+0x5f0>
  1024b4:	10800c20 	cmpeqi	r2,r2,48
  1024b8:	10013d1e 	bne	r2,zero,1029b0 <USB_Task+0x54c>
            break;
  1024bc:	00016e06 	br	102a78 <USB_Task+0x614>
            switch( usb_task_state ) {
  1024c0:	d0a00603 	ldbu	r2,-32744(gp)
  1024c4:	10803fcc 	andi	r2,r2,255
  1024c8:	10c000e0 	cmpeqi	r3,r2,3
  1024cc:	1800081e 	bne	r3,zero,1024f0 <USB_Task+0x8c>
  1024d0:	10c00120 	cmpeqi	r3,r2,4
  1024d4:	18000a1e 	bne	r3,zero,102500 <USB_Task+0x9c>
  1024d8:	10800058 	cmpnei	r2,r2,1
  1024dc:	10015f1e 	bne	r2,zero,102a5c <USB_Task+0x5f8>
                    USB_init();
  1024e0:	01023dc0 	call	1023dc <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
  1024e4:	008000c4 	movi	r2,3
  1024e8:	d0a00605 	stb	r2,-32744(gp)
                    break;
  1024ec:	00000506 	br	102504 <USB_Task+0xa0>
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
  1024f0:	01400104 	movi	r5,4
  1024f4:	01003a04 	movi	r4,232
  1024f8:	01016a80 	call	1016a8 <MAXreg_wr>
                    break;
  1024fc:	00000106 	br	102504 <USB_Task+0xa0>
                    break;
  102500:	0001883a 	nop
            break;//( USB_STATE_DETACHED ):
  102504:	00015506 	br	102a5c <USB_Task+0x5f8>
            switch( usb_task_state ) {
  102508:	d0a00603 	ldbu	r2,-32744(gp)
  10250c:	10803fcc 	andi	r2,r2,255
  102510:	10bffc04 	addi	r2,r2,-16
  102514:	10c001a8 	cmpgeui	r3,r2,6
  102518:	1801521e 	bne	r3,zero,102a64 <USB_Task+0x600>
  10251c:	100690ba 	slli	r3,r2,2
  102520:	00800434 	movhi	r2,16
  102524:	1885883a 	add	r2,r3,r2
  102528:	10894c17 	ldw	r2,9520(r2)
  10252c:	1000683a 	jmp	r2
  102530:	00102548 	cmpgei	zero,zero,16533
  102534:	00102580 	call	10258 <impure_data+0x228>
  102538:	001025bc 	xorhi	zero,zero,16534
  10253c:	001025e0 	cmpeqi	zero,zero,16535
  102540:	00102620 	cmpeqi	zero,zero,16536
  102544:	00102634 	movhi	zero,16536
  return _alt_nticks;
  102548:	d0a02817 	ldw	r2,-32608(gp)
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
  10254c:	0140fa04 	movi	r5,1000
  102550:	1009883a 	mov	r4,r2
  102554:	0102e600 	call	102e60 <__mulsi3>
  102558:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
  10255c:	d0a02717 	ldw	r2,-32612(gp)
  102560:	100b883a 	mov	r5,r2
  102564:	1809883a 	mov	r4,r3
  102568:	0102da00 	call	102da0 <__udivsi3>
  10256c:	10803204 	addi	r2,r2,200
  102570:	d0a01d15 	stw	r2,-32652(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
  102574:	00800444 	movi	r2,17
  102578:	d0a00605 	stb	r2,-32744(gp)
                    break;//case( USB_STATE_ATTACHED )
  10257c:	0000d006 	br	1028c0 <USB_Task+0x45c>
  return _alt_nticks;
  102580:	d0a02817 	ldw	r2,-32608(gp)
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
  102584:	0140fa04 	movi	r5,1000
  102588:	1009883a 	mov	r4,r2
  10258c:	0102e600 	call	102e60 <__mulsi3>
  102590:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
  102594:	d0a02717 	ldw	r2,-32612(gp)
  102598:	100b883a 	mov	r5,r2
  10259c:	1809883a 	mov	r4,r3
  1025a0:	0102da00 	call	102da0 <__udivsi3>
  1025a4:	1007883a 	mov	r3,r2
  1025a8:	d0a01d17 	ldw	r2,-32652(gp)
  1025ac:	10c0c12e 	bgeu	r2,r3,1028b4 <USB_Task+0x450>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
  1025b0:	00800484 	movi	r2,18
  1025b4:	d0a00605 	stb	r2,-32744(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
  1025b8:	0000be06 	br	1028b4 <USB_Task+0x450>
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
  1025bc:	01400044 	movi	r5,1
  1025c0:	01003204 	movi	r4,200
  1025c4:	01016a80 	call	1016a8 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
  1025c8:	01400044 	movi	r5,1
  1025cc:	01003a04 	movi	r4,232
  1025d0:	01016a80 	call	1016a8 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
  1025d4:	008004c4 	movi	r2,19
  1025d8:	d0a00605 	stb	r2,-32744(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
  1025dc:	0000b806 	br	1028c0 <USB_Task+0x45c>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
  1025e0:	01003a04 	movi	r4,232
  1025e4:	01018540 	call	101854 <MAXreg_rd>
  1025e8:	10803fcc 	andi	r2,r2,255
  1025ec:	1080004c 	andi	r2,r2,1
  1025f0:	1000b21e 	bne	r2,zero,1028bc <USB_Task+0x458>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
  1025f4:	01003604 	movi	r4,216
  1025f8:	01018540 	call	101854 <MAXreg_rd>
  1025fc:	10800214 	ori	r2,r2,8
  102600:	e0bffe85 	stb	r2,-6(fp)
                        MAXreg_wr( rMODE, tmpdata );
  102604:	e0bffe83 	ldbu	r2,-6(fp)
  102608:	100b883a 	mov	r5,r2
  10260c:	01003604 	movi	r4,216
  102610:	01016a80 	call	1016a8 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
  102614:	00800504 	movi	r2,20
  102618:	d0a00605 	stb	r2,-32744(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
  10261c:	0000a706 	br	1028bc <USB_Task+0x458>
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
  102620:	01003204 	movi	r4,200
  102624:	01018540 	call	101854 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
  102628:	00800544 	movi	r2,21
  10262c:	d0a00605 	stb	r2,-32744(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
  102630:	0000a306 	br	1028c0 <USB_Task+0x45c>
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
  102634:	00800074 	movhi	r2,1
  102638:	1087b317 	ldw	r2,7884(r2)
  10263c:	00c00204 	movi	r3,8
  102640:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
  102644:	e0bff984 	addi	r2,fp,-26
  102648:	d8800415 	stw	r2,16(sp)
  10264c:	00800204 	movi	r2,8
  102650:	d8800315 	stw	r2,12(sp)
  102654:	d8000215 	stw	zero,8(sp)
  102658:	00800044 	movi	r2,1
  10265c:	d8800115 	stw	r2,4(sp)
  102660:	d8000015 	stw	zero,0(sp)
  102664:	01c00184 	movi	r7,6
  102668:	01802004 	movi	r6,128
  10266c:	000b883a 	mov	r5,zero
  102670:	0009883a 	mov	r4,zero
  102674:	0101e140 	call	101e14 <XferCtrlReq>
  102678:	e0bffe45 	stb	r2,-7(fp)
                    if( rcode == 0 ) {
  10267c:	e0bffe43 	ldbu	r2,-7(fp)
  102680:	1000851e 	bne	r2,zero,102898 <USB_Task+0x434>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
  102684:	e0fffb43 	ldbu	r3,-19(fp)
  102688:	00800074 	movhi	r2,1
  10268c:	1087b317 	ldw	r2,7884(r2)
  102690:	18c03fcc 	andi	r3,r3,255
  102694:	10c0008d 	sth	r3,2(r2)
                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
  102698:	e0bff983 	ldbu	r2,-26(fp)
  10269c:	10803fcc 	andi	r2,r2,255
  1026a0:	e0fff984 	addi	r3,fp,-26
  1026a4:	d8c00415 	stw	r3,16(sp)
  1026a8:	d8800315 	stw	r2,12(sp)
  1026ac:	d8000215 	stw	zero,8(sp)
  1026b0:	00800044 	movi	r2,1
  1026b4:	d8800115 	stw	r2,4(sp)
  1026b8:	d8000015 	stw	zero,0(sp)
  1026bc:	01c00184 	movi	r7,6
  1026c0:	01802004 	movi	r6,128
  1026c4:	000b883a 	mov	r5,zero
  1026c8:	0009883a 	mov	r4,zero
  1026cc:	0101e140 	call	101e14 <XferCtrlReq>
  1026d0:	e0bffe45 	stb	r2,-7(fp)
                        if (buf.iManufacturer != 0)
  1026d4:	e0bffd03 	ldbu	r2,-12(fp)
  1026d8:	10803fcc 	andi	r2,r2,255
  1026dc:	10003426 	beq	r2,zero,1027b0 <USB_Task+0x34c>
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
  1026e0:	e0bffd03 	ldbu	r2,-12(fp)
  1026e4:	10803fcc 	andi	r2,r2,255
  1026e8:	e0ffb984 	addi	r3,fp,-282
  1026ec:	d8c00415 	stw	r3,16(sp)
  1026f0:	00c00084 	movi	r3,2
  1026f4:	d8c00315 	stw	r3,12(sp)
  1026f8:	00c10244 	movi	r3,1033
  1026fc:	d8c00215 	stw	r3,8(sp)
  102700:	00c000c4 	movi	r3,3
  102704:	d8c00115 	stw	r3,4(sp)
  102708:	d8800015 	stw	r2,0(sp)
  10270c:	01c00184 	movi	r7,6
  102710:	01802004 	movi	r6,128
  102714:	000b883a 	mov	r5,zero
  102718:	0009883a 	mov	r4,zero
  10271c:	0101e140 	call	101e14 <XferCtrlReq>
  102720:	e0bffe45 	stb	r2,-7(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
  102724:	e0bffd03 	ldbu	r2,-12(fp)
  102728:	10803fcc 	andi	r2,r2,255
  10272c:	e0ffb983 	ldbu	r3,-282(fp)
  102730:	18c03fcc 	andi	r3,r3,255
  102734:	e13fb984 	addi	r4,fp,-282
  102738:	d9000415 	stw	r4,16(sp)
  10273c:	d8c00315 	stw	r3,12(sp)
  102740:	00c10244 	movi	r3,1033
  102744:	d8c00215 	stw	r3,8(sp)
  102748:	00c000c4 	movi	r3,3
  10274c:	d8c00115 	stw	r3,4(sp)
  102750:	d8800015 	stw	r2,0(sp)
  102754:	01c00184 	movi	r7,6
  102758:	01802004 	movi	r6,128
  10275c:	000b883a 	mov	r5,zero
  102760:	0009883a 	mov	r4,zero
  102764:	0101e140 	call	101e14 <XferCtrlReq>
  102768:	e0bffe45 	stb	r2,-7(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
  10276c:	e0bffd03 	ldbu	r2,-12(fp)
  102770:	14003fcc 	andi	r16,r2,255
  102774:	e0bfb983 	ldbu	r2,-282(fp)
  102778:	10803fcc 	andi	r2,r2,255
  10277c:	1004d07a 	srli	r2,r2,1
  102780:	10bfffc4 	addi	r2,r2,-1
  102784:	10c03fcc 	andi	r3,r2,255
  102788:	e0bfb984 	addi	r2,fp,-282
  10278c:	10800084 	addi	r2,r2,2
  102790:	180b883a 	mov	r5,r3
  102794:	1009883a 	mov	r4,r2
  102798:	0102c240 	call	102c24 <ConvUTF8ToStr>
  10279c:	100d883a 	mov	r6,r2
  1027a0:	800b883a 	mov	r5,r16
  1027a4:	01000474 	movhi	r4,17
  1027a8:	210caf04 	addi	r4,r4,12988
  1027ac:	0102fb80 	call	102fb8 <printf>
                		if (buf.iProduct != 0)
  1027b0:	e0bffd43 	ldbu	r2,-11(fp)
  1027b4:	10803fcc 	andi	r2,r2,255
  1027b8:	10003426 	beq	r2,zero,10288c <USB_Task+0x428>
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
  1027bc:	e0bffd43 	ldbu	r2,-11(fp)
  1027c0:	10803fcc 	andi	r2,r2,255
  1027c4:	e0ffb984 	addi	r3,fp,-282
  1027c8:	d8c00415 	stw	r3,16(sp)
  1027cc:	00c00084 	movi	r3,2
  1027d0:	d8c00315 	stw	r3,12(sp)
  1027d4:	00c10244 	movi	r3,1033
  1027d8:	d8c00215 	stw	r3,8(sp)
  1027dc:	00c000c4 	movi	r3,3
  1027e0:	d8c00115 	stw	r3,4(sp)
  1027e4:	d8800015 	stw	r2,0(sp)
  1027e8:	01c00184 	movi	r7,6
  1027ec:	01802004 	movi	r6,128
  1027f0:	000b883a 	mov	r5,zero
  1027f4:	0009883a 	mov	r4,zero
  1027f8:	0101e140 	call	101e14 <XferCtrlReq>
  1027fc:	e0bffe45 	stb	r2,-7(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
  102800:	e0bffd43 	ldbu	r2,-11(fp)
  102804:	10803fcc 	andi	r2,r2,255
  102808:	e0ffb983 	ldbu	r3,-282(fp)
  10280c:	18c03fcc 	andi	r3,r3,255
  102810:	e13fb984 	addi	r4,fp,-282
  102814:	d9000415 	stw	r4,16(sp)
  102818:	d8c00315 	stw	r3,12(sp)
  10281c:	00c10244 	movi	r3,1033
  102820:	d8c00215 	stw	r3,8(sp)
  102824:	00c000c4 	movi	r3,3
  102828:	d8c00115 	stw	r3,4(sp)
  10282c:	d8800015 	stw	r2,0(sp)
  102830:	01c00184 	movi	r7,6
  102834:	01802004 	movi	r6,128
  102838:	000b883a 	mov	r5,zero
  10283c:	0009883a 	mov	r4,zero
  102840:	0101e140 	call	101e14 <XferCtrlReq>
  102844:	e0bffe45 	stb	r2,-7(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
  102848:	e0bffd43 	ldbu	r2,-11(fp)
  10284c:	14003fcc 	andi	r16,r2,255
  102850:	e0bfb983 	ldbu	r2,-282(fp)
  102854:	10803fcc 	andi	r2,r2,255
  102858:	1004d07a 	srli	r2,r2,1
  10285c:	10bfffc4 	addi	r2,r2,-1
  102860:	10c03fcc 	andi	r3,r2,255
  102864:	e0bfb984 	addi	r2,fp,-282
  102868:	10800084 	addi	r2,r2,2
  10286c:	180b883a 	mov	r5,r3
  102870:	1009883a 	mov	r4,r2
  102874:	0102c240 	call	102c24 <ConvUTF8ToStr>
  102878:	100d883a 	mov	r6,r2
  10287c:	800b883a 	mov	r5,r16
  102880:	01000474 	movhi	r4,17
  102884:	210cb504 	addi	r4,r4,13012
  102888:	0102fb80 	call	102fb8 <printf>
                        usb_task_state = USB_STATE_ADDRESSING;
  10288c:	00800804 	movi	r2,32
  102890:	d0a00605 	stb	r2,-32744(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
  102894:	00000a06 	br	1028c0 <USB_Task+0x45c>
                        usb_error = rcode;
  102898:	e0bffe43 	ldbu	r2,-7(fp)
  10289c:	d0a01e45 	stb	r2,-32647(gp)
                        last_usb_task_state = usb_task_state;
  1028a0:	d0a00603 	ldbu	r2,-32744(gp)
  1028a4:	d0a01c05 	stb	r2,-32656(gp)
                        usb_task_state = USB_STATE_ERROR;
  1028a8:	00bfffc4 	movi	r2,-1
  1028ac:	d0a00605 	stb	r2,-32744(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
  1028b0:	00000306 	br	1028c0 <USB_Task+0x45c>
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
  1028b4:	0001883a 	nop
  1028b8:	00006a06 	br	102a64 <USB_Task+0x600>
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
  1028bc:	0001883a 	nop
            break;//case ( USB_STATE_ATTACHED )
  1028c0:	00006806 	br	102a64 <USB_Task+0x600>
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
  1028c4:	00800044 	movi	r2,1
  1028c8:	e0bffec5 	stb	r2,-5(fp)
  1028cc:	00002a06 	br	102978 <USB_Task+0x514>
                if( devtable[ i ].epinfo == NULL ) {
  1028d0:	e0bffec3 	ldbu	r2,-5(fp)
  1028d4:	100690fa 	slli	r3,r2,3
  1028d8:	00800074 	movhi	r2,1
  1028dc:	1885883a 	add	r2,r3,r2
  1028e0:	1087b317 	ldw	r2,7884(r2)
  1028e4:	1000211e 	bne	r2,zero,10296c <USB_Task+0x508>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
  1028e8:	e0bffec3 	ldbu	r2,-5(fp)
  1028ec:	00c00074 	movhi	r3,1
  1028f0:	18c7b317 	ldw	r3,7884(r3)
  1028f4:	100890fa 	slli	r4,r2,3
  1028f8:	00800074 	movhi	r2,1
  1028fc:	2085883a 	add	r2,r4,r2
  102900:	10c7b315 	stw	r3,7884(r2)
                    rcode = XferSetAddr( 0, 0, i );
  102904:	e0bffec3 	ldbu	r2,-5(fp)
  102908:	d8000415 	stw	zero,16(sp)
  10290c:	d8000315 	stw	zero,12(sp)
  102910:	d8000215 	stw	zero,8(sp)
  102914:	d8000115 	stw	zero,4(sp)
  102918:	d8800015 	stw	r2,0(sp)
  10291c:	01c00144 	movi	r7,5
  102920:	000d883a 	mov	r6,zero
  102924:	000b883a 	mov	r5,zero
  102928:	0009883a 	mov	r4,zero
  10292c:	0101e140 	call	101e14 <XferCtrlReq>
  102930:	e0bffe45 	stb	r2,-7(fp)
                    if( rcode == 0 ) {
  102934:	e0bffe43 	ldbu	r2,-7(fp)
  102938:	1000051e 	bne	r2,zero,102950 <USB_Task+0x4ec>
                        tmp_addr = i;
  10293c:	e0bffec3 	ldbu	r2,-5(fp)
  102940:	d0a01e05 	stb	r2,-32648(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
  102944:	00800c04 	movi	r2,48
  102948:	d0a00605 	stb	r2,-32744(gp)
                    break;  //break if address assigned or error occurred during address assignment attempt
  10294c:	00000d06 	br	102984 <USB_Task+0x520>
                        usb_error = rcode;          //set address error
  102950:	e0bffe43 	ldbu	r2,-7(fp)
  102954:	d0a01e45 	stb	r2,-32647(gp)
                        last_usb_task_state = usb_task_state;
  102958:	d0a00603 	ldbu	r2,-32744(gp)
  10295c:	d0a01c05 	stb	r2,-32656(gp)
                        usb_task_state = USB_STATE_ERROR;
  102960:	00bfffc4 	movi	r2,-1
  102964:	d0a00605 	stb	r2,-32744(gp)
                    break;  //break if address assigned or error occurred during address assignment attempt
  102968:	00000606 	br	102984 <USB_Task+0x520>
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
  10296c:	e0bffec3 	ldbu	r2,-5(fp)
  102970:	10800044 	addi	r2,r2,1
  102974:	e0bffec5 	stb	r2,-5(fp)
  102978:	e0bffec3 	ldbu	r2,-5(fp)
  10297c:	10800230 	cmpltui	r2,r2,8
  102980:	103fd31e 	bne	r2,zero,1028d0 <USB_Task+0x46c>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
  102984:	d0a00603 	ldbu	r2,-32744(gp)
  102988:	10803fcc 	andi	r2,r2,255
  10298c:	10800818 	cmpnei	r2,r2,32
  102990:	1000361e 	bne	r2,zero,102a6c <USB_Task+0x608>
                usb_error = 0xfe;
  102994:	00bfff84 	movi	r2,-2
  102998:	d0a01e45 	stb	r2,-32647(gp)
                last_usb_task_state = usb_task_state;
  10299c:	d0a00603 	ldbu	r2,-32744(gp)
  1029a0:	d0a01c05 	stb	r2,-32656(gp)
                usb_task_state = USB_STATE_ERROR;
  1029a4:	00bfffc4 	movi	r2,-1
  1029a8:	d0a00605 	stb	r2,-32744(gp)
            break;//case ( USB_STATE_ADDRESSING )
  1029ac:	00002f06 	br	102a6c <USB_Task+0x608>
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
  1029b0:	e03ffec5 	stb	zero,-5(fp)
  1029b4:	00001706 	br	102a14 <USB_Task+0x5b0>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
  1029b8:	e0fffec3 	ldbu	r3,-5(fp)
  1029bc:	1805883a 	mov	r2,r3
  1029c0:	1085883a 	add	r2,r2,r2
  1029c4:	10c5883a 	add	r2,r2,r3
  1029c8:	100490ba 	slli	r2,r2,2
  1029cc:	00c00074 	movhi	r3,1
  1029d0:	10c7883a 	add	r3,r2,r3
  1029d4:	18800017 	ldw	r2,0(r3)
  1029d8:	d0e01e03 	ldbu	r3,-32648(gp)
  1029dc:	18c03fcc 	andi	r3,r3,255
  1029e0:	000b883a 	mov	r5,zero
  1029e4:	1809883a 	mov	r4,r3
  1029e8:	103ee83a 	callr	r2
  1029ec:	e0bffe45 	stb	r2,-7(fp)
                if( rcode == TRUE ) {
  1029f0:	e0bffe43 	ldbu	r2,-7(fp)
  1029f4:	10800058 	cmpnei	r2,r2,1
  1029f8:	1000031e 	bne	r2,zero,102a08 <USB_Task+0x5a4>
			        usb_task_state = USB_STATE_RUNNING;
  1029fc:	00801004 	movi	r2,64
  102a00:	d0a00605 	stb	r2,-32744(gp)
                    break;
  102a04:	00000606 	br	102a20 <USB_Task+0x5bc>
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
  102a08:	e0bffec3 	ldbu	r2,-5(fp)
  102a0c:	10800044 	addi	r2,r2,1
  102a10:	e0bffec5 	stb	r2,-5(fp)
  102a14:	e0bffec3 	ldbu	r2,-5(fp)
  102a18:	10800130 	cmpltui	r2,r2,4
  102a1c:	103fe61e 	bne	r2,zero,1029b8 <USB_Task+0x554>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
  102a20:	d0a00603 	ldbu	r2,-32744(gp)
  102a24:	10803fcc 	andi	r2,r2,255
  102a28:	10800c18 	cmpnei	r2,r2,48
  102a2c:	1000111e 	bne	r2,zero,102a74 <USB_Task+0x610>
                usb_error = 0xfd;
  102a30:	00bfff44 	movi	r2,-3
  102a34:	d0a01e45 	stb	r2,-32647(gp)
                last_usb_task_state = usb_task_state;
  102a38:	d0a00603 	ldbu	r2,-32744(gp)
  102a3c:	d0a01c05 	stb	r2,-32656(gp)
                usb_task_state = USB_STATE_ERROR;
  102a40:	00bfffc4 	movi	r2,-1
  102a44:	d0a00605 	stb	r2,-32744(gp)
            break;//( USB_STATE_CONFIGURING )
  102a48:	00000a06 	br	102a74 <USB_Task+0x610>
            break;//( USB_STATE_RUNNING )
  102a4c:	0001883a 	nop
  102a50:	00000906 	br	102a78 <USB_Task+0x614>
            break;//( USB_STATE_ERROR )
  102a54:	0001883a 	nop
  102a58:	00000706 	br	102a78 <USB_Task+0x614>
            break;//( USB_STATE_DETACHED ):
  102a5c:	0001883a 	nop
  102a60:	00000506 	br	102a78 <USB_Task+0x614>
            break;//case ( USB_STATE_ATTACHED )
  102a64:	0001883a 	nop
  102a68:	00000306 	br	102a78 <USB_Task+0x614>
            break;//case ( USB_STATE_ADDRESSING )
  102a6c:	0001883a 	nop
  102a70:	00000106 	br	102a78 <USB_Task+0x614>
            break;//( USB_STATE_CONFIGURING )
  102a74:	0001883a 	nop
    }//switch( usb_task_state & STATE_MASK )
}
  102a78:	0001883a 	nop
  102a7c:	e6ffff04 	addi	sp,fp,-4
  102a80:	dfc00217 	ldw	ra,8(sp)
  102a84:	df000117 	ldw	fp,4(sp)
  102a88:	dc000017 	ldw	r16,0(sp)
  102a8c:	dec00304 	addi	sp,sp,12
  102a90:	f800283a 	ret

00102a94 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
  102a94:	defffd04 	addi	sp,sp,-12
  102a98:	df000215 	stw	fp,8(sp)
  102a9c:	df000204 	addi	fp,sp,8
  102aa0:	2005883a 	mov	r2,r4
  102aa4:	e17ffe15 	stw	r5,-8(fp)
  102aa8:	e0bfff05 	stb	r2,-4(fp)
    return( FALSE );
  102aac:	0005883a 	mov	r2,zero
}
  102ab0:	e037883a 	mov	sp,fp
  102ab4:	df000017 	ldw	fp,0(sp)
  102ab8:	dec00104 	addi	sp,sp,4
  102abc:	f800283a 	ret

00102ac0 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
  102ac0:	defffb04 	addi	sp,sp,-20
  102ac4:	df000415 	stw	fp,16(sp)
  102ac8:	df000404 	addi	fp,sp,16
  102acc:	2005883a 	mov	r2,r4
  102ad0:	2807883a 	mov	r3,r5
  102ad4:	e1bffd15 	stw	r6,-12(fp)
  102ad8:	e1fffc15 	stw	r7,-16(fp)
  102adc:	e0bfff05 	stb	r2,-4(fp)
  102ae0:	1805883a 	mov	r2,r3
  102ae4:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
  102ae8:	0005883a 	mov	r2,zero

}
  102aec:	e037883a 	mov	sp,fp
  102af0:	df000017 	ldw	fp,0(sp)
  102af4:	dec00104 	addi	sp,sp,4
  102af8:	f800283a 	ret

00102afc <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
  102afc:	defffd04 	addi	sp,sp,-12
  102b00:	df000215 	stw	fp,8(sp)
  102b04:	df000204 	addi	fp,sp,8
  102b08:	2005883a 	mov	r2,r4
  102b0c:	e17ffe15 	stw	r5,-8(fp)
  102b10:	e0bfff05 	stb	r2,-4(fp)

	return( FALSE );
  102b14:	0005883a 	mov	r2,zero

}
  102b18:	e037883a 	mov	sp,fp
  102b1c:	df000017 	ldw	fp,0(sp)
  102b20:	dec00104 	addi	sp,sp,4
  102b24:	f800283a 	ret

00102b28 <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
  102b28:	defffb04 	addi	sp,sp,-20
  102b2c:	df000415 	stw	fp,16(sp)
  102b30:	df000404 	addi	fp,sp,16
  102b34:	2005883a 	mov	r2,r4
  102b38:	2807883a 	mov	r3,r5
  102b3c:	e1bffd15 	stw	r6,-12(fp)
  102b40:	e1fffc15 	stw	r7,-16(fp)
  102b44:	e0bfff05 	stb	r2,-4(fp)
  102b48:	1805883a 	mov	r2,r3
  102b4c:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
  102b50:	0005883a 	mov	r2,zero
}
  102b54:	e037883a 	mov	sp,fp
  102b58:	df000017 	ldw	fp,0(sp)
  102b5c:	dec00104 	addi	sp,sp,4
  102b60:	f800283a 	ret

00102b64 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
  102b64:	defffd04 	addi	sp,sp,-12
  102b68:	df000215 	stw	fp,8(sp)
  102b6c:	df000204 	addi	fp,sp,8
  102b70:	2005883a 	mov	r2,r4
  102b74:	e17ffe15 	stw	r5,-8(fp)
  102b78:	e0bfff05 	stb	r2,-4(fp)
	return( FALSE );
  102b7c:	0005883a 	mov	r2,zero
}
  102b80:	e037883a 	mov	sp,fp
  102b84:	df000017 	ldw	fp,0(sp)
  102b88:	dec00104 	addi	sp,sp,4
  102b8c:	f800283a 	ret

00102b90 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
  102b90:	defffb04 	addi	sp,sp,-20
  102b94:	df000415 	stw	fp,16(sp)
  102b98:	df000404 	addi	fp,sp,16
  102b9c:	2005883a 	mov	r2,r4
  102ba0:	2807883a 	mov	r3,r5
  102ba4:	e1bffd15 	stw	r6,-12(fp)
  102ba8:	e1fffc15 	stw	r7,-16(fp)
  102bac:	e0bfff05 	stb	r2,-4(fp)
  102bb0:	1805883a 	mov	r2,r3
  102bb4:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
  102bb8:	0005883a 	mov	r2,zero
}
  102bbc:	e037883a 	mov	sp,fp
  102bc0:	df000017 	ldw	fp,0(sp)
  102bc4:	dec00104 	addi	sp,sp,4
  102bc8:	f800283a 	ret

00102bcc <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
  102bcc:	deffff04 	addi	sp,sp,-4
  102bd0:	df000015 	stw	fp,0(sp)
  102bd4:	d839883a 	mov	fp,sp
    return( usb_task_state );
  102bd8:	d0a00603 	ldbu	r2,-32744(gp)
}
  102bdc:	e037883a 	mov	sp,fp
  102be0:	df000017 	ldw	fp,0(sp)
  102be4:	dec00104 	addi	sp,sp,4
  102be8:	f800283a 	ret

00102bec <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
  102bec:	defffe04 	addi	sp,sp,-8
  102bf0:	df000115 	stw	fp,4(sp)
  102bf4:	df000104 	addi	fp,sp,4
  102bf8:	2005883a 	mov	r2,r4
  102bfc:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
  102c00:	e0bfff03 	ldbu	r2,-4(fp)
  102c04:	100690fa 	slli	r3,r2,3
  102c08:	00800074 	movhi	r2,1
  102c0c:	1087b304 	addi	r2,r2,7884
  102c10:	1885883a 	add	r2,r3,r2
}
  102c14:	e037883a 	mov	sp,fp
  102c18:	df000017 	ldw	fp,0(sp)
  102c1c:	dec00104 	addi	sp,sp,4
  102c20:	f800283a 	ret

00102c24 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
  102c24:	defffc04 	addi	sp,sp,-16
  102c28:	df000315 	stw	fp,12(sp)
  102c2c:	df000304 	addi	fp,sp,12
  102c30:	e13ffe15 	stw	r4,-8(fp)
  102c34:	2805883a 	mov	r2,r5
  102c38:	e0bffd05 	stb	r2,-12(fp)
	BYTE i;
	for (i = 0; i < length; i++)
  102c3c:	e03fffc5 	stb	zero,-1(fp)
  102c40:	00000d06 	br	102c78 <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
  102c44:	e0bfffc3 	ldbu	r2,-1(fp)
  102c48:	1085883a 	add	r2,r2,r2
  102c4c:	1007883a 	mov	r3,r2
  102c50:	e0bffe17 	ldw	r2,-8(fp)
  102c54:	10c7883a 	add	r3,r2,r3
  102c58:	e0bfffc3 	ldbu	r2,-1(fp)
  102c5c:	e13ffe17 	ldw	r4,-8(fp)
  102c60:	2085883a 	add	r2,r4,r2
  102c64:	18c00003 	ldbu	r3,0(r3)
  102c68:	10c00005 	stb	r3,0(r2)
	for (i = 0; i < length; i++)
  102c6c:	e0bfffc3 	ldbu	r2,-1(fp)
  102c70:	10800044 	addi	r2,r2,1
  102c74:	e0bfffc5 	stb	r2,-1(fp)
  102c78:	e0ffffc3 	ldbu	r3,-1(fp)
  102c7c:	e0bffd03 	ldbu	r2,-12(fp)
  102c80:	18bff036 	bltu	r3,r2,102c44 <ConvUTF8ToStr+0x20>
	}
	utf8[length] = 0x00;
  102c84:	e0bffd03 	ldbu	r2,-12(fp)
  102c88:	e0fffe17 	ldw	r3,-8(fp)
  102c8c:	1885883a 	add	r2,r3,r2
  102c90:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
  102c94:	e0bffe17 	ldw	r2,-8(fp)
}
  102c98:	e037883a 	mov	sp,fp
  102c9c:	df000017 	ldw	fp,0(sp)
  102ca0:	dec00104 	addi	sp,sp,4
  102ca4:	f800283a 	ret

00102ca8 <__divsi3>:
  102ca8:	20001a16 	blt	r4,zero,102d14 <__divsi3+0x6c>
  102cac:	000f883a 	mov	r7,zero
  102cb0:	2800020e 	bge	r5,zero,102cbc <__divsi3+0x14>
  102cb4:	014bc83a 	sub	r5,zero,r5
  102cb8:	39c0005c 	xori	r7,r7,1
  102cbc:	200d883a 	mov	r6,r4
  102cc0:	00c00044 	movi	r3,1
  102cc4:	2900092e 	bgeu	r5,r4,102cec <__divsi3+0x44>
  102cc8:	00800804 	movi	r2,32
  102ccc:	00c00044 	movi	r3,1
  102cd0:	00000106 	br	102cd8 <__divsi3+0x30>
  102cd4:	10001226 	beq	r2,zero,102d20 <__divsi3+0x78>
  102cd8:	294b883a 	add	r5,r5,r5
  102cdc:	10bfffc4 	addi	r2,r2,-1
  102ce0:	18c7883a 	add	r3,r3,r3
  102ce4:	293ffb36 	bltu	r5,r4,102cd4 <__divsi3+0x2c>
  102ce8:	18000d26 	beq	r3,zero,102d20 <__divsi3+0x78>
  102cec:	0005883a 	mov	r2,zero
  102cf0:	31400236 	bltu	r6,r5,102cfc <__divsi3+0x54>
  102cf4:	314dc83a 	sub	r6,r6,r5
  102cf8:	10c4b03a 	or	r2,r2,r3
  102cfc:	1806d07a 	srli	r3,r3,1
  102d00:	280ad07a 	srli	r5,r5,1
  102d04:	183ffa1e 	bne	r3,zero,102cf0 <__divsi3+0x48>
  102d08:	38000126 	beq	r7,zero,102d10 <__divsi3+0x68>
  102d0c:	0085c83a 	sub	r2,zero,r2
  102d10:	f800283a 	ret
  102d14:	0109c83a 	sub	r4,zero,r4
  102d18:	01c00044 	movi	r7,1
  102d1c:	003fe406 	br	102cb0 <__divsi3+0x8>
  102d20:	0005883a 	mov	r2,zero
  102d24:	003ff806 	br	102d08 <__divsi3+0x60>

00102d28 <__modsi3>:
  102d28:	20001a16 	blt	r4,zero,102d94 <__modsi3+0x6c>
  102d2c:	000f883a 	mov	r7,zero
  102d30:	2005883a 	mov	r2,r4
  102d34:	2800010e 	bge	r5,zero,102d3c <__modsi3+0x14>
  102d38:	014bc83a 	sub	r5,zero,r5
  102d3c:	00c00044 	movi	r3,1
  102d40:	2900092e 	bgeu	r5,r4,102d68 <__modsi3+0x40>
  102d44:	01800804 	movi	r6,32
  102d48:	00c00044 	movi	r3,1
  102d4c:	00000106 	br	102d54 <__modsi3+0x2c>
  102d50:	30000d26 	beq	r6,zero,102d88 <__modsi3+0x60>
  102d54:	294b883a 	add	r5,r5,r5
  102d58:	31bfffc4 	addi	r6,r6,-1
  102d5c:	18c7883a 	add	r3,r3,r3
  102d60:	293ffb36 	bltu	r5,r4,102d50 <__modsi3+0x28>
  102d64:	18000826 	beq	r3,zero,102d88 <__modsi3+0x60>
  102d68:	1806d07a 	srli	r3,r3,1
  102d6c:	11400136 	bltu	r2,r5,102d74 <__modsi3+0x4c>
  102d70:	1145c83a 	sub	r2,r2,r5
  102d74:	280ad07a 	srli	r5,r5,1
  102d78:	183ffb1e 	bne	r3,zero,102d68 <__modsi3+0x40>
  102d7c:	38000126 	beq	r7,zero,102d84 <__modsi3+0x5c>
  102d80:	0085c83a 	sub	r2,zero,r2
  102d84:	f800283a 	ret
  102d88:	2005883a 	mov	r2,r4
  102d8c:	383ffd26 	beq	r7,zero,102d84 <__modsi3+0x5c>
  102d90:	003ffb06 	br	102d80 <__modsi3+0x58>
  102d94:	0109c83a 	sub	r4,zero,r4
  102d98:	01c00044 	movi	r7,1
  102d9c:	003fe406 	br	102d30 <__modsi3+0x8>

00102da0 <__udivsi3>:
  102da0:	200d883a 	mov	r6,r4
  102da4:	2900152e 	bgeu	r5,r4,102dfc <__udivsi3+0x5c>
  102da8:	28001416 	blt	r5,zero,102dfc <__udivsi3+0x5c>
  102dac:	00800804 	movi	r2,32
  102db0:	00c00044 	movi	r3,1
  102db4:	00000206 	br	102dc0 <__udivsi3+0x20>
  102db8:	10000e26 	beq	r2,zero,102df4 <__udivsi3+0x54>
  102dbc:	28000516 	blt	r5,zero,102dd4 <__udivsi3+0x34>
  102dc0:	294b883a 	add	r5,r5,r5
  102dc4:	10bfffc4 	addi	r2,r2,-1
  102dc8:	18c7883a 	add	r3,r3,r3
  102dcc:	293ffa36 	bltu	r5,r4,102db8 <__udivsi3+0x18>
  102dd0:	18000826 	beq	r3,zero,102df4 <__udivsi3+0x54>
  102dd4:	0005883a 	mov	r2,zero
  102dd8:	31400236 	bltu	r6,r5,102de4 <__udivsi3+0x44>
  102ddc:	314dc83a 	sub	r6,r6,r5
  102de0:	10c4b03a 	or	r2,r2,r3
  102de4:	1806d07a 	srli	r3,r3,1
  102de8:	280ad07a 	srli	r5,r5,1
  102dec:	183ffa1e 	bne	r3,zero,102dd8 <__udivsi3+0x38>
  102df0:	f800283a 	ret
  102df4:	0005883a 	mov	r2,zero
  102df8:	f800283a 	ret
  102dfc:	00c00044 	movi	r3,1
  102e00:	003ff406 	br	102dd4 <__udivsi3+0x34>

00102e04 <__umodsi3>:
  102e04:	2005883a 	mov	r2,r4
  102e08:	2900132e 	bgeu	r5,r4,102e58 <__umodsi3+0x54>
  102e0c:	28001216 	blt	r5,zero,102e58 <__umodsi3+0x54>
  102e10:	01800804 	movi	r6,32
  102e14:	00c00044 	movi	r3,1
  102e18:	00000206 	br	102e24 <__umodsi3+0x20>
  102e1c:	30000c26 	beq	r6,zero,102e50 <__umodsi3+0x4c>
  102e20:	28000516 	blt	r5,zero,102e38 <__umodsi3+0x34>
  102e24:	294b883a 	add	r5,r5,r5
  102e28:	31bfffc4 	addi	r6,r6,-1
  102e2c:	18c7883a 	add	r3,r3,r3
  102e30:	293ffa36 	bltu	r5,r4,102e1c <__umodsi3+0x18>
  102e34:	18000626 	beq	r3,zero,102e50 <__umodsi3+0x4c>
  102e38:	1806d07a 	srli	r3,r3,1
  102e3c:	11400136 	bltu	r2,r5,102e44 <__umodsi3+0x40>
  102e40:	1145c83a 	sub	r2,r2,r5
  102e44:	280ad07a 	srli	r5,r5,1
  102e48:	183ffb1e 	bne	r3,zero,102e38 <__umodsi3+0x34>
  102e4c:	f800283a 	ret
  102e50:	2005883a 	mov	r2,r4
  102e54:	f800283a 	ret
  102e58:	00c00044 	movi	r3,1
  102e5c:	003ff606 	br	102e38 <__umodsi3+0x34>

00102e60 <__mulsi3>:
  102e60:	0005883a 	mov	r2,zero
  102e64:	20000726 	beq	r4,zero,102e84 <__mulsi3+0x24>
  102e68:	20c0004c 	andi	r3,r4,1
  102e6c:	2008d07a 	srli	r4,r4,1
  102e70:	18000126 	beq	r3,zero,102e78 <__mulsi3+0x18>
  102e74:	1145883a 	add	r2,r2,r5
  102e78:	294b883a 	add	r5,r5,r5
  102e7c:	203ffa1e 	bne	r4,zero,102e68 <__mulsi3+0x8>
  102e80:	f800283a 	ret
  102e84:	f800283a 	ret

00102e88 <memcpy>:
  102e88:	30c00430 	cmpltui	r3,r6,16
  102e8c:	2005883a 	mov	r2,r4
  102e90:	18002d1e 	bne	r3,zero,102f48 <memcpy+0xc0>
  102e94:	2906b03a 	or	r3,r5,r4
  102e98:	18c000cc 	andi	r3,r3,3
  102e9c:	1800351e 	bne	r3,zero,102f74 <memcpy+0xec>
  102ea0:	32fffc04 	addi	r11,r6,-16
  102ea4:	5816d13a 	srli	r11,r11,4
  102ea8:	2007883a 	mov	r3,r4
  102eac:	280f883a 	mov	r7,r5
  102eb0:	5ac00044 	addi	r11,r11,1
  102eb4:	5816913a 	slli	r11,r11,4
  102eb8:	22c9883a 	add	r4,r4,r11
  102ebc:	3a000017 	ldw	r8,0(r7)
  102ec0:	3a800117 	ldw	r10,4(r7)
  102ec4:	3a400217 	ldw	r9,8(r7)
  102ec8:	39c00404 	addi	r7,r7,16
  102ecc:	1a000015 	stw	r8,0(r3)
  102ed0:	3a3fff17 	ldw	r8,-4(r7)
  102ed4:	1a800115 	stw	r10,4(r3)
  102ed8:	1a400215 	stw	r9,8(r3)
  102edc:	18c00404 	addi	r3,r3,16
  102ee0:	1a3fff15 	stw	r8,-4(r3)
  102ee4:	20fff51e 	bne	r4,r3,102ebc <memcpy+0x34>
  102ee8:	3100030c 	andi	r4,r6,12
  102eec:	2acb883a 	add	r5,r5,r11
  102ef0:	320003cc 	andi	r8,r6,15
  102ef4:	20002226 	beq	r4,zero,102f80 <memcpy+0xf8>
  102ef8:	2809883a 	mov	r4,r5
  102efc:	1813883a 	mov	r9,r3
  102f00:	21000104 	addi	r4,r4,4
  102f04:	22bfff17 	ldw	r10,-4(r4)
  102f08:	410fc83a 	sub	r7,r8,r4
  102f0c:	4a400104 	addi	r9,r9,4
  102f10:	29cf883a 	add	r7,r5,r7
  102f14:	4abfff15 	stw	r10,-4(r9)
  102f18:	39c00128 	cmpgeui	r7,r7,4
  102f1c:	383ff81e 	bne	r7,zero,102f00 <memcpy+0x78>
  102f20:	413fff04 	addi	r4,r8,-4
  102f24:	2008d0ba 	srli	r4,r4,2
  102f28:	318000cc 	andi	r6,r6,3
  102f2c:	31ffffc4 	addi	r7,r6,-1
  102f30:	21000044 	addi	r4,r4,1
  102f34:	200890ba 	slli	r4,r4,2
  102f38:	1907883a 	add	r3,r3,r4
  102f3c:	290b883a 	add	r5,r5,r4
  102f40:	3000041e 	bne	r6,zero,102f54 <memcpy+0xcc>
  102f44:	f800283a 	ret
  102f48:	2007883a 	mov	r3,r4
  102f4c:	31ffffc4 	addi	r7,r6,-1
  102f50:	303ffc26 	beq	r6,zero,102f44 <memcpy+0xbc>
  102f54:	39c00044 	addi	r7,r7,1
  102f58:	19cf883a 	add	r7,r3,r7
  102f5c:	29400044 	addi	r5,r5,1
  102f60:	29bfffc3 	ldbu	r6,-1(r5)
  102f64:	18c00044 	addi	r3,r3,1
  102f68:	19bfffc5 	stb	r6,-1(r3)
  102f6c:	19fffb1e 	bne	r3,r7,102f5c <memcpy+0xd4>
  102f70:	f800283a 	ret
  102f74:	31ffffc4 	addi	r7,r6,-1
  102f78:	2007883a 	mov	r3,r4
  102f7c:	003ff506 	br	102f54 <memcpy+0xcc>
  102f80:	400d883a 	mov	r6,r8
  102f84:	003ff106 	br	102f4c <memcpy+0xc4>

00102f88 <_printf_r>:
  102f88:	defffd04 	addi	sp,sp,-12
  102f8c:	2805883a 	mov	r2,r5
  102f90:	dfc00015 	stw	ra,0(sp)
  102f94:	d9800115 	stw	r6,4(sp)
  102f98:	d9c00215 	stw	r7,8(sp)
  102f9c:	21400217 	ldw	r5,8(r4)
  102fa0:	d9c00104 	addi	r7,sp,4
  102fa4:	100d883a 	mov	r6,r2
  102fa8:	01031840 	call	103184 <___vfprintf_internal_r>
  102fac:	dfc00017 	ldw	ra,0(sp)
  102fb0:	dec00304 	addi	sp,sp,12
  102fb4:	f800283a 	ret

00102fb8 <printf>:
  102fb8:	defffc04 	addi	sp,sp,-16
  102fbc:	dfc00015 	stw	ra,0(sp)
  102fc0:	d9400115 	stw	r5,4(sp)
  102fc4:	d9800215 	stw	r6,8(sp)
  102fc8:	d9c00315 	stw	r7,12(sp)
  102fcc:	00800074 	movhi	r2,1
  102fd0:	10873c17 	ldw	r2,7408(r2)
  102fd4:	200b883a 	mov	r5,r4
  102fd8:	d9800104 	addi	r6,sp,4
  102fdc:	11000217 	ldw	r4,8(r2)
  102fe0:	010530c0 	call	10530c <__vfprintf_internal>
  102fe4:	dfc00017 	ldw	ra,0(sp)
  102fe8:	dec00404 	addi	sp,sp,16
  102fec:	f800283a 	ret

00102ff0 <_putchar_r>:
  102ff0:	21800217 	ldw	r6,8(r4)
  102ff4:	0109b281 	jmpi	109b28 <_putc_r>

00102ff8 <putchar>:
  102ff8:	00800074 	movhi	r2,1
  102ffc:	10873c17 	ldw	r2,7408(r2)
  103000:	200b883a 	mov	r5,r4
  103004:	11800217 	ldw	r6,8(r2)
  103008:	1009883a 	mov	r4,r2
  10300c:	0109b281 	jmpi	109b28 <_putc_r>

00103010 <_puts_r>:
  103010:	defff504 	addi	sp,sp,-44
  103014:	dc000815 	stw	r16,32(sp)
  103018:	2021883a 	mov	r16,r4
  10301c:	2809883a 	mov	r4,r5
  103020:	dc400915 	stw	r17,36(sp)
  103024:	dfc00a15 	stw	ra,40(sp)
  103028:	2823883a 	mov	r17,r5
  10302c:	01030ec0 	call	1030ec <strlen>
  103030:	11000044 	addi	r4,r2,1
  103034:	d8800515 	stw	r2,20(sp)
  103038:	00800044 	movi	r2,1
  10303c:	00c00474 	movhi	r3,17
  103040:	d8800715 	stw	r2,28(sp)
  103044:	d8800404 	addi	r2,sp,16
  103048:	18ccbb04 	addi	r3,r3,13036
  10304c:	d8800115 	stw	r2,4(sp)
  103050:	00800084 	movi	r2,2
  103054:	dc400415 	stw	r17,16(sp)
  103058:	d8c00615 	stw	r3,24(sp)
  10305c:	d9000315 	stw	r4,12(sp)
  103060:	d8800215 	stw	r2,8(sp)
  103064:	81400217 	ldw	r5,8(r16)
  103068:	80000226 	beq	r16,zero,103074 <_puts_r+0x64>
  10306c:	80800e17 	ldw	r2,56(r16)
  103070:	10001326 	beq	r2,zero,1030c0 <_puts_r+0xb0>
  103074:	2880030b 	ldhu	r2,12(r5)
  103078:	10c8000c 	andi	r3,r2,8192
  10307c:	1800061e 	bne	r3,zero,103098 <_puts_r+0x88>
  103080:	28c01917 	ldw	r3,100(r5)
  103084:	0137ffc4 	movi	r4,-8193
  103088:	10880014 	ori	r2,r2,8192
  10308c:	1906703a 	and	r3,r3,r4
  103090:	2880030d 	sth	r2,12(r5)
  103094:	28c01915 	stw	r3,100(r5)
  103098:	d9800104 	addi	r6,sp,4
  10309c:	8009883a 	mov	r4,r16
  1030a0:	010785c0 	call	10785c <__sfvwrite_r>
  1030a4:	10000b1e 	bne	r2,zero,1030d4 <_puts_r+0xc4>
  1030a8:	00800284 	movi	r2,10
  1030ac:	dfc00a17 	ldw	ra,40(sp)
  1030b0:	dc400917 	ldw	r17,36(sp)
  1030b4:	dc000817 	ldw	r16,32(sp)
  1030b8:	dec00b04 	addi	sp,sp,44
  1030bc:	f800283a 	ret
  1030c0:	8009883a 	mov	r4,r16
  1030c4:	d9400015 	stw	r5,0(sp)
  1030c8:	01073fc0 	call	1073fc <__sinit>
  1030cc:	d9400017 	ldw	r5,0(sp)
  1030d0:	003fe806 	br	103074 <_puts_r+0x64>
  1030d4:	00bfffc4 	movi	r2,-1
  1030d8:	003ff406 	br	1030ac <_puts_r+0x9c>

001030dc <puts>:
  1030dc:	00800074 	movhi	r2,1
  1030e0:	200b883a 	mov	r5,r4
  1030e4:	11073c17 	ldw	r4,7408(r2)
  1030e8:	01030101 	jmpi	103010 <_puts_r>

001030ec <strlen>:
  1030ec:	208000cc 	andi	r2,r4,3
  1030f0:	10002026 	beq	r2,zero,103174 <strlen+0x88>
  1030f4:	20800007 	ldb	r2,0(r4)
  1030f8:	10002026 	beq	r2,zero,10317c <strlen+0x90>
  1030fc:	2005883a 	mov	r2,r4
  103100:	00000206 	br	10310c <strlen+0x20>
  103104:	10c00007 	ldb	r3,0(r2)
  103108:	18001826 	beq	r3,zero,10316c <strlen+0x80>
  10310c:	10800044 	addi	r2,r2,1
  103110:	10c000cc 	andi	r3,r2,3
  103114:	183ffb1e 	bne	r3,zero,103104 <strlen+0x18>
  103118:	11400017 	ldw	r5,0(r2)
  10311c:	01ffbff4 	movhi	r7,65279
  103120:	39ffbfc4 	addi	r7,r7,-257
  103124:	29c7883a 	add	r3,r5,r7
  103128:	01a02074 	movhi	r6,32897
  10312c:	014a303a 	nor	r5,zero,r5
  103130:	1946703a 	and	r3,r3,r5
  103134:	31a02004 	addi	r6,r6,-32640
  103138:	1986703a 	and	r3,r3,r6
  10313c:	1800091e 	bne	r3,zero,103164 <strlen+0x78>
  103140:	10800104 	addi	r2,r2,4
  103144:	11400017 	ldw	r5,0(r2)
  103148:	29c7883a 	add	r3,r5,r7
  10314c:	014a303a 	nor	r5,zero,r5
  103150:	1946703a 	and	r3,r3,r5
  103154:	1986703a 	and	r3,r3,r6
  103158:	183ff926 	beq	r3,zero,103140 <strlen+0x54>
  10315c:	00000106 	br	103164 <strlen+0x78>
  103160:	10800044 	addi	r2,r2,1
  103164:	10c00007 	ldb	r3,0(r2)
  103168:	183ffd1e 	bne	r3,zero,103160 <strlen+0x74>
  10316c:	1105c83a 	sub	r2,r2,r4
  103170:	f800283a 	ret
  103174:	2005883a 	mov	r2,r4
  103178:	003fe706 	br	103118 <strlen+0x2c>
  10317c:	0005883a 	mov	r2,zero
  103180:	f800283a 	ret

00103184 <___vfprintf_internal_r>:
  103184:	deffbd04 	addi	sp,sp,-268
  103188:	dfc04215 	stw	ra,264(sp)
  10318c:	dd003d15 	stw	r20,244(sp)
  103190:	dcc03c15 	stw	r19,240(sp)
  103194:	dc003915 	stw	r16,228(sp)
  103198:	d9000515 	stw	r4,20(sp)
  10319c:	2021883a 	mov	r16,r4
  1031a0:	2827883a 	mov	r19,r5
  1031a4:	3029883a 	mov	r20,r6
  1031a8:	d9c00615 	stw	r7,24(sp)
  1031ac:	df004115 	stw	fp,260(sp)
  1031b0:	ddc04015 	stw	r23,256(sp)
  1031b4:	dd803f15 	stw	r22,252(sp)
  1031b8:	dd403e15 	stw	r21,248(sp)
  1031bc:	dc803b15 	stw	r18,236(sp)
  1031c0:	dc403a15 	stw	r17,232(sp)
  1031c4:	0107e900 	call	107e90 <_localeconv_r>
  1031c8:	10800017 	ldw	r2,0(r2)
  1031cc:	1009883a 	mov	r4,r2
  1031d0:	d8800d15 	stw	r2,52(sp)
  1031d4:	01030ec0 	call	1030ec <strlen>
  1031d8:	d8800b15 	stw	r2,44(sp)
  1031dc:	80000226 	beq	r16,zero,1031e8 <___vfprintf_internal_r+0x64>
  1031e0:	80800e17 	ldw	r2,56(r16)
  1031e4:	1002de26 	beq	r2,zero,103d60 <___vfprintf_internal_r+0xbdc>
  1031e8:	9880030b 	ldhu	r2,12(r19)
  1031ec:	10c8000c 	andi	r3,r2,8192
  1031f0:	1800061e 	bne	r3,zero,10320c <___vfprintf_internal_r+0x88>
  1031f4:	98c01917 	ldw	r3,100(r19)
  1031f8:	0137ffc4 	movi	r4,-8193
  1031fc:	10880014 	ori	r2,r2,8192
  103200:	1906703a 	and	r3,r3,r4
  103204:	9880030d 	sth	r2,12(r19)
  103208:	98c01915 	stw	r3,100(r19)
  10320c:	10c0020c 	andi	r3,r2,8
  103210:	18009a26 	beq	r3,zero,10347c <___vfprintf_internal_r+0x2f8>
  103214:	98c00417 	ldw	r3,16(r19)
  103218:	18009826 	beq	r3,zero,10347c <___vfprintf_internal_r+0x2f8>
  10321c:	1080068c 	andi	r2,r2,26
  103220:	10800298 	cmpnei	r2,r2,10
  103224:	10009d26 	beq	r2,zero,10349c <___vfprintf_internal_r+0x318>
  103228:	ddc02904 	addi	r23,sp,164
  10322c:	ddc01c15 	stw	r23,112(sp)
  103230:	d8001e15 	stw	zero,120(sp)
  103234:	d8001d15 	stw	zero,116(sp)
  103238:	d8000815 	stw	zero,32(sp)
  10323c:	d8000915 	stw	zero,36(sp)
  103240:	d8000a15 	stw	zero,40(sp)
  103244:	b811883a 	mov	r8,r23
  103248:	d8000c15 	stw	zero,48(sp)
  10324c:	d8001115 	stw	zero,68(sp)
  103250:	d8000415 	stw	zero,16(sp)
  103254:	a02d883a 	mov	r22,r20
  103258:	b0800007 	ldb	r2,0(r22)
  10325c:	1000a226 	beq	r2,zero,1034e8 <___vfprintf_internal_r+0x364>
  103260:	10800960 	cmpeqi	r2,r2,37
  103264:	1005351e 	bne	r2,zero,10473c <___vfprintf_internal_r+0x15b8>
  103268:	b021883a 	mov	r16,r22
  10326c:	00000206 	br	103278 <___vfprintf_internal_r+0xf4>
  103270:	18009326 	beq	r3,zero,1034c0 <___vfprintf_internal_r+0x33c>
  103274:	8821883a 	mov	r16,r17
  103278:	80800047 	ldb	r2,1(r16)
  10327c:	84400044 	addi	r17,r16,1
  103280:	10c00958 	cmpnei	r3,r2,37
  103284:	103ffa1e 	bne	r2,zero,103270 <___vfprintf_internal_r+0xec>
  103288:	8da5c83a 	sub	r18,r17,r22
  10328c:	90009626 	beq	r18,zero,1034e8 <___vfprintf_internal_r+0x364>
  103290:	d8c01e17 	ldw	r3,120(sp)
  103294:	d8801d17 	ldw	r2,116(sp)
  103298:	45800015 	stw	r22,0(r8)
  10329c:	1c87883a 	add	r3,r3,r18
  1032a0:	10800044 	addi	r2,r2,1
  1032a4:	d8801d15 	stw	r2,116(sp)
  1032a8:	44800115 	stw	r18,4(r8)
  1032ac:	d8c01e15 	stw	r3,120(sp)
  1032b0:	10800208 	cmpgei	r2,r2,8
  1032b4:	1000851e 	bne	r2,zero,1034cc <___vfprintf_internal_r+0x348>
  1032b8:	42000204 	addi	r8,r8,8
  1032bc:	d8c00417 	ldw	r3,16(sp)
  1032c0:	80800047 	ldb	r2,1(r16)
  1032c4:	1c87883a 	add	r3,r3,r18
  1032c8:	d8c00415 	stw	r3,16(sp)
  1032cc:	10008626 	beq	r2,zero,1034e8 <___vfprintf_internal_r+0x364>
  1032d0:	8a800047 	ldb	r10,1(r17)
  1032d4:	8d800044 	addi	r22,r17,1
  1032d8:	d8001545 	stb	zero,85(sp)
  1032dc:	0009883a 	mov	r4,zero
  1032e0:	000b883a 	mov	r5,zero
  1032e4:	02ffffc4 	movi	r11,-1
  1032e8:	0021883a 	mov	r16,zero
  1032ec:	0019883a 	mov	r12,zero
  1032f0:	b5800044 	addi	r22,r22,1
  1032f4:	5039883a 	mov	fp,r10
  1032f8:	e0bff804 	addi	r2,fp,-32
  1032fc:	10c01668 	cmpgeui	r3,r2,89
  103300:	18009d1e 	bne	r3,zero,103578 <___vfprintf_internal_r+0x3f4>
  103304:	100490ba 	slli	r2,r2,2
  103308:	00c00434 	movhi	r3,16
  10330c:	10c7883a 	add	r3,r2,r3
  103310:	188cc617 	ldw	r2,13080(r3)
  103314:	1000683a 	jmp	r2
  103318:	00103650 	cmplti	zero,zero,16601
  10331c:	00103578 	rdprs	zero,zero,16597
  103320:	00103578 	rdprs	zero,zero,16597
  103324:	00103644 	movi	zero,16601
  103328:	00103578 	rdprs	zero,zero,16597
  10332c:	00103578 	rdprs	zero,zero,16597
  103330:	00103578 	rdprs	zero,zero,16597
  103334:	00103578 	rdprs	zero,zero,16597
  103338:	00103578 	rdprs	zero,zero,16597
  10333c:	00103578 	rdprs	zero,zero,16597
  103340:	0010361c 	xori	zero,zero,16600
  103344:	0010360c 	andi	zero,zero,16600
  103348:	00103578 	rdprs	zero,zero,16597
  10334c:	001035f4 	movhi	zero,16599
  103350:	001035a8 	cmpgeui	zero,zero,16598
  103354:	00103578 	rdprs	zero,zero,16597
  103358:	0010359c 	xori	zero,zero,16598
  10335c:	00103540 	call	10354 <impure_data+0x324>
  103360:	00103540 	call	10354 <impure_data+0x324>
  103364:	00103540 	call	10354 <impure_data+0x324>
  103368:	00103540 	call	10354 <impure_data+0x324>
  10336c:	00103540 	call	10354 <impure_data+0x324>
  103370:	00103540 	call	10354 <impure_data+0x324>
  103374:	00103540 	call	10354 <impure_data+0x324>
  103378:	00103540 	call	10354 <impure_data+0x324>
  10337c:	00103540 	call	10354 <impure_data+0x324>
  103380:	00103578 	rdprs	zero,zero,16597
  103384:	00103578 	rdprs	zero,zero,16597
  103388:	00103578 	rdprs	zero,zero,16597
  10338c:	00103578 	rdprs	zero,zero,16597
  103390:	00103578 	rdprs	zero,zero,16597
  103394:	00103578 	rdprs	zero,zero,16597
  103398:	00103578 	rdprs	zero,zero,16597
  10339c:	00103578 	rdprs	zero,zero,16597
  1033a0:	00103578 	rdprs	zero,zero,16597
  1033a4:	00103578 	rdprs	zero,zero,16597
  1033a8:	00103b64 	muli	zero,zero,16621
  1033ac:	00103a84 	movi	zero,16618
  1033b0:	00103578 	rdprs	zero,zero,16597
  1033b4:	00103a84 	movi	zero,16618
  1033b8:	00103578 	rdprs	zero,zero,16597
  1033bc:	00103578 	rdprs	zero,zero,16597
  1033c0:	00103578 	rdprs	zero,zero,16597
  1033c4:	00103578 	rdprs	zero,zero,16597
  1033c8:	00103a78 	rdprs	zero,zero,16617
  1033cc:	00103578 	rdprs	zero,zero,16597
  1033d0:	00103578 	rdprs	zero,zero,16597
  1033d4:	00103a44 	movi	zero,16617
  1033d8:	00103578 	rdprs	zero,zero,16597
  1033dc:	00103578 	rdprs	zero,zero,16597
  1033e0:	00103578 	rdprs	zero,zero,16597
  1033e4:	00103578 	rdprs	zero,zero,16597
  1033e8:	00103578 	rdprs	zero,zero,16597
  1033ec:	00103c84 	movi	zero,16626
  1033f0:	00103578 	rdprs	zero,zero,16597
  1033f4:	00103578 	rdprs	zero,zero,16597
  1033f8:	00103c3c 	xorhi	zero,zero,16624
  1033fc:	00103578 	rdprs	zero,zero,16597
  103400:	00103578 	rdprs	zero,zero,16597
  103404:	00103578 	rdprs	zero,zero,16597
  103408:	00103578 	rdprs	zero,zero,16597
  10340c:	00103578 	rdprs	zero,zero,16597
  103410:	00103578 	rdprs	zero,zero,16597
  103414:	00103578 	rdprs	zero,zero,16597
  103418:	00103578 	rdprs	zero,zero,16597
  10341c:	00103578 	rdprs	zero,zero,16597
  103420:	00103578 	rdprs	zero,zero,16597
  103424:	001037d4 	movui	zero,16607
  103428:	00103760 	cmpeqi	zero,zero,16605
  10342c:	00103a84 	movi	zero,16618
  103430:	00103a84 	movi	zero,16618
  103434:	00103a84 	movi	zero,16618
  103438:	00103d54 	movui	zero,16629
  10343c:	00103760 	cmpeqi	zero,zero,16605
  103440:	00103578 	rdprs	zero,zero,16597
  103444:	00103578 	rdprs	zero,zero,16597
  103448:	00103d40 	call	103d4 <impure_data+0x3a4>
  10344c:	00103578 	rdprs	zero,zero,16597
  103450:	00103a04 	movi	zero,16616
  103454:	001039c4 	movi	zero,16615
  103458:	00103cc4 	movi	zero,16627
  10345c:	00103cb8 	rdprs	zero,zero,16626
  103460:	00103578 	rdprs	zero,zero,16597
  103464:	00103704 	movi	zero,16604
  103468:	00103578 	rdprs	zero,zero,16597
  10346c:	001036c4 	movi	zero,16603
  103470:	00103578 	rdprs	zero,zero,16597
  103474:	00103578 	rdprs	zero,zero,16597
  103478:	0010367c 	xorhi	zero,zero,16601
  10347c:	d9000517 	ldw	r4,20(sp)
  103480:	980b883a 	mov	r5,r19
  103484:	01053e40 	call	1053e4 <__swsetup_r>
  103488:	1007561e 	bne	r2,zero,1051e4 <___vfprintf_internal_r+0x2060>
  10348c:	9880030b 	ldhu	r2,12(r19)
  103490:	1080068c 	andi	r2,r2,26
  103494:	10800298 	cmpnei	r2,r2,10
  103498:	103f631e 	bne	r2,zero,103228 <___vfprintf_internal_r+0xa4>
  10349c:	9880038f 	ldh	r2,14(r19)
  1034a0:	103f6116 	blt	r2,zero,103228 <___vfprintf_internal_r+0xa4>
  1034a4:	d9c00617 	ldw	r7,24(sp)
  1034a8:	d9000517 	ldw	r4,20(sp)
  1034ac:	a00d883a 	mov	r6,r20
  1034b0:	980b883a 	mov	r5,r19
  1034b4:	01053240 	call	105324 <__sbprintf>
  1034b8:	d8800415 	stw	r2,16(sp)
  1034bc:	00001306 	br	10350c <___vfprintf_internal_r+0x388>
  1034c0:	8da5c83a 	sub	r18,r17,r22
  1034c4:	903f8226 	beq	r18,zero,1032d0 <___vfprintf_internal_r+0x14c>
  1034c8:	003f7106 	br	103290 <___vfprintf_internal_r+0x10c>
  1034cc:	d9000517 	ldw	r4,20(sp)
  1034d0:	d9801c04 	addi	r6,sp,112
  1034d4:	980b883a 	mov	r5,r19
  1034d8:	010a58c0 	call	10a58c <__sprint_r>
  1034dc:	1000081e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  1034e0:	b811883a 	mov	r8,r23
  1034e4:	003f7506 	br	1032bc <___vfprintf_internal_r+0x138>
  1034e8:	d8801e17 	ldw	r2,120(sp)
  1034ec:	10000426 	beq	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  1034f0:	d9000517 	ldw	r4,20(sp)
  1034f4:	d9801c04 	addi	r6,sp,112
  1034f8:	980b883a 	mov	r5,r19
  1034fc:	010a58c0 	call	10a58c <__sprint_r>
  103500:	9880030b 	ldhu	r2,12(r19)
  103504:	1080100c 	andi	r2,r2,64
  103508:	1007361e 	bne	r2,zero,1051e4 <___vfprintf_internal_r+0x2060>
  10350c:	d8800417 	ldw	r2,16(sp)
  103510:	dfc04217 	ldw	ra,264(sp)
  103514:	df004117 	ldw	fp,260(sp)
  103518:	ddc04017 	ldw	r23,256(sp)
  10351c:	dd803f17 	ldw	r22,252(sp)
  103520:	dd403e17 	ldw	r21,248(sp)
  103524:	dd003d17 	ldw	r20,244(sp)
  103528:	dcc03c17 	ldw	r19,240(sp)
  10352c:	dc803b17 	ldw	r18,236(sp)
  103530:	dc403a17 	ldw	r17,232(sp)
  103534:	dc003917 	ldw	r16,228(sp)
  103538:	dec04304 	addi	sp,sp,268
  10353c:	f800283a 	ret
  103540:	0021883a 	mov	r16,zero
  103544:	e0fff404 	addi	r3,fp,-48
  103548:	800490ba 	slli	r2,r16,2
  10354c:	b5800044 	addi	r22,r22,1
  103550:	b73fffc7 	ldb	fp,-1(r22)
  103554:	1421883a 	add	r16,r2,r16
  103558:	8421883a 	add	r16,r16,r16
  10355c:	1c21883a 	add	r16,r3,r16
  103560:	e0fff404 	addi	r3,fp,-48
  103564:	188002b0 	cmpltui	r2,r3,10
  103568:	103ff71e 	bne	r2,zero,103548 <___vfprintf_internal_r+0x3c4>
  10356c:	e0bff804 	addi	r2,fp,-32
  103570:	10c01668 	cmpgeui	r3,r2,89
  103574:	183f6326 	beq	r3,zero,103304 <___vfprintf_internal_r+0x180>
  103578:	21003fcc 	andi	r4,r4,255
  10357c:	2006741e 	bne	r4,zero,104f50 <___vfprintf_internal_r+0x1dcc>
  103580:	e03fd926 	beq	fp,zero,1034e8 <___vfprintf_internal_r+0x364>
  103584:	df001f05 	stb	fp,124(sp)
  103588:	d8001545 	stb	zero,85(sp)
  10358c:	05400044 	movi	r21,1
  103590:	05000044 	movi	r20,1
  103594:	dc401f04 	addi	r17,sp,124
  103598:	00009706 	br	1037f8 <___vfprintf_internal_r+0x674>
  10359c:	63002014 	ori	r12,r12,128
  1035a0:	b2800007 	ldb	r10,0(r22)
  1035a4:	003f5206 	br	1032f0 <___vfprintf_internal_r+0x16c>
  1035a8:	b7000007 	ldb	fp,0(r22)
  1035ac:	b0800044 	addi	r2,r22,1
  1035b0:	e0c00aa0 	cmpeqi	r3,fp,42
  1035b4:	1807491e 	bne	r3,zero,1052dc <___vfprintf_internal_r+0x2158>
  1035b8:	e0fff404 	addi	r3,fp,-48
  1035bc:	198002b0 	cmpltui	r6,r3,10
  1035c0:	102d883a 	mov	r22,r2
  1035c4:	0017883a 	mov	r11,zero
  1035c8:	303f4b26 	beq	r6,zero,1032f8 <___vfprintf_internal_r+0x174>
  1035cc:	580490ba 	slli	r2,r11,2
  1035d0:	b5800044 	addi	r22,r22,1
  1035d4:	b73fffc7 	ldb	fp,-1(r22)
  1035d8:	12d7883a 	add	r11,r2,r11
  1035dc:	5ad7883a 	add	r11,r11,r11
  1035e0:	58d7883a 	add	r11,r11,r3
  1035e4:	e0fff404 	addi	r3,fp,-48
  1035e8:	188002b0 	cmpltui	r2,r3,10
  1035ec:	103ff71e 	bne	r2,zero,1035cc <___vfprintf_internal_r+0x448>
  1035f0:	003f4106 	br	1032f8 <___vfprintf_internal_r+0x174>
  1035f4:	b7000003 	ldbu	fp,0(r22)
  1035f8:	e2803fcc 	andi	r10,fp,255
  1035fc:	5280201c 	xori	r10,r10,128
  103600:	63000114 	ori	r12,r12,4
  103604:	52bfe004 	addi	r10,r10,-128
  103608:	003f3906 	br	1032f0 <___vfprintf_internal_r+0x16c>
  10360c:	01000044 	movi	r4,1
  103610:	01400ac4 	movi	r5,43
  103614:	b2800007 	ldb	r10,0(r22)
  103618:	003f3506 	br	1032f0 <___vfprintf_internal_r+0x16c>
  10361c:	d8800617 	ldw	r2,24(sp)
  103620:	b7000003 	ldbu	fp,0(r22)
  103624:	14000017 	ldw	r16,0(r2)
  103628:	10800104 	addi	r2,r2,4
  10362c:	8004da16 	blt	r16,zero,104998 <___vfprintf_internal_r+0x1814>
  103630:	d8800615 	stw	r2,24(sp)
  103634:	e2803fcc 	andi	r10,fp,255
  103638:	5280201c 	xori	r10,r10,128
  10363c:	52bfe004 	addi	r10,r10,-128
  103640:	003f2b06 	br	1032f0 <___vfprintf_internal_r+0x16c>
  103644:	63000054 	ori	r12,r12,1
  103648:	b2800007 	ldb	r10,0(r22)
  10364c:	003f2806 	br	1032f0 <___vfprintf_internal_r+0x16c>
  103650:	28803fcc 	andi	r2,r5,255
  103654:	1080201c 	xori	r2,r2,128
  103658:	10bfe004 	addi	r2,r2,-128
  10365c:	b7000003 	ldbu	fp,0(r22)
  103660:	103ff41e 	bne	r2,zero,103634 <___vfprintf_internal_r+0x4b0>
  103664:	e2803fcc 	andi	r10,fp,255
  103668:	5280201c 	xori	r10,r10,128
  10366c:	01000044 	movi	r4,1
  103670:	01400804 	movi	r5,32
  103674:	52bfe004 	addi	r10,r10,-128
  103678:	003f1d06 	br	1032f0 <___vfprintf_internal_r+0x16c>
  10367c:	21003fcc 	andi	r4,r4,255
  103680:	2006b81e 	bne	r4,zero,105164 <___vfprintf_internal_r+0x1fe0>
  103684:	00800474 	movhi	r2,17
  103688:	108cc504 	addi	r2,r2,13076
  10368c:	d8800c15 	stw	r2,48(sp)
  103690:	6080080c 	andi	r2,r12,32
  103694:	10017026 	beq	r2,zero,103c58 <___vfprintf_internal_r+0xad4>
  103698:	d8800617 	ldw	r2,24(sp)
  10369c:	15400017 	ldw	r21,0(r2)
  1036a0:	15000117 	ldw	r20,4(r2)
  1036a4:	10800204 	addi	r2,r2,8
  1036a8:	d8800615 	stw	r2,24(sp)
  1036ac:	6080004c 	andi	r2,r12,1
  1036b0:	10000226 	beq	r2,zero,1036bc <___vfprintf_internal_r+0x538>
  1036b4:	ad04b03a 	or	r2,r21,r20
  1036b8:	1004aa1e 	bne	r2,zero,104964 <___vfprintf_internal_r+0x17e0>
  1036bc:	00800084 	movi	r2,2
  1036c0:	00018f06 	br	103d00 <___vfprintf_internal_r+0xb7c>
  1036c4:	21003fcc 	andi	r4,r4,255
  1036c8:	2006a41e 	bne	r4,zero,10515c <___vfprintf_internal_r+0x1fd8>
  1036cc:	6080080c 	andi	r2,r12,32
  1036d0:	1001b41e 	bne	r2,zero,103da4 <___vfprintf_internal_r+0xc20>
  1036d4:	d8800617 	ldw	r2,24(sp)
  1036d8:	60c0040c 	andi	r3,r12,16
  1036dc:	15400017 	ldw	r21,0(r2)
  1036e0:	10800104 	addi	r2,r2,4
  1036e4:	18016e1e 	bne	r3,zero,103ca0 <___vfprintf_internal_r+0xb1c>
  1036e8:	60c0100c 	andi	r3,r12,64
  1036ec:	1805a526 	beq	r3,zero,104d84 <___vfprintf_internal_r+0x1c00>
  1036f0:	d8800615 	stw	r2,24(sp)
  1036f4:	ad7fffcc 	andi	r21,r21,65535
  1036f8:	0029883a 	mov	r20,zero
  1036fc:	00800044 	movi	r2,1
  103700:	00017f06 	br	103d00 <___vfprintf_internal_r+0xb7c>
  103704:	d8800617 	ldw	r2,24(sp)
  103708:	d8001545 	stb	zero,85(sp)
  10370c:	14400017 	ldw	r17,0(r2)
  103710:	14800104 	addi	r18,r2,4
  103714:	8804ca26 	beq	r17,zero,104a40 <___vfprintf_internal_r+0x18bc>
  103718:	da000e15 	stw	r8,56(sp)
  10371c:	db000715 	stw	r12,28(sp)
  103720:	58bfffe0 	cmpeqi	r2,r11,-1
  103724:	10056c1e 	bne	r2,zero,104cd8 <___vfprintf_internal_r+0x1b54>
  103728:	580d883a 	mov	r6,r11
  10372c:	000b883a 	mov	r5,zero
  103730:	8809883a 	mov	r4,r17
  103734:	dac00615 	stw	r11,24(sp)
  103738:	01088700 	call	108870 <memchr>
  10373c:	dac00617 	ldw	r11,24(sp)
  103740:	db000717 	ldw	r12,28(sp)
  103744:	da000e17 	ldw	r8,56(sp)
  103748:	10066c26 	beq	r2,zero,1050fc <___vfprintf_internal_r+0x1f78>
  10374c:	1469c83a 	sub	r20,r2,r17
  103750:	a02b883a 	mov	r21,r20
  103754:	a005fc16 	blt	r20,zero,104f48 <___vfprintf_internal_r+0x1dc4>
  103758:	dc800615 	stw	r18,24(sp)
  10375c:	00002606 	br	1037f8 <___vfprintf_internal_r+0x674>
  103760:	21003fcc 	andi	r4,r4,255
  103764:	20067b1e 	bne	r4,zero,105154 <___vfprintf_internal_r+0x1fd0>
  103768:	6080080c 	andi	r2,r12,32
  10376c:	10017f1e 	bne	r2,zero,103d6c <___vfprintf_internal_r+0xbe8>
  103770:	d8800617 	ldw	r2,24(sp)
  103774:	60c0040c 	andi	r3,r12,16
  103778:	10800104 	addi	r2,r2,4
  10377c:	1801001e 	bne	r3,zero,103b80 <___vfprintf_internal_r+0x9fc>
  103780:	60c0100c 	andi	r3,r12,64
  103784:	1800fe26 	beq	r3,zero,103b80 <___vfprintf_internal_r+0x9fc>
  103788:	d8c00617 	ldw	r3,24(sp)
  10378c:	d8800615 	stw	r2,24(sp)
  103790:	1d40000f 	ldh	r21,0(r3)
  103794:	a829d7fa 	srai	r20,r21,31
  103798:	a005883a 	mov	r2,r20
  10379c:	1000fe16 	blt	r2,zero,103b98 <___vfprintf_internal_r+0xa14>
  1037a0:	58bfffd8 	cmpnei	r2,r11,-1
  1037a4:	db401543 	ldbu	r13,85(sp)
  1037a8:	10018526 	beq	r2,zero,103dc0 <___vfprintf_internal_r+0xc3c>
  1037ac:	00ffdfc4 	movi	r3,-129
  1037b0:	ad04b03a 	or	r2,r21,r20
  1037b4:	60d8703a 	and	r12,r12,r3
  1037b8:	1001811e 	bne	r2,zero,103dc0 <___vfprintf_internal_r+0xc3c>
  1037bc:	5801831e 	bne	r11,zero,103dcc <___vfprintf_internal_r+0xc48>
  1037c0:	6025883a 	mov	r18,r12
  1037c4:	0017883a 	mov	r11,zero
  1037c8:	0029883a 	mov	r20,zero
  1037cc:	b823883a 	mov	r17,r23
  1037d0:	00018306 	br	103de0 <___vfprintf_internal_r+0xc5c>
  1037d4:	d8c00617 	ldw	r3,24(sp)
  1037d8:	d8001545 	stb	zero,85(sp)
  1037dc:	05400044 	movi	r21,1
  1037e0:	18800017 	ldw	r2,0(r3)
  1037e4:	18c00104 	addi	r3,r3,4
  1037e8:	d8c00615 	stw	r3,24(sp)
  1037ec:	d8801f05 	stb	r2,124(sp)
  1037f0:	05000044 	movi	r20,1
  1037f4:	dc401f04 	addi	r17,sp,124
  1037f8:	6025883a 	mov	r18,r12
  1037fc:	0017883a 	mov	r11,zero
  103800:	d8000715 	stw	zero,28(sp)
  103804:	9380008c 	andi	r14,r18,2
  103808:	70000126 	beq	r14,zero,103810 <___vfprintf_internal_r+0x68c>
  10380c:	ad400084 	addi	r21,r21,2
  103810:	9340210c 	andi	r13,r18,132
  103814:	d8c01e17 	ldw	r3,120(sp)
  103818:	6800021e 	bne	r13,zero,103824 <___vfprintf_internal_r+0x6a0>
  10381c:	854fc83a 	sub	r7,r16,r21
  103820:	01c2ce16 	blt	zero,r7,10435c <___vfprintf_internal_r+0x11d8>
  103824:	d8801547 	ldb	r2,85(sp)
  103828:	10000c26 	beq	r2,zero,10385c <___vfprintf_internal_r+0x6d8>
  10382c:	d8801d17 	ldw	r2,116(sp)
  103830:	d9001544 	addi	r4,sp,85
  103834:	18c00044 	addi	r3,r3,1
  103838:	10800044 	addi	r2,r2,1
  10383c:	41000015 	stw	r4,0(r8)
  103840:	01000044 	movi	r4,1
  103844:	d8801d15 	stw	r2,116(sp)
  103848:	41000115 	stw	r4,4(r8)
  10384c:	d8c01e15 	stw	r3,120(sp)
  103850:	10800208 	cmpgei	r2,r2,8
  103854:	1002fb1e 	bne	r2,zero,104444 <___vfprintf_internal_r+0x12c0>
  103858:	42000204 	addi	r8,r8,8
  10385c:	70000c26 	beq	r14,zero,103890 <___vfprintf_internal_r+0x70c>
  103860:	d8801d17 	ldw	r2,116(sp)
  103864:	d9001584 	addi	r4,sp,86
  103868:	18c00084 	addi	r3,r3,2
  10386c:	10800044 	addi	r2,r2,1
  103870:	41000015 	stw	r4,0(r8)
  103874:	01000084 	movi	r4,2
  103878:	d8801d15 	stw	r2,116(sp)
  10387c:	41000115 	stw	r4,4(r8)
  103880:	d8c01e15 	stw	r3,120(sp)
  103884:	10800208 	cmpgei	r2,r2,8
  103888:	1002fc1e 	bne	r2,zero,10447c <___vfprintf_internal_r+0x12f8>
  10388c:	42000204 	addi	r8,r8,8
  103890:	6b402018 	cmpnei	r13,r13,128
  103894:	6801cf26 	beq	r13,zero,103fd4 <___vfprintf_internal_r+0xe50>
  103898:	5d0fc83a 	sub	r7,r11,r20
  10389c:	01c20616 	blt	zero,r7,1040b8 <___vfprintf_internal_r+0xf34>
  1038a0:	9080400c 	andi	r2,r18,256
  1038a4:	10017c1e 	bne	r2,zero,103e98 <___vfprintf_internal_r+0xd14>
  1038a8:	d8801d17 	ldw	r2,116(sp)
  1038ac:	1d07883a 	add	r3,r3,r20
  1038b0:	44400015 	stw	r17,0(r8)
  1038b4:	10800044 	addi	r2,r2,1
  1038b8:	d8801d15 	stw	r2,116(sp)
  1038bc:	45000115 	stw	r20,4(r8)
  1038c0:	d8c01e15 	stw	r3,120(sp)
  1038c4:	10800208 	cmpgei	r2,r2,8
  1038c8:	1002571e 	bne	r2,zero,104228 <___vfprintf_internal_r+0x10a4>
  1038cc:	42000204 	addi	r8,r8,8
  1038d0:	9480010c 	andi	r18,r18,4
  1038d4:	90000226 	beq	r18,zero,1038e0 <___vfprintf_internal_r+0x75c>
  1038d8:	8563c83a 	sub	r17,r16,r21
  1038dc:	04400916 	blt	zero,r17,103904 <___vfprintf_internal_r+0x780>
  1038e0:	8540010e 	bge	r16,r21,1038e8 <___vfprintf_internal_r+0x764>
  1038e4:	a821883a 	mov	r16,r21
  1038e8:	d8800417 	ldw	r2,16(sp)
  1038ec:	1405883a 	add	r2,r2,r16
  1038f0:	d8800415 	stw	r2,16(sp)
  1038f4:	1802241e 	bne	r3,zero,104188 <___vfprintf_internal_r+0x1004>
  1038f8:	d8001d15 	stw	zero,116(sp)
  1038fc:	b811883a 	mov	r8,r23
  103900:	003e5506 	br	103258 <___vfprintf_internal_r+0xd4>
  103904:	03000474 	movhi	r12,17
  103908:	89000450 	cmplti	r4,r17,17
  10390c:	630cd084 	addi	r12,r12,13122
  103910:	d8801d17 	ldw	r2,116(sp)
  103914:	20001c1e 	bne	r4,zero,103988 <___vfprintf_internal_r+0x804>
  103918:	04800404 	movi	r18,16
  10391c:	dd000517 	ldw	r20,20(sp)
  103920:	6039883a 	mov	fp,r12
  103924:	00000406 	br	103938 <___vfprintf_internal_r+0x7b4>
  103928:	8c7ffc04 	addi	r17,r17,-16
  10392c:	89000448 	cmpgei	r4,r17,17
  103930:	42000204 	addi	r8,r8,8
  103934:	20001326 	beq	r4,zero,103984 <___vfprintf_internal_r+0x800>
  103938:	10800044 	addi	r2,r2,1
  10393c:	18c00404 	addi	r3,r3,16
  103940:	47000015 	stw	fp,0(r8)
  103944:	44800115 	stw	r18,4(r8)
  103948:	d8c01e15 	stw	r3,120(sp)
  10394c:	d8801d15 	stw	r2,116(sp)
  103950:	11000208 	cmpgei	r4,r2,8
  103954:	203ff426 	beq	r4,zero,103928 <___vfprintf_internal_r+0x7a4>
  103958:	d9801c04 	addi	r6,sp,112
  10395c:	980b883a 	mov	r5,r19
  103960:	a009883a 	mov	r4,r20
  103964:	010a58c0 	call	10a58c <__sprint_r>
  103968:	103ee51e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  10396c:	8c7ffc04 	addi	r17,r17,-16
  103970:	89000448 	cmpgei	r4,r17,17
  103974:	d8c01e17 	ldw	r3,120(sp)
  103978:	d8801d17 	ldw	r2,116(sp)
  10397c:	b811883a 	mov	r8,r23
  103980:	203fed1e 	bne	r4,zero,103938 <___vfprintf_internal_r+0x7b4>
  103984:	e019883a 	mov	r12,fp
  103988:	10800044 	addi	r2,r2,1
  10398c:	1c47883a 	add	r3,r3,r17
  103990:	d8801d15 	stw	r2,116(sp)
  103994:	43000015 	stw	r12,0(r8)
  103998:	44400115 	stw	r17,4(r8)
  10399c:	d8c01e15 	stw	r3,120(sp)
  1039a0:	10800210 	cmplti	r2,r2,8
  1039a4:	103fce1e 	bne	r2,zero,1038e0 <___vfprintf_internal_r+0x75c>
  1039a8:	d9000517 	ldw	r4,20(sp)
  1039ac:	d9801c04 	addi	r6,sp,112
  1039b0:	980b883a 	mov	r5,r19
  1039b4:	010a58c0 	call	10a58c <__sprint_r>
  1039b8:	103ed11e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  1039bc:	d8c01e17 	ldw	r3,120(sp)
  1039c0:	003fc706 	br	1038e0 <___vfprintf_internal_r+0x75c>
  1039c4:	21003fcc 	andi	r4,r4,255
  1039c8:	2005de1e 	bne	r4,zero,105144 <___vfprintf_internal_r+0x1fc0>
  1039cc:	6080080c 	andi	r2,r12,32
  1039d0:	1000ed1e 	bne	r2,zero,103d88 <___vfprintf_internal_r+0xc04>
  1039d4:	d8800617 	ldw	r2,24(sp)
  1039d8:	60c0040c 	andi	r3,r12,16
  1039dc:	15400017 	ldw	r21,0(r2)
  1039e0:	10800104 	addi	r2,r2,4
  1039e4:	18001e1e 	bne	r3,zero,103a60 <___vfprintf_internal_r+0x8dc>
  1039e8:	60c0100c 	andi	r3,r12,64
  1039ec:	1804e126 	beq	r3,zero,104d74 <___vfprintf_internal_r+0x1bf0>
  1039f0:	d8800615 	stw	r2,24(sp)
  1039f4:	ad7fffcc 	andi	r21,r21,65535
  1039f8:	0029883a 	mov	r20,zero
  1039fc:	0005883a 	mov	r2,zero
  103a00:	0000bf06 	br	103d00 <___vfprintf_internal_r+0xb7c>
  103a04:	21003fcc 	andi	r4,r4,255
  103a08:	2005d01e 	bne	r4,zero,10514c <___vfprintf_internal_r+0x1fc8>
  103a0c:	d9000617 	ldw	r4,24(sp)
  103a10:	6080080c 	andi	r2,r12,32
  103a14:	20c00104 	addi	r3,r4,4
  103a18:	1003d81e 	bne	r2,zero,10497c <___vfprintf_internal_r+0x17f8>
  103a1c:	6080040c 	andi	r2,r12,16
  103a20:	1004321e 	bne	r2,zero,104aec <___vfprintf_internal_r+0x1968>
  103a24:	6300100c 	andi	r12,r12,64
  103a28:	60043026 	beq	r12,zero,104aec <___vfprintf_internal_r+0x1968>
  103a2c:	d8800617 	ldw	r2,24(sp)
  103a30:	d8c00615 	stw	r3,24(sp)
  103a34:	d8c00417 	ldw	r3,16(sp)
  103a38:	10800017 	ldw	r2,0(r2)
  103a3c:	10c0000d 	sth	r3,0(r2)
  103a40:	003e0506 	br	103258 <___vfprintf_internal_r+0xd4>
  103a44:	21003fcc 	andi	r4,r4,255
  103a48:	2005c81e 	bne	r4,zero,10516c <___vfprintf_internal_r+0x1fe8>
  103a4c:	6080080c 	andi	r2,r12,32
  103a50:	63000414 	ori	r12,r12,16
  103a54:	1000cc1e 	bne	r2,zero,103d88 <___vfprintf_internal_r+0xc04>
  103a58:	d8800617 	ldw	r2,24(sp)
  103a5c:	10800104 	addi	r2,r2,4
  103a60:	d8c00617 	ldw	r3,24(sp)
  103a64:	0029883a 	mov	r20,zero
  103a68:	d8800615 	stw	r2,24(sp)
  103a6c:	1d400017 	ldw	r21,0(r3)
  103a70:	0005883a 	mov	r2,zero
  103a74:	0000a206 	br	103d00 <___vfprintf_internal_r+0xb7c>
  103a78:	63000214 	ori	r12,r12,8
  103a7c:	b2800007 	ldb	r10,0(r22)
  103a80:	003e1b06 	br	1032f0 <___vfprintf_internal_r+0x16c>
  103a84:	21003fcc 	andi	r4,r4,255
  103a88:	2005bc1e 	bne	r4,zero,10517c <___vfprintf_internal_r+0x1ff8>
  103a8c:	d8c00617 	ldw	r3,24(sp)
  103a90:	00a00034 	movhi	r2,32768
  103a94:	10bfffc4 	addi	r2,r2,-1
  103a98:	1d000117 	ldw	r20,4(r3)
  103a9c:	1c800017 	ldw	r18,0(r3)
  103aa0:	01dffc34 	movhi	r7,32752
  103aa4:	a0a2703a 	and	r17,r20,r2
  103aa8:	01bfffc4 	movi	r6,-1
  103aac:	18800204 	addi	r2,r3,8
  103ab0:	39ffffc4 	addi	r7,r7,-1
  103ab4:	9009883a 	mov	r4,r18
  103ab8:	880b883a 	mov	r5,r17
  103abc:	da000f15 	stw	r8,60(sp)
  103ac0:	dac00e15 	stw	r11,56(sp)
  103ac4:	db000715 	stw	r12,28(sp)
  103ac8:	dd000a15 	stw	r20,40(sp)
  103acc:	dc800915 	stw	r18,36(sp)
  103ad0:	d8800615 	stw	r2,24(sp)
  103ad4:	010f68c0 	call	10f68c <__unorddf2>
  103ad8:	db000717 	ldw	r12,28(sp)
  103adc:	dac00e17 	ldw	r11,56(sp)
  103ae0:	da000f17 	ldw	r8,60(sp)
  103ae4:	1003191e 	bne	r2,zero,10474c <___vfprintf_internal_r+0x15c8>
  103ae8:	01dffc34 	movhi	r7,32752
  103aec:	01bfffc4 	movi	r6,-1
  103af0:	39ffffc4 	addi	r7,r7,-1
  103af4:	9009883a 	mov	r4,r18
  103af8:	880b883a 	mov	r5,r17
  103afc:	010e4500 	call	10e450 <__ledf2>
  103b00:	db000717 	ldw	r12,28(sp)
  103b04:	dac00e17 	ldw	r11,56(sp)
  103b08:	da000f17 	ldw	r8,60(sp)
  103b0c:	00830f0e 	bge	zero,r2,10474c <___vfprintf_internal_r+0x15c8>
  103b10:	000d883a 	mov	r6,zero
  103b14:	000f883a 	mov	r7,zero
  103b18:	9009883a 	mov	r4,r18
  103b1c:	a00b883a 	mov	r5,r20
  103b20:	da000e15 	stw	r8,56(sp)
  103b24:	010e4500 	call	10e450 <__ledf2>
  103b28:	db000717 	ldw	r12,28(sp)
  103b2c:	da000e17 	ldw	r8,56(sp)
  103b30:	1004e716 	blt	r2,zero,104ed0 <___vfprintf_internal_r+0x1d4c>
  103b34:	db401543 	ldbu	r13,85(sp)
  103b38:	e0801210 	cmplti	r2,fp,72
  103b3c:	1004d11e 	bne	r2,zero,104e84 <___vfprintf_internal_r+0x1d00>
  103b40:	04400474 	movhi	r17,17
  103b44:	8c4cbd04 	addi	r17,r17,13044
  103b48:	04bfdfc4 	movi	r18,-129
  103b4c:	64a4703a 	and	r18,r12,r18
  103b50:	054000c4 	movi	r21,3
  103b54:	050000c4 	movi	r20,3
  103b58:	0017883a 	mov	r11,zero
  103b5c:	d8000715 	stw	zero,28(sp)
  103b60:	0000a306 	br	103df0 <___vfprintf_internal_r+0xc6c>
  103b64:	21003fcc 	andi	r4,r4,255
  103b68:	2005821e 	bne	r4,zero,105174 <___vfprintf_internal_r+0x1ff0>
  103b6c:	6080080c 	andi	r2,r12,32
  103b70:	63000414 	ori	r12,r12,16
  103b74:	10007d1e 	bne	r2,zero,103d6c <___vfprintf_internal_r+0xbe8>
  103b78:	d8800617 	ldw	r2,24(sp)
  103b7c:	10800104 	addi	r2,r2,4
  103b80:	d8c00617 	ldw	r3,24(sp)
  103b84:	1d400017 	ldw	r21,0(r3)
  103b88:	d8800615 	stw	r2,24(sp)
  103b8c:	a829d7fa 	srai	r20,r21,31
  103b90:	a005883a 	mov	r2,r20
  103b94:	103f020e 	bge	r2,zero,1037a0 <___vfprintf_internal_r+0x61c>
  103b98:	056bc83a 	sub	r21,zero,r21
  103b9c:	a804c03a 	cmpne	r2,r21,zero
  103ba0:	0529c83a 	sub	r20,zero,r20
  103ba4:	a0a9c83a 	sub	r20,r20,r2
  103ba8:	00800b44 	movi	r2,45
  103bac:	d8801545 	stb	r2,85(sp)
  103bb0:	58ffffe0 	cmpeqi	r3,r11,-1
  103bb4:	03400b44 	movi	r13,45
  103bb8:	00800044 	movi	r2,1
  103bbc:	18005426 	beq	r3,zero,103d10 <___vfprintf_internal_r+0xb8c>
  103bc0:	10c00060 	cmpeqi	r3,r2,1
  103bc4:	18007e1e 	bne	r3,zero,103dc0 <___vfprintf_internal_r+0xc3c>
  103bc8:	108000a0 	cmpeqi	r2,r2,2
  103bcc:	1002371e 	bne	r2,zero,1044ac <___vfprintf_internal_r+0x1328>
  103bd0:	b807883a 	mov	r3,r23
  103bd4:	00000106 	br	103bdc <___vfprintf_internal_r+0xa58>
  103bd8:	8807883a 	mov	r3,r17
  103bdc:	a808d0fa 	srli	r4,r21,3
  103be0:	a00a977a 	slli	r5,r20,29
  103be4:	a028d0fa 	srli	r20,r20,3
  103be8:	ad4001cc 	andi	r21,r21,7
  103bec:	a8800c04 	addi	r2,r21,48
  103bf0:	292ab03a 	or	r21,r5,r4
  103bf4:	18bfffc5 	stb	r2,-1(r3)
  103bf8:	ad08b03a 	or	r4,r21,r20
  103bfc:	1c7fffc4 	addi	r17,r3,-1
  103c00:	203ff51e 	bne	r4,zero,103bd8 <___vfprintf_internal_r+0xa54>
  103c04:	6100004c 	andi	r4,r12,1
  103c08:	2000a026 	beq	r4,zero,103e8c <___vfprintf_internal_r+0xd08>
  103c0c:	10803fcc 	andi	r2,r2,255
  103c10:	1080201c 	xori	r2,r2,128
  103c14:	10bfe004 	addi	r2,r2,-128
  103c18:	10800c18 	cmpnei	r2,r2,48
  103c1c:	10009b26 	beq	r2,zero,103e8c <___vfprintf_internal_r+0xd08>
  103c20:	18ffff84 	addi	r3,r3,-2
  103c24:	00800c04 	movi	r2,48
  103c28:	88bfffc5 	stb	r2,-1(r17)
  103c2c:	b8e9c83a 	sub	r20,r23,r3
  103c30:	6025883a 	mov	r18,r12
  103c34:	1823883a 	mov	r17,r3
  103c38:	00006906 	br	103de0 <___vfprintf_internal_r+0xc5c>
  103c3c:	21003fcc 	andi	r4,r4,255
  103c40:	20053e1e 	bne	r4,zero,10513c <___vfprintf_internal_r+0x1fb8>
  103c44:	00800474 	movhi	r2,17
  103c48:	108cc004 	addi	r2,r2,13056
  103c4c:	d8800c15 	stw	r2,48(sp)
  103c50:	6080080c 	andi	r2,r12,32
  103c54:	103e901e 	bne	r2,zero,103698 <___vfprintf_internal_r+0x514>
  103c58:	d8c00617 	ldw	r3,24(sp)
  103c5c:	6080040c 	andi	r2,r12,16
  103c60:	1d400017 	ldw	r21,0(r3)
  103c64:	18c00104 	addi	r3,r3,4
  103c68:	d8c00615 	stw	r3,24(sp)
  103c6c:	1002b11e 	bne	r2,zero,104734 <___vfprintf_internal_r+0x15b0>
  103c70:	6080100c 	andi	r2,r12,64
  103c74:	1002af26 	beq	r2,zero,104734 <___vfprintf_internal_r+0x15b0>
  103c78:	ad7fffcc 	andi	r21,r21,65535
  103c7c:	0029883a 	mov	r20,zero
  103c80:	003e8a06 	br	1036ac <___vfprintf_internal_r+0x528>
  103c84:	21003fcc 	andi	r4,r4,255
  103c88:	20053e1e 	bne	r4,zero,105184 <___vfprintf_internal_r+0x2000>
  103c8c:	6080080c 	andi	r2,r12,32
  103c90:	63000414 	ori	r12,r12,16
  103c94:	1000431e 	bne	r2,zero,103da4 <___vfprintf_internal_r+0xc20>
  103c98:	d8800617 	ldw	r2,24(sp)
  103c9c:	10800104 	addi	r2,r2,4
  103ca0:	d8c00617 	ldw	r3,24(sp)
  103ca4:	0029883a 	mov	r20,zero
  103ca8:	d8800615 	stw	r2,24(sp)
  103cac:	1d400017 	ldw	r21,0(r3)
  103cb0:	00800044 	movi	r2,1
  103cb4:	00001206 	br	103d00 <___vfprintf_internal_r+0xb7c>
  103cb8:	63000814 	ori	r12,r12,32
  103cbc:	b2800007 	ldb	r10,0(r22)
  103cc0:	003d8b06 	br	1032f0 <___vfprintf_internal_r+0x16c>
  103cc4:	d8c00617 	ldw	r3,24(sp)
  103cc8:	00800c04 	movi	r2,48
  103ccc:	d8801585 	stb	r2,86(sp)
  103cd0:	00801e04 	movi	r2,120
  103cd4:	01000474 	movhi	r4,17
  103cd8:	d88015c5 	stb	r2,87(sp)
  103cdc:	1d400017 	ldw	r21,0(r3)
  103ce0:	18800104 	addi	r2,r3,4
  103ce4:	d8800615 	stw	r2,24(sp)
  103ce8:	208cc504 	addi	r2,r4,13076
  103cec:	d8800c15 	stw	r2,48(sp)
  103cf0:	0029883a 	mov	r20,zero
  103cf4:	63000094 	ori	r12,r12,2
  103cf8:	00800084 	movi	r2,2
  103cfc:	07001e04 	movi	fp,120
  103d00:	d8001545 	stb	zero,85(sp)
  103d04:	58ffffe0 	cmpeqi	r3,r11,-1
  103d08:	001b883a 	mov	r13,zero
  103d0c:	183fac1e 	bne	r3,zero,103bc0 <___vfprintf_internal_r+0xa3c>
  103d10:	04bfdfc4 	movi	r18,-129
  103d14:	ad06b03a 	or	r3,r21,r20
  103d18:	64a4703a 	and	r18,r12,r18
  103d1c:	18018d1e 	bne	r3,zero,104354 <___vfprintf_internal_r+0x11d0>
  103d20:	5803bb1e 	bne	r11,zero,104c10 <___vfprintf_internal_r+0x1a8c>
  103d24:	103ea71e 	bne	r2,zero,1037c4 <___vfprintf_internal_r+0x640>
  103d28:	6500004c 	andi	r20,r12,1
  103d2c:	a0028526 	beq	r20,zero,104744 <___vfprintf_internal_r+0x15c0>
  103d30:	00800c04 	movi	r2,48
  103d34:	d88028c5 	stb	r2,163(sp)
  103d38:	dc4028c4 	addi	r17,sp,163
  103d3c:	00002806 	br	103de0 <___vfprintf_internal_r+0xc5c>
  103d40:	b2800007 	ldb	r10,0(r22)
  103d44:	50801b18 	cmpnei	r2,r10,108
  103d48:	10032c26 	beq	r2,zero,1049fc <___vfprintf_internal_r+0x1878>
  103d4c:	63000414 	ori	r12,r12,16
  103d50:	003d6706 	br	1032f0 <___vfprintf_internal_r+0x16c>
  103d54:	63001014 	ori	r12,r12,64
  103d58:	b2800007 	ldb	r10,0(r22)
  103d5c:	003d6406 	br	1032f0 <___vfprintf_internal_r+0x16c>
  103d60:	d9000517 	ldw	r4,20(sp)
  103d64:	01073fc0 	call	1073fc <__sinit>
  103d68:	003d1f06 	br	1031e8 <___vfprintf_internal_r+0x64>
  103d6c:	d8c00617 	ldw	r3,24(sp)
  103d70:	18800117 	ldw	r2,4(r3)
  103d74:	1d400017 	ldw	r21,0(r3)
  103d78:	18c00204 	addi	r3,r3,8
  103d7c:	d8c00615 	stw	r3,24(sp)
  103d80:	1029883a 	mov	r20,r2
  103d84:	003e8506 	br	10379c <___vfprintf_internal_r+0x618>
  103d88:	d8c00617 	ldw	r3,24(sp)
  103d8c:	0005883a 	mov	r2,zero
  103d90:	1d400017 	ldw	r21,0(r3)
  103d94:	1d000117 	ldw	r20,4(r3)
  103d98:	18c00204 	addi	r3,r3,8
  103d9c:	d8c00615 	stw	r3,24(sp)
  103da0:	003fd706 	br	103d00 <___vfprintf_internal_r+0xb7c>
  103da4:	d8c00617 	ldw	r3,24(sp)
  103da8:	00800044 	movi	r2,1
  103dac:	1d400017 	ldw	r21,0(r3)
  103db0:	1d000117 	ldw	r20,4(r3)
  103db4:	18c00204 	addi	r3,r3,8
  103db8:	d8c00615 	stw	r3,24(sp)
  103dbc:	003fd006 	br	103d00 <___vfprintf_internal_r+0xb7c>
  103dc0:	a000111e 	bne	r20,zero,103e08 <___vfprintf_internal_r+0xc84>
  103dc4:	a88002a8 	cmpgeui	r2,r21,10
  103dc8:	10000f1e 	bne	r2,zero,103e08 <___vfprintf_internal_r+0xc84>
  103dcc:	ad400c04 	addi	r21,r21,48
  103dd0:	dd4028c5 	stb	r21,163(sp)
  103dd4:	6025883a 	mov	r18,r12
  103dd8:	05000044 	movi	r20,1
  103ddc:	dc4028c4 	addi	r17,sp,163
  103de0:	582b883a 	mov	r21,r11
  103de4:	5d00010e 	bge	r11,r20,103dec <___vfprintf_internal_r+0xc68>
  103de8:	a02b883a 	mov	r21,r20
  103dec:	d8000715 	stw	zero,28(sp)
  103df0:	6b403fcc 	andi	r13,r13,255
  103df4:	6b40201c 	xori	r13,r13,128
  103df8:	6b7fe004 	addi	r13,r13,-128
  103dfc:	683e8126 	beq	r13,zero,103804 <___vfprintf_internal_r+0x680>
  103e00:	ad400044 	addi	r21,r21,1
  103e04:	003e7f06 	br	103804 <___vfprintf_internal_r+0x680>
  103e08:	dc000e15 	stw	r16,56(sp)
  103e0c:	b823883a 	mov	r17,r23
  103e10:	a021883a 	mov	r16,r20
  103e14:	db000715 	stw	r12,28(sp)
  103e18:	9829883a 	mov	r20,r19
  103e1c:	dac00f15 	stw	r11,60(sp)
  103e20:	4025883a 	mov	r18,r8
  103e24:	6827883a 	mov	r19,r13
  103e28:	00000206 	br	103e34 <___vfprintf_internal_r+0xcb0>
  103e2c:	102b883a 	mov	r21,r2
  103e30:	1821883a 	mov	r16,r3
  103e34:	a809883a 	mov	r4,r21
  103e38:	800b883a 	mov	r5,r16
  103e3c:	01800284 	movi	r6,10
  103e40:	000f883a 	mov	r7,zero
  103e44:	010ca140 	call	10ca14 <__umoddi3>
  103e48:	10800c04 	addi	r2,r2,48
  103e4c:	8c7fffc4 	addi	r17,r17,-1
  103e50:	a809883a 	mov	r4,r21
  103e54:	800b883a 	mov	r5,r16
  103e58:	88800005 	stb	r2,0(r17)
  103e5c:	01800284 	movi	r6,10
  103e60:	000f883a 	mov	r7,zero
  103e64:	010c3f80 	call	10c3f8 <__udivdi3>
  103e68:	803ff01e 	bne	r16,zero,103e2c <___vfprintf_internal_r+0xca8>
  103e6c:	ad4002a8 	cmpgeui	r21,r21,10
  103e70:	a83fee1e 	bne	r21,zero,103e2c <___vfprintf_internal_r+0xca8>
  103e74:	db000717 	ldw	r12,28(sp)
  103e78:	dc000e17 	ldw	r16,56(sp)
  103e7c:	dac00f17 	ldw	r11,60(sp)
  103e80:	981b883a 	mov	r13,r19
  103e84:	9011883a 	mov	r8,r18
  103e88:	a027883a 	mov	r19,r20
  103e8c:	bc69c83a 	sub	r20,r23,r17
  103e90:	6025883a 	mov	r18,r12
  103e94:	003fd206 	br	103de0 <___vfprintf_internal_r+0xc5c>
  103e98:	e2801990 	cmplti	r10,fp,102
  103e9c:	5000ea1e 	bne	r10,zero,104248 <___vfprintf_internal_r+0x10c4>
  103ea0:	d9000917 	ldw	r4,36(sp)
  103ea4:	d9400a17 	ldw	r5,40(sp)
  103ea8:	000d883a 	mov	r6,zero
  103eac:	000f883a 	mov	r7,zero
  103eb0:	da000f15 	stw	r8,60(sp)
  103eb4:	d8c00e15 	stw	r3,56(sp)
  103eb8:	010e2e00 	call	10e2e0 <__eqdf2>
  103ebc:	d8c00e17 	ldw	r3,56(sp)
  103ec0:	da000f17 	ldw	r8,60(sp)
  103ec4:	1001891e 	bne	r2,zero,1044ec <___vfprintf_internal_r+0x1368>
  103ec8:	d8801d17 	ldw	r2,116(sp)
  103ecc:	01000474 	movhi	r4,17
  103ed0:	210ccc04 	addi	r4,r4,13104
  103ed4:	10800044 	addi	r2,r2,1
  103ed8:	18c00044 	addi	r3,r3,1
  103edc:	41000015 	stw	r4,0(r8)
  103ee0:	01000044 	movi	r4,1
  103ee4:	d8801d15 	stw	r2,116(sp)
  103ee8:	41000115 	stw	r4,4(r8)
  103eec:	d8c01e15 	stw	r3,120(sp)
  103ef0:	10800208 	cmpgei	r2,r2,8
  103ef4:	1003351e 	bne	r2,zero,104bcc <___vfprintf_internal_r+0x1a48>
  103ef8:	42000204 	addi	r8,r8,8
  103efc:	d8801617 	ldw	r2,88(sp)
  103f00:	d8c00817 	ldw	r3,32(sp)
  103f04:	10c00416 	blt	r2,r3,103f18 <___vfprintf_internal_r+0xd94>
  103f08:	9080004c 	andi	r2,r18,1
  103f0c:	1000021e 	bne	r2,zero,103f18 <___vfprintf_internal_r+0xd94>
  103f10:	d8c01e17 	ldw	r3,120(sp)
  103f14:	003e6e06 	br	1038d0 <___vfprintf_internal_r+0x74c>
  103f18:	d8800d17 	ldw	r2,52(sp)
  103f1c:	d8c01e17 	ldw	r3,120(sp)
  103f20:	d9000b17 	ldw	r4,44(sp)
  103f24:	40800015 	stw	r2,0(r8)
  103f28:	d8801d17 	ldw	r2,116(sp)
  103f2c:	20c7883a 	add	r3,r4,r3
  103f30:	41000115 	stw	r4,4(r8)
  103f34:	10800044 	addi	r2,r2,1
  103f38:	d8801d15 	stw	r2,116(sp)
  103f3c:	d8c01e15 	stw	r3,120(sp)
  103f40:	10800208 	cmpgei	r2,r2,8
  103f44:	1002b41e 	bne	r2,zero,104a18 <___vfprintf_internal_r+0x1894>
  103f48:	42000204 	addi	r8,r8,8
  103f4c:	d8800817 	ldw	r2,32(sp)
  103f50:	147fffc4 	addi	r17,r2,-1
  103f54:	047e5e0e 	bge	zero,r17,1038d0 <___vfprintf_internal_r+0x74c>
  103f58:	03000474 	movhi	r12,17
  103f5c:	89000450 	cmplti	r4,r17,17
  103f60:	630ccc84 	addi	r12,r12,13106
  103f64:	d8801d17 	ldw	r2,116(sp)
  103f68:	2003791e 	bne	r4,zero,104d50 <___vfprintf_internal_r+0x1bcc>
  103f6c:	dc000715 	stw	r16,28(sp)
  103f70:	05000404 	movi	r20,16
  103f74:	df000517 	ldw	fp,20(sp)
  103f78:	6021883a 	mov	r16,r12
  103f7c:	00000406 	br	103f90 <___vfprintf_internal_r+0xe0c>
  103f80:	42000204 	addi	r8,r8,8
  103f84:	8c7ffc04 	addi	r17,r17,-16
  103f88:	89000448 	cmpgei	r4,r17,17
  103f8c:	20036e26 	beq	r4,zero,104d48 <___vfprintf_internal_r+0x1bc4>
  103f90:	10800044 	addi	r2,r2,1
  103f94:	18c00404 	addi	r3,r3,16
  103f98:	44000015 	stw	r16,0(r8)
  103f9c:	45000115 	stw	r20,4(r8)
  103fa0:	d8c01e15 	stw	r3,120(sp)
  103fa4:	d8801d15 	stw	r2,116(sp)
  103fa8:	11000208 	cmpgei	r4,r2,8
  103fac:	203ff426 	beq	r4,zero,103f80 <___vfprintf_internal_r+0xdfc>
  103fb0:	d9801c04 	addi	r6,sp,112
  103fb4:	980b883a 	mov	r5,r19
  103fb8:	e009883a 	mov	r4,fp
  103fbc:	010a58c0 	call	10a58c <__sprint_r>
  103fc0:	103d4f1e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  103fc4:	d8c01e17 	ldw	r3,120(sp)
  103fc8:	d8801d17 	ldw	r2,116(sp)
  103fcc:	b811883a 	mov	r8,r23
  103fd0:	003fec06 	br	103f84 <___vfprintf_internal_r+0xe00>
  103fd4:	854fc83a 	sub	r7,r16,r21
  103fd8:	01fe2f0e 	bge	zero,r7,103898 <___vfprintf_internal_r+0x714>
  103fdc:	03000474 	movhi	r12,17
  103fe0:	39000450 	cmplti	r4,r7,17
  103fe4:	630ccc84 	addi	r12,r12,13106
  103fe8:	d8801d17 	ldw	r2,116(sp)
  103fec:	2000271e 	bne	r4,zero,10408c <___vfprintf_internal_r+0xf08>
  103ff0:	dc400e15 	stw	r17,56(sp)
  103ff4:	dc800f15 	stw	r18,60(sp)
  103ff8:	dc001015 	stw	r16,64(sp)
  103ffc:	03400404 	movi	r13,16
  104000:	3821883a 	mov	r16,r7
  104004:	dac01215 	stw	r11,72(sp)
  104008:	dc400517 	ldw	r17,20(sp)
  10400c:	6025883a 	mov	r18,r12
  104010:	00000406 	br	104024 <___vfprintf_internal_r+0xea0>
  104014:	843ffc04 	addi	r16,r16,-16
  104018:	81000448 	cmpgei	r4,r16,17
  10401c:	42000204 	addi	r8,r8,8
  104020:	20001426 	beq	r4,zero,104074 <___vfprintf_internal_r+0xef0>
  104024:	10800044 	addi	r2,r2,1
  104028:	18c00404 	addi	r3,r3,16
  10402c:	44800015 	stw	r18,0(r8)
  104030:	43400115 	stw	r13,4(r8)
  104034:	d8c01e15 	stw	r3,120(sp)
  104038:	d8801d15 	stw	r2,116(sp)
  10403c:	11000208 	cmpgei	r4,r2,8
  104040:	203ff426 	beq	r4,zero,104014 <___vfprintf_internal_r+0xe90>
  104044:	d9801c04 	addi	r6,sp,112
  104048:	980b883a 	mov	r5,r19
  10404c:	8809883a 	mov	r4,r17
  104050:	010a58c0 	call	10a58c <__sprint_r>
  104054:	103d2a1e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  104058:	843ffc04 	addi	r16,r16,-16
  10405c:	81000448 	cmpgei	r4,r16,17
  104060:	d8c01e17 	ldw	r3,120(sp)
  104064:	d8801d17 	ldw	r2,116(sp)
  104068:	b811883a 	mov	r8,r23
  10406c:	03400404 	movi	r13,16
  104070:	203fec1e 	bne	r4,zero,104024 <___vfprintf_internal_r+0xea0>
  104074:	800f883a 	mov	r7,r16
  104078:	9019883a 	mov	r12,r18
  10407c:	dc400e17 	ldw	r17,56(sp)
  104080:	dc001017 	ldw	r16,64(sp)
  104084:	dac01217 	ldw	r11,72(sp)
  104088:	dc800f17 	ldw	r18,60(sp)
  10408c:	10800044 	addi	r2,r2,1
  104090:	19c7883a 	add	r3,r3,r7
  104094:	d8801d15 	stw	r2,116(sp)
  104098:	43000015 	stw	r12,0(r8)
  10409c:	41c00115 	stw	r7,4(r8)
  1040a0:	d8c01e15 	stw	r3,120(sp)
  1040a4:	10800208 	cmpgei	r2,r2,8
  1040a8:	1002cf1e 	bne	r2,zero,104be8 <___vfprintf_internal_r+0x1a64>
  1040ac:	5d0fc83a 	sub	r7,r11,r20
  1040b0:	42000204 	addi	r8,r8,8
  1040b4:	01fdfa0e 	bge	zero,r7,1038a0 <___vfprintf_internal_r+0x71c>
  1040b8:	03000474 	movhi	r12,17
  1040bc:	39000450 	cmplti	r4,r7,17
  1040c0:	630ccc84 	addi	r12,r12,13106
  1040c4:	d8801d17 	ldw	r2,116(sp)
  1040c8:	2000251e 	bne	r4,zero,104160 <___vfprintf_internal_r+0xfdc>
  1040cc:	dc400e15 	stw	r17,56(sp)
  1040d0:	dc800f15 	stw	r18,60(sp)
  1040d4:	dc001015 	stw	r16,64(sp)
  1040d8:	02c00404 	movi	r11,16
  1040dc:	3821883a 	mov	r16,r7
  1040e0:	dc400517 	ldw	r17,20(sp)
  1040e4:	6025883a 	mov	r18,r12
  1040e8:	00000406 	br	1040fc <___vfprintf_internal_r+0xf78>
  1040ec:	843ffc04 	addi	r16,r16,-16
  1040f0:	81000448 	cmpgei	r4,r16,17
  1040f4:	42000204 	addi	r8,r8,8
  1040f8:	20001426 	beq	r4,zero,10414c <___vfprintf_internal_r+0xfc8>
  1040fc:	10800044 	addi	r2,r2,1
  104100:	18c00404 	addi	r3,r3,16
  104104:	44800015 	stw	r18,0(r8)
  104108:	42c00115 	stw	r11,4(r8)
  10410c:	d8c01e15 	stw	r3,120(sp)
  104110:	d8801d15 	stw	r2,116(sp)
  104114:	11000208 	cmpgei	r4,r2,8
  104118:	203ff426 	beq	r4,zero,1040ec <___vfprintf_internal_r+0xf68>
  10411c:	d9801c04 	addi	r6,sp,112
  104120:	980b883a 	mov	r5,r19
  104124:	8809883a 	mov	r4,r17
  104128:	010a58c0 	call	10a58c <__sprint_r>
  10412c:	103cf41e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  104130:	843ffc04 	addi	r16,r16,-16
  104134:	81000448 	cmpgei	r4,r16,17
  104138:	d8c01e17 	ldw	r3,120(sp)
  10413c:	d8801d17 	ldw	r2,116(sp)
  104140:	b811883a 	mov	r8,r23
  104144:	02c00404 	movi	r11,16
  104148:	203fec1e 	bne	r4,zero,1040fc <___vfprintf_internal_r+0xf78>
  10414c:	800f883a 	mov	r7,r16
  104150:	9019883a 	mov	r12,r18
  104154:	dc400e17 	ldw	r17,56(sp)
  104158:	dc001017 	ldw	r16,64(sp)
  10415c:	dc800f17 	ldw	r18,60(sp)
  104160:	10800044 	addi	r2,r2,1
  104164:	19c7883a 	add	r3,r3,r7
  104168:	d8801d15 	stw	r2,116(sp)
  10416c:	43000015 	stw	r12,0(r8)
  104170:	41c00115 	stw	r7,4(r8)
  104174:	d8c01e15 	stw	r3,120(sp)
  104178:	10800208 	cmpgei	r2,r2,8
  10417c:	1001651e 	bne	r2,zero,104714 <___vfprintf_internal_r+0x1590>
  104180:	42000204 	addi	r8,r8,8
  104184:	003dc606 	br	1038a0 <___vfprintf_internal_r+0x71c>
  104188:	d9000517 	ldw	r4,20(sp)
  10418c:	d9801c04 	addi	r6,sp,112
  104190:	980b883a 	mov	r5,r19
  104194:	010a58c0 	call	10a58c <__sprint_r>
  104198:	103dd726 	beq	r2,zero,1038f8 <___vfprintf_internal_r+0x774>
  10419c:	003cd806 	br	103500 <___vfprintf_internal_r+0x37c>
  1041a0:	d9000517 	ldw	r4,20(sp)
  1041a4:	d9801c04 	addi	r6,sp,112
  1041a8:	980b883a 	mov	r5,r19
  1041ac:	010a58c0 	call	10a58c <__sprint_r>
  1041b0:	103cd31e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  1041b4:	d9001617 	ldw	r4,88(sp)
  1041b8:	d8c01e17 	ldw	r3,120(sp)
  1041bc:	b811883a 	mov	r8,r23
  1041c0:	2002971e 	bne	r4,zero,104c20 <___vfprintf_internal_r+0x1a9c>
  1041c4:	d9000817 	ldw	r4,32(sp)
  1041c8:	9080004c 	andi	r2,r18,1
  1041cc:	1104b03a 	or	r2,r2,r4
  1041d0:	103dbf26 	beq	r2,zero,1038d0 <___vfprintf_internal_r+0x74c>
  1041d4:	d8800d17 	ldw	r2,52(sp)
  1041d8:	d9000b17 	ldw	r4,44(sp)
  1041dc:	40800015 	stw	r2,0(r8)
  1041e0:	d8801d17 	ldw	r2,116(sp)
  1041e4:	20c7883a 	add	r3,r4,r3
  1041e8:	41000115 	stw	r4,4(r8)
  1041ec:	10800044 	addi	r2,r2,1
  1041f0:	d8c01e15 	stw	r3,120(sp)
  1041f4:	d8801d15 	stw	r2,116(sp)
  1041f8:	11000208 	cmpgei	r4,r2,8
  1041fc:	2003691e 	bne	r4,zero,104fa4 <___vfprintf_internal_r+0x1e20>
  104200:	42000204 	addi	r8,r8,8
  104204:	d9000817 	ldw	r4,32(sp)
  104208:	10800044 	addi	r2,r2,1
  10420c:	d8801d15 	stw	r2,116(sp)
  104210:	20c7883a 	add	r3,r4,r3
  104214:	44400015 	stw	r17,0(r8)
  104218:	41000115 	stw	r4,4(r8)
  10421c:	d8c01e15 	stw	r3,120(sp)
  104220:	10800208 	cmpgei	r2,r2,8
  104224:	103da926 	beq	r2,zero,1038cc <___vfprintf_internal_r+0x748>
  104228:	d9000517 	ldw	r4,20(sp)
  10422c:	d9801c04 	addi	r6,sp,112
  104230:	980b883a 	mov	r5,r19
  104234:	010a58c0 	call	10a58c <__sprint_r>
  104238:	103cb11e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  10423c:	d8c01e17 	ldw	r3,120(sp)
  104240:	b811883a 	mov	r8,r23
  104244:	003da206 	br	1038d0 <___vfprintf_internal_r+0x74c>
  104248:	d8800817 	ldw	r2,32(sp)
  10424c:	da801d17 	ldw	r10,116(sp)
  104250:	18c00044 	addi	r3,r3,1
  104254:	10800088 	cmpgei	r2,r2,2
  104258:	55000044 	addi	r20,r10,1
  10425c:	47000204 	addi	fp,r8,8
  104260:	1000fb26 	beq	r2,zero,104650 <___vfprintf_internal_r+0x14cc>
  104264:	00800044 	movi	r2,1
  104268:	40800115 	stw	r2,4(r8)
  10426c:	44400015 	stw	r17,0(r8)
  104270:	d8c01e15 	stw	r3,120(sp)
  104274:	dd001d15 	stw	r20,116(sp)
  104278:	a0800210 	cmplti	r2,r20,8
  10427c:	10022e26 	beq	r2,zero,104b38 <___vfprintf_internal_r+0x19b4>
  104280:	d8800b17 	ldw	r2,44(sp)
  104284:	d9000d17 	ldw	r4,52(sp)
  104288:	a5000044 	addi	r20,r20,1
  10428c:	1887883a 	add	r3,r3,r2
  104290:	e0800115 	stw	r2,4(fp)
  104294:	e1000015 	stw	r4,0(fp)
  104298:	d8c01e15 	stw	r3,120(sp)
  10429c:	dd001d15 	stw	r20,116(sp)
  1042a0:	a0800208 	cmpgei	r2,r20,8
  1042a4:	10021b1e 	bne	r2,zero,104b14 <___vfprintf_internal_r+0x1990>
  1042a8:	e7000204 	addi	fp,fp,8
  1042ac:	d8800817 	ldw	r2,32(sp)
  1042b0:	d9000917 	ldw	r4,36(sp)
  1042b4:	d9400a17 	ldw	r5,40(sp)
  1042b8:	a2800044 	addi	r10,r20,1
  1042bc:	e2000204 	addi	r8,fp,8
  1042c0:	12ffffc4 	addi	r11,r2,-1
  1042c4:	000d883a 	mov	r6,zero
  1042c8:	000f883a 	mov	r7,zero
  1042cc:	d8c01215 	stw	r3,72(sp)
  1042d0:	da801015 	stw	r10,64(sp)
  1042d4:	da800f15 	stw	r10,60(sp)
  1042d8:	da000e15 	stw	r8,56(sp)
  1042dc:	dac00715 	stw	r11,28(sp)
  1042e0:	010e2e00 	call	10e2e0 <__eqdf2>
  1042e4:	dac00717 	ldw	r11,28(sp)
  1042e8:	da000e17 	ldw	r8,56(sp)
  1042ec:	db400f17 	ldw	r13,60(sp)
  1042f0:	da801017 	ldw	r10,64(sp)
  1042f4:	d8c01217 	ldw	r3,72(sp)
  1042f8:	1000e126 	beq	r2,zero,104680 <___vfprintf_internal_r+0x14fc>
  1042fc:	8c400044 	addi	r17,r17,1
  104300:	1ac7883a 	add	r3,r3,r11
  104304:	da801d15 	stw	r10,116(sp)
  104308:	e4400015 	stw	r17,0(fp)
  10430c:	e2c00115 	stw	r11,4(fp)
  104310:	d8c01e15 	stw	r3,120(sp)
  104314:	52800208 	cmpgei	r10,r10,8
  104318:	5001ad1e 	bne	r10,zero,1049d0 <___vfprintf_internal_r+0x184c>
  10431c:	e0800404 	addi	r2,fp,16
  104320:	a2800084 	addi	r10,r20,2
  104324:	4039883a 	mov	fp,r8
  104328:	1011883a 	mov	r8,r2
  10432c:	d9001117 	ldw	r4,68(sp)
  104330:	d8801844 	addi	r2,sp,97
  104334:	da801d15 	stw	r10,116(sp)
  104338:	20c7883a 	add	r3,r4,r3
  10433c:	e0800015 	stw	r2,0(fp)
  104340:	e1000115 	stw	r4,4(fp)
  104344:	d8c01e15 	stw	r3,120(sp)
  104348:	52800210 	cmplti	r10,r10,8
  10434c:	503d601e 	bne	r10,zero,1038d0 <___vfprintf_internal_r+0x74c>
  104350:	003fb506 	br	104228 <___vfprintf_internal_r+0x10a4>
  104354:	9019883a 	mov	r12,r18
  104358:	003e1906 	br	103bc0 <___vfprintf_internal_r+0xa3c>
  10435c:	03000474 	movhi	r12,17
  104360:	39000450 	cmplti	r4,r7,17
  104364:	630cd084 	addi	r12,r12,13122
  104368:	d8801d17 	ldw	r2,116(sp)
  10436c:	20002b1e 	bne	r4,zero,10441c <___vfprintf_internal_r+0x1298>
  104370:	dc401015 	stw	r17,64(sp)
  104374:	dc801215 	stw	r18,72(sp)
  104378:	dc001315 	stw	r16,76(sp)
  10437c:	03c00404 	movi	r15,16
  104380:	db800e15 	stw	r14,56(sp)
  104384:	db400f15 	stw	r13,60(sp)
  104388:	dac01415 	stw	r11,80(sp)
  10438c:	3821883a 	mov	r16,r7
  104390:	dc400517 	ldw	r17,20(sp)
  104394:	6025883a 	mov	r18,r12
  104398:	00000406 	br	1043ac <___vfprintf_internal_r+0x1228>
  10439c:	843ffc04 	addi	r16,r16,-16
  1043a0:	81000448 	cmpgei	r4,r16,17
  1043a4:	42000204 	addi	r8,r8,8
  1043a8:	20001426 	beq	r4,zero,1043fc <___vfprintf_internal_r+0x1278>
  1043ac:	10800044 	addi	r2,r2,1
  1043b0:	18c00404 	addi	r3,r3,16
  1043b4:	44800015 	stw	r18,0(r8)
  1043b8:	43c00115 	stw	r15,4(r8)
  1043bc:	d8c01e15 	stw	r3,120(sp)
  1043c0:	d8801d15 	stw	r2,116(sp)
  1043c4:	11000208 	cmpgei	r4,r2,8
  1043c8:	203ff426 	beq	r4,zero,10439c <___vfprintf_internal_r+0x1218>
  1043cc:	d9801c04 	addi	r6,sp,112
  1043d0:	980b883a 	mov	r5,r19
  1043d4:	8809883a 	mov	r4,r17
  1043d8:	010a58c0 	call	10a58c <__sprint_r>
  1043dc:	103c481e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  1043e0:	843ffc04 	addi	r16,r16,-16
  1043e4:	81000448 	cmpgei	r4,r16,17
  1043e8:	d8c01e17 	ldw	r3,120(sp)
  1043ec:	d8801d17 	ldw	r2,116(sp)
  1043f0:	b811883a 	mov	r8,r23
  1043f4:	03c00404 	movi	r15,16
  1043f8:	203fec1e 	bne	r4,zero,1043ac <___vfprintf_internal_r+0x1228>
  1043fc:	800f883a 	mov	r7,r16
  104400:	9019883a 	mov	r12,r18
  104404:	db800e17 	ldw	r14,56(sp)
  104408:	db400f17 	ldw	r13,60(sp)
  10440c:	dc401017 	ldw	r17,64(sp)
  104410:	dac01417 	ldw	r11,80(sp)
  104414:	dc001317 	ldw	r16,76(sp)
  104418:	dc801217 	ldw	r18,72(sp)
  10441c:	10800044 	addi	r2,r2,1
  104420:	19c7883a 	add	r3,r3,r7
  104424:	d8801d15 	stw	r2,116(sp)
  104428:	43000015 	stw	r12,0(r8)
  10442c:	41c00115 	stw	r7,4(r8)
  104430:	d8c01e15 	stw	r3,120(sp)
  104434:	10800208 	cmpgei	r2,r2,8
  104438:	1001d61e 	bne	r2,zero,104b94 <___vfprintf_internal_r+0x1a10>
  10443c:	42000204 	addi	r8,r8,8
  104440:	003cf806 	br	103824 <___vfprintf_internal_r+0x6a0>
  104444:	d9000517 	ldw	r4,20(sp)
  104448:	d9801c04 	addi	r6,sp,112
  10444c:	980b883a 	mov	r5,r19
  104450:	dac01015 	stw	r11,64(sp)
  104454:	db400f15 	stw	r13,60(sp)
  104458:	db800e15 	stw	r14,56(sp)
  10445c:	010a58c0 	call	10a58c <__sprint_r>
  104460:	103c271e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  104464:	d8c01e17 	ldw	r3,120(sp)
  104468:	b811883a 	mov	r8,r23
  10446c:	dac01017 	ldw	r11,64(sp)
  104470:	db400f17 	ldw	r13,60(sp)
  104474:	db800e17 	ldw	r14,56(sp)
  104478:	003cf806 	br	10385c <___vfprintf_internal_r+0x6d8>
  10447c:	d9000517 	ldw	r4,20(sp)
  104480:	d9801c04 	addi	r6,sp,112
  104484:	980b883a 	mov	r5,r19
  104488:	dac00f15 	stw	r11,60(sp)
  10448c:	db400e15 	stw	r13,56(sp)
  104490:	010a58c0 	call	10a58c <__sprint_r>
  104494:	103c1a1e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  104498:	d8c01e17 	ldw	r3,120(sp)
  10449c:	b811883a 	mov	r8,r23
  1044a0:	dac00f17 	ldw	r11,60(sp)
  1044a4:	db400e17 	ldw	r13,56(sp)
  1044a8:	003cf906 	br	103890 <___vfprintf_internal_r+0x70c>
  1044ac:	d9000c17 	ldw	r4,48(sp)
  1044b0:	b823883a 	mov	r17,r23
  1044b4:	a88003cc 	andi	r2,r21,15
  1044b8:	a006973a 	slli	r3,r20,28
  1044bc:	2085883a 	add	r2,r4,r2
  1044c0:	a82ad13a 	srli	r21,r21,4
  1044c4:	10800003 	ldbu	r2,0(r2)
  1044c8:	a028d13a 	srli	r20,r20,4
  1044cc:	8c7fffc4 	addi	r17,r17,-1
  1044d0:	1d6ab03a 	or	r21,r3,r21
  1044d4:	88800005 	stb	r2,0(r17)
  1044d8:	ad04b03a 	or	r2,r21,r20
  1044dc:	103ff51e 	bne	r2,zero,1044b4 <___vfprintf_internal_r+0x1330>
  1044e0:	bc69c83a 	sub	r20,r23,r17
  1044e4:	6025883a 	mov	r18,r12
  1044e8:	003e3d06 	br	103de0 <___vfprintf_internal_r+0xc5c>
  1044ec:	d9001617 	ldw	r4,88(sp)
  1044f0:	01019a0e 	bge	zero,r4,104b5c <___vfprintf_internal_r+0x19d8>
  1044f4:	d8800717 	ldw	r2,28(sp)
  1044f8:	d9000817 	ldw	r4,32(sp)
  1044fc:	1039883a 	mov	fp,r2
  104500:	20812816 	blt	r4,r2,1049a4 <___vfprintf_internal_r+0x1820>
  104504:	07000a0e 	bge	zero,fp,104530 <___vfprintf_internal_r+0x13ac>
  104508:	d8801d17 	ldw	r2,116(sp)
  10450c:	1f07883a 	add	r3,r3,fp
  104510:	44400015 	stw	r17,0(r8)
  104514:	10800044 	addi	r2,r2,1
  104518:	d8801d15 	stw	r2,116(sp)
  10451c:	47000115 	stw	fp,4(r8)
  104520:	d8c01e15 	stw	r3,120(sp)
  104524:	10800208 	cmpgei	r2,r2,8
  104528:	1002de1e 	bne	r2,zero,1050a4 <___vfprintf_internal_r+0x1f20>
  10452c:	42000204 	addi	r8,r8,8
  104530:	e0014116 	blt	fp,zero,104a38 <___vfprintf_internal_r+0x18b4>
  104534:	d8800717 	ldw	r2,28(sp)
  104538:	1739c83a 	sub	fp,r2,fp
  10453c:	07014816 	blt	zero,fp,104a60 <___vfprintf_internal_r+0x18dc>
  104540:	d9001617 	ldw	r4,88(sp)
  104544:	d8800817 	ldw	r2,32(sp)
  104548:	2081190e 	bge	r4,r2,1049b0 <___vfprintf_internal_r+0x182c>
  10454c:	d8800d17 	ldw	r2,52(sp)
  104550:	d9400b17 	ldw	r5,44(sp)
  104554:	40800015 	stw	r2,0(r8)
  104558:	d8801d17 	ldw	r2,116(sp)
  10455c:	1947883a 	add	r3,r3,r5
  104560:	41400115 	stw	r5,4(r8)
  104564:	10800044 	addi	r2,r2,1
  104568:	d8801d15 	stw	r2,116(sp)
  10456c:	d8c01e15 	stw	r3,120(sp)
  104570:	10800208 	cmpgei	r2,r2,8
  104574:	1002651e 	bne	r2,zero,104f0c <___vfprintf_internal_r+0x1d88>
  104578:	42000204 	addi	r8,r8,8
  10457c:	d8800817 	ldw	r2,32(sp)
  104580:	d9400717 	ldw	r5,28(sp)
  104584:	1105c83a 	sub	r2,r2,r4
  104588:	29015e0e 	bge	r5,r4,104b04 <___vfprintf_internal_r+0x1980>
  10458c:	1039883a 	mov	fp,r2
  104590:	07000c0e 	bge	zero,fp,1045c4 <___vfprintf_internal_r+0x1440>
  104594:	d9000717 	ldw	r4,28(sp)
  104598:	1f07883a 	add	r3,r3,fp
  10459c:	47000115 	stw	fp,4(r8)
  1045a0:	8923883a 	add	r17,r17,r4
  1045a4:	d9001d17 	ldw	r4,116(sp)
  1045a8:	44400015 	stw	r17,0(r8)
  1045ac:	d8c01e15 	stw	r3,120(sp)
  1045b0:	21000044 	addi	r4,r4,1
  1045b4:	d9001d15 	stw	r4,116(sp)
  1045b8:	21000208 	cmpgei	r4,r4,8
  1045bc:	2002c41e 	bne	r4,zero,1050d0 <___vfprintf_internal_r+0x1f4c>
  1045c0:	42000204 	addi	r8,r8,8
  1045c4:	e000010e 	bge	fp,zero,1045cc <___vfprintf_internal_r+0x1448>
  1045c8:	0039883a 	mov	fp,zero
  1045cc:	1739c83a 	sub	fp,r2,fp
  1045d0:	073cbf0e 	bge	zero,fp,1038d0 <___vfprintf_internal_r+0x74c>
  1045d4:	03000474 	movhi	r12,17
  1045d8:	e1000450 	cmplti	r4,fp,17
  1045dc:	630ccc84 	addi	r12,r12,13106
  1045e0:	d8801d17 	ldw	r2,116(sp)
  1045e4:	2002401e 	bne	r4,zero,104ee8 <___vfprintf_internal_r+0x1d64>
  1045e8:	dc000715 	stw	r16,28(sp)
  1045ec:	05000404 	movi	r20,16
  1045f0:	dc400517 	ldw	r17,20(sp)
  1045f4:	6021883a 	mov	r16,r12
  1045f8:	00000406 	br	10460c <___vfprintf_internal_r+0x1488>
  1045fc:	42000204 	addi	r8,r8,8
  104600:	e73ffc04 	addi	fp,fp,-16
  104604:	e1000448 	cmpgei	r4,fp,17
  104608:	20023526 	beq	r4,zero,104ee0 <___vfprintf_internal_r+0x1d5c>
  10460c:	10800044 	addi	r2,r2,1
  104610:	18c00404 	addi	r3,r3,16
  104614:	44000015 	stw	r16,0(r8)
  104618:	45000115 	stw	r20,4(r8)
  10461c:	d8c01e15 	stw	r3,120(sp)
  104620:	d8801d15 	stw	r2,116(sp)
  104624:	11000208 	cmpgei	r4,r2,8
  104628:	203ff426 	beq	r4,zero,1045fc <___vfprintf_internal_r+0x1478>
  10462c:	d9801c04 	addi	r6,sp,112
  104630:	980b883a 	mov	r5,r19
  104634:	8809883a 	mov	r4,r17
  104638:	010a58c0 	call	10a58c <__sprint_r>
  10463c:	103bb01e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  104640:	d8c01e17 	ldw	r3,120(sp)
  104644:	d8801d17 	ldw	r2,116(sp)
  104648:	b811883a 	mov	r8,r23
  10464c:	003fec06 	br	104600 <___vfprintf_internal_r+0x147c>
  104650:	9080004c 	andi	r2,r18,1
  104654:	103f031e 	bne	r2,zero,104264 <___vfprintf_internal_r+0x10e0>
  104658:	00800044 	movi	r2,1
  10465c:	dd001d15 	stw	r20,116(sp)
  104660:	44400015 	stw	r17,0(r8)
  104664:	40800115 	stw	r2,4(r8)
  104668:	d8c01e15 	stw	r3,120(sp)
  10466c:	a5000208 	cmpgei	r20,r20,8
  104670:	a000d71e 	bne	r20,zero,1049d0 <___vfprintf_internal_r+0x184c>
  104674:	52800084 	addi	r10,r10,2
  104678:	42000404 	addi	r8,r8,16
  10467c:	003f2b06 	br	10432c <___vfprintf_internal_r+0x11a8>
  104680:	02ff2a0e 	bge	zero,r11,10432c <___vfprintf_internal_r+0x11a8>
  104684:	58800450 	cmplti	r2,r11,17
  104688:	03000474 	movhi	r12,17
  10468c:	1002fe1e 	bne	r2,zero,105288 <___vfprintf_internal_r+0x2104>
  104690:	630ccc84 	addi	r12,r12,13106
  104694:	dd400715 	stw	r21,28(sp)
  104698:	dc800e15 	stw	r18,56(sp)
  10469c:	e005883a 	mov	r2,fp
  1046a0:	04400404 	movi	r17,16
  1046a4:	b039883a 	mov	fp,r22
  1046a8:	5825883a 	mov	r18,r11
  1046ac:	802d883a 	mov	r22,r16
  1046b0:	602b883a 	mov	r21,r12
  1046b4:	dc000517 	ldw	r16,20(sp)
  1046b8:	6829883a 	mov	r20,r13
  1046bc:	00000506 	br	1046d4 <___vfprintf_internal_r+0x1550>
  1046c0:	10800204 	addi	r2,r2,8
  1046c4:	94bffc04 	addi	r18,r18,-16
  1046c8:	91000448 	cmpgei	r4,r18,17
  1046cc:	20018a26 	beq	r4,zero,104cf8 <___vfprintf_internal_r+0x1b74>
  1046d0:	a5000044 	addi	r20,r20,1
  1046d4:	18c00404 	addi	r3,r3,16
  1046d8:	15400015 	stw	r21,0(r2)
  1046dc:	14400115 	stw	r17,4(r2)
  1046e0:	d8c01e15 	stw	r3,120(sp)
  1046e4:	dd001d15 	stw	r20,116(sp)
  1046e8:	a1000208 	cmpgei	r4,r20,8
  1046ec:	203ff426 	beq	r4,zero,1046c0 <___vfprintf_internal_r+0x153c>
  1046f0:	d9801c04 	addi	r6,sp,112
  1046f4:	980b883a 	mov	r5,r19
  1046f8:	8009883a 	mov	r4,r16
  1046fc:	010a58c0 	call	10a58c <__sprint_r>
  104700:	103b7f1e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  104704:	dd001d17 	ldw	r20,116(sp)
  104708:	d8c01e17 	ldw	r3,120(sp)
  10470c:	b805883a 	mov	r2,r23
  104710:	003fec06 	br	1046c4 <___vfprintf_internal_r+0x1540>
  104714:	d9000517 	ldw	r4,20(sp)
  104718:	d9801c04 	addi	r6,sp,112
  10471c:	980b883a 	mov	r5,r19
  104720:	010a58c0 	call	10a58c <__sprint_r>
  104724:	103b761e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  104728:	d8c01e17 	ldw	r3,120(sp)
  10472c:	b811883a 	mov	r8,r23
  104730:	003c5b06 	br	1038a0 <___vfprintf_internal_r+0x71c>
  104734:	0029883a 	mov	r20,zero
  104738:	003bdc06 	br	1036ac <___vfprintf_internal_r+0x528>
  10473c:	b023883a 	mov	r17,r22
  104740:	003ae306 	br	1032d0 <___vfprintf_internal_r+0x14c>
  104744:	b823883a 	mov	r17,r23
  104748:	003da506 	br	103de0 <___vfprintf_internal_r+0xc5c>
  10474c:	d9000917 	ldw	r4,36(sp)
  104750:	d9400a17 	ldw	r5,40(sp)
  104754:	da000f15 	stw	r8,60(sp)
  104758:	200d883a 	mov	r6,r4
  10475c:	280f883a 	mov	r7,r5
  104760:	dac00e15 	stw	r11,56(sp)
  104764:	db000715 	stw	r12,28(sp)
  104768:	010f68c0 	call	10f68c <__unorddf2>
  10476c:	db000717 	ldw	r12,28(sp)
  104770:	dac00e17 	ldw	r11,56(sp)
  104774:	da000f17 	ldw	r8,60(sp)
  104778:	1002b21e 	bne	r2,zero,105244 <___vfprintf_internal_r+0x20c0>
  10477c:	00fff7c4 	movi	r3,-33
  104780:	e0c6703a 	and	r3,fp,r3
  104784:	58bfffe0 	cmpeqi	r2,r11,-1
  104788:	d8c00715 	stw	r3,28(sp)
  10478c:	10024e1e 	bne	r2,zero,1050c8 <___vfprintf_internal_r+0x1f44>
  104790:	188011d8 	cmpnei	r2,r3,71
  104794:	10020026 	beq	r2,zero,104f98 <___vfprintf_internal_r+0x1e14>
  104798:	d8800a17 	ldw	r2,40(sp)
  10479c:	64804014 	ori	r18,r12,256
  1047a0:	1001e316 	blt	r2,zero,104f30 <___vfprintf_internal_r+0x1dac>
  1047a4:	dd400a17 	ldw	r21,40(sp)
  1047a8:	d8000e05 	stb	zero,56(sp)
  1047ac:	e08019a0 	cmpeqi	r2,fp,102
  1047b0:	d8800f15 	stw	r2,60(sp)
  1047b4:	1001771e 	bne	r2,zero,104d94 <___vfprintf_internal_r+0x1c10>
  1047b8:	e08011a0 	cmpeqi	r2,fp,70
  1047bc:	1001751e 	bne	r2,zero,104d94 <___vfprintf_internal_r+0x1c10>
  1047c0:	d8800717 	ldw	r2,28(sp)
  1047c4:	da001215 	stw	r8,72(sp)
  1047c8:	db001015 	stw	r12,64(sp)
  1047cc:	10801158 	cmpnei	r2,r2,69
  1047d0:	10020726 	beq	r2,zero,104ff0 <___vfprintf_internal_r+0x1e6c>
  1047d4:	d8801a04 	addi	r2,sp,104
  1047d8:	d8800315 	stw	r2,12(sp)
  1047dc:	d9400917 	ldw	r5,36(sp)
  1047e0:	d8801704 	addi	r2,sp,92
  1047e4:	d9000517 	ldw	r4,20(sp)
  1047e8:	d8800215 	stw	r2,8(sp)
  1047ec:	d8801604 	addi	r2,sp,88
  1047f0:	dac00015 	stw	r11,0(sp)
  1047f4:	d8800115 	stw	r2,4(sp)
  1047f8:	01c00084 	movi	r7,2
  1047fc:	a80d883a 	mov	r6,r21
  104800:	dac00815 	stw	r11,32(sp)
  104804:	01057780 	call	105778 <_dtoa_r>
  104808:	dac00817 	ldw	r11,32(sp)
  10480c:	1023883a 	mov	r17,r2
  104810:	e08019d8 	cmpnei	r2,fp,103
  104814:	db001017 	ldw	r12,64(sp)
  104818:	da001217 	ldw	r8,72(sp)
  10481c:	5829883a 	mov	r20,r11
  104820:	1002051e 	bne	r2,zero,105038 <___vfprintf_internal_r+0x1eb4>
  104824:	6080004c 	andi	r2,r12,1
  104828:	1002051e 	bne	r2,zero,105040 <___vfprintf_internal_r+0x1ebc>
  10482c:	d8c01617 	ldw	r3,88(sp)
  104830:	d8800717 	ldw	r2,28(sp)
  104834:	d8c00715 	stw	r3,28(sp)
  104838:	d8c01a17 	ldw	r3,104(sp)
  10483c:	108011e0 	cmpeqi	r2,r2,71
  104840:	1c47c83a 	sub	r3,r3,r17
  104844:	d8c00815 	stw	r3,32(sp)
  104848:	10000526 	beq	r2,zero,104860 <___vfprintf_internal_r+0x16dc>
  10484c:	d8c00717 	ldw	r3,28(sp)
  104850:	18bfff50 	cmplti	r2,r3,-3
  104854:	1000011e 	bne	r2,zero,10485c <___vfprintf_internal_r+0x16d8>
  104858:	58c2070e 	bge	r11,r3,105078 <___vfprintf_internal_r+0x1ef4>
  10485c:	e73fff84 	addi	fp,fp,-2
  104860:	d8800717 	ldw	r2,28(sp)
  104864:	df001845 	stb	fp,97(sp)
  104868:	153fffc4 	addi	r20,r2,-1
  10486c:	dd001615 	stw	r20,88(sp)
  104870:	a0027c16 	blt	r20,zero,105264 <___vfprintf_internal_r+0x20e0>
  104874:	00800ac4 	movi	r2,43
  104878:	d8801885 	stb	r2,98(sp)
  10487c:	a0800290 	cmplti	r2,r20,10
  104880:	10025b1e 	bne	r2,zero,1051f0 <___vfprintf_internal_r+0x206c>
  104884:	dc000f15 	stw	r16,60(sp)
  104888:	dd401bc4 	addi	r21,sp,111
  10488c:	a021883a 	mov	r16,r20
  104890:	db000715 	stw	r12,28(sp)
  104894:	9829883a 	mov	r20,r19
  104898:	4027883a 	mov	r19,r8
  10489c:	00000206 	br	1048a8 <___vfprintf_internal_r+0x1724>
  1048a0:	202b883a 	mov	r21,r4
  1048a4:	1021883a 	mov	r16,r2
  1048a8:	8009883a 	mov	r4,r16
  1048ac:	01400284 	movi	r5,10
  1048b0:	0102d280 	call	102d28 <__modsi3>
  1048b4:	10800c04 	addi	r2,r2,48
  1048b8:	8009883a 	mov	r4,r16
  1048bc:	a8bfffc5 	stb	r2,-1(r21)
  1048c0:	01400284 	movi	r5,10
  1048c4:	0102ca80 	call	102ca8 <__divsi3>
  1048c8:	80c01908 	cmpgei	r3,r16,100
  1048cc:	a93fffc4 	addi	r4,r21,-1
  1048d0:	183ff31e 	bne	r3,zero,1048a0 <___vfprintf_internal_r+0x171c>
  1048d4:	10800c04 	addi	r2,r2,48
  1048d8:	20bfffc5 	stb	r2,-1(r4)
  1048dc:	a8ffff84 	addi	r3,r21,-2
  1048e0:	d9001bc4 	addi	r4,sp,111
  1048e4:	9811883a 	mov	r8,r19
  1048e8:	db000717 	ldw	r12,28(sp)
  1048ec:	dc000f17 	ldw	r16,60(sp)
  1048f0:	a027883a 	mov	r19,r20
  1048f4:	1902762e 	bgeu	r3,r4,1052d0 <___vfprintf_internal_r+0x214c>
  1048f8:	d90018c4 	addi	r4,sp,99
  1048fc:	00000106 	br	104904 <___vfprintf_internal_r+0x1780>
  104900:	18800003 	ldbu	r2,0(r3)
  104904:	21000044 	addi	r4,r4,1
  104908:	20bfffc5 	stb	r2,-1(r4)
  10490c:	18c00044 	addi	r3,r3,1
  104910:	d8801bc4 	addi	r2,sp,111
  104914:	18bffa1e 	bne	r3,r2,104900 <___vfprintf_internal_r+0x177c>
  104918:	d8801c44 	addi	r2,sp,113
  10491c:	d8c018c4 	addi	r3,sp,99
  104920:	1545c83a 	sub	r2,r2,r21
  104924:	1885883a 	add	r2,r3,r2
  104928:	d8c01844 	addi	r3,sp,97
  10492c:	10c5c83a 	sub	r2,r2,r3
  104930:	d8801115 	stw	r2,68(sp)
  104934:	d8c00817 	ldw	r3,32(sp)
  104938:	d9001117 	ldw	r4,68(sp)
  10493c:	18800088 	cmpgei	r2,r3,2
  104940:	1929883a 	add	r20,r3,r4
  104944:	10024c26 	beq	r2,zero,105278 <___vfprintf_internal_r+0x20f4>
  104948:	d8800b17 	ldw	r2,44(sp)
  10494c:	a0a9883a 	add	r20,r20,r2
  104950:	a02b883a 	mov	r21,r20
  104954:	a000010e 	bge	r20,zero,10495c <___vfprintf_internal_r+0x17d8>
  104958:	002b883a 	mov	r21,zero
  10495c:	d8000715 	stw	zero,28(sp)
  104960:	00014206 	br	104e6c <___vfprintf_internal_r+0x1ce8>
  104964:	00800c04 	movi	r2,48
  104968:	d8801585 	stb	r2,86(sp)
  10496c:	df0015c5 	stb	fp,87(sp)
  104970:	63000094 	ori	r12,r12,2
  104974:	00800084 	movi	r2,2
  104978:	003ce106 	br	103d00 <___vfprintf_internal_r+0xb7c>
  10497c:	d9400417 	ldw	r5,16(sp)
  104980:	20800017 	ldw	r2,0(r4)
  104984:	d8c00615 	stw	r3,24(sp)
  104988:	2809d7fa 	srai	r4,r5,31
  10498c:	11400015 	stw	r5,0(r2)
  104990:	11000115 	stw	r4,4(r2)
  104994:	003a3006 	br	103258 <___vfprintf_internal_r+0xd4>
  104998:	0421c83a 	sub	r16,zero,r16
  10499c:	d8800615 	stw	r2,24(sp)
  1049a0:	003b1506 	br	1035f8 <___vfprintf_internal_r+0x474>
  1049a4:	2039883a 	mov	fp,r4
  1049a8:	073ed716 	blt	zero,fp,104508 <___vfprintf_internal_r+0x1384>
  1049ac:	003ee006 	br	104530 <___vfprintf_internal_r+0x13ac>
  1049b0:	9080004c 	andi	r2,r18,1
  1049b4:	103ee51e 	bne	r2,zero,10454c <___vfprintf_internal_r+0x13c8>
  1049b8:	d8800817 	ldw	r2,32(sp)
  1049bc:	d9400717 	ldw	r5,28(sp)
  1049c0:	1105c83a 	sub	r2,r2,r4
  1049c4:	29004f0e 	bge	r5,r4,104b04 <___vfprintf_internal_r+0x1980>
  1049c8:	1039883a 	mov	fp,r2
  1049cc:	003efd06 	br	1045c4 <___vfprintf_internal_r+0x1440>
  1049d0:	d9000517 	ldw	r4,20(sp)
  1049d4:	d9801c04 	addi	r6,sp,112
  1049d8:	980b883a 	mov	r5,r19
  1049dc:	010a58c0 	call	10a58c <__sprint_r>
  1049e0:	103ac71e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  1049e4:	da801d17 	ldw	r10,116(sp)
  1049e8:	d8c01e17 	ldw	r3,120(sp)
  1049ec:	da002b04 	addi	r8,sp,172
  1049f0:	52800044 	addi	r10,r10,1
  1049f4:	b839883a 	mov	fp,r23
  1049f8:	003e4c06 	br	10432c <___vfprintf_internal_r+0x11a8>
  1049fc:	b7000043 	ldbu	fp,1(r22)
  104a00:	63000814 	ori	r12,r12,32
  104a04:	b5800044 	addi	r22,r22,1
  104a08:	e2803fcc 	andi	r10,fp,255
  104a0c:	5280201c 	xori	r10,r10,128
  104a10:	52bfe004 	addi	r10,r10,-128
  104a14:	003a3606 	br	1032f0 <___vfprintf_internal_r+0x16c>
  104a18:	d9000517 	ldw	r4,20(sp)
  104a1c:	d9801c04 	addi	r6,sp,112
  104a20:	980b883a 	mov	r5,r19
  104a24:	010a58c0 	call	10a58c <__sprint_r>
  104a28:	103ab51e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  104a2c:	d8c01e17 	ldw	r3,120(sp)
  104a30:	b811883a 	mov	r8,r23
  104a34:	003d4506 	br	103f4c <___vfprintf_internal_r+0xdc8>
  104a38:	0039883a 	mov	fp,zero
  104a3c:	003ebd06 	br	104534 <___vfprintf_internal_r+0x13b0>
  104a40:	588001f0 	cmpltui	r2,r11,7
  104a44:	5829883a 	mov	r20,r11
  104a48:	10013d26 	beq	r2,zero,104f40 <___vfprintf_internal_r+0x1dbc>
  104a4c:	04400474 	movhi	r17,17
  104a50:	a02b883a 	mov	r21,r20
  104a54:	dc800615 	stw	r18,24(sp)
  104a58:	8c4cca04 	addi	r17,r17,13096
  104a5c:	003b6606 	br	1037f8 <___vfprintf_internal_r+0x674>
  104a60:	03000474 	movhi	r12,17
  104a64:	e1000450 	cmplti	r4,fp,17
  104a68:	630ccc84 	addi	r12,r12,13106
  104a6c:	d8801d17 	ldw	r2,116(sp)
  104a70:	20010d1e 	bne	r4,zero,104ea8 <___vfprintf_internal_r+0x1d24>
  104a74:	dc400e15 	stw	r17,56(sp)
  104a78:	dc800f15 	stw	r18,60(sp)
  104a7c:	e023883a 	mov	r17,fp
  104a80:	05000404 	movi	r20,16
  104a84:	b039883a 	mov	fp,r22
  104a88:	6025883a 	mov	r18,r12
  104a8c:	802d883a 	mov	r22,r16
  104a90:	dc000517 	ldw	r16,20(sp)
  104a94:	00000406 	br	104aa8 <___vfprintf_internal_r+0x1924>
  104a98:	42000204 	addi	r8,r8,8
  104a9c:	8c7ffc04 	addi	r17,r17,-16
  104aa0:	89000448 	cmpgei	r4,r17,17
  104aa4:	2000fa26 	beq	r4,zero,104e90 <___vfprintf_internal_r+0x1d0c>
  104aa8:	10800044 	addi	r2,r2,1
  104aac:	18c00404 	addi	r3,r3,16
  104ab0:	44800015 	stw	r18,0(r8)
  104ab4:	45000115 	stw	r20,4(r8)
  104ab8:	d8c01e15 	stw	r3,120(sp)
  104abc:	d8801d15 	stw	r2,116(sp)
  104ac0:	11000208 	cmpgei	r4,r2,8
  104ac4:	203ff426 	beq	r4,zero,104a98 <___vfprintf_internal_r+0x1914>
  104ac8:	d9801c04 	addi	r6,sp,112
  104acc:	980b883a 	mov	r5,r19
  104ad0:	8009883a 	mov	r4,r16
  104ad4:	010a58c0 	call	10a58c <__sprint_r>
  104ad8:	103a891e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  104adc:	d8c01e17 	ldw	r3,120(sp)
  104ae0:	d8801d17 	ldw	r2,116(sp)
  104ae4:	b811883a 	mov	r8,r23
  104ae8:	003fec06 	br	104a9c <___vfprintf_internal_r+0x1918>
  104aec:	d8800617 	ldw	r2,24(sp)
  104af0:	10800017 	ldw	r2,0(r2)
  104af4:	d8c00615 	stw	r3,24(sp)
  104af8:	d8c00417 	ldw	r3,16(sp)
  104afc:	10c00015 	stw	r3,0(r2)
  104b00:	0039d506 	br	103258 <___vfprintf_internal_r+0xd4>
  104b04:	d9000817 	ldw	r4,32(sp)
  104b08:	d9400717 	ldw	r5,28(sp)
  104b0c:	2179c83a 	sub	fp,r4,r5
  104b10:	003e9f06 	br	104590 <___vfprintf_internal_r+0x140c>
  104b14:	d9000517 	ldw	r4,20(sp)
  104b18:	d9801c04 	addi	r6,sp,112
  104b1c:	980b883a 	mov	r5,r19
  104b20:	010a58c0 	call	10a58c <__sprint_r>
  104b24:	103a761e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  104b28:	d8c01e17 	ldw	r3,120(sp)
  104b2c:	dd001d17 	ldw	r20,116(sp)
  104b30:	b839883a 	mov	fp,r23
  104b34:	003ddd06 	br	1042ac <___vfprintf_internal_r+0x1128>
  104b38:	d9000517 	ldw	r4,20(sp)
  104b3c:	d9801c04 	addi	r6,sp,112
  104b40:	980b883a 	mov	r5,r19
  104b44:	010a58c0 	call	10a58c <__sprint_r>
  104b48:	103a6d1e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  104b4c:	d8c01e17 	ldw	r3,120(sp)
  104b50:	dd001d17 	ldw	r20,116(sp)
  104b54:	b839883a 	mov	fp,r23
  104b58:	003dc906 	br	104280 <___vfprintf_internal_r+0x10fc>
  104b5c:	d8801d17 	ldw	r2,116(sp)
  104b60:	01400474 	movhi	r5,17
  104b64:	294ccc04 	addi	r5,r5,13104
  104b68:	10800044 	addi	r2,r2,1
  104b6c:	18c00044 	addi	r3,r3,1
  104b70:	41400015 	stw	r5,0(r8)
  104b74:	01400044 	movi	r5,1
  104b78:	d8801d15 	stw	r2,116(sp)
  104b7c:	41400115 	stw	r5,4(r8)
  104b80:	d8c01e15 	stw	r3,120(sp)
  104b84:	10800208 	cmpgei	r2,r2,8
  104b88:	103d851e 	bne	r2,zero,1041a0 <___vfprintf_internal_r+0x101c>
  104b8c:	42000204 	addi	r8,r8,8
  104b90:	003d8b06 	br	1041c0 <___vfprintf_internal_r+0x103c>
  104b94:	d9000517 	ldw	r4,20(sp)
  104b98:	d9801c04 	addi	r6,sp,112
  104b9c:	980b883a 	mov	r5,r19
  104ba0:	dac01015 	stw	r11,64(sp)
  104ba4:	db400f15 	stw	r13,60(sp)
  104ba8:	db800e15 	stw	r14,56(sp)
  104bac:	010a58c0 	call	10a58c <__sprint_r>
  104bb0:	103a531e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  104bb4:	d8c01e17 	ldw	r3,120(sp)
  104bb8:	b811883a 	mov	r8,r23
  104bbc:	dac01017 	ldw	r11,64(sp)
  104bc0:	db400f17 	ldw	r13,60(sp)
  104bc4:	db800e17 	ldw	r14,56(sp)
  104bc8:	003b1606 	br	103824 <___vfprintf_internal_r+0x6a0>
  104bcc:	d9000517 	ldw	r4,20(sp)
  104bd0:	d9801c04 	addi	r6,sp,112
  104bd4:	980b883a 	mov	r5,r19
  104bd8:	010a58c0 	call	10a58c <__sprint_r>
  104bdc:	103a481e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  104be0:	b811883a 	mov	r8,r23
  104be4:	003cc506 	br	103efc <___vfprintf_internal_r+0xd78>
  104be8:	d9000517 	ldw	r4,20(sp)
  104bec:	d9801c04 	addi	r6,sp,112
  104bf0:	980b883a 	mov	r5,r19
  104bf4:	dac00e15 	stw	r11,56(sp)
  104bf8:	010a58c0 	call	10a58c <__sprint_r>
  104bfc:	103a401e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  104c00:	d8c01e17 	ldw	r3,120(sp)
  104c04:	b811883a 	mov	r8,r23
  104c08:	dac00e17 	ldw	r11,56(sp)
  104c0c:	003b2206 	br	103898 <___vfprintf_internal_r+0x714>
  104c10:	10c00060 	cmpeqi	r3,r2,1
  104c14:	9019883a 	mov	r12,r18
  104c18:	183beb26 	beq	r3,zero,103bc8 <___vfprintf_internal_r+0xa44>
  104c1c:	003c6b06 	br	103dcc <___vfprintf_internal_r+0xc48>
  104c20:	d8800d17 	ldw	r2,52(sp)
  104c24:	d9400b17 	ldw	r5,44(sp)
  104c28:	40800015 	stw	r2,0(r8)
  104c2c:	d8801d17 	ldw	r2,116(sp)
  104c30:	28c7883a 	add	r3,r5,r3
  104c34:	41400115 	stw	r5,4(r8)
  104c38:	10800044 	addi	r2,r2,1
  104c3c:	d8c01e15 	stw	r3,120(sp)
  104c40:	d8801d15 	stw	r2,116(sp)
  104c44:	11400208 	cmpgei	r5,r2,8
  104c48:	2800d61e 	bne	r5,zero,104fa4 <___vfprintf_internal_r+0x1e20>
  104c4c:	42000204 	addi	r8,r8,8
  104c50:	203d6c0e 	bge	r4,zero,104204 <___vfprintf_internal_r+0x1080>
  104c54:	03000474 	movhi	r12,17
  104c58:	217ffc08 	cmpgei	r5,r4,-16
  104c5c:	630ccc84 	addi	r12,r12,13106
  104c60:	0129c83a 	sub	r20,zero,r4
  104c64:	28014e1e 	bne	r5,zero,1051a0 <___vfprintf_internal_r+0x201c>
  104c68:	8009883a 	mov	r4,r16
  104c6c:	dc400715 	stw	r17,28(sp)
  104c70:	a021883a 	mov	r16,r20
  104c74:	07000404 	movi	fp,16
  104c78:	6023883a 	mov	r17,r12
  104c7c:	2029883a 	mov	r20,r4
  104c80:	00000406 	br	104c94 <___vfprintf_internal_r+0x1b10>
  104c84:	42000204 	addi	r8,r8,8
  104c88:	843ffc04 	addi	r16,r16,-16
  104c8c:	81000448 	cmpgei	r4,r16,17
  104c90:	20013e26 	beq	r4,zero,10518c <___vfprintf_internal_r+0x2008>
  104c94:	10800044 	addi	r2,r2,1
  104c98:	18c00404 	addi	r3,r3,16
  104c9c:	44400015 	stw	r17,0(r8)
  104ca0:	47000115 	stw	fp,4(r8)
  104ca4:	d8c01e15 	stw	r3,120(sp)
  104ca8:	d8801d15 	stw	r2,116(sp)
  104cac:	11000208 	cmpgei	r4,r2,8
  104cb0:	203ff426 	beq	r4,zero,104c84 <___vfprintf_internal_r+0x1b00>
  104cb4:	d9000517 	ldw	r4,20(sp)
  104cb8:	d9801c04 	addi	r6,sp,112
  104cbc:	980b883a 	mov	r5,r19
  104cc0:	010a58c0 	call	10a58c <__sprint_r>
  104cc4:	103a0e1e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  104cc8:	d8c01e17 	ldw	r3,120(sp)
  104ccc:	d8801d17 	ldw	r2,116(sp)
  104cd0:	b811883a 	mov	r8,r23
  104cd4:	003fec06 	br	104c88 <___vfprintf_internal_r+0x1b04>
  104cd8:	8809883a 	mov	r4,r17
  104cdc:	01030ec0 	call	1030ec <strlen>
  104ce0:	1029883a 	mov	r20,r2
  104ce4:	102b883a 	mov	r21,r2
  104ce8:	dc800615 	stw	r18,24(sp)
  104cec:	db000717 	ldw	r12,28(sp)
  104cf0:	da000e17 	ldw	r8,56(sp)
  104cf4:	003ac006 	br	1037f8 <___vfprintf_internal_r+0x674>
  104cf8:	9017883a 	mov	r11,r18
  104cfc:	a819883a 	mov	r12,r21
  104d00:	dc800e17 	ldw	r18,56(sp)
  104d04:	dd400717 	ldw	r21,28(sp)
  104d08:	b021883a 	mov	r16,r22
  104d0c:	a2800044 	addi	r10,r20,1
  104d10:	e02d883a 	mov	r22,fp
  104d14:	1039883a 	mov	fp,r2
  104d18:	10800204 	addi	r2,r2,8
  104d1c:	1ac7883a 	add	r3,r3,r11
  104d20:	e3000015 	stw	r12,0(fp)
  104d24:	e2c00115 	stw	r11,4(fp)
  104d28:	d8c01e15 	stw	r3,120(sp)
  104d2c:	da801d15 	stw	r10,116(sp)
  104d30:	51000208 	cmpgei	r4,r10,8
  104d34:	203f261e 	bne	r4,zero,1049d0 <___vfprintf_internal_r+0x184c>
  104d38:	52800044 	addi	r10,r10,1
  104d3c:	12000204 	addi	r8,r2,8
  104d40:	1039883a 	mov	fp,r2
  104d44:	003d7906 	br	10432c <___vfprintf_internal_r+0x11a8>
  104d48:	8019883a 	mov	r12,r16
  104d4c:	dc000717 	ldw	r16,28(sp)
  104d50:	10800044 	addi	r2,r2,1
  104d54:	1c47883a 	add	r3,r3,r17
  104d58:	d8801d15 	stw	r2,116(sp)
  104d5c:	43000015 	stw	r12,0(r8)
  104d60:	44400115 	stw	r17,4(r8)
  104d64:	d8c01e15 	stw	r3,120(sp)
  104d68:	10800208 	cmpgei	r2,r2,8
  104d6c:	103ad726 	beq	r2,zero,1038cc <___vfprintf_internal_r+0x748>
  104d70:	003d2d06 	br	104228 <___vfprintf_internal_r+0x10a4>
  104d74:	d8800615 	stw	r2,24(sp)
  104d78:	0029883a 	mov	r20,zero
  104d7c:	0005883a 	mov	r2,zero
  104d80:	003bdf06 	br	103d00 <___vfprintf_internal_r+0xb7c>
  104d84:	d8800615 	stw	r2,24(sp)
  104d88:	0029883a 	mov	r20,zero
  104d8c:	00800044 	movi	r2,1
  104d90:	003bdb06 	br	103d00 <___vfprintf_internal_r+0xb7c>
  104d94:	d8801a04 	addi	r2,sp,104
  104d98:	d8800315 	stw	r2,12(sp)
  104d9c:	d9400917 	ldw	r5,36(sp)
  104da0:	d8801704 	addi	r2,sp,92
  104da4:	d9000517 	ldw	r4,20(sp)
  104da8:	d8800215 	stw	r2,8(sp)
  104dac:	d8801604 	addi	r2,sp,88
  104db0:	dac00015 	stw	r11,0(sp)
  104db4:	d8800115 	stw	r2,4(sp)
  104db8:	01c000c4 	movi	r7,3
  104dbc:	a80d883a 	mov	r6,r21
  104dc0:	da001215 	stw	r8,72(sp)
  104dc4:	db001015 	stw	r12,64(sp)
  104dc8:	dac00815 	stw	r11,32(sp)
  104dcc:	01057780 	call	105778 <_dtoa_r>
  104dd0:	dac00817 	ldw	r11,32(sp)
  104dd4:	1023883a 	mov	r17,r2
  104dd8:	db001017 	ldw	r12,64(sp)
  104ddc:	12e9883a 	add	r20,r2,r11
  104de0:	88800007 	ldb	r2,0(r17)
  104de4:	da001217 	ldw	r8,72(sp)
  104de8:	10800c20 	cmpeqi	r2,r2,48
  104dec:	10005a1e 	bne	r2,zero,104f58 <___vfprintf_internal_r+0x1dd4>
  104df0:	d8801617 	ldw	r2,88(sp)
  104df4:	a0a9883a 	add	r20,r20,r2
  104df8:	d9000917 	ldw	r4,36(sp)
  104dfc:	000d883a 	mov	r6,zero
  104e00:	000f883a 	mov	r7,zero
  104e04:	a80b883a 	mov	r5,r21
  104e08:	da001215 	stw	r8,72(sp)
  104e0c:	dac01015 	stw	r11,64(sp)
  104e10:	db000815 	stw	r12,32(sp)
  104e14:	010e2e00 	call	10e2e0 <__eqdf2>
  104e18:	db000817 	ldw	r12,32(sp)
  104e1c:	dac01017 	ldw	r11,64(sp)
  104e20:	da001217 	ldw	r8,72(sp)
  104e24:	1000881e 	bne	r2,zero,105048 <___vfprintf_internal_r+0x1ec4>
  104e28:	a005883a 	mov	r2,r20
  104e2c:	1445c83a 	sub	r2,r2,r17
  104e30:	d8c00717 	ldw	r3,28(sp)
  104e34:	d8800815 	stw	r2,32(sp)
  104e38:	d8801617 	ldw	r2,88(sp)
  104e3c:	18c011d8 	cmpnei	r3,r3,71
  104e40:	d8800715 	stw	r2,28(sp)
  104e44:	183e8126 	beq	r3,zero,10484c <___vfprintf_internal_r+0x16c8>
  104e48:	d8800f17 	ldw	r2,60(sp)
  104e4c:	103e8426 	beq	r2,zero,104860 <___vfprintf_internal_r+0x16dc>
  104e50:	d8c00717 	ldw	r3,28(sp)
  104e54:	6080004c 	andi	r2,r12,1
  104e58:	12c4b03a 	or	r2,r2,r11
  104e5c:	00c10d0e 	bge	zero,r3,105294 <___vfprintf_internal_r+0x2110>
  104e60:	1000f11e 	bne	r2,zero,105228 <___vfprintf_internal_r+0x20a4>
  104e64:	dd000717 	ldw	r20,28(sp)
  104e68:	a02b883a 	mov	r21,r20
  104e6c:	d8800e07 	ldb	r2,56(sp)
  104e70:	10007e26 	beq	r2,zero,10506c <___vfprintf_internal_r+0x1ee8>
  104e74:	00800b44 	movi	r2,45
  104e78:	d8801545 	stb	r2,85(sp)
  104e7c:	0017883a 	mov	r11,zero
  104e80:	003bdf06 	br	103e00 <___vfprintf_internal_r+0xc7c>
  104e84:	04400474 	movhi	r17,17
  104e88:	8c4cbc04 	addi	r17,r17,13040
  104e8c:	003b2e06 	br	103b48 <___vfprintf_internal_r+0x9c4>
  104e90:	b021883a 	mov	r16,r22
  104e94:	9019883a 	mov	r12,r18
  104e98:	e02d883a 	mov	r22,fp
  104e9c:	dc800f17 	ldw	r18,60(sp)
  104ea0:	8839883a 	mov	fp,r17
  104ea4:	dc400e17 	ldw	r17,56(sp)
  104ea8:	10800044 	addi	r2,r2,1
  104eac:	1f07883a 	add	r3,r3,fp
  104eb0:	d8801d15 	stw	r2,116(sp)
  104eb4:	43000015 	stw	r12,0(r8)
  104eb8:	47000115 	stw	fp,4(r8)
  104ebc:	d8c01e15 	stw	r3,120(sp)
  104ec0:	10800208 	cmpgei	r2,r2,8
  104ec4:	1000421e 	bne	r2,zero,104fd0 <___vfprintf_internal_r+0x1e4c>
  104ec8:	42000204 	addi	r8,r8,8
  104ecc:	003d9c06 	br	104540 <___vfprintf_internal_r+0x13bc>
  104ed0:	00800b44 	movi	r2,45
  104ed4:	d8801545 	stb	r2,85(sp)
  104ed8:	03400b44 	movi	r13,45
  104edc:	003b1606 	br	103b38 <___vfprintf_internal_r+0x9b4>
  104ee0:	8019883a 	mov	r12,r16
  104ee4:	dc000717 	ldw	r16,28(sp)
  104ee8:	10800044 	addi	r2,r2,1
  104eec:	1f07883a 	add	r3,r3,fp
  104ef0:	d8801d15 	stw	r2,116(sp)
  104ef4:	43000015 	stw	r12,0(r8)
  104ef8:	47000115 	stw	fp,4(r8)
  104efc:	d8c01e15 	stw	r3,120(sp)
  104f00:	10800208 	cmpgei	r2,r2,8
  104f04:	103a7126 	beq	r2,zero,1038cc <___vfprintf_internal_r+0x748>
  104f08:	003cc706 	br	104228 <___vfprintf_internal_r+0x10a4>
  104f0c:	d9000517 	ldw	r4,20(sp)
  104f10:	d9801c04 	addi	r6,sp,112
  104f14:	980b883a 	mov	r5,r19
  104f18:	010a58c0 	call	10a58c <__sprint_r>
  104f1c:	1039781e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  104f20:	d9001617 	ldw	r4,88(sp)
  104f24:	d8c01e17 	ldw	r3,120(sp)
  104f28:	b811883a 	mov	r8,r23
  104f2c:	003d9306 	br	10457c <___vfprintf_internal_r+0x13f8>
  104f30:	1560003c 	xorhi	r21,r2,32768
  104f34:	00800b44 	movi	r2,45
  104f38:	d8800e05 	stb	r2,56(sp)
  104f3c:	003e1b06 	br	1047ac <___vfprintf_internal_r+0x1628>
  104f40:	05000184 	movi	r20,6
  104f44:	003ec106 	br	104a4c <___vfprintf_internal_r+0x18c8>
  104f48:	002b883a 	mov	r21,zero
  104f4c:	003a0206 	br	103758 <___vfprintf_internal_r+0x5d4>
  104f50:	d9401545 	stb	r5,85(sp)
  104f54:	00398a06 	br	103580 <___vfprintf_internal_r+0x3fc>
  104f58:	d9000917 	ldw	r4,36(sp)
  104f5c:	000d883a 	mov	r6,zero
  104f60:	000f883a 	mov	r7,zero
  104f64:	a80b883a 	mov	r5,r21
  104f68:	da001215 	stw	r8,72(sp)
  104f6c:	dac01015 	stw	r11,64(sp)
  104f70:	db000815 	stw	r12,32(sp)
  104f74:	010e2e00 	call	10e2e0 <__eqdf2>
  104f78:	db000817 	ldw	r12,32(sp)
  104f7c:	dac01017 	ldw	r11,64(sp)
  104f80:	da001217 	ldw	r8,72(sp)
  104f84:	103f9a26 	beq	r2,zero,104df0 <___vfprintf_internal_r+0x1c6c>
  104f88:	00800044 	movi	r2,1
  104f8c:	12c5c83a 	sub	r2,r2,r11
  104f90:	d8801615 	stw	r2,88(sp)
  104f94:	003f9706 	br	104df4 <___vfprintf_internal_r+0x1c70>
  104f98:	583dff1e 	bne	r11,zero,104798 <___vfprintf_internal_r+0x1614>
  104f9c:	02c00044 	movi	r11,1
  104fa0:	003dfd06 	br	104798 <___vfprintf_internal_r+0x1614>
  104fa4:	d9000517 	ldw	r4,20(sp)
  104fa8:	d9801c04 	addi	r6,sp,112
  104fac:	980b883a 	mov	r5,r19
  104fb0:	010a58c0 	call	10a58c <__sprint_r>
  104fb4:	1039521e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  104fb8:	d9001617 	ldw	r4,88(sp)
  104fbc:	d8c01e17 	ldw	r3,120(sp)
  104fc0:	d8801d17 	ldw	r2,116(sp)
  104fc4:	b811883a 	mov	r8,r23
  104fc8:	203c8e0e 	bge	r4,zero,104204 <___vfprintf_internal_r+0x1080>
  104fcc:	003f2106 	br	104c54 <___vfprintf_internal_r+0x1ad0>
  104fd0:	d9000517 	ldw	r4,20(sp)
  104fd4:	d9801c04 	addi	r6,sp,112
  104fd8:	980b883a 	mov	r5,r19
  104fdc:	010a58c0 	call	10a58c <__sprint_r>
  104fe0:	1039471e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  104fe4:	d8c01e17 	ldw	r3,120(sp)
  104fe8:	b811883a 	mov	r8,r23
  104fec:	003d5406 	br	104540 <___vfprintf_internal_r+0x13bc>
  104ff0:	d8801a04 	addi	r2,sp,104
  104ff4:	d8800315 	stw	r2,12(sp)
  104ff8:	d9400917 	ldw	r5,36(sp)
  104ffc:	d8801704 	addi	r2,sp,92
  105000:	d9000517 	ldw	r4,20(sp)
  105004:	5d000044 	addi	r20,r11,1
  105008:	d8800215 	stw	r2,8(sp)
  10500c:	d8801604 	addi	r2,sp,88
  105010:	d8800115 	stw	r2,4(sp)
  105014:	dd000015 	stw	r20,0(sp)
  105018:	01c00084 	movi	r7,2
  10501c:	a80d883a 	mov	r6,r21
  105020:	dac00815 	stw	r11,32(sp)
  105024:	01057780 	call	105778 <_dtoa_r>
  105028:	dac00817 	ldw	r11,32(sp)
  10502c:	db001017 	ldw	r12,64(sp)
  105030:	da001217 	ldw	r8,72(sp)
  105034:	1023883a 	mov	r17,r2
  105038:	e08011d8 	cmpnei	r2,fp,71
  10503c:	103df926 	beq	r2,zero,104824 <___vfprintf_internal_r+0x16a0>
  105040:	8d29883a 	add	r20,r17,r20
  105044:	003f6c06 	br	104df8 <___vfprintf_internal_r+0x1c74>
  105048:	d8801a17 	ldw	r2,104(sp)
  10504c:	01000c04 	movi	r4,48
  105050:	153f762e 	bgeu	r2,r20,104e2c <___vfprintf_internal_r+0x1ca8>
  105054:	10c00044 	addi	r3,r2,1
  105058:	d8c01a15 	stw	r3,104(sp)
  10505c:	11000005 	stb	r4,0(r2)
  105060:	d8801a17 	ldw	r2,104(sp)
  105064:	153ffb36 	bltu	r2,r20,105054 <___vfprintf_internal_r+0x1ed0>
  105068:	003f7006 	br	104e2c <___vfprintf_internal_r+0x1ca8>
  10506c:	db401543 	ldbu	r13,85(sp)
  105070:	0017883a 	mov	r11,zero
  105074:	003b5e06 	br	103df0 <___vfprintf_internal_r+0xc6c>
  105078:	d8800717 	ldw	r2,28(sp)
  10507c:	d8c00817 	ldw	r3,32(sp)
  105080:	10c02216 	blt	r2,r3,10510c <___vfprintf_internal_r+0x1f88>
  105084:	6300004c 	andi	r12,r12,1
  105088:	6000601e 	bne	r12,zero,10520c <___vfprintf_internal_r+0x2088>
  10508c:	102b883a 	mov	r21,r2
  105090:	1000010e 	bge	r2,zero,105098 <___vfprintf_internal_r+0x1f14>
  105094:	002b883a 	mov	r21,zero
  105098:	dd000717 	ldw	r20,28(sp)
  10509c:	070019c4 	movi	fp,103
  1050a0:	003f7206 	br	104e6c <___vfprintf_internal_r+0x1ce8>
  1050a4:	d9000517 	ldw	r4,20(sp)
  1050a8:	d9801c04 	addi	r6,sp,112
  1050ac:	980b883a 	mov	r5,r19
  1050b0:	010a58c0 	call	10a58c <__sprint_r>
  1050b4:	1039121e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  1050b8:	d8c01e17 	ldw	r3,120(sp)
  1050bc:	b811883a 	mov	r8,r23
  1050c0:	e03d1c0e 	bge	fp,zero,104534 <___vfprintf_internal_r+0x13b0>
  1050c4:	003e5c06 	br	104a38 <___vfprintf_internal_r+0x18b4>
  1050c8:	02c00184 	movi	r11,6
  1050cc:	003db206 	br	104798 <___vfprintf_internal_r+0x1614>
  1050d0:	d9000517 	ldw	r4,20(sp)
  1050d4:	d9801c04 	addi	r6,sp,112
  1050d8:	980b883a 	mov	r5,r19
  1050dc:	010a58c0 	call	10a58c <__sprint_r>
  1050e0:	1039071e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  1050e4:	d8801617 	ldw	r2,88(sp)
  1050e8:	d9000817 	ldw	r4,32(sp)
  1050ec:	d8c01e17 	ldw	r3,120(sp)
  1050f0:	b811883a 	mov	r8,r23
  1050f4:	2085c83a 	sub	r2,r4,r2
  1050f8:	003d3206 	br	1045c4 <___vfprintf_internal_r+0x1440>
  1050fc:	582b883a 	mov	r21,r11
  105100:	dc800615 	stw	r18,24(sp)
  105104:	5829883a 	mov	r20,r11
  105108:	0039bb06 	br	1037f8 <___vfprintf_internal_r+0x674>
  10510c:	d8800817 	ldw	r2,32(sp)
  105110:	d8c00b17 	ldw	r3,44(sp)
  105114:	10e9883a 	add	r20,r2,r3
  105118:	d8800717 	ldw	r2,28(sp)
  10511c:	00800316 	blt	zero,r2,10512c <___vfprintf_internal_r+0x1fa8>
  105120:	d8800717 	ldw	r2,28(sp)
  105124:	a0b9c83a 	sub	fp,r20,r2
  105128:	e5000044 	addi	r20,fp,1
  10512c:	a02b883a 	mov	r21,r20
  105130:	a0003b16 	blt	r20,zero,105220 <___vfprintf_internal_r+0x209c>
  105134:	070019c4 	movi	fp,103
  105138:	003f4c06 	br	104e6c <___vfprintf_internal_r+0x1ce8>
  10513c:	d9401545 	stb	r5,85(sp)
  105140:	003ac006 	br	103c44 <___vfprintf_internal_r+0xac0>
  105144:	d9401545 	stb	r5,85(sp)
  105148:	003a2006 	br	1039cc <___vfprintf_internal_r+0x848>
  10514c:	d9401545 	stb	r5,85(sp)
  105150:	003a2e06 	br	103a0c <___vfprintf_internal_r+0x888>
  105154:	d9401545 	stb	r5,85(sp)
  105158:	00398306 	br	103768 <___vfprintf_internal_r+0x5e4>
  10515c:	d9401545 	stb	r5,85(sp)
  105160:	00395a06 	br	1036cc <___vfprintf_internal_r+0x548>
  105164:	d9401545 	stb	r5,85(sp)
  105168:	00394606 	br	103684 <___vfprintf_internal_r+0x500>
  10516c:	d9401545 	stb	r5,85(sp)
  105170:	003a3606 	br	103a4c <___vfprintf_internal_r+0x8c8>
  105174:	d9401545 	stb	r5,85(sp)
  105178:	003a7c06 	br	103b6c <___vfprintf_internal_r+0x9e8>
  10517c:	d9401545 	stb	r5,85(sp)
  105180:	003a4206 	br	103a8c <___vfprintf_internal_r+0x908>
  105184:	d9401545 	stb	r5,85(sp)
  105188:	003ac006 	br	103c8c <___vfprintf_internal_r+0xb08>
  10518c:	8819883a 	mov	r12,r17
  105190:	dc400717 	ldw	r17,28(sp)
  105194:	a009883a 	mov	r4,r20
  105198:	8029883a 	mov	r20,r16
  10519c:	2021883a 	mov	r16,r4
  1051a0:	10800044 	addi	r2,r2,1
  1051a4:	1d07883a 	add	r3,r3,r20
  1051a8:	43000015 	stw	r12,0(r8)
  1051ac:	45000115 	stw	r20,4(r8)
  1051b0:	d8c01e15 	stw	r3,120(sp)
  1051b4:	d8801d15 	stw	r2,116(sp)
  1051b8:	11000208 	cmpgei	r4,r2,8
  1051bc:	203c1026 	beq	r4,zero,104200 <___vfprintf_internal_r+0x107c>
  1051c0:	d9000517 	ldw	r4,20(sp)
  1051c4:	d9801c04 	addi	r6,sp,112
  1051c8:	980b883a 	mov	r5,r19
  1051cc:	010a58c0 	call	10a58c <__sprint_r>
  1051d0:	1038cb1e 	bne	r2,zero,103500 <___vfprintf_internal_r+0x37c>
  1051d4:	d8c01e17 	ldw	r3,120(sp)
  1051d8:	d8801d17 	ldw	r2,116(sp)
  1051dc:	b811883a 	mov	r8,r23
  1051e0:	003c0806 	br	104204 <___vfprintf_internal_r+0x1080>
  1051e4:	00bfffc4 	movi	r2,-1
  1051e8:	d8800415 	stw	r2,16(sp)
  1051ec:	0038c706 	br	10350c <___vfprintf_internal_r+0x388>
  1051f0:	00800c04 	movi	r2,48
  1051f4:	a0c00c04 	addi	r3,r20,48
  1051f8:	d88018c5 	stb	r2,99(sp)
  1051fc:	00800104 	movi	r2,4
  105200:	d8c01905 	stb	r3,100(sp)
  105204:	d8801115 	stw	r2,68(sp)
  105208:	003dca06 	br	104934 <___vfprintf_internal_r+0x17b0>
  10520c:	d8800717 	ldw	r2,28(sp)
  105210:	d8c00b17 	ldw	r3,44(sp)
  105214:	10e9883a 	add	r20,r2,r3
  105218:	a02b883a 	mov	r21,r20
  10521c:	a03fc50e 	bge	r20,zero,105134 <___vfprintf_internal_r+0x1fb0>
  105220:	002b883a 	mov	r21,zero
  105224:	003fc306 	br	105134 <___vfprintf_internal_r+0x1fb0>
  105228:	d8800b17 	ldw	r2,44(sp)
  10522c:	1885883a 	add	r2,r3,r2
  105230:	12e9883a 	add	r20,r2,r11
  105234:	a02b883a 	mov	r21,r20
  105238:	a03f0c0e 	bge	r20,zero,104e6c <___vfprintf_internal_r+0x1ce8>
  10523c:	002b883a 	mov	r21,zero
  105240:	003f0a06 	br	104e6c <___vfprintf_internal_r+0x1ce8>
  105244:	d8800a17 	ldw	r2,40(sp)
  105248:	10001d16 	blt	r2,zero,1052c0 <___vfprintf_internal_r+0x213c>
  10524c:	db401543 	ldbu	r13,85(sp)
  105250:	e0801210 	cmplti	r2,fp,72
  105254:	1000171e 	bne	r2,zero,1052b4 <___vfprintf_internal_r+0x2130>
  105258:	04400474 	movhi	r17,17
  10525c:	8c4cbf04 	addi	r17,r17,13052
  105260:	003a3906 	br	103b48 <___vfprintf_internal_r+0x9c4>
  105264:	00c00044 	movi	r3,1
  105268:	18a9c83a 	sub	r20,r3,r2
  10526c:	00800b44 	movi	r2,45
  105270:	d8801885 	stb	r2,98(sp)
  105274:	003d8106 	br	10487c <___vfprintf_internal_r+0x16f8>
  105278:	6080004c 	andi	r2,r12,1
  10527c:	d8800715 	stw	r2,28(sp)
  105280:	103db11e 	bne	r2,zero,104948 <___vfprintf_internal_r+0x17c4>
  105284:	003feb06 	br	105234 <___vfprintf_internal_r+0x20b0>
  105288:	4005883a 	mov	r2,r8
  10528c:	630ccc84 	addi	r12,r12,13106
  105290:	003ea206 	br	104d1c <___vfprintf_internal_r+0x1b98>
  105294:	1000031e 	bne	r2,zero,1052a4 <___vfprintf_internal_r+0x2120>
  105298:	05400044 	movi	r21,1
  10529c:	05000044 	movi	r20,1
  1052a0:	003ef206 	br	104e6c <___vfprintf_internal_r+0x1ce8>
  1052a4:	d8800b17 	ldw	r2,44(sp)
  1052a8:	10800044 	addi	r2,r2,1
  1052ac:	12e9883a 	add	r20,r2,r11
  1052b0:	003fe006 	br	105234 <___vfprintf_internal_r+0x20b0>
  1052b4:	04400474 	movhi	r17,17
  1052b8:	8c4cbe04 	addi	r17,r17,13048
  1052bc:	003a2206 	br	103b48 <___vfprintf_internal_r+0x9c4>
  1052c0:	00800b44 	movi	r2,45
  1052c4:	d8801545 	stb	r2,85(sp)
  1052c8:	03400b44 	movi	r13,45
  1052cc:	003fe006 	br	105250 <___vfprintf_internal_r+0x20cc>
  1052d0:	00800084 	movi	r2,2
  1052d4:	d8801115 	stw	r2,68(sp)
  1052d8:	003d9606 	br	104934 <___vfprintf_internal_r+0x17b0>
  1052dc:	d8c00617 	ldw	r3,24(sp)
  1052e0:	1ac00017 	ldw	r11,0(r3)
  1052e4:	18c00104 	addi	r3,r3,4
  1052e8:	5800010e 	bge	r11,zero,1052f0 <___vfprintf_internal_r+0x216c>
  1052ec:	02ffffc4 	movi	r11,-1
  1052f0:	b7000043 	ldbu	fp,1(r22)
  1052f4:	d8c00615 	stw	r3,24(sp)
  1052f8:	102d883a 	mov	r22,r2
  1052fc:	e2803fcc 	andi	r10,fp,255
  105300:	5280201c 	xori	r10,r10,128
  105304:	52bfe004 	addi	r10,r10,-128
  105308:	0037f906 	br	1032f0 <___vfprintf_internal_r+0x16c>

0010530c <__vfprintf_internal>:
  10530c:	00800074 	movhi	r2,1
  105310:	300f883a 	mov	r7,r6
  105314:	280d883a 	mov	r6,r5
  105318:	200b883a 	mov	r5,r4
  10531c:	11073c17 	ldw	r4,7408(r2)
  105320:	01031841 	jmpi	103184 <___vfprintf_internal_r>

00105324 <__sbprintf>:
  105324:	2880030b 	ldhu	r2,12(r5)
  105328:	2b001917 	ldw	r12,100(r5)
  10532c:	2ac0038b 	ldhu	r11,14(r5)
  105330:	2a800717 	ldw	r10,28(r5)
  105334:	2a400917 	ldw	r9,36(r5)
  105338:	defee204 	addi	sp,sp,-1144
  10533c:	da001a04 	addi	r8,sp,104
  105340:	00c10004 	movi	r3,1024
  105344:	dc011a15 	stw	r16,1128(sp)
  105348:	10bfff4c 	andi	r2,r2,65533
  10534c:	2821883a 	mov	r16,r5
  105350:	d80b883a 	mov	r5,sp
  105354:	dc811c15 	stw	r18,1136(sp)
  105358:	dc411b15 	stw	r17,1132(sp)
  10535c:	dfc11d15 	stw	ra,1140(sp)
  105360:	2025883a 	mov	r18,r4
  105364:	d880030d 	sth	r2,12(sp)
  105368:	db001915 	stw	r12,100(sp)
  10536c:	dac0038d 	sth	r11,14(sp)
  105370:	da800715 	stw	r10,28(sp)
  105374:	da400915 	stw	r9,36(sp)
  105378:	da000015 	stw	r8,0(sp)
  10537c:	da000415 	stw	r8,16(sp)
  105380:	d8c00215 	stw	r3,8(sp)
  105384:	d8c00515 	stw	r3,20(sp)
  105388:	d8000615 	stw	zero,24(sp)
  10538c:	01031840 	call	103184 <___vfprintf_internal_r>
  105390:	1023883a 	mov	r17,r2
  105394:	10000d0e 	bge	r2,zero,1053cc <__sbprintf+0xa8>
  105398:	d880030b 	ldhu	r2,12(sp)
  10539c:	1080100c 	andi	r2,r2,64
  1053a0:	10000326 	beq	r2,zero,1053b0 <__sbprintf+0x8c>
  1053a4:	8080030b 	ldhu	r2,12(r16)
  1053a8:	10801014 	ori	r2,r2,64
  1053ac:	8080030d 	sth	r2,12(r16)
  1053b0:	8805883a 	mov	r2,r17
  1053b4:	dfc11d17 	ldw	ra,1140(sp)
  1053b8:	dc811c17 	ldw	r18,1136(sp)
  1053bc:	dc411b17 	ldw	r17,1132(sp)
  1053c0:	dc011a17 	ldw	r16,1128(sp)
  1053c4:	dec11e04 	addi	sp,sp,1144
  1053c8:	f800283a 	ret
  1053cc:	d80b883a 	mov	r5,sp
  1053d0:	9009883a 	mov	r4,r18
  1053d4:	01070680 	call	107068 <_fflush_r>
  1053d8:	103fef26 	beq	r2,zero,105398 <__sbprintf+0x74>
  1053dc:	047fffc4 	movi	r17,-1
  1053e0:	003fed06 	br	105398 <__sbprintf+0x74>

001053e4 <__swsetup_r>:
  1053e4:	00800074 	movhi	r2,1
  1053e8:	10873c17 	ldw	r2,7408(r2)
  1053ec:	defffd04 	addi	sp,sp,-12
  1053f0:	dc400115 	stw	r17,4(sp)
  1053f4:	dc000015 	stw	r16,0(sp)
  1053f8:	dfc00215 	stw	ra,8(sp)
  1053fc:	2023883a 	mov	r17,r4
  105400:	2821883a 	mov	r16,r5
  105404:	10000226 	beq	r2,zero,105410 <__swsetup_r+0x2c>
  105408:	10c00e17 	ldw	r3,56(r2)
  10540c:	18002026 	beq	r3,zero,105490 <__swsetup_r+0xac>
  105410:	8080030b 	ldhu	r2,12(r16)
  105414:	10c0020c 	andi	r3,r2,8
  105418:	1009883a 	mov	r4,r2
  10541c:	18002226 	beq	r3,zero,1054a8 <__swsetup_r+0xc4>
  105420:	80c00417 	ldw	r3,16(r16)
  105424:	18002826 	beq	r3,zero,1054c8 <__swsetup_r+0xe4>
  105428:	1100004c 	andi	r4,r2,1
  10542c:	20000b1e 	bne	r4,zero,10545c <__swsetup_r+0x78>
  105430:	1080008c 	andi	r2,r2,2
  105434:	10002d1e 	bne	r2,zero,1054ec <__swsetup_r+0x108>
  105438:	80800517 	ldw	r2,20(r16)
  10543c:	80800215 	stw	r2,8(r16)
  105440:	18000b26 	beq	r3,zero,105470 <__swsetup_r+0x8c>
  105444:	0005883a 	mov	r2,zero
  105448:	dfc00217 	ldw	ra,8(sp)
  10544c:	dc400117 	ldw	r17,4(sp)
  105450:	dc000017 	ldw	r16,0(sp)
  105454:	dec00304 	addi	sp,sp,12
  105458:	f800283a 	ret
  10545c:	80800517 	ldw	r2,20(r16)
  105460:	80000215 	stw	zero,8(r16)
  105464:	0085c83a 	sub	r2,zero,r2
  105468:	80800615 	stw	r2,24(r16)
  10546c:	183ff51e 	bne	r3,zero,105444 <__swsetup_r+0x60>
  105470:	80c0030b 	ldhu	r3,12(r16)
  105474:	0005883a 	mov	r2,zero
  105478:	1900200c 	andi	r4,r3,128
  10547c:	203ff226 	beq	r4,zero,105448 <__swsetup_r+0x64>
  105480:	18c01014 	ori	r3,r3,64
  105484:	80c0030d 	sth	r3,12(r16)
  105488:	00bfffc4 	movi	r2,-1
  10548c:	003fee06 	br	105448 <__swsetup_r+0x64>
  105490:	1009883a 	mov	r4,r2
  105494:	01073fc0 	call	1073fc <__sinit>
  105498:	8080030b 	ldhu	r2,12(r16)
  10549c:	10c0020c 	andi	r3,r2,8
  1054a0:	1009883a 	mov	r4,r2
  1054a4:	183fde1e 	bne	r3,zero,105420 <__swsetup_r+0x3c>
  1054a8:	2080040c 	andi	r2,r4,16
  1054ac:	10001f26 	beq	r2,zero,10552c <__swsetup_r+0x148>
  1054b0:	2080010c 	andi	r2,r4,4
  1054b4:	10000f1e 	bne	r2,zero,1054f4 <__swsetup_r+0x110>
  1054b8:	80c00417 	ldw	r3,16(r16)
  1054bc:	20800214 	ori	r2,r4,8
  1054c0:	8080030d 	sth	r2,12(r16)
  1054c4:	183fd81e 	bne	r3,zero,105428 <__swsetup_r+0x44>
  1054c8:	1100a00c 	andi	r4,r2,640
  1054cc:	21008020 	cmpeqi	r4,r4,512
  1054d0:	203fd51e 	bne	r4,zero,105428 <__swsetup_r+0x44>
  1054d4:	800b883a 	mov	r5,r16
  1054d8:	8809883a 	mov	r4,r17
  1054dc:	0107f400 	call	107f40 <__smakebuf_r>
  1054e0:	8080030b 	ldhu	r2,12(r16)
  1054e4:	80c00417 	ldw	r3,16(r16)
  1054e8:	003fcf06 	br	105428 <__swsetup_r+0x44>
  1054ec:	0005883a 	mov	r2,zero
  1054f0:	003fd206 	br	10543c <__swsetup_r+0x58>
  1054f4:	81400c17 	ldw	r5,48(r16)
  1054f8:	28000626 	beq	r5,zero,105514 <__swsetup_r+0x130>
  1054fc:	80801004 	addi	r2,r16,64
  105500:	28800326 	beq	r5,r2,105510 <__swsetup_r+0x12c>
  105504:	8809883a 	mov	r4,r17
  105508:	01075600 	call	107560 <_free_r>
  10550c:	8100030b 	ldhu	r4,12(r16)
  105510:	80000c15 	stw	zero,48(r16)
  105514:	80c00417 	ldw	r3,16(r16)
  105518:	00bff6c4 	movi	r2,-37
  10551c:	1108703a 	and	r4,r2,r4
  105520:	80000115 	stw	zero,4(r16)
  105524:	80c00015 	stw	r3,0(r16)
  105528:	003fe406 	br	1054bc <__swsetup_r+0xd8>
  10552c:	00800244 	movi	r2,9
  105530:	88800015 	stw	r2,0(r17)
  105534:	20801014 	ori	r2,r4,64
  105538:	8080030d 	sth	r2,12(r16)
  10553c:	00bfffc4 	movi	r2,-1
  105540:	003fc106 	br	105448 <__swsetup_r+0x64>

00105544 <quorem>:
  105544:	defff204 	addi	sp,sp,-56
  105548:	dc000415 	stw	r16,16(sp)
  10554c:	20800417 	ldw	r2,16(r4)
  105550:	2c000417 	ldw	r16,16(r5)
  105554:	dfc00d15 	stw	ra,52(sp)
  105558:	df000c15 	stw	fp,48(sp)
  10555c:	ddc00b15 	stw	r23,44(sp)
  105560:	dd800a15 	stw	r22,40(sp)
  105564:	dd400915 	stw	r21,36(sp)
  105568:	dd000815 	stw	r20,32(sp)
  10556c:	dcc00715 	stw	r19,28(sp)
  105570:	dc800615 	stw	r18,24(sp)
  105574:	dc400515 	stw	r17,20(sp)
  105578:	14007d16 	blt	r2,r16,105770 <quorem+0x22c>
  10557c:	843fffc4 	addi	r16,r16,-1
  105580:	802c90ba 	slli	r22,r16,2
  105584:	2f000504 	addi	fp,r5,20
  105588:	24c00504 	addi	r19,r4,20
  10558c:	e5a5883a 	add	r18,fp,r22
  105590:	9d85883a 	add	r2,r19,r22
  105594:	95c00017 	ldw	r23,0(r18)
  105598:	15000017 	ldw	r20,0(r2)
  10559c:	d9400215 	stw	r5,8(sp)
  1055a0:	bdc00044 	addi	r23,r23,1
  1055a4:	d9000115 	stw	r4,4(sp)
  1055a8:	b80b883a 	mov	r5,r23
  1055ac:	a009883a 	mov	r4,r20
  1055b0:	dcc00015 	stw	r19,0(sp)
  1055b4:	d8800315 	stw	r2,12(sp)
  1055b8:	0102da00 	call	102da0 <__udivsi3>
  1055bc:	1023883a 	mov	r17,r2
  1055c0:	a5c03236 	bltu	r20,r23,10568c <quorem+0x148>
  1055c4:	e02d883a 	mov	r22,fp
  1055c8:	9829883a 	mov	r20,r19
  1055cc:	002b883a 	mov	r21,zero
  1055d0:	002f883a 	mov	r23,zero
  1055d4:	b5800104 	addi	r22,r22,4
  1055d8:	b4ffff17 	ldw	r19,-4(r22)
  1055dc:	880b883a 	mov	r5,r17
  1055e0:	a5000104 	addi	r20,r20,4
  1055e4:	993fffcc 	andi	r4,r19,65535
  1055e8:	0102e600 	call	102e60 <__mulsi3>
  1055ec:	9808d43a 	srli	r4,r19,16
  1055f0:	880b883a 	mov	r5,r17
  1055f4:	156b883a 	add	r21,r2,r21
  1055f8:	0102e600 	call	102e60 <__mulsi3>
  1055fc:	a0ffff17 	ldw	r3,-4(r20)
  105600:	a80ad43a 	srli	r5,r21,16
  105604:	a93fffcc 	andi	r4,r21,65535
  105608:	b909c83a 	sub	r4,r23,r4
  10560c:	19bfffcc 	andi	r6,r3,65535
  105610:	2189883a 	add	r4,r4,r6
  105614:	1806d43a 	srli	r3,r3,16
  105618:	116b883a 	add	r21,r2,r5
  10561c:	2005d43a 	srai	r2,r4,16
  105620:	a97fffcc 	andi	r5,r21,65535
  105624:	1947c83a 	sub	r3,r3,r5
  105628:	1887883a 	add	r3,r3,r2
  10562c:	1804943a 	slli	r2,r3,16
  105630:	213fffcc 	andi	r4,r4,65535
  105634:	a82ad43a 	srli	r21,r21,16
  105638:	1108b03a 	or	r4,r2,r4
  10563c:	a13fff15 	stw	r4,-4(r20)
  105640:	182fd43a 	srai	r23,r3,16
  105644:	95bfe32e 	bgeu	r18,r22,1055d4 <quorem+0x90>
  105648:	d8c00317 	ldw	r3,12(sp)
  10564c:	18800017 	ldw	r2,0(r3)
  105650:	10000e1e 	bne	r2,zero,10568c <quorem+0x148>
  105654:	d9000017 	ldw	r4,0(sp)
  105658:	18bfff04 	addi	r2,r3,-4
  10565c:	2080092e 	bgeu	r4,r2,105684 <quorem+0x140>
  105660:	18ffff17 	ldw	r3,-4(r3)
  105664:	18000326 	beq	r3,zero,105674 <quorem+0x130>
  105668:	00000606 	br	105684 <quorem+0x140>
  10566c:	10c00017 	ldw	r3,0(r2)
  105670:	1800041e 	bne	r3,zero,105684 <quorem+0x140>
  105674:	d8c00017 	ldw	r3,0(sp)
  105678:	10bfff04 	addi	r2,r2,-4
  10567c:	843fffc4 	addi	r16,r16,-1
  105680:	18bffa36 	bltu	r3,r2,10566c <quorem+0x128>
  105684:	d8800117 	ldw	r2,4(sp)
  105688:	14000415 	stw	r16,16(r2)
  10568c:	d9400217 	ldw	r5,8(sp)
  105690:	d9000117 	ldw	r4,4(sp)
  105694:	01094740 	call	109474 <__mcmp>
  105698:	10002816 	blt	r2,zero,10573c <quorem+0x1f8>
  10569c:	d9800017 	ldw	r6,0(sp)
  1056a0:	8c400044 	addi	r17,r17,1
  1056a4:	0007883a 	mov	r3,zero
  1056a8:	e7000104 	addi	fp,fp,4
  1056ac:	e13fff17 	ldw	r4,-4(fp)
  1056b0:	31400017 	ldw	r5,0(r6)
  1056b4:	31800104 	addi	r6,r6,4
  1056b8:	20bfffcc 	andi	r2,r4,65535
  1056bc:	1887c83a 	sub	r3,r3,r2
  1056c0:	28bfffcc 	andi	r2,r5,65535
  1056c4:	1885883a 	add	r2,r3,r2
  1056c8:	2008d43a 	srli	r4,r4,16
  1056cc:	2806d43a 	srli	r3,r5,16
  1056d0:	100fd43a 	srai	r7,r2,16
  1056d4:	117fffcc 	andi	r5,r2,65535
  1056d8:	1907c83a 	sub	r3,r3,r4
  1056dc:	19c7883a 	add	r3,r3,r7
  1056e0:	1804943a 	slli	r2,r3,16
  1056e4:	1807d43a 	srai	r3,r3,16
  1056e8:	1144b03a 	or	r2,r2,r5
  1056ec:	30bfff15 	stw	r2,-4(r6)
  1056f0:	973fed2e 	bgeu	r18,fp,1056a8 <quorem+0x164>
  1056f4:	800690ba 	slli	r3,r16,2
  1056f8:	d9000017 	ldw	r4,0(sp)
  1056fc:	20c7883a 	add	r3,r4,r3
  105700:	18800017 	ldw	r2,0(r3)
  105704:	10000d1e 	bne	r2,zero,10573c <quorem+0x1f8>
  105708:	18bfff04 	addi	r2,r3,-4
  10570c:	2080092e 	bgeu	r4,r2,105734 <quorem+0x1f0>
  105710:	18ffff17 	ldw	r3,-4(r3)
  105714:	18000326 	beq	r3,zero,105724 <quorem+0x1e0>
  105718:	00000606 	br	105734 <quorem+0x1f0>
  10571c:	10c00017 	ldw	r3,0(r2)
  105720:	1800041e 	bne	r3,zero,105734 <quorem+0x1f0>
  105724:	d8c00017 	ldw	r3,0(sp)
  105728:	10bfff04 	addi	r2,r2,-4
  10572c:	843fffc4 	addi	r16,r16,-1
  105730:	18bffa36 	bltu	r3,r2,10571c <quorem+0x1d8>
  105734:	d8800117 	ldw	r2,4(sp)
  105738:	14000415 	stw	r16,16(r2)
  10573c:	8805883a 	mov	r2,r17
  105740:	dfc00d17 	ldw	ra,52(sp)
  105744:	df000c17 	ldw	fp,48(sp)
  105748:	ddc00b17 	ldw	r23,44(sp)
  10574c:	dd800a17 	ldw	r22,40(sp)
  105750:	dd400917 	ldw	r21,36(sp)
  105754:	dd000817 	ldw	r20,32(sp)
  105758:	dcc00717 	ldw	r19,28(sp)
  10575c:	dc800617 	ldw	r18,24(sp)
  105760:	dc400517 	ldw	r17,20(sp)
  105764:	dc000417 	ldw	r16,16(sp)
  105768:	dec00e04 	addi	sp,sp,56
  10576c:	f800283a 	ret
  105770:	0005883a 	mov	r2,zero
  105774:	003ff206 	br	105740 <quorem+0x1fc>

00105778 <_dtoa_r>:
  105778:	20801017 	ldw	r2,64(r4)
  10577c:	deffe204 	addi	sp,sp,-120
  105780:	df001c15 	stw	fp,112(sp)
  105784:	dcc01715 	stw	r19,92(sp)
  105788:	dc401515 	stw	r17,84(sp)
  10578c:	dc001415 	stw	r16,80(sp)
  105790:	dfc01d15 	stw	ra,116(sp)
  105794:	ddc01b15 	stw	r23,108(sp)
  105798:	dd801a15 	stw	r22,104(sp)
  10579c:	dd401915 	stw	r21,100(sp)
  1057a0:	dd001815 	stw	r20,96(sp)
  1057a4:	dc801615 	stw	r18,88(sp)
  1057a8:	d9400115 	stw	r5,4(sp)
  1057ac:	d9c00215 	stw	r7,8(sp)
  1057b0:	2039883a 	mov	fp,r4
  1057b4:	3027883a 	mov	r19,r6
  1057b8:	dc002017 	ldw	r16,128(sp)
  1057bc:	3023883a 	mov	r17,r6
  1057c0:	10000826 	beq	r2,zero,1057e4 <_dtoa_r+0x6c>
  1057c4:	21801117 	ldw	r6,68(r4)
  1057c8:	00c00044 	movi	r3,1
  1057cc:	100b883a 	mov	r5,r2
  1057d0:	1986983a 	sll	r3,r3,r6
  1057d4:	11800115 	stw	r6,4(r2)
  1057d8:	10c00215 	stw	r3,8(r2)
  1057dc:	0108c180 	call	108c18 <_Bfree>
  1057e0:	e0001015 	stw	zero,64(fp)
  1057e4:	98018116 	blt	r19,zero,105dec <_dtoa_r+0x674>
  1057e8:	80000015 	stw	zero,0(r16)
  1057ec:	989ffc2c 	andhi	r2,r19,32752
  1057f0:	00dffc34 	movhi	r3,32752
  1057f4:	10c18626 	beq	r2,r3,105e10 <_dtoa_r+0x698>
  1057f8:	d9000117 	ldw	r4,4(sp)
  1057fc:	000d883a 	mov	r6,zero
  105800:	000f883a 	mov	r7,zero
  105804:	880b883a 	mov	r5,r17
  105808:	010e2e00 	call	10e2e0 <__eqdf2>
  10580c:	1000191e 	bne	r2,zero,105874 <_dtoa_r+0xfc>
  105810:	d8c01f17 	ldw	r3,124(sp)
  105814:	00800044 	movi	r2,1
  105818:	18800015 	stw	r2,0(r3)
  10581c:	d8802117 	ldw	r2,132(sp)
  105820:	10032426 	beq	r2,zero,1064b4 <_dtoa_r+0xd3c>
  105824:	d9002117 	ldw	r4,132(sp)
  105828:	00800474 	movhi	r2,17
  10582c:	108ccc44 	addi	r2,r2,13105
  105830:	00c00474 	movhi	r3,17
  105834:	20800015 	stw	r2,0(r4)
  105838:	188ccc04 	addi	r2,r3,13104
  10583c:	d8800315 	stw	r2,12(sp)
  105840:	d8800317 	ldw	r2,12(sp)
  105844:	dfc01d17 	ldw	ra,116(sp)
  105848:	df001c17 	ldw	fp,112(sp)
  10584c:	ddc01b17 	ldw	r23,108(sp)
  105850:	dd801a17 	ldw	r22,104(sp)
  105854:	dd401917 	ldw	r21,100(sp)
  105858:	dd001817 	ldw	r20,96(sp)
  10585c:	dcc01717 	ldw	r19,92(sp)
  105860:	dc801617 	ldw	r18,88(sp)
  105864:	dc401517 	ldw	r17,84(sp)
  105868:	dc001417 	ldw	r16,80(sp)
  10586c:	dec01e04 	addi	sp,sp,120
  105870:	f800283a 	ret
  105874:	dc800117 	ldw	r18,4(sp)
  105878:	d8801204 	addi	r2,sp,72
  10587c:	9820d53a 	srli	r16,r19,20
  105880:	d8800015 	stw	r2,0(sp)
  105884:	d9c01304 	addi	r7,sp,76
  105888:	900b883a 	mov	r5,r18
  10588c:	880d883a 	mov	r6,r17
  105890:	e009883a 	mov	r4,fp
  105894:	01097e80 	call	1097e8 <__d2b>
  105898:	102b883a 	mov	r21,r2
  10589c:	8001701e 	bne	r16,zero,105e60 <_dtoa_r+0x6e8>
  1058a0:	dc801217 	ldw	r18,72(sp)
  1058a4:	dc001317 	ldw	r16,76(sp)
  1058a8:	9421883a 	add	r16,r18,r16
  1058ac:	80810c84 	addi	r2,r16,1074
  1058b0:	10c00850 	cmplti	r3,r2,33
  1058b4:	18030f1e 	bne	r3,zero,1064f4 <_dtoa_r+0xd7c>
  1058b8:	01001004 	movi	r4,64
  1058bc:	2085c83a 	sub	r2,r4,r2
  1058c0:	98a6983a 	sll	r19,r19,r2
  1058c4:	d8800117 	ldw	r2,4(sp)
  1058c8:	81010484 	addi	r4,r16,1042
  1058cc:	1108d83a 	srl	r4,r2,r4
  1058d0:	9908b03a 	or	r4,r19,r4
  1058d4:	010f8280 	call	10f828 <__floatunsidf>
  1058d8:	1009883a 	mov	r4,r2
  1058dc:	017f8434 	movhi	r5,65040
  1058e0:	00800044 	movi	r2,1
  1058e4:	194b883a 	add	r5,r3,r5
  1058e8:	843fffc4 	addi	r16,r16,-1
  1058ec:	d8800a15 	stw	r2,40(sp)
  1058f0:	000d883a 	mov	r6,zero
  1058f4:	01cffe34 	movhi	r7,16376
  1058f8:	010ed200 	call	10ed20 <__subdf3>
  1058fc:	0198dbf4 	movhi	r6,25455
  105900:	01cff4f4 	movhi	r7,16339
  105904:	3190d844 	addi	r6,r6,17249
  105908:	39e1e9c4 	addi	r7,r7,-30809
  10590c:	1009883a 	mov	r4,r2
  105910:	180b883a 	mov	r5,r3
  105914:	010e5400 	call	10e540 <__muldf3>
  105918:	01a2d874 	movhi	r6,35681
  10591c:	01cff1f4 	movhi	r7,16327
  105920:	31b22cc4 	addi	r6,r6,-14157
  105924:	39e28a04 	addi	r7,r7,-30168
  105928:	180b883a 	mov	r5,r3
  10592c:	1009883a 	mov	r4,r2
  105930:	010cfdc0 	call	10cfdc <__adddf3>
  105934:	8009883a 	mov	r4,r16
  105938:	1029883a 	mov	r20,r2
  10593c:	1827883a 	mov	r19,r3
  105940:	010f7600 	call	10f760 <__floatsidf>
  105944:	019427f4 	movhi	r6,20639
  105948:	01cff4f4 	movhi	r7,16339
  10594c:	319e7ec4 	addi	r6,r6,31227
  105950:	39d104c4 	addi	r7,r7,17427
  105954:	1009883a 	mov	r4,r2
  105958:	180b883a 	mov	r5,r3
  10595c:	010e5400 	call	10e540 <__muldf3>
  105960:	100d883a 	mov	r6,r2
  105964:	180f883a 	mov	r7,r3
  105968:	a009883a 	mov	r4,r20
  10596c:	980b883a 	mov	r5,r19
  105970:	010cfdc0 	call	10cfdc <__adddf3>
  105974:	1009883a 	mov	r4,r2
  105978:	180b883a 	mov	r5,r3
  10597c:	1029883a 	mov	r20,r2
  105980:	1827883a 	mov	r19,r3
  105984:	010f6e00 	call	10f6e0 <__fixdfsi>
  105988:	000d883a 	mov	r6,zero
  10598c:	000f883a 	mov	r7,zero
  105990:	a009883a 	mov	r4,r20
  105994:	980b883a 	mov	r5,r19
  105998:	102d883a 	mov	r22,r2
  10599c:	010e4500 	call	10e450 <__ledf2>
  1059a0:	1002ba16 	blt	r2,zero,10648c <_dtoa_r+0xd14>
  1059a4:	9421c83a 	sub	r16,r18,r16
  1059a8:	b08005e8 	cmpgeui	r2,r22,23
  1059ac:	853fffc4 	addi	r20,r16,-1
  1059b0:	1002ae1e 	bne	r2,zero,10646c <_dtoa_r+0xcf4>
  1059b4:	b00690fa 	slli	r3,r22,3
  1059b8:	00800474 	movhi	r2,17
  1059bc:	108cf004 	addi	r2,r2,13248
  1059c0:	10c5883a 	add	r2,r2,r3
  1059c4:	11800017 	ldw	r6,0(r2)
  1059c8:	11c00117 	ldw	r7,4(r2)
  1059cc:	d9000117 	ldw	r4,4(sp)
  1059d0:	880b883a 	mov	r5,r17
  1059d4:	010e4500 	call	10e450 <__ledf2>
  1059d8:	10026f0e 	bge	r2,zero,106398 <_dtoa_r+0xc20>
  1059dc:	d8000915 	stw	zero,36(sp)
  1059e0:	b5bfffc4 	addi	r22,r22,-1
  1059e4:	a002a416 	blt	r20,zero,106478 <_dtoa_r+0xd00>
  1059e8:	d8000515 	stw	zero,20(sp)
  1059ec:	b0026d0e 	bge	r22,zero,1063a4 <_dtoa_r+0xc2c>
  1059f0:	d8800517 	ldw	r2,20(sp)
  1059f4:	d8c00217 	ldw	r3,8(sp)
  1059f8:	dd800415 	stw	r22,16(sp)
  1059fc:	1585c83a 	sub	r2,r2,r22
  105a00:	d8800515 	stw	r2,20(sp)
  105a04:	0585c83a 	sub	r2,zero,r22
  105a08:	d8800815 	stw	r2,32(sp)
  105a0c:	188002a8 	cmpgeui	r2,r3,10
  105a10:	002d883a 	mov	r22,zero
  105a14:	1002691e 	bne	r2,zero,1063bc <_dtoa_r+0xc44>
  105a18:	18800190 	cmplti	r2,r3,6
  105a1c:	1002ba1e 	bne	r2,zero,106508 <_dtoa_r+0xd90>
  105a20:	18bfff04 	addi	r2,r3,-4
  105a24:	d8800215 	stw	r2,8(sp)
  105a28:	0021883a 	mov	r16,zero
  105a2c:	d8c00217 	ldw	r3,8(sp)
  105a30:	188000e0 	cmpeqi	r2,r3,3
  105a34:	10039d1e 	bne	r2,zero,1068ac <_dtoa_r+0x1134>
  105a38:	18800108 	cmpgei	r2,r3,4
  105a3c:	10027a26 	beq	r2,zero,106428 <_dtoa_r+0xcb0>
  105a40:	d8c00217 	ldw	r3,8(sp)
  105a44:	18800120 	cmpeqi	r2,r3,4
  105a48:	10026926 	beq	r2,zero,1063f0 <_dtoa_r+0xc78>
  105a4c:	00800044 	movi	r2,1
  105a50:	d8800715 	stw	r2,28(sp)
  105a54:	d8801e17 	ldw	r2,120(sp)
  105a58:	0083670e 	bge	zero,r2,1067f8 <_dtoa_r+0x1080>
  105a5c:	d8800b15 	stw	r2,44(sp)
  105a60:	d8800615 	stw	r2,24(sp)
  105a64:	100d883a 	mov	r6,r2
  105a68:	e0001115 	stw	zero,68(fp)
  105a6c:	30800610 	cmplti	r2,r6,24
  105a70:	dc800617 	ldw	r18,24(sp)
  105a74:	1004eb1e 	bne	r2,zero,106e24 <_dtoa_r+0x16ac>
  105a78:	00c00044 	movi	r3,1
  105a7c:	00800104 	movi	r2,4
  105a80:	1085883a 	add	r2,r2,r2
  105a84:	11000504 	addi	r4,r2,20
  105a88:	180b883a 	mov	r5,r3
  105a8c:	18c00044 	addi	r3,r3,1
  105a90:	313ffb2e 	bgeu	r6,r4,105a80 <_dtoa_r+0x308>
  105a94:	e1401115 	stw	r5,68(fp)
  105a98:	e009883a 	mov	r4,fp
  105a9c:	0108b740 	call	108b74 <_Balloc>
  105aa0:	d8800315 	stw	r2,12(sp)
  105aa4:	e0801015 	stw	r2,64(fp)
  105aa8:	948003e8 	cmpgeui	r18,r18,15
  105aac:	9000fe1e 	bne	r18,zero,105ea8 <_dtoa_r+0x730>
  105ab0:	8000fd26 	beq	r16,zero,105ea8 <_dtoa_r+0x730>
  105ab4:	d9000417 	ldw	r4,16(sp)
  105ab8:	0103c60e 	bge	zero,r4,1069d4 <_dtoa_r+0x125c>
  105abc:	208003cc 	andi	r2,r4,15
  105ac0:	100690fa 	slli	r3,r2,3
  105ac4:	202fd13a 	srai	r23,r4,4
  105ac8:	00800474 	movhi	r2,17
  105acc:	108cf004 	addi	r2,r2,13248
  105ad0:	10c5883a 	add	r2,r2,r3
  105ad4:	b8c0040c 	andi	r3,r23,16
  105ad8:	12800017 	ldw	r10,0(r2)
  105adc:	12400117 	ldw	r9,4(r2)
  105ae0:	1803621e 	bne	r3,zero,10686c <_dtoa_r+0x10f4>
  105ae4:	d8800117 	ldw	r2,4(sp)
  105ae8:	8827883a 	mov	r19,r17
  105aec:	04000084 	movi	r16,2
  105af0:	d8800c15 	stw	r2,48(sp)
  105af4:	04800474 	movhi	r18,17
  105af8:	948ce604 	addi	r18,r18,13208
  105afc:	b8000f26 	beq	r23,zero,105b3c <_dtoa_r+0x3c4>
  105b00:	5005883a 	mov	r2,r10
  105b04:	4807883a 	mov	r3,r9
  105b08:	b980004c 	andi	r6,r23,1
  105b0c:	1009883a 	mov	r4,r2
  105b10:	b82fd07a 	srai	r23,r23,1
  105b14:	180b883a 	mov	r5,r3
  105b18:	30000426 	beq	r6,zero,105b2c <_dtoa_r+0x3b4>
  105b1c:	91800017 	ldw	r6,0(r18)
  105b20:	91c00117 	ldw	r7,4(r18)
  105b24:	84000044 	addi	r16,r16,1
  105b28:	010e5400 	call	10e540 <__muldf3>
  105b2c:	94800204 	addi	r18,r18,8
  105b30:	b83ff51e 	bne	r23,zero,105b08 <_dtoa_r+0x390>
  105b34:	1015883a 	mov	r10,r2
  105b38:	1813883a 	mov	r9,r3
  105b3c:	d9000c17 	ldw	r4,48(sp)
  105b40:	980b883a 	mov	r5,r19
  105b44:	500d883a 	mov	r6,r10
  105b48:	480f883a 	mov	r7,r9
  105b4c:	010d97c0 	call	10d97c <__divdf3>
  105b50:	1025883a 	mov	r18,r2
  105b54:	1827883a 	mov	r19,r3
  105b58:	d8800917 	ldw	r2,36(sp)
  105b5c:	10000626 	beq	r2,zero,105b78 <_dtoa_r+0x400>
  105b60:	000d883a 	mov	r6,zero
  105b64:	01cffc34 	movhi	r7,16368
  105b68:	9009883a 	mov	r4,r18
  105b6c:	980b883a 	mov	r5,r19
  105b70:	010e4500 	call	10e450 <__ledf2>
  105b74:	10042616 	blt	r2,zero,106c10 <_dtoa_r+0x1498>
  105b78:	8009883a 	mov	r4,r16
  105b7c:	010f7600 	call	10f760 <__floatsidf>
  105b80:	900d883a 	mov	r6,r18
  105b84:	980f883a 	mov	r7,r19
  105b88:	1009883a 	mov	r4,r2
  105b8c:	180b883a 	mov	r5,r3
  105b90:	010e5400 	call	10e540 <__muldf3>
  105b94:	000d883a 	mov	r6,zero
  105b98:	01d00734 	movhi	r7,16412
  105b9c:	1009883a 	mov	r4,r2
  105ba0:	180b883a 	mov	r5,r3
  105ba4:	010cfdc0 	call	10cfdc <__adddf3>
  105ba8:	d8800c15 	stw	r2,48(sp)
  105bac:	00bf3034 	movhi	r2,64704
  105bb0:	1885883a 	add	r2,r3,r2
  105bb4:	d8800d15 	stw	r2,52(sp)
  105bb8:	d8800617 	ldw	r2,24(sp)
  105bbc:	10036d26 	beq	r2,zero,106974 <_dtoa_r+0x11fc>
  105bc0:	d8800417 	ldw	r2,16(sp)
  105bc4:	d8800f15 	stw	r2,60(sp)
  105bc8:	d8800617 	ldw	r2,24(sp)
  105bcc:	d8800e15 	stw	r2,56(sp)
  105bd0:	980b883a 	mov	r5,r19
  105bd4:	9009883a 	mov	r4,r18
  105bd8:	010f6e00 	call	10f6e0 <__fixdfsi>
  105bdc:	1009883a 	mov	r4,r2
  105be0:	102f883a 	mov	r23,r2
  105be4:	010f7600 	call	10f760 <__floatsidf>
  105be8:	100d883a 	mov	r6,r2
  105bec:	180f883a 	mov	r7,r3
  105bf0:	9009883a 	mov	r4,r18
  105bf4:	980b883a 	mov	r5,r19
  105bf8:	010ed200 	call	10ed20 <__subdf3>
  105bfc:	1025883a 	mov	r18,r2
  105c00:	d8800e17 	ldw	r2,56(sp)
  105c04:	1821883a 	mov	r16,r3
  105c08:	ba400c04 	addi	r9,r23,48
  105c0c:	10bfffc4 	addi	r2,r2,-1
  105c10:	100690fa 	slli	r3,r2,3
  105c14:	00800474 	movhi	r2,17
  105c18:	108cf004 	addi	r2,r2,13248
  105c1c:	10c5883a 	add	r2,r2,r3
  105c20:	11800017 	ldw	r6,0(r2)
  105c24:	d8c00317 	ldw	r3,12(sp)
  105c28:	11c00117 	ldw	r7,4(r2)
  105c2c:	d8800717 	ldw	r2,28(sp)
  105c30:	4811883a 	mov	r8,r9
  105c34:	da001015 	stw	r8,64(sp)
  105c38:	1dc00044 	addi	r23,r3,1
  105c3c:	1003a226 	beq	r2,zero,106ac8 <_dtoa_r+0x1350>
  105c40:	0009883a 	mov	r4,zero
  105c44:	014ff834 	movhi	r5,16352
  105c48:	da401115 	stw	r9,68(sp)
  105c4c:	010d97c0 	call	10d97c <__divdf3>
  105c50:	d9800c17 	ldw	r6,48(sp)
  105c54:	d9c00d17 	ldw	r7,52(sp)
  105c58:	1009883a 	mov	r4,r2
  105c5c:	180b883a 	mov	r5,r3
  105c60:	010ed200 	call	10ed20 <__subdf3>
  105c64:	1827883a 	mov	r19,r3
  105c68:	da401117 	ldw	r9,68(sp)
  105c6c:	d8c00317 	ldw	r3,12(sp)
  105c70:	900d883a 	mov	r6,r18
  105c74:	800f883a 	mov	r7,r16
  105c78:	1a400005 	stb	r9,0(r3)
  105c7c:	1009883a 	mov	r4,r2
  105c80:	980b883a 	mov	r5,r19
  105c84:	d8800c15 	stw	r2,48(sp)
  105c88:	010e3600 	call	10e360 <__gedf2>
  105c8c:	da001017 	ldw	r8,64(sp)
  105c90:	00804816 	blt	zero,r2,105db4 <_dtoa_r+0x63c>
  105c94:	900d883a 	mov	r6,r18
  105c98:	800f883a 	mov	r7,r16
  105c9c:	0009883a 	mov	r4,zero
  105ca0:	014ffc34 	movhi	r5,16368
  105ca4:	da000d15 	stw	r8,52(sp)
  105ca8:	010ed200 	call	10ed20 <__subdf3>
  105cac:	d9000c17 	ldw	r4,48(sp)
  105cb0:	100d883a 	mov	r6,r2
  105cb4:	180f883a 	mov	r7,r3
  105cb8:	980b883a 	mov	r5,r19
  105cbc:	010e3600 	call	10e360 <__gedf2>
  105cc0:	da000d17 	ldw	r8,52(sp)
  105cc4:	00844e16 	blt	zero,r2,106e00 <_dtoa_r+0x1688>
  105cc8:	d8c00e17 	ldw	r3,56(sp)
  105ccc:	18800060 	cmpeqi	r2,r3,1
  105cd0:	1000751e 	bne	r2,zero,105ea8 <_dtoa_r+0x730>
  105cd4:	d8800317 	ldw	r2,12(sp)
  105cd8:	dd800d15 	stw	r22,52(sp)
  105cdc:	dd000e15 	stw	r20,56(sp)
  105ce0:	10c5883a 	add	r2,r2,r3
  105ce4:	dd000c17 	ldw	r20,48(sp)
  105ce8:	102d883a 	mov	r22,r2
  105cec:	dc400c15 	stw	r17,48(sp)
  105cf0:	00000806 	br	105d14 <_dtoa_r+0x59c>
  105cf4:	010ed200 	call	10ed20 <__subdf3>
  105cf8:	a00d883a 	mov	r6,r20
  105cfc:	980f883a 	mov	r7,r19
  105d00:	1009883a 	mov	r4,r2
  105d04:	180b883a 	mov	r5,r3
  105d08:	010e4500 	call	10e450 <__ledf2>
  105d0c:	10042316 	blt	r2,zero,106d9c <_dtoa_r+0x1624>
  105d10:	bd806226 	beq	r23,r22,105e9c <_dtoa_r+0x724>
  105d14:	a009883a 	mov	r4,r20
  105d18:	980b883a 	mov	r5,r19
  105d1c:	000d883a 	mov	r6,zero
  105d20:	01d00934 	movhi	r7,16420
  105d24:	010e5400 	call	10e540 <__muldf3>
  105d28:	000d883a 	mov	r6,zero
  105d2c:	01d00934 	movhi	r7,16420
  105d30:	9009883a 	mov	r4,r18
  105d34:	800b883a 	mov	r5,r16
  105d38:	1029883a 	mov	r20,r2
  105d3c:	1827883a 	mov	r19,r3
  105d40:	010e5400 	call	10e540 <__muldf3>
  105d44:	180b883a 	mov	r5,r3
  105d48:	1009883a 	mov	r4,r2
  105d4c:	1821883a 	mov	r16,r3
  105d50:	1025883a 	mov	r18,r2
  105d54:	010f6e00 	call	10f6e0 <__fixdfsi>
  105d58:	1009883a 	mov	r4,r2
  105d5c:	1023883a 	mov	r17,r2
  105d60:	010f7600 	call	10f760 <__floatsidf>
  105d64:	9009883a 	mov	r4,r18
  105d68:	800b883a 	mov	r5,r16
  105d6c:	100d883a 	mov	r6,r2
  105d70:	180f883a 	mov	r7,r3
  105d74:	010ed200 	call	10ed20 <__subdf3>
  105d78:	bdc00044 	addi	r23,r23,1
  105d7c:	8c400c04 	addi	r17,r17,48
  105d80:	a00d883a 	mov	r6,r20
  105d84:	980f883a 	mov	r7,r19
  105d88:	1009883a 	mov	r4,r2
  105d8c:	180b883a 	mov	r5,r3
  105d90:	bc7fffc5 	stb	r17,-1(r23)
  105d94:	1025883a 	mov	r18,r2
  105d98:	1821883a 	mov	r16,r3
  105d9c:	010e4500 	call	10e450 <__ledf2>
  105da0:	900d883a 	mov	r6,r18
  105da4:	800f883a 	mov	r7,r16
  105da8:	0009883a 	mov	r4,zero
  105dac:	014ffc34 	movhi	r5,16368
  105db0:	103fd00e 	bge	r2,zero,105cf4 <_dtoa_r+0x57c>
  105db4:	d8800f17 	ldw	r2,60(sp)
  105db8:	10800044 	addi	r2,r2,1
  105dbc:	d8800415 	stw	r2,16(sp)
  105dc0:	a80b883a 	mov	r5,r21
  105dc4:	e009883a 	mov	r4,fp
  105dc8:	0108c180 	call	108c18 <_Bfree>
  105dcc:	d8801f17 	ldw	r2,124(sp)
  105dd0:	d8c00417 	ldw	r3,16(sp)
  105dd4:	b8000005 	stb	zero,0(r23)
  105dd8:	10c00015 	stw	r3,0(r2)
  105ddc:	d8802117 	ldw	r2,132(sp)
  105de0:	103e9726 	beq	r2,zero,105840 <_dtoa_r+0xc8>
  105de4:	15c00015 	stw	r23,0(r2)
  105de8:	003e9506 	br	105840 <_dtoa_r+0xc8>
  105dec:	04600034 	movhi	r17,32768
  105df0:	8c7fffc4 	addi	r17,r17,-1
  105df4:	9c62703a 	and	r17,r19,r17
  105df8:	00800044 	movi	r2,1
  105dfc:	8827883a 	mov	r19,r17
  105e00:	80800015 	stw	r2,0(r16)
  105e04:	00dffc34 	movhi	r3,32752
  105e08:	989ffc2c 	andhi	r2,r19,32752
  105e0c:	10fe7a1e 	bne	r2,r3,1057f8 <_dtoa_r+0x80>
  105e10:	00800434 	movhi	r2,16
  105e14:	d8c01f17 	ldw	r3,124(sp)
  105e18:	10bfffc4 	addi	r2,r2,-1
  105e1c:	98a6703a 	and	r19,r19,r2
  105e20:	0089c3c4 	movi	r2,9999
  105e24:	18800015 	stw	r2,0(r3)
  105e28:	d8800117 	ldw	r2,4(sp)
  105e2c:	98aab03a 	or	r21,r19,r2
  105e30:	a800141e 	bne	r21,zero,105e84 <_dtoa_r+0x70c>
  105e34:	d8802117 	ldw	r2,132(sp)
  105e38:	1003f626 	beq	r2,zero,106e14 <_dtoa_r+0x169c>
  105e3c:	00800474 	movhi	r2,17
  105e40:	1007883a 	mov	r3,r2
  105e44:	18ccd604 	addi	r3,r3,13144
  105e48:	00800474 	movhi	r2,17
  105e4c:	d8c00315 	stw	r3,12(sp)
  105e50:	108cd804 	addi	r2,r2,13152
  105e54:	d8c02117 	ldw	r3,132(sp)
  105e58:	18800015 	stw	r2,0(r3)
  105e5c:	003e7806 	br	105840 <_dtoa_r+0xc8>
  105e60:	01400434 	movhi	r5,16
  105e64:	297fffc4 	addi	r5,r5,-1
  105e68:	894a703a 	and	r5,r17,r5
  105e6c:	9009883a 	mov	r4,r18
  105e70:	294ffc34 	orhi	r5,r5,16368
  105e74:	843f0044 	addi	r16,r16,-1023
  105e78:	dc801217 	ldw	r18,72(sp)
  105e7c:	d8000a15 	stw	zero,40(sp)
  105e80:	003e9b06 	br	1058f0 <_dtoa_r+0x178>
  105e84:	d8802117 	ldw	r2,132(sp)
  105e88:	1002461e 	bne	r2,zero,1067a4 <_dtoa_r+0x102c>
  105e8c:	00800474 	movhi	r2,17
  105e90:	108cd504 	addi	r2,r2,13140
  105e94:	d8800315 	stw	r2,12(sp)
  105e98:	003e6906 	br	105840 <_dtoa_r+0xc8>
  105e9c:	dd800d17 	ldw	r22,52(sp)
  105ea0:	dd000e17 	ldw	r20,56(sp)
  105ea4:	dc400c17 	ldw	r17,48(sp)
  105ea8:	d8801317 	ldw	r2,76(sp)
  105eac:	10009f16 	blt	r2,zero,10612c <_dtoa_r+0x9b4>
  105eb0:	d9000417 	ldw	r4,16(sp)
  105eb4:	20c003c8 	cmpgei	r3,r4,15
  105eb8:	18009c1e 	bne	r3,zero,10612c <_dtoa_r+0x9b4>
  105ebc:	200690fa 	slli	r3,r4,3
  105ec0:	00800474 	movhi	r2,17
  105ec4:	108cf004 	addi	r2,r2,13248
  105ec8:	10c5883a 	add	r2,r2,r3
  105ecc:	14000017 	ldw	r16,0(r2)
  105ed0:	14800117 	ldw	r18,4(r2)
  105ed4:	d8801e17 	ldw	r2,120(sp)
  105ed8:	1000140e 	bge	r2,zero,105f2c <_dtoa_r+0x7b4>
  105edc:	d8800617 	ldw	r2,24(sp)
  105ee0:	00801216 	blt	zero,r2,105f2c <_dtoa_r+0x7b4>
  105ee4:	1002b81e 	bne	r2,zero,1069c8 <_dtoa_r+0x1250>
  105ee8:	8009883a 	mov	r4,r16
  105eec:	900b883a 	mov	r5,r18
  105ef0:	000d883a 	mov	r6,zero
  105ef4:	01d00534 	movhi	r7,16404
  105ef8:	010e5400 	call	10e540 <__muldf3>
  105efc:	d9800117 	ldw	r6,4(sp)
  105f00:	880f883a 	mov	r7,r17
  105f04:	1009883a 	mov	r4,r2
  105f08:	180b883a 	mov	r5,r3
  105f0c:	010e3600 	call	10e360 <__gedf2>
  105f10:	0025883a 	mov	r18,zero
  105f14:	0021883a 	mov	r16,zero
  105f18:	1001fd16 	blt	r2,zero,106710 <_dtoa_r+0xf98>
  105f1c:	d8801e17 	ldw	r2,120(sp)
  105f20:	ddc00317 	ldw	r23,12(sp)
  105f24:	00a2303a 	nor	r17,zero,r2
  105f28:	0001ff06 	br	106728 <_dtoa_r+0xfb0>
  105f2c:	dcc00117 	ldw	r19,4(sp)
  105f30:	800d883a 	mov	r6,r16
  105f34:	900f883a 	mov	r7,r18
  105f38:	880b883a 	mov	r5,r17
  105f3c:	9809883a 	mov	r4,r19
  105f40:	010d97c0 	call	10d97c <__divdf3>
  105f44:	180b883a 	mov	r5,r3
  105f48:	1009883a 	mov	r4,r2
  105f4c:	010f6e00 	call	10f6e0 <__fixdfsi>
  105f50:	1009883a 	mov	r4,r2
  105f54:	102d883a 	mov	r22,r2
  105f58:	010f7600 	call	10f760 <__floatsidf>
  105f5c:	800d883a 	mov	r6,r16
  105f60:	900f883a 	mov	r7,r18
  105f64:	1009883a 	mov	r4,r2
  105f68:	180b883a 	mov	r5,r3
  105f6c:	010e5400 	call	10e540 <__muldf3>
  105f70:	880b883a 	mov	r5,r17
  105f74:	100d883a 	mov	r6,r2
  105f78:	180f883a 	mov	r7,r3
  105f7c:	9809883a 	mov	r4,r19
  105f80:	010ed200 	call	10ed20 <__subdf3>
  105f84:	dc400317 	ldw	r17,12(sp)
  105f88:	1009883a 	mov	r4,r2
  105f8c:	d9c00417 	ldw	r7,16(sp)
  105f90:	b0800c04 	addi	r2,r22,48
  105f94:	88800005 	stb	r2,0(r17)
  105f98:	d8800617 	ldw	r2,24(sp)
  105f9c:	39c00044 	addi	r7,r7,1
  105fa0:	d9c00415 	stw	r7,16(sp)
  105fa4:	11800060 	cmpeqi	r6,r2,1
  105fa8:	180b883a 	mov	r5,r3
  105fac:	2005883a 	mov	r2,r4
  105fb0:	8dc00044 	addi	r23,r17,1
  105fb4:	3000391e 	bne	r6,zero,10609c <_dtoa_r+0x924>
  105fb8:	01d00934 	movhi	r7,16420
  105fbc:	010e5400 	call	10e540 <__muldf3>
  105fc0:	000d883a 	mov	r6,zero
  105fc4:	000f883a 	mov	r7,zero
  105fc8:	1009883a 	mov	r4,r2
  105fcc:	180b883a 	mov	r5,r3
  105fd0:	1027883a 	mov	r19,r2
  105fd4:	1829883a 	mov	r20,r3
  105fd8:	010e2e00 	call	10e2e0 <__eqdf2>
  105fdc:	103f7826 	beq	r2,zero,105dc0 <_dtoa_r+0x648>
  105fe0:	d8c00617 	ldw	r3,24(sp)
  105fe4:	8805883a 	mov	r2,r17
  105fe8:	dd400115 	stw	r21,4(sp)
  105fec:	8c400084 	addi	r17,r17,2
  105ff0:	10ed883a 	add	r22,r2,r3
  105ff4:	00000a06 	br	106020 <_dtoa_r+0x8a8>
  105ff8:	010e5400 	call	10e540 <__muldf3>
  105ffc:	000d883a 	mov	r6,zero
  106000:	000f883a 	mov	r7,zero
  106004:	1009883a 	mov	r4,r2
  106008:	180b883a 	mov	r5,r3
  10600c:	1027883a 	mov	r19,r2
  106010:	1829883a 	mov	r20,r3
  106014:	8c400044 	addi	r17,r17,1
  106018:	010e2e00 	call	10e2e0 <__eqdf2>
  10601c:	10029d26 	beq	r2,zero,106a94 <_dtoa_r+0x131c>
  106020:	800d883a 	mov	r6,r16
  106024:	900f883a 	mov	r7,r18
  106028:	9809883a 	mov	r4,r19
  10602c:	a00b883a 	mov	r5,r20
  106030:	010d97c0 	call	10d97c <__divdf3>
  106034:	180b883a 	mov	r5,r3
  106038:	1009883a 	mov	r4,r2
  10603c:	010f6e00 	call	10f6e0 <__fixdfsi>
  106040:	1009883a 	mov	r4,r2
  106044:	102b883a 	mov	r21,r2
  106048:	010f7600 	call	10f760 <__floatsidf>
  10604c:	800d883a 	mov	r6,r16
  106050:	900f883a 	mov	r7,r18
  106054:	1009883a 	mov	r4,r2
  106058:	180b883a 	mov	r5,r3
  10605c:	010e5400 	call	10e540 <__muldf3>
  106060:	100d883a 	mov	r6,r2
  106064:	180f883a 	mov	r7,r3
  106068:	9809883a 	mov	r4,r19
  10606c:	a00b883a 	mov	r5,r20
  106070:	010ed200 	call	10ed20 <__subdf3>
  106074:	aa400c04 	addi	r9,r21,48
  106078:	8a7fffc5 	stb	r9,-1(r17)
  10607c:	000d883a 	mov	r6,zero
  106080:	01d00934 	movhi	r7,16420
  106084:	1009883a 	mov	r4,r2
  106088:	180b883a 	mov	r5,r3
  10608c:	882f883a 	mov	r23,r17
  106090:	b47fd91e 	bne	r22,r17,105ff8 <_dtoa_r+0x880>
  106094:	a82d883a 	mov	r22,r21
  106098:	dd400117 	ldw	r21,4(sp)
  10609c:	100d883a 	mov	r6,r2
  1060a0:	180f883a 	mov	r7,r3
  1060a4:	1009883a 	mov	r4,r2
  1060a8:	180b883a 	mov	r5,r3
  1060ac:	010cfdc0 	call	10cfdc <__adddf3>
  1060b0:	800d883a 	mov	r6,r16
  1060b4:	900f883a 	mov	r7,r18
  1060b8:	1009883a 	mov	r4,r2
  1060bc:	180b883a 	mov	r5,r3
  1060c0:	1027883a 	mov	r19,r2
  1060c4:	1823883a 	mov	r17,r3
  1060c8:	010e3600 	call	10e360 <__gedf2>
  1060cc:	00800816 	blt	zero,r2,1060f0 <_dtoa_r+0x978>
  1060d0:	800d883a 	mov	r6,r16
  1060d4:	900f883a 	mov	r7,r18
  1060d8:	9809883a 	mov	r4,r19
  1060dc:	880b883a 	mov	r5,r17
  1060e0:	010e2e00 	call	10e2e0 <__eqdf2>
  1060e4:	103f361e 	bne	r2,zero,105dc0 <_dtoa_r+0x648>
  1060e8:	b580004c 	andi	r22,r22,1
  1060ec:	b03f3426 	beq	r22,zero,105dc0 <_dtoa_r+0x648>
  1060f0:	ba3fffc3 	ldbu	r8,-1(r23)
  1060f4:	d9000317 	ldw	r4,12(sp)
  1060f8:	00000306 	br	106108 <_dtoa_r+0x990>
  1060fc:	20c30e26 	beq	r4,r3,106d38 <_dtoa_r+0x15c0>
  106100:	1a3fffc3 	ldbu	r8,-1(r3)
  106104:	182f883a 	mov	r23,r3
  106108:	40803fcc 	andi	r2,r8,255
  10610c:	1080201c 	xori	r2,r2,128
  106110:	10bfe004 	addi	r2,r2,-128
  106114:	10800e60 	cmpeqi	r2,r2,57
  106118:	b8ffffc4 	addi	r3,r23,-1
  10611c:	103ff71e 	bne	r2,zero,1060fc <_dtoa_r+0x984>
  106120:	42000044 	addi	r8,r8,1
  106124:	1a000005 	stb	r8,0(r3)
  106128:	003f2506 	br	105dc0 <_dtoa_r+0x648>
  10612c:	d8c00717 	ldw	r3,28(sp)
  106130:	1800e426 	beq	r3,zero,1064c4 <_dtoa_r+0xd4c>
  106134:	d8c00217 	ldw	r3,8(sp)
  106138:	18c00088 	cmpgei	r3,r3,2
  10613c:	1801ec26 	beq	r3,zero,1068f0 <_dtoa_r+0x1178>
  106140:	d8800617 	ldw	r2,24(sp)
  106144:	14bfffc4 	addi	r18,r2,-1
  106148:	d8800817 	ldw	r2,32(sp)
  10614c:	1481c50e 	bge	r2,r18,106864 <_dtoa_r+0x10ec>
  106150:	d8800817 	ldw	r2,32(sp)
  106154:	dc800815 	stw	r18,32(sp)
  106158:	9085c83a 	sub	r2,r18,r2
  10615c:	b0ad883a 	add	r22,r22,r2
  106160:	0025883a 	mov	r18,zero
  106164:	d8800617 	ldw	r2,24(sp)
  106168:	10024c16 	blt	r2,zero,106a9c <_dtoa_r+0x1324>
  10616c:	d8c00517 	ldw	r3,20(sp)
  106170:	a0a9883a 	add	r20,r20,r2
  106174:	1885883a 	add	r2,r3,r2
  106178:	1827883a 	mov	r19,r3
  10617c:	d8800515 	stw	r2,20(sp)
  106180:	01400044 	movi	r5,1
  106184:	e009883a 	mov	r4,fp
  106188:	0108f9c0 	call	108f9c <__i2b>
  10618c:	1021883a 	mov	r16,r2
  106190:	04c0080e 	bge	zero,r19,1061b4 <_dtoa_r+0xa3c>
  106194:	0500070e 	bge	zero,r20,1061b4 <_dtoa_r+0xa3c>
  106198:	9805883a 	mov	r2,r19
  10619c:	a4c1a916 	blt	r20,r19,106844 <_dtoa_r+0x10cc>
  1061a0:	d8c00517 	ldw	r3,20(sp)
  1061a4:	98a7c83a 	sub	r19,r19,r2
  1061a8:	a0a9c83a 	sub	r20,r20,r2
  1061ac:	1887c83a 	sub	r3,r3,r2
  1061b0:	d8c00515 	stw	r3,20(sp)
  1061b4:	d8800817 	ldw	r2,32(sp)
  1061b8:	10001426 	beq	r2,zero,10620c <_dtoa_r+0xa94>
  1061bc:	d8800717 	ldw	r2,28(sp)
  1061c0:	10017226 	beq	r2,zero,10678c <_dtoa_r+0x1014>
  1061c4:	04800e0e 	bge	zero,r18,106200 <_dtoa_r+0xa88>
  1061c8:	800b883a 	mov	r5,r16
  1061cc:	900d883a 	mov	r6,r18
  1061d0:	e009883a 	mov	r4,fp
  1061d4:	01092100 	call	109210 <__pow5mult>
  1061d8:	a80d883a 	mov	r6,r21
  1061dc:	100b883a 	mov	r5,r2
  1061e0:	e009883a 	mov	r4,fp
  1061e4:	1021883a 	mov	r16,r2
  1061e8:	0108fd00 	call	108fd0 <__multiply>
  1061ec:	102f883a 	mov	r23,r2
  1061f0:	a80b883a 	mov	r5,r21
  1061f4:	e009883a 	mov	r4,fp
  1061f8:	0108c180 	call	108c18 <_Bfree>
  1061fc:	b82b883a 	mov	r21,r23
  106200:	d8800817 	ldw	r2,32(sp)
  106204:	148dc83a 	sub	r6,r2,r18
  106208:	3001611e 	bne	r6,zero,106790 <_dtoa_r+0x1018>
  10620c:	01400044 	movi	r5,1
  106210:	e009883a 	mov	r4,fp
  106214:	0108f9c0 	call	108f9c <__i2b>
  106218:	1025883a 	mov	r18,r2
  10621c:	0580bc16 	blt	zero,r22,106510 <_dtoa_r+0xd98>
  106220:	d8800217 	ldw	r2,8(sp)
  106224:	10800088 	cmpgei	r2,r2,2
  106228:	10016526 	beq	r2,zero,1067c0 <_dtoa_r+0x1048>
  10622c:	0023883a 	mov	r17,zero
  106230:	00800044 	movi	r2,1
  106234:	b000bf1e 	bne	r22,zero,106534 <_dtoa_r+0xdbc>
  106238:	1505883a 	add	r2,r2,r20
  10623c:	108007cc 	andi	r2,r2,31
  106240:	1000aa26 	beq	r2,zero,1064ec <_dtoa_r+0xd74>
  106244:	00c00804 	movi	r3,32
  106248:	1887c83a 	sub	r3,r3,r2
  10624c:	19000150 	cmplti	r4,r3,5
  106250:	2002f61e 	bne	r4,zero,106e2c <_dtoa_r+0x16b4>
  106254:	00c00704 	movi	r3,28
  106258:	1885c83a 	sub	r2,r3,r2
  10625c:	d8c00517 	ldw	r3,20(sp)
  106260:	98a7883a 	add	r19,r19,r2
  106264:	a0a9883a 	add	r20,r20,r2
  106268:	1887883a 	add	r3,r3,r2
  10626c:	d8c00515 	stw	r3,20(sp)
  106270:	d8800517 	ldw	r2,20(sp)
  106274:	00809716 	blt	zero,r2,1064d4 <_dtoa_r+0xd5c>
  106278:	0500050e 	bge	zero,r20,106290 <_dtoa_r+0xb18>
  10627c:	900b883a 	mov	r5,r18
  106280:	a00d883a 	mov	r6,r20
  106284:	e009883a 	mov	r4,fp
  106288:	01093380 	call	109338 <__lshift>
  10628c:	1025883a 	mov	r18,r2
  106290:	d8800917 	ldw	r2,36(sp)
  106294:	10012b1e 	bne	r2,zero,106744 <_dtoa_r+0xfcc>
  106298:	d8800617 	ldw	r2,24(sp)
  10629c:	00810d0e 	bge	zero,r2,1066d4 <_dtoa_r+0xf5c>
  1062a0:	d8800417 	ldw	r2,16(sp)
  1062a4:	10800044 	addi	r2,r2,1
  1062a8:	d8800415 	stw	r2,16(sp)
  1062ac:	d8800717 	ldw	r2,28(sp)
  1062b0:	1000b21e 	bne	r2,zero,10657c <_dtoa_r+0xe04>
  1062b4:	ddc00317 	ldw	r23,12(sp)
  1062b8:	04400044 	movi	r17,1
  1062bc:	dcc00617 	ldw	r19,24(sp)
  1062c0:	00000306 	br	1062d0 <_dtoa_r+0xb58>
  1062c4:	0108c3c0 	call	108c3c <__multadd>
  1062c8:	102b883a 	mov	r21,r2
  1062cc:	8c400044 	addi	r17,r17,1
  1062d0:	900b883a 	mov	r5,r18
  1062d4:	a809883a 	mov	r4,r21
  1062d8:	01055440 	call	105544 <quorem>
  1062dc:	10800c04 	addi	r2,r2,48
  1062e0:	bdc00044 	addi	r23,r23,1
  1062e4:	b8bfffc5 	stb	r2,-1(r23)
  1062e8:	000f883a 	mov	r7,zero
  1062ec:	01800284 	movi	r6,10
  1062f0:	a80b883a 	mov	r5,r21
  1062f4:	e009883a 	mov	r4,fp
  1062f8:	8cfff216 	blt	r17,r19,1062c4 <_dtoa_r+0xb4c>
  1062fc:	1011883a 	mov	r8,r2
  106300:	0029883a 	mov	r20,zero
  106304:	a80b883a 	mov	r5,r21
  106308:	01800044 	movi	r6,1
  10630c:	e009883a 	mov	r4,fp
  106310:	da000115 	stw	r8,4(sp)
  106314:	01093380 	call	109338 <__lshift>
  106318:	900b883a 	mov	r5,r18
  10631c:	1009883a 	mov	r4,r2
  106320:	102b883a 	mov	r21,r2
  106324:	01094740 	call	109474 <__mcmp>
  106328:	b8ffffc3 	ldbu	r3,-1(r23)
  10632c:	0081610e 	bge	zero,r2,1068b4 <_dtoa_r+0x113c>
  106330:	d9400317 	ldw	r5,12(sp)
  106334:	00000306 	br	106344 <_dtoa_r+0xbcc>
  106338:	29017726 	beq	r5,r4,106918 <_dtoa_r+0x11a0>
  10633c:	20ffffc3 	ldbu	r3,-1(r4)
  106340:	202f883a 	mov	r23,r4
  106344:	18803fcc 	andi	r2,r3,255
  106348:	1080201c 	xori	r2,r2,128
  10634c:	10bfe004 	addi	r2,r2,-128
  106350:	10800e60 	cmpeqi	r2,r2,57
  106354:	b93fffc4 	addi	r4,r23,-1
  106358:	103ff71e 	bne	r2,zero,106338 <_dtoa_r+0xbc0>
  10635c:	18c00044 	addi	r3,r3,1
  106360:	20c00005 	stb	r3,0(r4)
  106364:	900b883a 	mov	r5,r18
  106368:	e009883a 	mov	r4,fp
  10636c:	0108c180 	call	108c18 <_Bfree>
  106370:	803e9326 	beq	r16,zero,105dc0 <_dtoa_r+0x648>
  106374:	a0000426 	beq	r20,zero,106388 <_dtoa_r+0xc10>
  106378:	a4000326 	beq	r20,r16,106388 <_dtoa_r+0xc10>
  10637c:	a00b883a 	mov	r5,r20
  106380:	e009883a 	mov	r4,fp
  106384:	0108c180 	call	108c18 <_Bfree>
  106388:	800b883a 	mov	r5,r16
  10638c:	e009883a 	mov	r4,fp
  106390:	0108c180 	call	108c18 <_Bfree>
  106394:	003e8a06 	br	105dc0 <_dtoa_r+0x648>
  106398:	d8000915 	stw	zero,36(sp)
  10639c:	a0003616 	blt	r20,zero,106478 <_dtoa_r+0xd00>
  1063a0:	d8000515 	stw	zero,20(sp)
  1063a4:	d8c00217 	ldw	r3,8(sp)
  1063a8:	dd800415 	stw	r22,16(sp)
  1063ac:	d8000815 	stw	zero,32(sp)
  1063b0:	188002a8 	cmpgeui	r2,r3,10
  1063b4:	a5a9883a 	add	r20,r20,r22
  1063b8:	103d9726 	beq	r2,zero,105a18 <_dtoa_r+0x2a0>
  1063bc:	00800044 	movi	r2,1
  1063c0:	d8800715 	stw	r2,28(sp)
  1063c4:	00bfffc4 	movi	r2,-1
  1063c8:	04bfffc4 	movi	r18,-1
  1063cc:	04000044 	movi	r16,1
  1063d0:	d8000215 	stw	zero,8(sp)
  1063d4:	d8800615 	stw	r2,24(sp)
  1063d8:	d8001e15 	stw	zero,120(sp)
  1063dc:	d8800617 	ldw	r2,24(sp)
  1063e0:	e0001115 	stw	zero,68(fp)
  1063e4:	000b883a 	mov	r5,zero
  1063e8:	d8800b15 	stw	r2,44(sp)
  1063ec:	003daa06 	br	105a98 <_dtoa_r+0x320>
  1063f0:	18800160 	cmpeqi	r2,r3,5
  1063f4:	00c00044 	movi	r3,1
  1063f8:	d8c00715 	stw	r3,28(sp)
  1063fc:	10000d26 	beq	r2,zero,106434 <_dtoa_r+0xcbc>
  106400:	d8801e17 	ldw	r2,120(sp)
  106404:	d8c00417 	ldw	r3,16(sp)
  106408:	10c5883a 	add	r2,r2,r3
  10640c:	d8800b15 	stw	r2,44(sp)
  106410:	10800044 	addi	r2,r2,1
  106414:	d8800615 	stw	r2,24(sp)
  106418:	100d883a 	mov	r6,r2
  10641c:	00bd9216 	blt	zero,r2,105a68 <_dtoa_r+0x2f0>
  106420:	01800044 	movi	r6,1
  106424:	003d9006 	br	105a68 <_dtoa_r+0x2f0>
  106428:	188000a0 	cmpeqi	r2,r3,2
  10642c:	d8000715 	stw	zero,28(sp)
  106430:	103d881e 	bne	r2,zero,105a54 <_dtoa_r+0x2dc>
  106434:	e0001115 	stw	zero,68(fp)
  106438:	000b883a 	mov	r5,zero
  10643c:	e009883a 	mov	r4,fp
  106440:	0108b740 	call	108b74 <_Balloc>
  106444:	d8800315 	stw	r2,12(sp)
  106448:	e0801015 	stw	r2,64(fp)
  10644c:	00bfffc4 	movi	r2,-1
  106450:	d8800b15 	stw	r2,44(sp)
  106454:	00800044 	movi	r2,1
  106458:	d8800715 	stw	r2,28(sp)
  10645c:	00bfffc4 	movi	r2,-1
  106460:	d8001e15 	stw	zero,120(sp)
  106464:	d8800615 	stw	r2,24(sp)
  106468:	003e8f06 	br	105ea8 <_dtoa_r+0x730>
  10646c:	00800044 	movi	r2,1
  106470:	d8800915 	stw	r2,36(sp)
  106474:	a03d5c0e 	bge	r20,zero,1059e8 <_dtoa_r+0x270>
  106478:	04800044 	movi	r18,1
  10647c:	9405c83a 	sub	r2,r18,r16
  106480:	d8800515 	stw	r2,20(sp)
  106484:	0029883a 	mov	r20,zero
  106488:	003d5806 	br	1059ec <_dtoa_r+0x274>
  10648c:	b009883a 	mov	r4,r22
  106490:	010f7600 	call	10f760 <__floatsidf>
  106494:	a00d883a 	mov	r6,r20
  106498:	980f883a 	mov	r7,r19
  10649c:	1009883a 	mov	r4,r2
  1064a0:	180b883a 	mov	r5,r3
  1064a4:	010e2e00 	call	10e2e0 <__eqdf2>
  1064a8:	103d3e26 	beq	r2,zero,1059a4 <_dtoa_r+0x22c>
  1064ac:	b5bfffc4 	addi	r22,r22,-1
  1064b0:	003d3c06 	br	1059a4 <_dtoa_r+0x22c>
  1064b4:	00800474 	movhi	r2,17
  1064b8:	108ccc04 	addi	r2,r2,13104
  1064bc:	d8800315 	stw	r2,12(sp)
  1064c0:	003cdf06 	br	105840 <_dtoa_r+0xc8>
  1064c4:	dc800817 	ldw	r18,32(sp)
  1064c8:	dcc00517 	ldw	r19,20(sp)
  1064cc:	0021883a 	mov	r16,zero
  1064d0:	003f2f06 	br	106190 <_dtoa_r+0xa18>
  1064d4:	a80b883a 	mov	r5,r21
  1064d8:	100d883a 	mov	r6,r2
  1064dc:	e009883a 	mov	r4,fp
  1064e0:	01093380 	call	109338 <__lshift>
  1064e4:	102b883a 	mov	r21,r2
  1064e8:	003f6306 	br	106278 <_dtoa_r+0xb00>
  1064ec:	00800704 	movi	r2,28
  1064f0:	003f5a06 	br	10625c <_dtoa_r+0xae4>
  1064f4:	01000804 	movi	r4,32
  1064f8:	2089c83a 	sub	r4,r4,r2
  1064fc:	d8800117 	ldw	r2,4(sp)
  106500:	1108983a 	sll	r4,r2,r4
  106504:	003cf306 	br	1058d4 <_dtoa_r+0x15c>
  106508:	04000044 	movi	r16,1
  10650c:	003d4706 	br	105a2c <_dtoa_r+0x2b4>
  106510:	b00d883a 	mov	r6,r22
  106514:	100b883a 	mov	r5,r2
  106518:	e009883a 	mov	r4,fp
  10651c:	01092100 	call	109210 <__pow5mult>
  106520:	1025883a 	mov	r18,r2
  106524:	d8800217 	ldw	r2,8(sp)
  106528:	10800090 	cmplti	r2,r2,2
  10652c:	10012f1e 	bne	r2,zero,1069ec <_dtoa_r+0x1274>
  106530:	0023883a 	mov	r17,zero
  106534:	90800417 	ldw	r2,16(r18)
  106538:	10800104 	addi	r2,r2,4
  10653c:	100490ba 	slli	r2,r2,2
  106540:	9085883a 	add	r2,r18,r2
  106544:	11000017 	ldw	r4,0(r2)
  106548:	0108e880 	call	108e88 <__hi0bits>
  10654c:	00c00804 	movi	r3,32
  106550:	1885c83a 	sub	r2,r3,r2
  106554:	003f3806 	br	106238 <_dtoa_r+0xac0>
  106558:	800b883a 	mov	r5,r16
  10655c:	000f883a 	mov	r7,zero
  106560:	01800284 	movi	r6,10
  106564:	e009883a 	mov	r4,fp
  106568:	0108c3c0 	call	108c3c <__multadd>
  10656c:	1021883a 	mov	r16,r2
  106570:	d8800b17 	ldw	r2,44(sp)
  106574:	00821b0e 	bge	zero,r2,106de4 <_dtoa_r+0x166c>
  106578:	d8800615 	stw	r2,24(sp)
  10657c:	04c0b316 	blt	zero,r19,10684c <_dtoa_r+0x10d4>
  106580:	8801341e 	bne	r17,zero,106a54 <_dtoa_r+0x12dc>
  106584:	8027883a 	mov	r19,r16
  106588:	dc400317 	ldw	r17,12(sp)
  10658c:	d8c00617 	ldw	r3,24(sp)
  106590:	d8800117 	ldw	r2,4(sp)
  106594:	8dffffc4 	addi	r23,r17,-1
  106598:	b8c7883a 	add	r3,r23,r3
  10659c:	d8c00615 	stw	r3,24(sp)
  1065a0:	d8c00217 	ldw	r3,8(sp)
  1065a4:	1080004c 	andi	r2,r2,1
  1065a8:	d8800815 	stw	r2,32(sp)
  1065ac:	10c4b03a 	or	r2,r2,r3
  1065b0:	d8800715 	stw	r2,28(sp)
  1065b4:	00002c06 	br	106668 <_dtoa_r+0xef0>
  1065b8:	b80b883a 	mov	r5,r23
  1065bc:	a809883a 	mov	r4,r21
  1065c0:	da000515 	stw	r8,20(sp)
  1065c4:	01094740 	call	109474 <__mcmp>
  1065c8:	b80b883a 	mov	r5,r23
  1065cc:	e009883a 	mov	r4,fp
  1065d0:	d8800115 	stw	r2,4(sp)
  1065d4:	0108c180 	call	108c18 <_Bfree>
  1065d8:	d8800117 	ldw	r2,4(sp)
  1065dc:	da000517 	ldw	r8,20(sp)
  1065e0:	1000021e 	bne	r2,zero,1065ec <_dtoa_r+0xe74>
  1065e4:	d8c00717 	ldw	r3,28(sp)
  1065e8:	1801f226 	beq	r3,zero,106db4 <_dtoa_r+0x163c>
  1065ec:	8dc00044 	addi	r23,r17,1
  1065f0:	a0010516 	blt	r20,zero,106a08 <_dtoa_r+0x1290>
  1065f4:	d8c00217 	ldw	r3,8(sp)
  1065f8:	a0e8b03a 	or	r20,r20,r3
  1065fc:	d8c00817 	ldw	r3,32(sp)
  106600:	1d28b03a 	or	r20,r3,r20
  106604:	a0010026 	beq	r20,zero,106a08 <_dtoa_r+0x1290>
  106608:	00812816 	blt	zero,r2,106aac <_dtoa_r+0x1334>
  10660c:	d8800617 	ldw	r2,24(sp)
  106610:	8a000005 	stb	r8,0(r17)
  106614:	14412926 	beq	r2,r17,106abc <_dtoa_r+0x1344>
  106618:	a80b883a 	mov	r5,r21
  10661c:	000f883a 	mov	r7,zero
  106620:	01800284 	movi	r6,10
  106624:	e009883a 	mov	r4,fp
  106628:	0108c3c0 	call	108c3c <__multadd>
  10662c:	102b883a 	mov	r21,r2
  106630:	000f883a 	mov	r7,zero
  106634:	01800284 	movi	r6,10
  106638:	800b883a 	mov	r5,r16
  10663c:	e009883a 	mov	r4,fp
  106640:	84c02026 	beq	r16,r19,1066c4 <_dtoa_r+0xf4c>
  106644:	0108c3c0 	call	108c3c <__multadd>
  106648:	980b883a 	mov	r5,r19
  10664c:	000f883a 	mov	r7,zero
  106650:	01800284 	movi	r6,10
  106654:	e009883a 	mov	r4,fp
  106658:	1021883a 	mov	r16,r2
  10665c:	0108c3c0 	call	108c3c <__multadd>
  106660:	1027883a 	mov	r19,r2
  106664:	b823883a 	mov	r17,r23
  106668:	900b883a 	mov	r5,r18
  10666c:	a809883a 	mov	r4,r21
  106670:	01055440 	call	105544 <quorem>
  106674:	800b883a 	mov	r5,r16
  106678:	a809883a 	mov	r4,r21
  10667c:	102d883a 	mov	r22,r2
  106680:	01094740 	call	109474 <__mcmp>
  106684:	980d883a 	mov	r6,r19
  106688:	900b883a 	mov	r5,r18
  10668c:	e009883a 	mov	r4,fp
  106690:	1029883a 	mov	r20,r2
  106694:	01094cc0 	call	1094cc <__mdiff>
  106698:	102f883a 	mov	r23,r2
  10669c:	10800317 	ldw	r2,12(r2)
  1066a0:	b2000c04 	addi	r8,r22,48
  1066a4:	103fc426 	beq	r2,zero,1065b8 <_dtoa_r+0xe40>
  1066a8:	b80b883a 	mov	r5,r23
  1066ac:	e009883a 	mov	r4,fp
  1066b0:	da000115 	stw	r8,4(sp)
  1066b4:	0108c180 	call	108c18 <_Bfree>
  1066b8:	00800044 	movi	r2,1
  1066bc:	da000117 	ldw	r8,4(sp)
  1066c0:	003fca06 	br	1065ec <_dtoa_r+0xe74>
  1066c4:	0108c3c0 	call	108c3c <__multadd>
  1066c8:	1021883a 	mov	r16,r2
  1066cc:	1027883a 	mov	r19,r2
  1066d0:	003fe406 	br	106664 <_dtoa_r+0xeec>
  1066d4:	d8800217 	ldw	r2,8(sp)
  1066d8:	108000d0 	cmplti	r2,r2,3
  1066dc:	10004b1e 	bne	r2,zero,10680c <_dtoa_r+0x1094>
  1066e0:	d8800617 	ldw	r2,24(sp)
  1066e4:	103e0d1e 	bne	r2,zero,105f1c <_dtoa_r+0x7a4>
  1066e8:	900b883a 	mov	r5,r18
  1066ec:	e009883a 	mov	r4,fp
  1066f0:	000f883a 	mov	r7,zero
  1066f4:	01800144 	movi	r6,5
  1066f8:	0108c3c0 	call	108c3c <__multadd>
  1066fc:	100b883a 	mov	r5,r2
  106700:	a809883a 	mov	r4,r21
  106704:	1025883a 	mov	r18,r2
  106708:	01094740 	call	109474 <__mcmp>
  10670c:	00be030e 	bge	zero,r2,105f1c <_dtoa_r+0x7a4>
  106710:	d8c00317 	ldw	r3,12(sp)
  106714:	00800c44 	movi	r2,49
  106718:	18800005 	stb	r2,0(r3)
  10671c:	d8800417 	ldw	r2,16(sp)
  106720:	1dc00044 	addi	r23,r3,1
  106724:	14400044 	addi	r17,r2,1
  106728:	900b883a 	mov	r5,r18
  10672c:	e009883a 	mov	r4,fp
  106730:	0108c180 	call	108c18 <_Bfree>
  106734:	88800044 	addi	r2,r17,1
  106738:	d8800415 	stw	r2,16(sp)
  10673c:	803f121e 	bne	r16,zero,106388 <_dtoa_r+0xc10>
  106740:	003d9f06 	br	105dc0 <_dtoa_r+0x648>
  106744:	900b883a 	mov	r5,r18
  106748:	a809883a 	mov	r4,r21
  10674c:	01094740 	call	109474 <__mcmp>
  106750:	103ed10e 	bge	r2,zero,106298 <_dtoa_r+0xb20>
  106754:	a80b883a 	mov	r5,r21
  106758:	000f883a 	mov	r7,zero
  10675c:	01800284 	movi	r6,10
  106760:	e009883a 	mov	r4,fp
  106764:	0108c3c0 	call	108c3c <__multadd>
  106768:	102b883a 	mov	r21,r2
  10676c:	d8800417 	ldw	r2,16(sp)
  106770:	153fffc4 	addi	r20,r2,-1
  106774:	d8800717 	ldw	r2,28(sp)
  106778:	103f771e 	bne	r2,zero,106558 <_dtoa_r+0xde0>
  10677c:	d8800b17 	ldw	r2,44(sp)
  106780:	0081910e 	bge	zero,r2,106dc8 <_dtoa_r+0x1650>
  106784:	d8800615 	stw	r2,24(sp)
  106788:	003eca06 	br	1062b4 <_dtoa_r+0xb3c>
  10678c:	d9800817 	ldw	r6,32(sp)
  106790:	a80b883a 	mov	r5,r21
  106794:	e009883a 	mov	r4,fp
  106798:	01092100 	call	109210 <__pow5mult>
  10679c:	102b883a 	mov	r21,r2
  1067a0:	003e9a06 	br	10620c <_dtoa_r+0xa94>
  1067a4:	00800474 	movhi	r2,17
  1067a8:	1007883a 	mov	r3,r2
  1067ac:	18ccd504 	addi	r3,r3,13140
  1067b0:	00800474 	movhi	r2,17
  1067b4:	d8c00315 	stw	r3,12(sp)
  1067b8:	108cd5c4 	addi	r2,r2,13143
  1067bc:	003da506 	br	105e54 <_dtoa_r+0x6dc>
  1067c0:	d8800117 	ldw	r2,4(sp)
  1067c4:	103e991e 	bne	r2,zero,10622c <_dtoa_r+0xab4>
  1067c8:	00800434 	movhi	r2,16
  1067cc:	10bfffc4 	addi	r2,r2,-1
  1067d0:	8884703a 	and	r2,r17,r2
  1067d4:	103e951e 	bne	r2,zero,10622c <_dtoa_r+0xab4>
  1067d8:	8c5ffc2c 	andhi	r17,r17,32752
  1067dc:	883e9326 	beq	r17,zero,10622c <_dtoa_r+0xab4>
  1067e0:	d8800517 	ldw	r2,20(sp)
  1067e4:	a5000044 	addi	r20,r20,1
  1067e8:	04400044 	movi	r17,1
  1067ec:	10800044 	addi	r2,r2,1
  1067f0:	d8800515 	stw	r2,20(sp)
  1067f4:	003e8e06 	br	106230 <_dtoa_r+0xab8>
  1067f8:	00800044 	movi	r2,1
  1067fc:	04800044 	movi	r18,1
  106800:	d8800615 	stw	r2,24(sp)
  106804:	d8801e15 	stw	r2,120(sp)
  106808:	003ef406 	br	1063dc <_dtoa_r+0xc64>
  10680c:	d8800417 	ldw	r2,16(sp)
  106810:	10800044 	addi	r2,r2,1
  106814:	d8800415 	stw	r2,16(sp)
  106818:	d8800717 	ldw	r2,28(sp)
  10681c:	103f571e 	bne	r2,zero,10657c <_dtoa_r+0xe04>
  106820:	900b883a 	mov	r5,r18
  106824:	a809883a 	mov	r4,r21
  106828:	01055440 	call	105544 <quorem>
  10682c:	12000c04 	addi	r8,r2,48
  106830:	d8800317 	ldw	r2,12(sp)
  106834:	0029883a 	mov	r20,zero
  106838:	15c00044 	addi	r23,r2,1
  10683c:	12000005 	stb	r8,0(r2)
  106840:	003eb006 	br	106304 <_dtoa_r+0xb8c>
  106844:	a005883a 	mov	r2,r20
  106848:	003e5506 	br	1061a0 <_dtoa_r+0xa28>
  10684c:	800b883a 	mov	r5,r16
  106850:	980d883a 	mov	r6,r19
  106854:	e009883a 	mov	r4,fp
  106858:	01093380 	call	109338 <__lshift>
  10685c:	1021883a 	mov	r16,r2
  106860:	003f4706 	br	106580 <_dtoa_r+0xe08>
  106864:	14a5c83a 	sub	r18,r2,r18
  106868:	003e3e06 	br	106164 <_dtoa_r+0x9ec>
  10686c:	00800474 	movhi	r2,17
  106870:	108ce604 	addi	r2,r2,13208
  106874:	11800817 	ldw	r6,32(r2)
  106878:	11c00917 	ldw	r7,36(r2)
  10687c:	d9000117 	ldw	r4,4(sp)
  106880:	880b883a 	mov	r5,r17
  106884:	da400e15 	stw	r9,56(sp)
  106888:	da800d15 	stw	r10,52(sp)
  10688c:	010d97c0 	call	10d97c <__divdf3>
  106890:	d8800c15 	stw	r2,48(sp)
  106894:	1827883a 	mov	r19,r3
  106898:	bdc003cc 	andi	r23,r23,15
  10689c:	040000c4 	movi	r16,3
  1068a0:	da800d17 	ldw	r10,52(sp)
  1068a4:	da400e17 	ldw	r9,56(sp)
  1068a8:	003c9206 	br	105af4 <_dtoa_r+0x37c>
  1068ac:	d8000715 	stw	zero,28(sp)
  1068b0:	003ed306 	br	106400 <_dtoa_r+0xc88>
  1068b4:	1000031e 	bne	r2,zero,1068c4 <_dtoa_r+0x114c>
  1068b8:	da000117 	ldw	r8,4(sp)
  1068bc:	4200004c 	andi	r8,r8,1
  1068c0:	403e9b1e 	bne	r8,zero,106330 <_dtoa_r+0xbb8>
  1068c4:	1805883a 	mov	r2,r3
  1068c8:	00000206 	br	1068d4 <_dtoa_r+0x115c>
  1068cc:	b8bfff83 	ldbu	r2,-2(r23)
  1068d0:	182f883a 	mov	r23,r3
  1068d4:	10803fcc 	andi	r2,r2,255
  1068d8:	1080201c 	xori	r2,r2,128
  1068dc:	10bfe004 	addi	r2,r2,-128
  1068e0:	10800c18 	cmpnei	r2,r2,48
  1068e4:	b8ffffc4 	addi	r3,r23,-1
  1068e8:	103ff826 	beq	r2,zero,1068cc <_dtoa_r+0x1154>
  1068ec:	003e9d06 	br	106364 <_dtoa_r+0xbec>
  1068f0:	d8c00a17 	ldw	r3,40(sp)
  1068f4:	1800bc26 	beq	r3,zero,106be8 <_dtoa_r+0x1470>
  1068f8:	d8c00517 	ldw	r3,20(sp)
  1068fc:	10810cc4 	addi	r2,r2,1075
  106900:	a0a9883a 	add	r20,r20,r2
  106904:	1885883a 	add	r2,r3,r2
  106908:	1827883a 	mov	r19,r3
  10690c:	dc800817 	ldw	r18,32(sp)
  106910:	d8800515 	stw	r2,20(sp)
  106914:	003e1a06 	br	106180 <_dtoa_r+0xa08>
  106918:	d8c00317 	ldw	r3,12(sp)
  10691c:	00800c44 	movi	r2,49
  106920:	18800005 	stb	r2,0(r3)
  106924:	d8800417 	ldw	r2,16(sp)
  106928:	10800044 	addi	r2,r2,1
  10692c:	d8800415 	stw	r2,16(sp)
  106930:	003e8c06 	br	106364 <_dtoa_r+0xbec>
  106934:	8009883a 	mov	r4,r16
  106938:	010f7600 	call	10f760 <__floatsidf>
  10693c:	900d883a 	mov	r6,r18
  106940:	980f883a 	mov	r7,r19
  106944:	1009883a 	mov	r4,r2
  106948:	180b883a 	mov	r5,r3
  10694c:	010e5400 	call	10e540 <__muldf3>
  106950:	000d883a 	mov	r6,zero
  106954:	01d00734 	movhi	r7,16412
  106958:	1009883a 	mov	r4,r2
  10695c:	180b883a 	mov	r5,r3
  106960:	010cfdc0 	call	10cfdc <__adddf3>
  106964:	d8800c15 	stw	r2,48(sp)
  106968:	00bf3034 	movhi	r2,64704
  10696c:	1885883a 	add	r2,r3,r2
  106970:	d8800d15 	stw	r2,52(sp)
  106974:	9009883a 	mov	r4,r18
  106978:	980b883a 	mov	r5,r19
  10697c:	000d883a 	mov	r6,zero
  106980:	01d00534 	movhi	r7,16404
  106984:	010ed200 	call	10ed20 <__subdf3>
  106988:	ddc00c17 	ldw	r23,48(sp)
  10698c:	dcc00d17 	ldw	r19,52(sp)
  106990:	1009883a 	mov	r4,r2
  106994:	b80d883a 	mov	r6,r23
  106998:	980f883a 	mov	r7,r19
  10699c:	180b883a 	mov	r5,r3
  1069a0:	1025883a 	mov	r18,r2
  1069a4:	1821883a 	mov	r16,r3
  1069a8:	010e3600 	call	10e360 <__gedf2>
  1069ac:	0080ee16 	blt	zero,r2,106d68 <_dtoa_r+0x15f0>
  1069b0:	99e0003c 	xorhi	r7,r19,32768
  1069b4:	b80d883a 	mov	r6,r23
  1069b8:	9009883a 	mov	r4,r18
  1069bc:	800b883a 	mov	r5,r16
  1069c0:	010e4500 	call	10e450 <__ledf2>
  1069c4:	103d380e 	bge	r2,zero,105ea8 <_dtoa_r+0x730>
  1069c8:	0025883a 	mov	r18,zero
  1069cc:	0021883a 	mov	r16,zero
  1069d0:	003d5206 	br	105f1c <_dtoa_r+0x7a4>
  1069d4:	d8800417 	ldw	r2,16(sp)
  1069d8:	1000ad1e 	bne	r2,zero,106c90 <_dtoa_r+0x1518>
  1069dc:	dc800117 	ldw	r18,4(sp)
  1069e0:	8827883a 	mov	r19,r17
  1069e4:	04000084 	movi	r16,2
  1069e8:	003c5b06 	br	105b58 <_dtoa_r+0x3e0>
  1069ec:	d8800117 	ldw	r2,4(sp)
  1069f0:	103ecf1e 	bne	r2,zero,106530 <_dtoa_r+0xdb8>
  1069f4:	00800434 	movhi	r2,16
  1069f8:	10bfffc4 	addi	r2,r2,-1
  1069fc:	8884703a 	and	r2,r17,r2
  106a00:	103f7526 	beq	r2,zero,1067d8 <_dtoa_r+0x1060>
  106a04:	003eca06 	br	106530 <_dtoa_r+0xdb8>
  106a08:	00800e0e 	bge	zero,r2,106a44 <_dtoa_r+0x12cc>
  106a0c:	a80b883a 	mov	r5,r21
  106a10:	01800044 	movi	r6,1
  106a14:	e009883a 	mov	r4,fp
  106a18:	da000115 	stw	r8,4(sp)
  106a1c:	01093380 	call	109338 <__lshift>
  106a20:	900b883a 	mov	r5,r18
  106a24:	1009883a 	mov	r4,r2
  106a28:	102b883a 	mov	r21,r2
  106a2c:	01094740 	call	109474 <__mcmp>
  106a30:	da000117 	ldw	r8,4(sp)
  106a34:	0080d50e 	bge	zero,r2,106d8c <_dtoa_r+0x1614>
  106a38:	42000e60 	cmpeqi	r8,r8,57
  106a3c:	4000c31e 	bne	r8,zero,106d4c <_dtoa_r+0x15d4>
  106a40:	b2000c44 	addi	r8,r22,49
  106a44:	8029883a 	mov	r20,r16
  106a48:	8a000005 	stb	r8,0(r17)
  106a4c:	9821883a 	mov	r16,r19
  106a50:	003e4406 	br	106364 <_dtoa_r+0xbec>
  106a54:	81400117 	ldw	r5,4(r16)
  106a58:	e009883a 	mov	r4,fp
  106a5c:	0108b740 	call	108b74 <_Balloc>
  106a60:	81800417 	ldw	r6,16(r16)
  106a64:	81400304 	addi	r5,r16,12
  106a68:	11000304 	addi	r4,r2,12
  106a6c:	31800084 	addi	r6,r6,2
  106a70:	300c90ba 	slli	r6,r6,2
  106a74:	1023883a 	mov	r17,r2
  106a78:	0102e880 	call	102e88 <memcpy>
  106a7c:	01800044 	movi	r6,1
  106a80:	880b883a 	mov	r5,r17
  106a84:	e009883a 	mov	r4,fp
  106a88:	01093380 	call	109338 <__lshift>
  106a8c:	1027883a 	mov	r19,r2
  106a90:	003ebd06 	br	106588 <_dtoa_r+0xe10>
  106a94:	dd400117 	ldw	r21,4(sp)
  106a98:	003cc906 	br	105dc0 <_dtoa_r+0x648>
  106a9c:	d8800517 	ldw	r2,20(sp)
  106aa0:	d8c00617 	ldw	r3,24(sp)
  106aa4:	10e7c83a 	sub	r19,r2,r3
  106aa8:	003db506 	br	106180 <_dtoa_r+0xa08>
  106aac:	40800e58 	cmpnei	r2,r8,57
  106ab0:	1000a626 	beq	r2,zero,106d4c <_dtoa_r+0x15d4>
  106ab4:	42000044 	addi	r8,r8,1
  106ab8:	003fe206 	br	106a44 <_dtoa_r+0x12cc>
  106abc:	8029883a 	mov	r20,r16
  106ac0:	9821883a 	mov	r16,r19
  106ac4:	003e0f06 	br	106304 <_dtoa_r+0xb8c>
  106ac8:	d9000c17 	ldw	r4,48(sp)
  106acc:	d9400d17 	ldw	r5,52(sp)
  106ad0:	da401015 	stw	r9,64(sp)
  106ad4:	010e5400 	call	10e540 <__muldf3>
  106ad8:	d9000e17 	ldw	r4,56(sp)
  106adc:	d8c00d15 	stw	r3,52(sp)
  106ae0:	da401017 	ldw	r9,64(sp)
  106ae4:	d8c00317 	ldw	r3,12(sp)
  106ae8:	d8800c15 	stw	r2,48(sp)
  106aec:	20800058 	cmpnei	r2,r4,1
  106af0:	1a400005 	stb	r9,0(r3)
  106af4:	1907883a 	add	r3,r3,r4
  106af8:	1809883a 	mov	r4,r3
  106afc:	10001d26 	beq	r2,zero,106b74 <_dtoa_r+0x13fc>
  106b00:	8007883a 	mov	r3,r16
  106b04:	9005883a 	mov	r2,r18
  106b08:	dc400e15 	stw	r17,56(sp)
  106b0c:	2021883a 	mov	r16,r4
  106b10:	000d883a 	mov	r6,zero
  106b14:	01d00934 	movhi	r7,16420
  106b18:	1009883a 	mov	r4,r2
  106b1c:	180b883a 	mov	r5,r3
  106b20:	010e5400 	call	10e540 <__muldf3>
  106b24:	180b883a 	mov	r5,r3
  106b28:	1009883a 	mov	r4,r2
  106b2c:	1825883a 	mov	r18,r3
  106b30:	1023883a 	mov	r17,r2
  106b34:	010f6e00 	call	10f6e0 <__fixdfsi>
  106b38:	1009883a 	mov	r4,r2
  106b3c:	1027883a 	mov	r19,r2
  106b40:	010f7600 	call	10f760 <__floatsidf>
  106b44:	100d883a 	mov	r6,r2
  106b48:	180f883a 	mov	r7,r3
  106b4c:	8809883a 	mov	r4,r17
  106b50:	900b883a 	mov	r5,r18
  106b54:	bdc00044 	addi	r23,r23,1
  106b58:	9cc00c04 	addi	r19,r19,48
  106b5c:	010ed200 	call	10ed20 <__subdf3>
  106b60:	bcffffc5 	stb	r19,-1(r23)
  106b64:	bc3fea1e 	bne	r23,r16,106b10 <_dtoa_r+0x1398>
  106b68:	dc400e17 	ldw	r17,56(sp)
  106b6c:	1025883a 	mov	r18,r2
  106b70:	1821883a 	mov	r16,r3
  106b74:	d9000c17 	ldw	r4,48(sp)
  106b78:	d9400d17 	ldw	r5,52(sp)
  106b7c:	000d883a 	mov	r6,zero
  106b80:	01cff834 	movhi	r7,16352
  106b84:	010cfdc0 	call	10cfdc <__adddf3>
  106b88:	100d883a 	mov	r6,r2
  106b8c:	180f883a 	mov	r7,r3
  106b90:	9009883a 	mov	r4,r18
  106b94:	800b883a 	mov	r5,r16
  106b98:	010e3600 	call	10e360 <__gedf2>
  106b9c:	00807516 	blt	zero,r2,106d74 <_dtoa_r+0x15fc>
  106ba0:	d9800c17 	ldw	r6,48(sp)
  106ba4:	d9c00d17 	ldw	r7,52(sp)
  106ba8:	0009883a 	mov	r4,zero
  106bac:	014ff834 	movhi	r5,16352
  106bb0:	010ed200 	call	10ed20 <__subdf3>
  106bb4:	100d883a 	mov	r6,r2
  106bb8:	180f883a 	mov	r7,r3
  106bbc:	9009883a 	mov	r4,r18
  106bc0:	800b883a 	mov	r5,r16
  106bc4:	010e4500 	call	10e450 <__ledf2>
  106bc8:	103cb70e 	bge	r2,zero,105ea8 <_dtoa_r+0x730>
  106bcc:	00000106 	br	106bd4 <_dtoa_r+0x145c>
  106bd0:	182f883a 	mov	r23,r3
  106bd4:	b8bfffc7 	ldb	r2,-1(r23)
  106bd8:	b8ffffc4 	addi	r3,r23,-1
  106bdc:	10800c20 	cmpeqi	r2,r2,48
  106be0:	103ffb1e 	bne	r2,zero,106bd0 <_dtoa_r+0x1458>
  106be4:	003c7306 	br	105db4 <_dtoa_r+0x63c>
  106be8:	d8c01217 	ldw	r3,72(sp)
  106bec:	d9000517 	ldw	r4,20(sp)
  106bf0:	00800d84 	movi	r2,54
  106bf4:	10c5c83a 	sub	r2,r2,r3
  106bf8:	a0a9883a 	add	r20,r20,r2
  106bfc:	2085883a 	add	r2,r4,r2
  106c00:	2027883a 	mov	r19,r4
  106c04:	dc800817 	ldw	r18,32(sp)
  106c08:	d8800515 	stw	r2,20(sp)
  106c0c:	003d5c06 	br	106180 <_dtoa_r+0xa08>
  106c10:	d8800617 	ldw	r2,24(sp)
  106c14:	103f4726 	beq	r2,zero,106934 <_dtoa_r+0x11bc>
  106c18:	ddc00b17 	ldw	r23,44(sp)
  106c1c:	05fca20e 	bge	zero,r23,105ea8 <_dtoa_r+0x730>
  106c20:	980b883a 	mov	r5,r19
  106c24:	000d883a 	mov	r6,zero
  106c28:	01d00934 	movhi	r7,16420
  106c2c:	9009883a 	mov	r4,r18
  106c30:	010e5400 	call	10e540 <__muldf3>
  106c34:	81000044 	addi	r4,r16,1
  106c38:	1025883a 	mov	r18,r2
  106c3c:	1827883a 	mov	r19,r3
  106c40:	010f7600 	call	10f760 <__floatsidf>
  106c44:	900d883a 	mov	r6,r18
  106c48:	980f883a 	mov	r7,r19
  106c4c:	1009883a 	mov	r4,r2
  106c50:	180b883a 	mov	r5,r3
  106c54:	010e5400 	call	10e540 <__muldf3>
  106c58:	000d883a 	mov	r6,zero
  106c5c:	01d00734 	movhi	r7,16412
  106c60:	1009883a 	mov	r4,r2
  106c64:	180b883a 	mov	r5,r3
  106c68:	010cfdc0 	call	10cfdc <__adddf3>
  106c6c:	d8800c15 	stw	r2,48(sp)
  106c70:	d8800417 	ldw	r2,16(sp)
  106c74:	ddc00e15 	stw	r23,56(sp)
  106c78:	10bfffc4 	addi	r2,r2,-1
  106c7c:	d8800f15 	stw	r2,60(sp)
  106c80:	00bf3034 	movhi	r2,64704
  106c84:	1885883a 	add	r2,r3,r2
  106c88:	d8800d15 	stw	r2,52(sp)
  106c8c:	003bd006 	br	105bd0 <_dtoa_r+0x458>
  106c90:	d8800417 	ldw	r2,16(sp)
  106c94:	d9000117 	ldw	r4,4(sp)
  106c98:	880b883a 	mov	r5,r17
  106c9c:	00afc83a 	sub	r23,zero,r2
  106ca0:	b88003cc 	andi	r2,r23,15
  106ca4:	100690fa 	slli	r3,r2,3
  106ca8:	00800474 	movhi	r2,17
  106cac:	108cf004 	addi	r2,r2,13248
  106cb0:	10c5883a 	add	r2,r2,r3
  106cb4:	11800017 	ldw	r6,0(r2)
  106cb8:	11c00117 	ldw	r7,4(r2)
  106cbc:	b82fd13a 	srai	r23,r23,4
  106cc0:	010e5400 	call	10e540 <__muldf3>
  106cc4:	1025883a 	mov	r18,r2
  106cc8:	1827883a 	mov	r19,r3
  106ccc:	b8004a26 	beq	r23,zero,106df8 <_dtoa_r+0x1680>
  106cd0:	02000474 	movhi	r8,17
  106cd4:	04000084 	movi	r16,2
  106cd8:	420ce604 	addi	r8,r8,13208
  106cdc:	dc400c15 	stw	r17,48(sp)
  106ce0:	000f883a 	mov	r7,zero
  106ce4:	8023883a 	mov	r17,r16
  106ce8:	4021883a 	mov	r16,r8
  106cec:	b980004c 	andi	r6,r23,1
  106cf0:	1009883a 	mov	r4,r2
  106cf4:	b82fd07a 	srai	r23,r23,1
  106cf8:	180b883a 	mov	r5,r3
  106cfc:	30000526 	beq	r6,zero,106d14 <_dtoa_r+0x159c>
  106d00:	81c00117 	ldw	r7,4(r16)
  106d04:	81800017 	ldw	r6,0(r16)
  106d08:	8c400044 	addi	r17,r17,1
  106d0c:	010e5400 	call	10e540 <__muldf3>
  106d10:	01c00044 	movi	r7,1
  106d14:	84000204 	addi	r16,r16,8
  106d18:	b83ff41e 	bne	r23,zero,106cec <_dtoa_r+0x1574>
  106d1c:	39c03fcc 	andi	r7,r7,255
  106d20:	8821883a 	mov	r16,r17
  106d24:	dc400c17 	ldw	r17,48(sp)
  106d28:	383b8b26 	beq	r7,zero,105b58 <_dtoa_r+0x3e0>
  106d2c:	1025883a 	mov	r18,r2
  106d30:	1827883a 	mov	r19,r3
  106d34:	003b8806 	br	105b58 <_dtoa_r+0x3e0>
  106d38:	d8800417 	ldw	r2,16(sp)
  106d3c:	02000c44 	movi	r8,49
  106d40:	10800044 	addi	r2,r2,1
  106d44:	d8800415 	stw	r2,16(sp)
  106d48:	003cf606 	br	106124 <_dtoa_r+0x9ac>
  106d4c:	00800e44 	movi	r2,57
  106d50:	8029883a 	mov	r20,r16
  106d54:	88800005 	stb	r2,0(r17)
  106d58:	9821883a 	mov	r16,r19
  106d5c:	00c00e44 	movi	r3,57
  106d60:	d9400317 	ldw	r5,12(sp)
  106d64:	003d7706 	br	106344 <_dtoa_r+0xbcc>
  106d68:	0025883a 	mov	r18,zero
  106d6c:	0021883a 	mov	r16,zero
  106d70:	003e6706 	br	106710 <_dtoa_r+0xf98>
  106d74:	d8800f17 	ldw	r2,60(sp)
  106d78:	ba3fffc3 	ldbu	r8,-1(r23)
  106d7c:	d9000317 	ldw	r4,12(sp)
  106d80:	10800044 	addi	r2,r2,1
  106d84:	d8800415 	stw	r2,16(sp)
  106d88:	003cdf06 	br	106108 <_dtoa_r+0x990>
  106d8c:	103f2d1e 	bne	r2,zero,106a44 <_dtoa_r+0x12cc>
  106d90:	4080004c 	andi	r2,r8,1
  106d94:	103f281e 	bne	r2,zero,106a38 <_dtoa_r+0x12c0>
  106d98:	003f2a06 	br	106a44 <_dtoa_r+0x12cc>
  106d9c:	d8800f17 	ldw	r2,60(sp)
  106da0:	8811883a 	mov	r8,r17
  106da4:	d9000317 	ldw	r4,12(sp)
  106da8:	10800044 	addi	r2,r2,1
  106dac:	d8800415 	stw	r2,16(sp)
  106db0:	003cd506 	br	106108 <_dtoa_r+0x990>
  106db4:	40800e60 	cmpeqi	r2,r8,57
  106db8:	8dc00044 	addi	r23,r17,1
  106dbc:	103fe31e 	bne	r2,zero,106d4c <_dtoa_r+0x15d4>
  106dc0:	053f1f16 	blt	zero,r20,106a40 <_dtoa_r+0x12c8>
  106dc4:	003f1f06 	br	106a44 <_dtoa_r+0x12cc>
  106dc8:	d8800217 	ldw	r2,8(sp)
  106dcc:	108000c8 	cmpgei	r2,r2,3
  106dd0:	103e9326 	beq	r2,zero,106820 <_dtoa_r+0x10a8>
  106dd4:	d8800b17 	ldw	r2,44(sp)
  106dd8:	dd000415 	stw	r20,16(sp)
  106ddc:	d8800615 	stw	r2,24(sp)
  106de0:	003e3f06 	br	1066e0 <_dtoa_r+0xf68>
  106de4:	d8800217 	ldw	r2,8(sp)
  106de8:	108000c8 	cmpgei	r2,r2,3
  106dec:	103ff91e 	bne	r2,zero,106dd4 <_dtoa_r+0x165c>
  106df0:	d8800b17 	ldw	r2,44(sp)
  106df4:	003de006 	br	106578 <_dtoa_r+0xe00>
  106df8:	04000084 	movi	r16,2
  106dfc:	003b5606 	br	105b58 <_dtoa_r+0x3e0>
  106e00:	d8800f17 	ldw	r2,60(sp)
  106e04:	d9000317 	ldw	r4,12(sp)
  106e08:	10800044 	addi	r2,r2,1
  106e0c:	d8800415 	stw	r2,16(sp)
  106e10:	003cbd06 	br	106108 <_dtoa_r+0x990>
  106e14:	00800474 	movhi	r2,17
  106e18:	108cd604 	addi	r2,r2,13144
  106e1c:	d8800315 	stw	r2,12(sp)
  106e20:	003a8706 	br	105840 <_dtoa_r+0xc8>
  106e24:	000b883a 	mov	r5,zero
  106e28:	003b1b06 	br	105a98 <_dtoa_r+0x320>
  106e2c:	18c00120 	cmpeqi	r3,r3,4
  106e30:	183d0f1e 	bne	r3,zero,106270 <_dtoa_r+0xaf8>
  106e34:	00c00f04 	movi	r3,60
  106e38:	1885c83a 	sub	r2,r3,r2
  106e3c:	003d0706 	br	10625c <_dtoa_r+0xae4>

00106e40 <__sflush_r>:
  106e40:	2880030b 	ldhu	r2,12(r5)
  106e44:	defffb04 	addi	sp,sp,-20
  106e48:	dcc00315 	stw	r19,12(sp)
  106e4c:	dc000015 	stw	r16,0(sp)
  106e50:	dfc00415 	stw	ra,16(sp)
  106e54:	dc800215 	stw	r18,8(sp)
  106e58:	dc400115 	stw	r17,4(sp)
  106e5c:	10c0020c 	andi	r3,r2,8
  106e60:	2821883a 	mov	r16,r5
  106e64:	2027883a 	mov	r19,r4
  106e68:	18003f1e 	bne	r3,zero,106f68 <__sflush_r+0x128>
  106e6c:	28c00117 	ldw	r3,4(r5)
  106e70:	10820014 	ori	r2,r2,2048
  106e74:	2880030d 	sth	r2,12(r5)
  106e78:	00c0550e 	bge	zero,r3,106fd0 <__sflush_r+0x190>
  106e7c:	82000a17 	ldw	r8,40(r16)
  106e80:	40003126 	beq	r8,zero,106f48 <__sflush_r+0x108>
  106e84:	9c400017 	ldw	r17,0(r19)
  106e88:	1104000c 	andi	r4,r2,4096
  106e8c:	98000015 	stw	zero,0(r19)
  106e90:	1007883a 	mov	r3,r2
  106e94:	81400717 	ldw	r5,28(r16)
  106e98:	2000521e 	bne	r4,zero,106fe4 <__sflush_r+0x1a4>
  106e9c:	01c00044 	movi	r7,1
  106ea0:	000d883a 	mov	r6,zero
  106ea4:	9809883a 	mov	r4,r19
  106ea8:	403ee83a 	callr	r8
  106eac:	10ffffd8 	cmpnei	r3,r2,-1
  106eb0:	18005826 	beq	r3,zero,107014 <__sflush_r+0x1d4>
  106eb4:	80c0030b 	ldhu	r3,12(r16)
  106eb8:	82000a17 	ldw	r8,40(r16)
  106ebc:	81400717 	ldw	r5,28(r16)
  106ec0:	18c0010c 	andi	r3,r3,4
  106ec4:	18000626 	beq	r3,zero,106ee0 <__sflush_r+0xa0>
  106ec8:	81000117 	ldw	r4,4(r16)
  106ecc:	80c00c17 	ldw	r3,48(r16)
  106ed0:	1105c83a 	sub	r2,r2,r4
  106ed4:	18000226 	beq	r3,zero,106ee0 <__sflush_r+0xa0>
  106ed8:	80c00f17 	ldw	r3,60(r16)
  106edc:	10c5c83a 	sub	r2,r2,r3
  106ee0:	000f883a 	mov	r7,zero
  106ee4:	100d883a 	mov	r6,r2
  106ee8:	9809883a 	mov	r4,r19
  106eec:	403ee83a 	callr	r8
  106ef0:	10ffffd8 	cmpnei	r3,r2,-1
  106ef4:	18003d1e 	bne	r3,zero,106fec <__sflush_r+0x1ac>
  106ef8:	99000017 	ldw	r4,0(r19)
  106efc:	80c0030b 	ldhu	r3,12(r16)
  106f00:	20004e26 	beq	r4,zero,10703c <__sflush_r+0x1fc>
  106f04:	21400760 	cmpeqi	r5,r4,29
  106f08:	2800021e 	bne	r5,zero,106f14 <__sflush_r+0xd4>
  106f0c:	210005a0 	cmpeqi	r4,r4,22
  106f10:	20002c26 	beq	r4,zero,106fc4 <__sflush_r+0x184>
  106f14:	80800417 	ldw	r2,16(r16)
  106f18:	18fdffcc 	andi	r3,r3,63487
  106f1c:	80c0030d 	sth	r3,12(r16)
  106f20:	80000115 	stw	zero,4(r16)
  106f24:	80800015 	stw	r2,0(r16)
  106f28:	81400c17 	ldw	r5,48(r16)
  106f2c:	9c400015 	stw	r17,0(r19)
  106f30:	28000526 	beq	r5,zero,106f48 <__sflush_r+0x108>
  106f34:	80801004 	addi	r2,r16,64
  106f38:	28800226 	beq	r5,r2,106f44 <__sflush_r+0x104>
  106f3c:	9809883a 	mov	r4,r19
  106f40:	01075600 	call	107560 <_free_r>
  106f44:	80000c15 	stw	zero,48(r16)
  106f48:	0005883a 	mov	r2,zero
  106f4c:	dfc00417 	ldw	ra,16(sp)
  106f50:	dcc00317 	ldw	r19,12(sp)
  106f54:	dc800217 	ldw	r18,8(sp)
  106f58:	dc400117 	ldw	r17,4(sp)
  106f5c:	dc000017 	ldw	r16,0(sp)
  106f60:	dec00504 	addi	sp,sp,20
  106f64:	f800283a 	ret
  106f68:	2c800417 	ldw	r18,16(r5)
  106f6c:	903ff626 	beq	r18,zero,106f48 <__sflush_r+0x108>
  106f70:	2c400017 	ldw	r17,0(r5)
  106f74:	108000cc 	andi	r2,r2,3
  106f78:	2c800015 	stw	r18,0(r5)
  106f7c:	8ca3c83a 	sub	r17,r17,r18
  106f80:	1000161e 	bne	r2,zero,106fdc <__sflush_r+0x19c>
  106f84:	28800517 	ldw	r2,20(r5)
  106f88:	80800215 	stw	r2,8(r16)
  106f8c:	04400316 	blt	zero,r17,106f9c <__sflush_r+0x15c>
  106f90:	003fed06 	br	106f48 <__sflush_r+0x108>
  106f94:	90a5883a 	add	r18,r18,r2
  106f98:	047feb0e 	bge	zero,r17,106f48 <__sflush_r+0x108>
  106f9c:	80800917 	ldw	r2,36(r16)
  106fa0:	81400717 	ldw	r5,28(r16)
  106fa4:	880f883a 	mov	r7,r17
  106fa8:	900d883a 	mov	r6,r18
  106fac:	9809883a 	mov	r4,r19
  106fb0:	103ee83a 	callr	r2
  106fb4:	88a3c83a 	sub	r17,r17,r2
  106fb8:	00bff616 	blt	zero,r2,106f94 <__sflush_r+0x154>
  106fbc:	80c0030b 	ldhu	r3,12(r16)
  106fc0:	00bfffc4 	movi	r2,-1
  106fc4:	18c01014 	ori	r3,r3,64
  106fc8:	80c0030d 	sth	r3,12(r16)
  106fcc:	003fdf06 	br	106f4c <__sflush_r+0x10c>
  106fd0:	28c00f17 	ldw	r3,60(r5)
  106fd4:	00ffa916 	blt	zero,r3,106e7c <__sflush_r+0x3c>
  106fd8:	003fdb06 	br	106f48 <__sflush_r+0x108>
  106fdc:	0005883a 	mov	r2,zero
  106fe0:	003fe906 	br	106f88 <__sflush_r+0x148>
  106fe4:	80801417 	ldw	r2,80(r16)
  106fe8:	003fb506 	br	106ec0 <__sflush_r+0x80>
  106fec:	80c0030b 	ldhu	r3,12(r16)
  106ff0:	81000417 	ldw	r4,16(r16)
  106ff4:	80000115 	stw	zero,4(r16)
  106ff8:	197dffcc 	andi	r5,r3,63487
  106ffc:	8140030d 	sth	r5,12(r16)
  107000:	81000015 	stw	r4,0(r16)
  107004:	18c4000c 	andi	r3,r3,4096
  107008:	183fc726 	beq	r3,zero,106f28 <__sflush_r+0xe8>
  10700c:	80801415 	stw	r2,80(r16)
  107010:	003fc506 	br	106f28 <__sflush_r+0xe8>
  107014:	98c00017 	ldw	r3,0(r19)
  107018:	183fa626 	beq	r3,zero,106eb4 <__sflush_r+0x74>
  10701c:	19000760 	cmpeqi	r4,r3,29
  107020:	20000e1e 	bne	r4,zero,10705c <__sflush_r+0x21c>
  107024:	18c00598 	cmpnei	r3,r3,22
  107028:	18000c26 	beq	r3,zero,10705c <__sflush_r+0x21c>
  10702c:	80c0030b 	ldhu	r3,12(r16)
  107030:	18c01014 	ori	r3,r3,64
  107034:	80c0030d 	sth	r3,12(r16)
  107038:	003fc406 	br	106f4c <__sflush_r+0x10c>
  10703c:	81000417 	ldw	r4,16(r16)
  107040:	197dffcc 	andi	r5,r3,63487
  107044:	8140030d 	sth	r5,12(r16)
  107048:	80000115 	stw	zero,4(r16)
  10704c:	81000015 	stw	r4,0(r16)
  107050:	18c4000c 	andi	r3,r3,4096
  107054:	183fb426 	beq	r3,zero,106f28 <__sflush_r+0xe8>
  107058:	003fec06 	br	10700c <__sflush_r+0x1cc>
  10705c:	9c400015 	stw	r17,0(r19)
  107060:	0005883a 	mov	r2,zero
  107064:	003fb906 	br	106f4c <__sflush_r+0x10c>

00107068 <_fflush_r>:
  107068:	defffd04 	addi	sp,sp,-12
  10706c:	dc000115 	stw	r16,4(sp)
  107070:	dfc00215 	stw	ra,8(sp)
  107074:	2021883a 	mov	r16,r4
  107078:	20000226 	beq	r4,zero,107084 <_fflush_r+0x1c>
  10707c:	20800e17 	ldw	r2,56(r4)
  107080:	10000726 	beq	r2,zero,1070a0 <_fflush_r+0x38>
  107084:	2880030f 	ldh	r2,12(r5)
  107088:	10000a1e 	bne	r2,zero,1070b4 <_fflush_r+0x4c>
  10708c:	0005883a 	mov	r2,zero
  107090:	dfc00217 	ldw	ra,8(sp)
  107094:	dc000117 	ldw	r16,4(sp)
  107098:	dec00304 	addi	sp,sp,12
  10709c:	f800283a 	ret
  1070a0:	d9400015 	stw	r5,0(sp)
  1070a4:	01073fc0 	call	1073fc <__sinit>
  1070a8:	d9400017 	ldw	r5,0(sp)
  1070ac:	2880030f 	ldh	r2,12(r5)
  1070b0:	103ff626 	beq	r2,zero,10708c <_fflush_r+0x24>
  1070b4:	8009883a 	mov	r4,r16
  1070b8:	dfc00217 	ldw	ra,8(sp)
  1070bc:	dc000117 	ldw	r16,4(sp)
  1070c0:	dec00304 	addi	sp,sp,12
  1070c4:	0106e401 	jmpi	106e40 <__sflush_r>

001070c8 <fflush>:
  1070c8:	200b883a 	mov	r5,r4
  1070cc:	20000326 	beq	r4,zero,1070dc <fflush+0x14>
  1070d0:	00800074 	movhi	r2,1
  1070d4:	11073c17 	ldw	r4,7408(r2)
  1070d8:	01070681 	jmpi	107068 <_fflush_r>
  1070dc:	00800074 	movhi	r2,1
  1070e0:	11073b17 	ldw	r4,7404(r2)
  1070e4:	01400434 	movhi	r5,16
  1070e8:	295c1a04 	addi	r5,r5,28776
  1070ec:	0107dd41 	jmpi	107dd4 <_fwalk_reent>

001070f0 <__fp_lock>:
  1070f0:	0005883a 	mov	r2,zero
  1070f4:	f800283a 	ret

001070f8 <_cleanup_r>:
  1070f8:	01400474 	movhi	r5,17
  1070fc:	296f2704 	addi	r5,r5,-17252
  107100:	0107dd41 	jmpi	107dd4 <_fwalk_reent>

00107104 <__sinit.part.0>:
  107104:	00c00434 	movhi	r3,16
  107108:	20800117 	ldw	r2,4(r4)
  10710c:	18dc3e04 	addi	r3,r3,28920
  107110:	20c00f15 	stw	r3,60(r4)
  107114:	2140bb04 	addi	r5,r4,748
  107118:	00c000c4 	movi	r3,3
  10711c:	20c0b915 	stw	r3,740(r4)
  107120:	2140ba15 	stw	r5,744(r4)
  107124:	2000b815 	stw	zero,736(r4)
  107128:	10001705 	stb	zero,92(r2)
  10712c:	10001745 	stb	zero,93(r2)
  107130:	10001785 	stb	zero,94(r2)
  107134:	100017c5 	stb	zero,95(r2)
  107138:	10001805 	stb	zero,96(r2)
  10713c:	10001845 	stb	zero,97(r2)
  107140:	10001885 	stb	zero,98(r2)
  107144:	100018c5 	stb	zero,99(r2)
  107148:	00c00104 	movi	r3,4
  10714c:	10c00315 	stw	r3,12(r2)
  107150:	02000474 	movhi	r8,17
  107154:	20c00217 	ldw	r3,8(r4)
  107158:	01c00474 	movhi	r7,17
  10715c:	01800474 	movhi	r6,17
  107160:	01400474 	movhi	r5,17
  107164:	4228d604 	addi	r8,r8,-23720
  107168:	39e8ed04 	addi	r7,r7,-23628
  10716c:	31a90d04 	addi	r6,r6,-23500
  107170:	29692404 	addi	r5,r5,-23408
  107174:	02400074 	movhi	r9,1
  107178:	10001915 	stw	zero,100(r2)
  10717c:	10000015 	stw	zero,0(r2)
  107180:	10000115 	stw	zero,4(r2)
  107184:	10000215 	stw	zero,8(r2)
  107188:	10000415 	stw	zero,16(r2)
  10718c:	10000515 	stw	zero,20(r2)
  107190:	10000615 	stw	zero,24(r2)
  107194:	10800715 	stw	r2,28(r2)
  107198:	12000815 	stw	r8,32(r2)
  10719c:	11c00915 	stw	r7,36(r2)
  1071a0:	11800a15 	stw	r6,40(r2)
  1071a4:	11400b15 	stw	r5,44(r2)
  1071a8:	4a400284 	addi	r9,r9,10
  1071ac:	1a400315 	stw	r9,12(r3)
  1071b0:	18001915 	stw	zero,100(r3)
  1071b4:	18000015 	stw	zero,0(r3)
  1071b8:	18000115 	stw	zero,4(r3)
  1071bc:	18000215 	stw	zero,8(r3)
  1071c0:	18000415 	stw	zero,16(r3)
  1071c4:	18001705 	stb	zero,92(r3)
  1071c8:	18001745 	stb	zero,93(r3)
  1071cc:	18001785 	stb	zero,94(r3)
  1071d0:	180017c5 	stb	zero,95(r3)
  1071d4:	18001805 	stb	zero,96(r3)
  1071d8:	18001845 	stb	zero,97(r3)
  1071dc:	18001885 	stb	zero,98(r3)
  1071e0:	180018c5 	stb	zero,99(r3)
  1071e4:	20800317 	ldw	r2,12(r4)
  1071e8:	024000b4 	movhi	r9,2
  1071ec:	18000515 	stw	zero,20(r3)
  1071f0:	18000615 	stw	zero,24(r3)
  1071f4:	18c00715 	stw	r3,28(r3)
  1071f8:	1a000815 	stw	r8,32(r3)
  1071fc:	19c00915 	stw	r7,36(r3)
  107200:	19800a15 	stw	r6,40(r3)
  107204:	19400b15 	stw	r5,44(r3)
  107208:	4a400484 	addi	r9,r9,18
  10720c:	10001915 	stw	zero,100(r2)
  107210:	10000015 	stw	zero,0(r2)
  107214:	10000115 	stw	zero,4(r2)
  107218:	10000215 	stw	zero,8(r2)
  10721c:	12400315 	stw	r9,12(r2)
  107220:	10000415 	stw	zero,16(r2)
  107224:	10000515 	stw	zero,20(r2)
  107228:	10000615 	stw	zero,24(r2)
  10722c:	10001705 	stb	zero,92(r2)
  107230:	10001745 	stb	zero,93(r2)
  107234:	10001785 	stb	zero,94(r2)
  107238:	100017c5 	stb	zero,95(r2)
  10723c:	10001805 	stb	zero,96(r2)
  107240:	10001845 	stb	zero,97(r2)
  107244:	10001885 	stb	zero,98(r2)
  107248:	100018c5 	stb	zero,99(r2)
  10724c:	10800715 	stw	r2,28(r2)
  107250:	12000815 	stw	r8,32(r2)
  107254:	11c00915 	stw	r7,36(r2)
  107258:	11800a15 	stw	r6,40(r2)
  10725c:	11400b15 	stw	r5,44(r2)
  107260:	00800044 	movi	r2,1
  107264:	20800e15 	stw	r2,56(r4)
  107268:	f800283a 	ret

0010726c <__fp_unlock>:
  10726c:	0005883a 	mov	r2,zero
  107270:	f800283a 	ret

00107274 <__sfmoreglue>:
  107274:	defffc04 	addi	sp,sp,-16
  107278:	dc800215 	stw	r18,8(sp)
  10727c:	2825883a 	mov	r18,r5
  107280:	dc000015 	stw	r16,0(sp)
  107284:	01401a04 	movi	r5,104
  107288:	2021883a 	mov	r16,r4
  10728c:	913fffc4 	addi	r4,r18,-1
  107290:	dfc00315 	stw	ra,12(sp)
  107294:	dc400115 	stw	r17,4(sp)
  107298:	0102e600 	call	102e60 <__mulsi3>
  10729c:	8009883a 	mov	r4,r16
  1072a0:	11401d04 	addi	r5,r2,116
  1072a4:	1023883a 	mov	r17,r2
  1072a8:	010807c0 	call	10807c <_malloc_r>
  1072ac:	1021883a 	mov	r16,r2
  1072b0:	10000726 	beq	r2,zero,1072d0 <__sfmoreglue+0x5c>
  1072b4:	11000304 	addi	r4,r2,12
  1072b8:	10000015 	stw	zero,0(r2)
  1072bc:	14800115 	stw	r18,4(r2)
  1072c0:	11000215 	stw	r4,8(r2)
  1072c4:	89801a04 	addi	r6,r17,104
  1072c8:	000b883a 	mov	r5,zero
  1072cc:	0108a840 	call	108a84 <memset>
  1072d0:	8005883a 	mov	r2,r16
  1072d4:	dfc00317 	ldw	ra,12(sp)
  1072d8:	dc800217 	ldw	r18,8(sp)
  1072dc:	dc400117 	ldw	r17,4(sp)
  1072e0:	dc000017 	ldw	r16,0(sp)
  1072e4:	dec00404 	addi	sp,sp,16
  1072e8:	f800283a 	ret

001072ec <__sfp>:
  1072ec:	defffd04 	addi	sp,sp,-12
  1072f0:	00800074 	movhi	r2,1
  1072f4:	dc000015 	stw	r16,0(sp)
  1072f8:	14073b17 	ldw	r16,7404(r2)
  1072fc:	dc400115 	stw	r17,4(sp)
  107300:	dfc00215 	stw	ra,8(sp)
  107304:	80800e17 	ldw	r2,56(r16)
  107308:	2023883a 	mov	r17,r4
  10730c:	10002b26 	beq	r2,zero,1073bc <__sfp+0xd0>
  107310:	8400b804 	addi	r16,r16,736
  107314:	80c00117 	ldw	r3,4(r16)
  107318:	80800217 	ldw	r2,8(r16)
  10731c:	18ffffc4 	addi	r3,r3,-1
  107320:	1800050e 	bge	r3,zero,107338 <__sfp+0x4c>
  107324:	00002106 	br	1073ac <__sfp+0xc0>
  107328:	18ffffc4 	addi	r3,r3,-1
  10732c:	193fffd8 	cmpnei	r4,r3,-1
  107330:	10801a04 	addi	r2,r2,104
  107334:	20001d26 	beq	r4,zero,1073ac <__sfp+0xc0>
  107338:	1100030f 	ldh	r4,12(r2)
  10733c:	203ffa1e 	bne	r4,zero,107328 <__sfp+0x3c>
  107340:	00fffff4 	movhi	r3,65535
  107344:	18c00044 	addi	r3,r3,1
  107348:	10001915 	stw	zero,100(r2)
  10734c:	10000015 	stw	zero,0(r2)
  107350:	10000115 	stw	zero,4(r2)
  107354:	10000215 	stw	zero,8(r2)
  107358:	10c00315 	stw	r3,12(r2)
  10735c:	10000415 	stw	zero,16(r2)
  107360:	10000515 	stw	zero,20(r2)
  107364:	10000615 	stw	zero,24(r2)
  107368:	10001705 	stb	zero,92(r2)
  10736c:	10001745 	stb	zero,93(r2)
  107370:	10001785 	stb	zero,94(r2)
  107374:	100017c5 	stb	zero,95(r2)
  107378:	10001805 	stb	zero,96(r2)
  10737c:	10001845 	stb	zero,97(r2)
  107380:	10001885 	stb	zero,98(r2)
  107384:	100018c5 	stb	zero,99(r2)
  107388:	10000c15 	stw	zero,48(r2)
  10738c:	10000d15 	stw	zero,52(r2)
  107390:	10001115 	stw	zero,68(r2)
  107394:	10001215 	stw	zero,72(r2)
  107398:	dfc00217 	ldw	ra,8(sp)
  10739c:	dc400117 	ldw	r17,4(sp)
  1073a0:	dc000017 	ldw	r16,0(sp)
  1073a4:	dec00304 	addi	sp,sp,12
  1073a8:	f800283a 	ret
  1073ac:	80800017 	ldw	r2,0(r16)
  1073b0:	10000526 	beq	r2,zero,1073c8 <__sfp+0xdc>
  1073b4:	1021883a 	mov	r16,r2
  1073b8:	003fd606 	br	107314 <__sfp+0x28>
  1073bc:	8009883a 	mov	r4,r16
  1073c0:	01071040 	call	107104 <__sinit.part.0>
  1073c4:	003fd206 	br	107310 <__sfp+0x24>
  1073c8:	01400104 	movi	r5,4
  1073cc:	8809883a 	mov	r4,r17
  1073d0:	01072740 	call	107274 <__sfmoreglue>
  1073d4:	80800015 	stw	r2,0(r16)
  1073d8:	103ff61e 	bne	r2,zero,1073b4 <__sfp+0xc8>
  1073dc:	00c00304 	movi	r3,12
  1073e0:	88c00015 	stw	r3,0(r17)
  1073e4:	003fec06 	br	107398 <__sfp+0xac>

001073e8 <_cleanup>:
  1073e8:	00800074 	movhi	r2,1
  1073ec:	11073b17 	ldw	r4,7404(r2)
  1073f0:	01400474 	movhi	r5,17
  1073f4:	296f2704 	addi	r5,r5,-17252
  1073f8:	0107dd41 	jmpi	107dd4 <_fwalk_reent>

001073fc <__sinit>:
  1073fc:	20800e17 	ldw	r2,56(r4)
  107400:	10000126 	beq	r2,zero,107408 <__sinit+0xc>
  107404:	f800283a 	ret
  107408:	01071041 	jmpi	107104 <__sinit.part.0>

0010740c <__sfp_lock_acquire>:
  10740c:	f800283a 	ret

00107410 <__sfp_lock_release>:
  107410:	f800283a 	ret

00107414 <__sinit_lock_acquire>:
  107414:	f800283a 	ret

00107418 <__sinit_lock_release>:
  107418:	f800283a 	ret

0010741c <__fp_lock_all>:
  10741c:	00800074 	movhi	r2,1
  107420:	11073c17 	ldw	r4,7408(r2)
  107424:	01400434 	movhi	r5,16
  107428:	295c3c04 	addi	r5,r5,28912
  10742c:	0107d301 	jmpi	107d30 <_fwalk>

00107430 <__fp_unlock_all>:
  107430:	00800074 	movhi	r2,1
  107434:	11073c17 	ldw	r4,7408(r2)
  107438:	01400434 	movhi	r5,16
  10743c:	295c9b04 	addi	r5,r5,29292
  107440:	0107d301 	jmpi	107d30 <_fwalk>

00107444 <_malloc_trim_r>:
  107444:	defffb04 	addi	sp,sp,-20
  107448:	dcc00315 	stw	r19,12(sp)
  10744c:	04c00074 	movhi	r19,1
  107450:	dc800215 	stw	r18,8(sp)
  107454:	dc400115 	stw	r17,4(sp)
  107458:	dc000015 	stw	r16,0(sp)
  10745c:	dfc00415 	stw	ra,16(sp)
  107460:	2821883a 	mov	r16,r5
  107464:	9cc11504 	addi	r19,r19,1108
  107468:	2025883a 	mov	r18,r4
  10746c:	010fdc80 	call	10fdc8 <__malloc_lock>
  107470:	98800217 	ldw	r2,8(r19)
  107474:	14400117 	ldw	r17,4(r2)
  107478:	00bfff04 	movi	r2,-4
  10747c:	88a2703a 	and	r17,r17,r2
  107480:	8c21c83a 	sub	r16,r17,r16
  107484:	8403fbc4 	addi	r16,r16,4079
  107488:	8020d33a 	srli	r16,r16,12
  10748c:	843fffc4 	addi	r16,r16,-1
  107490:	8020933a 	slli	r16,r16,12
  107494:	80840008 	cmpgei	r2,r16,4096
  107498:	10000626 	beq	r2,zero,1074b4 <_malloc_trim_r+0x70>
  10749c:	000b883a 	mov	r5,zero
  1074a0:	9009883a 	mov	r4,r18
  1074a4:	010a3000 	call	10a300 <_sbrk_r>
  1074a8:	98c00217 	ldw	r3,8(r19)
  1074ac:	1c47883a 	add	r3,r3,r17
  1074b0:	10c00a26 	beq	r2,r3,1074dc <_malloc_trim_r+0x98>
  1074b4:	9009883a 	mov	r4,r18
  1074b8:	010fdec0 	call	10fdec <__malloc_unlock>
  1074bc:	0005883a 	mov	r2,zero
  1074c0:	dfc00417 	ldw	ra,16(sp)
  1074c4:	dcc00317 	ldw	r19,12(sp)
  1074c8:	dc800217 	ldw	r18,8(sp)
  1074cc:	dc400117 	ldw	r17,4(sp)
  1074d0:	dc000017 	ldw	r16,0(sp)
  1074d4:	dec00504 	addi	sp,sp,20
  1074d8:	f800283a 	ret
  1074dc:	040bc83a 	sub	r5,zero,r16
  1074e0:	9009883a 	mov	r4,r18
  1074e4:	010a3000 	call	10a300 <_sbrk_r>
  1074e8:	10bfffd8 	cmpnei	r2,r2,-1
  1074ec:	10000d26 	beq	r2,zero,107524 <_malloc_trim_r+0xe0>
  1074f0:	00800074 	movhi	r2,1
  1074f4:	10876917 	ldw	r2,7588(r2)
  1074f8:	98c00217 	ldw	r3,8(r19)
  1074fc:	8c23c83a 	sub	r17,r17,r16
  107500:	8c400054 	ori	r17,r17,1
  107504:	1421c83a 	sub	r16,r2,r16
  107508:	1c400115 	stw	r17,4(r3)
  10750c:	00800074 	movhi	r2,1
  107510:	9009883a 	mov	r4,r18
  107514:	14076915 	stw	r16,7588(r2)
  107518:	010fdec0 	call	10fdec <__malloc_unlock>
  10751c:	00800044 	movi	r2,1
  107520:	003fe706 	br	1074c0 <_malloc_trim_r+0x7c>
  107524:	000b883a 	mov	r5,zero
  107528:	9009883a 	mov	r4,r18
  10752c:	010a3000 	call	10a300 <_sbrk_r>
  107530:	99000217 	ldw	r4,8(r19)
  107534:	1107c83a 	sub	r3,r2,r4
  107538:	19400410 	cmplti	r5,r3,16
  10753c:	283fdd1e 	bne	r5,zero,1074b4 <_malloc_trim_r+0x70>
  107540:	01400074 	movhi	r5,1
  107544:	29473d17 	ldw	r5,7412(r5)
  107548:	18c00054 	ori	r3,r3,1
  10754c:	20c00115 	stw	r3,4(r4)
  107550:	1145c83a 	sub	r2,r2,r5
  107554:	01400074 	movhi	r5,1
  107558:	28876915 	stw	r2,7588(r5)
  10755c:	003fd506 	br	1074b4 <_malloc_trim_r+0x70>

00107560 <_free_r>:
  107560:	28004f26 	beq	r5,zero,1076a0 <_free_r+0x140>
  107564:	defffd04 	addi	sp,sp,-12
  107568:	dc400115 	stw	r17,4(sp)
  10756c:	dc000015 	stw	r16,0(sp)
  107570:	2023883a 	mov	r17,r4
  107574:	2821883a 	mov	r16,r5
  107578:	dfc00215 	stw	ra,8(sp)
  10757c:	010fdc80 	call	10fdc8 <__malloc_lock>
  107580:	81ffff17 	ldw	r7,-4(r16)
  107584:	00bfff84 	movi	r2,-2
  107588:	80fffe04 	addi	r3,r16,-8
  10758c:	3884703a 	and	r2,r7,r2
  107590:	01800074 	movhi	r6,1
  107594:	1889883a 	add	r4,r3,r2
  107598:	31811504 	addi	r6,r6,1108
  10759c:	21400117 	ldw	r5,4(r4)
  1075a0:	32000217 	ldw	r8,8(r6)
  1075a4:	027fff04 	movi	r9,-4
  1075a8:	2a4a703a 	and	r5,r5,r9
  1075ac:	41006426 	beq	r8,r4,107740 <_free_r+0x1e0>
  1075b0:	21400115 	stw	r5,4(r4)
  1075b4:	39c0004c 	andi	r7,r7,1
  1075b8:	2151883a 	add	r8,r4,r5
  1075bc:	3800281e 	bne	r7,zero,107660 <_free_r+0x100>
  1075c0:	82bffe17 	ldw	r10,-8(r16)
  1075c4:	42000117 	ldw	r8,4(r8)
  1075c8:	01c00074 	movhi	r7,1
  1075cc:	1a87c83a 	sub	r3,r3,r10
  1075d0:	1a400217 	ldw	r9,8(r3)
  1075d4:	39c11704 	addi	r7,r7,1116
  1075d8:	1285883a 	add	r2,r2,r10
  1075dc:	4200004c 	andi	r8,r8,1
  1075e0:	49c04c26 	beq	r9,r7,107714 <_free_r+0x1b4>
  1075e4:	1a800317 	ldw	r10,12(r3)
  1075e8:	4a800315 	stw	r10,12(r9)
  1075ec:	52400215 	stw	r9,8(r10)
  1075f0:	40007126 	beq	r8,zero,1077b8 <_free_r+0x258>
  1075f4:	11400054 	ori	r5,r2,1
  1075f8:	19400115 	stw	r5,4(r3)
  1075fc:	20800015 	stw	r2,0(r4)
  107600:	11008028 	cmpgeui	r4,r2,512
  107604:	20002c1e 	bne	r4,zero,1076b8 <_free_r+0x158>
  107608:	1008d0fa 	srli	r4,r2,3
  10760c:	31c00117 	ldw	r7,4(r6)
  107610:	20800044 	addi	r2,r4,1
  107614:	200bd0ba 	srai	r5,r4,2
  107618:	100490fa 	slli	r2,r2,3
  10761c:	01000044 	movi	r4,1
  107620:	2148983a 	sll	r4,r4,r5
  107624:	3085883a 	add	r2,r6,r2
  107628:	11400017 	ldw	r5,0(r2)
  10762c:	21c8b03a 	or	r4,r4,r7
  107630:	11fffe04 	addi	r7,r2,-8
  107634:	19c00315 	stw	r7,12(r3)
  107638:	19400215 	stw	r5,8(r3)
  10763c:	31000115 	stw	r4,4(r6)
  107640:	10c00015 	stw	r3,0(r2)
  107644:	28c00315 	stw	r3,12(r5)
  107648:	8809883a 	mov	r4,r17
  10764c:	dfc00217 	ldw	ra,8(sp)
  107650:	dc400117 	ldw	r17,4(sp)
  107654:	dc000017 	ldw	r16,0(sp)
  107658:	dec00304 	addi	sp,sp,12
  10765c:	010fdec1 	jmpi	10fdec <__malloc_unlock>
  107660:	41c00117 	ldw	r7,4(r8)
  107664:	39c0004c 	andi	r7,r7,1
  107668:	38000e1e 	bne	r7,zero,1076a4 <_free_r+0x144>
  10766c:	01c00074 	movhi	r7,1
  107670:	1145883a 	add	r2,r2,r5
  107674:	39c11704 	addi	r7,r7,1116
  107678:	21400217 	ldw	r5,8(r4)
  10767c:	12400054 	ori	r9,r2,1
  107680:	1891883a 	add	r8,r3,r2
  107684:	29c05226 	beq	r5,r7,1077d0 <_free_r+0x270>
  107688:	21000317 	ldw	r4,12(r4)
  10768c:	29000315 	stw	r4,12(r5)
  107690:	21400215 	stw	r5,8(r4)
  107694:	1a400115 	stw	r9,4(r3)
  107698:	40800015 	stw	r2,0(r8)
  10769c:	003fd806 	br	107600 <_free_r+0xa0>
  1076a0:	f800283a 	ret
  1076a4:	11400054 	ori	r5,r2,1
  1076a8:	817fff15 	stw	r5,-4(r16)
  1076ac:	20800015 	stw	r2,0(r4)
  1076b0:	11008028 	cmpgeui	r4,r2,512
  1076b4:	203fd426 	beq	r4,zero,107608 <_free_r+0xa8>
  1076b8:	1008d27a 	srli	r4,r2,9
  1076bc:	21400168 	cmpgeui	r5,r4,5
  1076c0:	2800341e 	bne	r5,zero,107794 <_free_r+0x234>
  1076c4:	1008d1ba 	srli	r4,r2,6
  1076c8:	21c00e44 	addi	r7,r4,57
  1076cc:	380e90fa 	slli	r7,r7,3
  1076d0:	21400e04 	addi	r5,r4,56
  1076d4:	31cf883a 	add	r7,r6,r7
  1076d8:	39000017 	ldw	r4,0(r7)
  1076dc:	39fffe04 	addi	r7,r7,-8
  1076e0:	39004226 	beq	r7,r4,1077ec <_free_r+0x28c>
  1076e4:	01bfff04 	movi	r6,-4
  1076e8:	21400117 	ldw	r5,4(r4)
  1076ec:	298a703a 	and	r5,r5,r6
  1076f0:	1140022e 	bgeu	r2,r5,1076fc <_free_r+0x19c>
  1076f4:	21000217 	ldw	r4,8(r4)
  1076f8:	393ffb1e 	bne	r7,r4,1076e8 <_free_r+0x188>
  1076fc:	21c00317 	ldw	r7,12(r4)
  107700:	19c00315 	stw	r7,12(r3)
  107704:	19000215 	stw	r4,8(r3)
  107708:	38c00215 	stw	r3,8(r7)
  10770c:	20c00315 	stw	r3,12(r4)
  107710:	003fcd06 	br	107648 <_free_r+0xe8>
  107714:	40004d1e 	bne	r8,zero,10784c <_free_r+0x2ec>
  107718:	21800317 	ldw	r6,12(r4)
  10771c:	21000217 	ldw	r4,8(r4)
  107720:	2885883a 	add	r2,r5,r2
  107724:	11400054 	ori	r5,r2,1
  107728:	21800315 	stw	r6,12(r4)
  10772c:	31000215 	stw	r4,8(r6)
  107730:	19400115 	stw	r5,4(r3)
  107734:	1887883a 	add	r3,r3,r2
  107738:	18800015 	stw	r2,0(r3)
  10773c:	003fc206 	br	107648 <_free_r+0xe8>
  107740:	39c0004c 	andi	r7,r7,1
  107744:	1145883a 	add	r2,r2,r5
  107748:	3800071e 	bne	r7,zero,107768 <_free_r+0x208>
  10774c:	81fffe17 	ldw	r7,-8(r16)
  107750:	19c7c83a 	sub	r3,r3,r7
  107754:	19000317 	ldw	r4,12(r3)
  107758:	19400217 	ldw	r5,8(r3)
  10775c:	11c5883a 	add	r2,r2,r7
  107760:	29000315 	stw	r4,12(r5)
  107764:	21400215 	stw	r5,8(r4)
  107768:	01000074 	movhi	r4,1
  10776c:	11400054 	ori	r5,r2,1
  107770:	21073e17 	ldw	r4,7416(r4)
  107774:	19400115 	stw	r5,4(r3)
  107778:	30c00215 	stw	r3,8(r6)
  10777c:	113fb236 	bltu	r2,r4,107648 <_free_r+0xe8>
  107780:	00800074 	movhi	r2,1
  107784:	11475517 	ldw	r5,7508(r2)
  107788:	8809883a 	mov	r4,r17
  10778c:	01074440 	call	107444 <_malloc_trim_r>
  107790:	003fad06 	br	107648 <_free_r+0xe8>
  107794:	21400568 	cmpgeui	r5,r4,21
  107798:	28000926 	beq	r5,zero,1077c0 <_free_r+0x260>
  10779c:	21401568 	cmpgeui	r5,r4,85
  1077a0:	2800191e 	bne	r5,zero,107808 <_free_r+0x2a8>
  1077a4:	1008d33a 	srli	r4,r2,12
  1077a8:	21c01bc4 	addi	r7,r4,111
  1077ac:	21401b84 	addi	r5,r4,110
  1077b0:	380e90fa 	slli	r7,r7,3
  1077b4:	003fc706 	br	1076d4 <_free_r+0x174>
  1077b8:	1145883a 	add	r2,r2,r5
  1077bc:	003fae06 	br	107678 <_free_r+0x118>
  1077c0:	21c01704 	addi	r7,r4,92
  1077c4:	214016c4 	addi	r5,r4,91
  1077c8:	380e90fa 	slli	r7,r7,3
  1077cc:	003fc106 	br	1076d4 <_free_r+0x174>
  1077d0:	30c00515 	stw	r3,20(r6)
  1077d4:	30c00415 	stw	r3,16(r6)
  1077d8:	19c00315 	stw	r7,12(r3)
  1077dc:	19c00215 	stw	r7,8(r3)
  1077e0:	1a400115 	stw	r9,4(r3)
  1077e4:	40800015 	stw	r2,0(r8)
  1077e8:	003f9706 	br	107648 <_free_r+0xe8>
  1077ec:	280bd0ba 	srai	r5,r5,2
  1077f0:	00800044 	movi	r2,1
  1077f4:	32000117 	ldw	r8,4(r6)
  1077f8:	114a983a 	sll	r5,r2,r5
  1077fc:	2a0ab03a 	or	r5,r5,r8
  107800:	31400115 	stw	r5,4(r6)
  107804:	003fbe06 	br	107700 <_free_r+0x1a0>
  107808:	21405568 	cmpgeui	r5,r4,341
  10780c:	2800051e 	bne	r5,zero,107824 <_free_r+0x2c4>
  107810:	1008d3fa 	srli	r4,r2,15
  107814:	21c01e04 	addi	r7,r4,120
  107818:	21401dc4 	addi	r5,r4,119
  10781c:	380e90fa 	slli	r7,r7,3
  107820:	003fac06 	br	1076d4 <_free_r+0x174>
  107824:	21015568 	cmpgeui	r4,r4,1365
  107828:	2000051e 	bne	r4,zero,107840 <_free_r+0x2e0>
  10782c:	1008d4ba 	srli	r4,r2,18
  107830:	21c01f44 	addi	r7,r4,125
  107834:	21401f04 	addi	r5,r4,124
  107838:	380e90fa 	slli	r7,r7,3
  10783c:	003fa506 	br	1076d4 <_free_r+0x174>
  107840:	01c0fe04 	movi	r7,1016
  107844:	01401f84 	movi	r5,126
  107848:	003fa206 	br	1076d4 <_free_r+0x174>
  10784c:	11400054 	ori	r5,r2,1
  107850:	19400115 	stw	r5,4(r3)
  107854:	20800015 	stw	r2,0(r4)
  107858:	003f7b06 	br	107648 <_free_r+0xe8>

0010785c <__sfvwrite_r>:
  10785c:	30800217 	ldw	r2,8(r6)
  107860:	1000ca26 	beq	r2,zero,107b8c <__sfvwrite_r+0x330>
  107864:	2880030b 	ldhu	r2,12(r5)
  107868:	defff304 	addi	sp,sp,-52
  10786c:	dd000715 	stw	r20,28(sp)
  107870:	dc000315 	stw	r16,12(sp)
  107874:	dfc00c15 	stw	ra,48(sp)
  107878:	df000b15 	stw	fp,44(sp)
  10787c:	ddc00a15 	stw	r23,40(sp)
  107880:	dd800915 	stw	r22,36(sp)
  107884:	dd400815 	stw	r21,32(sp)
  107888:	dcc00615 	stw	r19,24(sp)
  10788c:	dc800515 	stw	r18,20(sp)
  107890:	dc400415 	stw	r17,16(sp)
  107894:	d9000015 	stw	r4,0(sp)
  107898:	10c0020c 	andi	r3,r2,8
  10789c:	2821883a 	mov	r16,r5
  1078a0:	3029883a 	mov	r20,r6
  1078a4:	18002426 	beq	r3,zero,107938 <__sfvwrite_r+0xdc>
  1078a8:	28c00417 	ldw	r3,16(r5)
  1078ac:	18002226 	beq	r3,zero,107938 <__sfvwrite_r+0xdc>
  1078b0:	10c0008c 	andi	r3,r2,2
  1078b4:	a4400017 	ldw	r17,0(r20)
  1078b8:	18002726 	beq	r3,zero,107958 <__sfvwrite_r+0xfc>
  1078bc:	80c00917 	ldw	r3,36(r16)
  1078c0:	80800717 	ldw	r2,28(r16)
  1078c4:	05600034 	movhi	r21,32768
  1078c8:	0027883a 	mov	r19,zero
  1078cc:	0025883a 	mov	r18,zero
  1078d0:	ad7f0004 	addi	r21,r21,-1024
  1078d4:	980d883a 	mov	r6,r19
  1078d8:	100b883a 	mov	r5,r2
  1078dc:	d9000017 	ldw	r4,0(sp)
  1078e0:	90001126 	beq	r18,zero,107928 <__sfvwrite_r+0xcc>
  1078e4:	900f883a 	mov	r7,r18
  1078e8:	ac80012e 	bgeu	r21,r18,1078f0 <__sfvwrite_r+0x94>
  1078ec:	a80f883a 	mov	r7,r21
  1078f0:	183ee83a 	callr	r3
  1078f4:	0080a00e 	bge	zero,r2,107b78 <__sfvwrite_r+0x31c>
  1078f8:	a0c00217 	ldw	r3,8(r20)
  1078fc:	98a7883a 	add	r19,r19,r2
  107900:	90a5c83a 	sub	r18,r18,r2
  107904:	1885c83a 	sub	r2,r3,r2
  107908:	a0800215 	stw	r2,8(r20)
  10790c:	10006426 	beq	r2,zero,107aa0 <__sfvwrite_r+0x244>
  107910:	80800717 	ldw	r2,28(r16)
  107914:	80c00917 	ldw	r3,36(r16)
  107918:	980d883a 	mov	r6,r19
  10791c:	100b883a 	mov	r5,r2
  107920:	d9000017 	ldw	r4,0(sp)
  107924:	903fef1e 	bne	r18,zero,1078e4 <__sfvwrite_r+0x88>
  107928:	8cc00017 	ldw	r19,0(r17)
  10792c:	8c800117 	ldw	r18,4(r17)
  107930:	8c400204 	addi	r17,r17,8
  107934:	003fe706 	br	1078d4 <__sfvwrite_r+0x78>
  107938:	d9000017 	ldw	r4,0(sp)
  10793c:	800b883a 	mov	r5,r16
  107940:	01053e40 	call	1053e4 <__swsetup_r>
  107944:	1000f81e 	bne	r2,zero,107d28 <__sfvwrite_r+0x4cc>
  107948:	8080030b 	ldhu	r2,12(r16)
  10794c:	a4400017 	ldw	r17,0(r20)
  107950:	10c0008c 	andi	r3,r2,2
  107954:	183fd91e 	bne	r3,zero,1078bc <__sfvwrite_r+0x60>
  107958:	10c0004c 	andi	r3,r2,1
  10795c:	84800217 	ldw	r18,8(r16)
  107960:	87000017 	ldw	fp,0(r16)
  107964:	18008b1e 	bne	r3,zero,107b94 <__sfvwrite_r+0x338>
  107968:	00e00034 	movhi	r3,32768
  10796c:	18ffff84 	addi	r3,r3,-2
  107970:	01200034 	movhi	r4,32768
  107974:	d8c00115 	stw	r3,4(sp)
  107978:	20ffffc4 	addi	r3,r4,-1
  10797c:	002d883a 	mov	r22,zero
  107980:	002f883a 	mov	r23,zero
  107984:	d8c00215 	stw	r3,8(sp)
  107988:	b8004126 	beq	r23,zero,107a90 <__sfvwrite_r+0x234>
  10798c:	1100800c 	andi	r4,r2,512
  107990:	20009126 	beq	r4,zero,107bd8 <__sfvwrite_r+0x37c>
  107994:	902b883a 	mov	r21,r18
  107998:	bc80b836 	bltu	r23,r18,107c7c <__sfvwrite_r+0x420>
  10799c:	1101200c 	andi	r4,r2,1152
  1079a0:	20002626 	beq	r4,zero,107a3c <__sfvwrite_r+0x1e0>
  1079a4:	84800517 	ldw	r18,20(r16)
  1079a8:	81400417 	ldw	r5,16(r16)
  1079ac:	b9000044 	addi	r4,r23,1
  1079b0:	948d883a 	add	r6,r18,r18
  1079b4:	348d883a 	add	r6,r6,r18
  1079b8:	3024d7fa 	srli	r18,r6,31
  1079bc:	e167c83a 	sub	r19,fp,r5
  1079c0:	24c9883a 	add	r4,r4,r19
  1079c4:	91a5883a 	add	r18,r18,r6
  1079c8:	9025d07a 	srai	r18,r18,1
  1079cc:	900d883a 	mov	r6,r18
  1079d0:	9100022e 	bgeu	r18,r4,1079dc <__sfvwrite_r+0x180>
  1079d4:	2025883a 	mov	r18,r4
  1079d8:	200d883a 	mov	r6,r4
  1079dc:	1081000c 	andi	r2,r2,1024
  1079e0:	1000bf26 	beq	r2,zero,107ce0 <__sfvwrite_r+0x484>
  1079e4:	d9000017 	ldw	r4,0(sp)
  1079e8:	300b883a 	mov	r5,r6
  1079ec:	010807c0 	call	10807c <_malloc_r>
  1079f0:	1000c826 	beq	r2,zero,107d14 <__sfvwrite_r+0x4b8>
  1079f4:	81400417 	ldw	r5,16(r16)
  1079f8:	980d883a 	mov	r6,r19
  1079fc:	1009883a 	mov	r4,r2
  107a00:	0102e880 	call	102e88 <memcpy>
  107a04:	100f883a 	mov	r7,r2
  107a08:	8080030b 	ldhu	r2,12(r16)
  107a0c:	00fedfc4 	movi	r3,-1153
  107a10:	10c4703a 	and	r2,r2,r3
  107a14:	10802014 	ori	r2,r2,128
  107a18:	8080030d 	sth	r2,12(r16)
  107a1c:	94c5c83a 	sub	r2,r18,r19
  107a20:	3cf9883a 	add	fp,r7,r19
  107a24:	84800515 	stw	r18,20(r16)
  107a28:	81c00415 	stw	r7,16(r16)
  107a2c:	87000015 	stw	fp,0(r16)
  107a30:	b825883a 	mov	r18,r23
  107a34:	80800215 	stw	r2,8(r16)
  107a38:	b82b883a 	mov	r21,r23
  107a3c:	a80d883a 	mov	r6,r21
  107a40:	b00b883a 	mov	r5,r22
  107a44:	e009883a 	mov	r4,fp
  107a48:	01089580 	call	108958 <memmove>
  107a4c:	80800217 	ldw	r2,8(r16)
  107a50:	81800017 	ldw	r6,0(r16)
  107a54:	b827883a 	mov	r19,r23
  107a58:	14a5c83a 	sub	r18,r2,r18
  107a5c:	354d883a 	add	r6,r6,r21
  107a60:	84800215 	stw	r18,8(r16)
  107a64:	81800015 	stw	r6,0(r16)
  107a68:	002f883a 	mov	r23,zero
  107a6c:	a0800217 	ldw	r2,8(r20)
  107a70:	b4ed883a 	add	r22,r22,r19
  107a74:	14e7c83a 	sub	r19,r2,r19
  107a78:	a4c00215 	stw	r19,8(r20)
  107a7c:	98000826 	beq	r19,zero,107aa0 <__sfvwrite_r+0x244>
  107a80:	8080030b 	ldhu	r2,12(r16)
  107a84:	84800217 	ldw	r18,8(r16)
  107a88:	87000017 	ldw	fp,0(r16)
  107a8c:	b83fbf1e 	bne	r23,zero,10798c <__sfvwrite_r+0x130>
  107a90:	8d800017 	ldw	r22,0(r17)
  107a94:	8dc00117 	ldw	r23,4(r17)
  107a98:	8c400204 	addi	r17,r17,8
  107a9c:	003fba06 	br	107988 <__sfvwrite_r+0x12c>
  107aa0:	0005883a 	mov	r2,zero
  107aa4:	dfc00c17 	ldw	ra,48(sp)
  107aa8:	df000b17 	ldw	fp,44(sp)
  107aac:	ddc00a17 	ldw	r23,40(sp)
  107ab0:	dd800917 	ldw	r22,36(sp)
  107ab4:	dd400817 	ldw	r21,32(sp)
  107ab8:	dd000717 	ldw	r20,28(sp)
  107abc:	dcc00617 	ldw	r19,24(sp)
  107ac0:	dc800517 	ldw	r18,20(sp)
  107ac4:	dc400417 	ldw	r17,16(sp)
  107ac8:	dc000317 	ldw	r16,12(sp)
  107acc:	dec00d04 	addi	sp,sp,52
  107ad0:	f800283a 	ret
  107ad4:	b1c07116 	blt	r22,r7,107c9c <__sfvwrite_r+0x440>
  107ad8:	80800917 	ldw	r2,36(r16)
  107adc:	81400717 	ldw	r5,28(r16)
  107ae0:	d9000017 	ldw	r4,0(sp)
  107ae4:	b80d883a 	mov	r6,r23
  107ae8:	103ee83a 	callr	r2
  107aec:	1025883a 	mov	r18,r2
  107af0:	0080210e 	bge	zero,r2,107b78 <__sfvwrite_r+0x31c>
  107af4:	acabc83a 	sub	r21,r21,r18
  107af8:	a8006326 	beq	r21,zero,107c88 <__sfvwrite_r+0x42c>
  107afc:	00800044 	movi	r2,1
  107b00:	a0c00217 	ldw	r3,8(r20)
  107b04:	bcaf883a 	add	r23,r23,r18
  107b08:	9ca7c83a 	sub	r19,r19,r18
  107b0c:	1ca5c83a 	sub	r18,r3,r18
  107b10:	a4800215 	stw	r18,8(r20)
  107b14:	903fe226 	beq	r18,zero,107aa0 <__sfvwrite_r+0x244>
  107b18:	84800217 	ldw	r18,8(r16)
  107b1c:	87000017 	ldw	fp,0(r16)
  107b20:	98002126 	beq	r19,zero,107ba8 <__sfvwrite_r+0x34c>
  107b24:	10002426 	beq	r2,zero,107bb8 <__sfvwrite_r+0x35c>
  107b28:	a805883a 	mov	r2,r21
  107b2c:	982d883a 	mov	r22,r19
  107b30:	14c0012e 	bgeu	r2,r19,107b38 <__sfvwrite_r+0x2dc>
  107b34:	102d883a 	mov	r22,r2
  107b38:	80800417 	ldw	r2,16(r16)
  107b3c:	81c00517 	ldw	r7,20(r16)
  107b40:	173fe42e 	bgeu	r2,fp,107ad4 <__sfvwrite_r+0x278>
  107b44:	3ca5883a 	add	r18,r7,r18
  107b48:	95bfe20e 	bge	r18,r22,107ad4 <__sfvwrite_r+0x278>
  107b4c:	b80b883a 	mov	r5,r23
  107b50:	e009883a 	mov	r4,fp
  107b54:	900d883a 	mov	r6,r18
  107b58:	01089580 	call	108958 <memmove>
  107b5c:	80800017 	ldw	r2,0(r16)
  107b60:	d9000017 	ldw	r4,0(sp)
  107b64:	800b883a 	mov	r5,r16
  107b68:	1485883a 	add	r2,r2,r18
  107b6c:	80800015 	stw	r2,0(r16)
  107b70:	01070680 	call	107068 <_fflush_r>
  107b74:	103fdf26 	beq	r2,zero,107af4 <__sfvwrite_r+0x298>
  107b78:	8080030b 	ldhu	r2,12(r16)
  107b7c:	10801014 	ori	r2,r2,64
  107b80:	8080030d 	sth	r2,12(r16)
  107b84:	00bfffc4 	movi	r2,-1
  107b88:	003fc606 	br	107aa4 <__sfvwrite_r+0x248>
  107b8c:	0005883a 	mov	r2,zero
  107b90:	f800283a 	ret
  107b94:	0027883a 	mov	r19,zero
  107b98:	002b883a 	mov	r21,zero
  107b9c:	0005883a 	mov	r2,zero
  107ba0:	002f883a 	mov	r23,zero
  107ba4:	983fdf1e 	bne	r19,zero,107b24 <__sfvwrite_r+0x2c8>
  107ba8:	8cc00117 	ldw	r19,4(r17)
  107bac:	8dc00017 	ldw	r23,0(r17)
  107bb0:	8c400204 	addi	r17,r17,8
  107bb4:	983ffc26 	beq	r19,zero,107ba8 <__sfvwrite_r+0x34c>
  107bb8:	980d883a 	mov	r6,r19
  107bbc:	01400284 	movi	r5,10
  107bc0:	b809883a 	mov	r4,r23
  107bc4:	01088700 	call	108870 <memchr>
  107bc8:	10004226 	beq	r2,zero,107cd4 <__sfvwrite_r+0x478>
  107bcc:	10800044 	addi	r2,r2,1
  107bd0:	15ebc83a 	sub	r21,r2,r23
  107bd4:	003fd406 	br	107b28 <__sfvwrite_r+0x2cc>
  107bd8:	80800417 	ldw	r2,16(r16)
  107bdc:	17001436 	bltu	r2,fp,107c30 <__sfvwrite_r+0x3d4>
  107be0:	84c00517 	ldw	r19,20(r16)
  107be4:	bcc01236 	bltu	r23,r19,107c30 <__sfvwrite_r+0x3d4>
  107be8:	d8800117 	ldw	r2,4(sp)
  107bec:	15c0372e 	bgeu	r2,r23,107ccc <__sfvwrite_r+0x470>
  107bf0:	d9000217 	ldw	r4,8(sp)
  107bf4:	980b883a 	mov	r5,r19
  107bf8:	0102ca80 	call	102ca8 <__divsi3>
  107bfc:	980b883a 	mov	r5,r19
  107c00:	1009883a 	mov	r4,r2
  107c04:	0102e600 	call	102e60 <__mulsi3>
  107c08:	81400717 	ldw	r5,28(r16)
  107c0c:	82800917 	ldw	r10,36(r16)
  107c10:	d9000017 	ldw	r4,0(sp)
  107c14:	100f883a 	mov	r7,r2
  107c18:	b00d883a 	mov	r6,r22
  107c1c:	503ee83a 	callr	r10
  107c20:	00bfd50e 	bge	zero,r2,107b78 <__sfvwrite_r+0x31c>
  107c24:	1027883a 	mov	r19,r2
  107c28:	bcefc83a 	sub	r23,r23,r19
  107c2c:	003f8f06 	br	107a6c <__sfvwrite_r+0x210>
  107c30:	9027883a 	mov	r19,r18
  107c34:	bc80012e 	bgeu	r23,r18,107c3c <__sfvwrite_r+0x3e0>
  107c38:	b827883a 	mov	r19,r23
  107c3c:	e009883a 	mov	r4,fp
  107c40:	980d883a 	mov	r6,r19
  107c44:	b00b883a 	mov	r5,r22
  107c48:	01089580 	call	108958 <memmove>
  107c4c:	80800217 	ldw	r2,8(r16)
  107c50:	81000017 	ldw	r4,0(r16)
  107c54:	14c5c83a 	sub	r2,r2,r19
  107c58:	24c9883a 	add	r4,r4,r19
  107c5c:	80800215 	stw	r2,8(r16)
  107c60:	81000015 	stw	r4,0(r16)
  107c64:	103ff01e 	bne	r2,zero,107c28 <__sfvwrite_r+0x3cc>
  107c68:	d9000017 	ldw	r4,0(sp)
  107c6c:	800b883a 	mov	r5,r16
  107c70:	01070680 	call	107068 <_fflush_r>
  107c74:	103fec26 	beq	r2,zero,107c28 <__sfvwrite_r+0x3cc>
  107c78:	003fbf06 	br	107b78 <__sfvwrite_r+0x31c>
  107c7c:	b825883a 	mov	r18,r23
  107c80:	b82b883a 	mov	r21,r23
  107c84:	003f6d06 	br	107a3c <__sfvwrite_r+0x1e0>
  107c88:	d9000017 	ldw	r4,0(sp)
  107c8c:	800b883a 	mov	r5,r16
  107c90:	01070680 	call	107068 <_fflush_r>
  107c94:	103f9a26 	beq	r2,zero,107b00 <__sfvwrite_r+0x2a4>
  107c98:	003fb706 	br	107b78 <__sfvwrite_r+0x31c>
  107c9c:	b00d883a 	mov	r6,r22
  107ca0:	b80b883a 	mov	r5,r23
  107ca4:	e009883a 	mov	r4,fp
  107ca8:	01089580 	call	108958 <memmove>
  107cac:	80c00217 	ldw	r3,8(r16)
  107cb0:	80800017 	ldw	r2,0(r16)
  107cb4:	b025883a 	mov	r18,r22
  107cb8:	1d87c83a 	sub	r3,r3,r22
  107cbc:	15ad883a 	add	r22,r2,r22
  107cc0:	80c00215 	stw	r3,8(r16)
  107cc4:	85800015 	stw	r22,0(r16)
  107cc8:	003f8a06 	br	107af4 <__sfvwrite_r+0x298>
  107ccc:	b809883a 	mov	r4,r23
  107cd0:	003fc806 	br	107bf4 <__sfvwrite_r+0x398>
  107cd4:	98800044 	addi	r2,r19,1
  107cd8:	102b883a 	mov	r21,r2
  107cdc:	003f9306 	br	107b2c <__sfvwrite_r+0x2d0>
  107ce0:	d9000017 	ldw	r4,0(sp)
  107ce4:	0109cd40 	call	109cd4 <_realloc_r>
  107ce8:	100f883a 	mov	r7,r2
  107cec:	103f4b1e 	bne	r2,zero,107a1c <__sfvwrite_r+0x1c0>
  107cf0:	dc400017 	ldw	r17,0(sp)
  107cf4:	81400417 	ldw	r5,16(r16)
  107cf8:	8809883a 	mov	r4,r17
  107cfc:	01075600 	call	107560 <_free_r>
  107d00:	8080030b 	ldhu	r2,12(r16)
  107d04:	00c00304 	movi	r3,12
  107d08:	88c00015 	stw	r3,0(r17)
  107d0c:	10bfdfcc 	andi	r2,r2,65407
  107d10:	003f9a06 	br	107b7c <__sfvwrite_r+0x320>
  107d14:	d8c00017 	ldw	r3,0(sp)
  107d18:	00800304 	movi	r2,12
  107d1c:	18800015 	stw	r2,0(r3)
  107d20:	8080030b 	ldhu	r2,12(r16)
  107d24:	003f9506 	br	107b7c <__sfvwrite_r+0x320>
  107d28:	00bfffc4 	movi	r2,-1
  107d2c:	003f5d06 	br	107aa4 <__sfvwrite_r+0x248>

00107d30 <_fwalk>:
  107d30:	defffa04 	addi	sp,sp,-24
  107d34:	dc800215 	stw	r18,8(sp)
  107d38:	dfc00515 	stw	ra,20(sp)
  107d3c:	dd000415 	stw	r20,16(sp)
  107d40:	dcc00315 	stw	r19,12(sp)
  107d44:	dc400115 	stw	r17,4(sp)
  107d48:	dc000015 	stw	r16,0(sp)
  107d4c:	2480b804 	addi	r18,r4,736
  107d50:	90001e26 	beq	r18,zero,107dcc <_fwalk+0x9c>
  107d54:	2827883a 	mov	r19,r5
  107d58:	0029883a 	mov	r20,zero
  107d5c:	94400117 	ldw	r17,4(r18)
  107d60:	94000217 	ldw	r16,8(r18)
  107d64:	8c7fffc4 	addi	r17,r17,-1
  107d68:	88000d16 	blt	r17,zero,107da0 <_fwalk+0x70>
  107d6c:	8080030b 	ldhu	r2,12(r16)
  107d70:	8c7fffc4 	addi	r17,r17,-1
  107d74:	108000b0 	cmpltui	r2,r2,2
  107d78:	1000061e 	bne	r2,zero,107d94 <_fwalk+0x64>
  107d7c:	8080038f 	ldh	r2,14(r16)
  107d80:	8009883a 	mov	r4,r16
  107d84:	10bfffe0 	cmpeqi	r2,r2,-1
  107d88:	1000021e 	bne	r2,zero,107d94 <_fwalk+0x64>
  107d8c:	983ee83a 	callr	r19
  107d90:	a0a8b03a 	or	r20,r20,r2
  107d94:	88bfffd8 	cmpnei	r2,r17,-1
  107d98:	84001a04 	addi	r16,r16,104
  107d9c:	103ff31e 	bne	r2,zero,107d6c <_fwalk+0x3c>
  107da0:	94800017 	ldw	r18,0(r18)
  107da4:	903fed1e 	bne	r18,zero,107d5c <_fwalk+0x2c>
  107da8:	a005883a 	mov	r2,r20
  107dac:	dfc00517 	ldw	ra,20(sp)
  107db0:	dd000417 	ldw	r20,16(sp)
  107db4:	dcc00317 	ldw	r19,12(sp)
  107db8:	dc800217 	ldw	r18,8(sp)
  107dbc:	dc400117 	ldw	r17,4(sp)
  107dc0:	dc000017 	ldw	r16,0(sp)
  107dc4:	dec00604 	addi	sp,sp,24
  107dc8:	f800283a 	ret
  107dcc:	0029883a 	mov	r20,zero
  107dd0:	003ff506 	br	107da8 <_fwalk+0x78>

00107dd4 <_fwalk_reent>:
  107dd4:	defff904 	addi	sp,sp,-28
  107dd8:	dc800215 	stw	r18,8(sp)
  107ddc:	dfc00615 	stw	ra,24(sp)
  107de0:	dd400515 	stw	r21,20(sp)
  107de4:	dd000415 	stw	r20,16(sp)
  107de8:	dcc00315 	stw	r19,12(sp)
  107dec:	dc400115 	stw	r17,4(sp)
  107df0:	dc000015 	stw	r16,0(sp)
  107df4:	2480b804 	addi	r18,r4,736
  107df8:	90002126 	beq	r18,zero,107e80 <_fwalk_reent+0xac>
  107dfc:	2829883a 	mov	r20,r5
  107e00:	2027883a 	mov	r19,r4
  107e04:	002b883a 	mov	r21,zero
  107e08:	94400117 	ldw	r17,4(r18)
  107e0c:	94000217 	ldw	r16,8(r18)
  107e10:	8c7fffc4 	addi	r17,r17,-1
  107e14:	88000e16 	blt	r17,zero,107e50 <_fwalk_reent+0x7c>
  107e18:	8080030b 	ldhu	r2,12(r16)
  107e1c:	8c7fffc4 	addi	r17,r17,-1
  107e20:	108000b0 	cmpltui	r2,r2,2
  107e24:	1000071e 	bne	r2,zero,107e44 <_fwalk_reent+0x70>
  107e28:	8080038f 	ldh	r2,14(r16)
  107e2c:	800b883a 	mov	r5,r16
  107e30:	9809883a 	mov	r4,r19
  107e34:	10bfffe0 	cmpeqi	r2,r2,-1
  107e38:	1000021e 	bne	r2,zero,107e44 <_fwalk_reent+0x70>
  107e3c:	a03ee83a 	callr	r20
  107e40:	a8aab03a 	or	r21,r21,r2
  107e44:	88bfffd8 	cmpnei	r2,r17,-1
  107e48:	84001a04 	addi	r16,r16,104
  107e4c:	103ff21e 	bne	r2,zero,107e18 <_fwalk_reent+0x44>
  107e50:	94800017 	ldw	r18,0(r18)
  107e54:	903fec1e 	bne	r18,zero,107e08 <_fwalk_reent+0x34>
  107e58:	a805883a 	mov	r2,r21
  107e5c:	dfc00617 	ldw	ra,24(sp)
  107e60:	dd400517 	ldw	r21,20(sp)
  107e64:	dd000417 	ldw	r20,16(sp)
  107e68:	dcc00317 	ldw	r19,12(sp)
  107e6c:	dc800217 	ldw	r18,8(sp)
  107e70:	dc400117 	ldw	r17,4(sp)
  107e74:	dc000017 	ldw	r16,0(sp)
  107e78:	dec00704 	addi	sp,sp,28
  107e7c:	f800283a 	ret
  107e80:	002b883a 	mov	r21,zero
  107e84:	003ff406 	br	107e58 <_fwalk_reent+0x84>

00107e88 <__localeconv_l>:
  107e88:	20803c04 	addi	r2,r4,240
  107e8c:	f800283a 	ret

00107e90 <_localeconv_r>:
  107e90:	00800074 	movhi	r2,1
  107e94:	10825304 	addi	r2,r2,2380
  107e98:	f800283a 	ret

00107e9c <localeconv>:
  107e9c:	00800074 	movhi	r2,1
  107ea0:	10825304 	addi	r2,r2,2380
  107ea4:	f800283a 	ret

00107ea8 <__swhatbuf_r>:
  107ea8:	deffea04 	addi	sp,sp,-88
  107eac:	dc001215 	stw	r16,72(sp)
  107eb0:	2821883a 	mov	r16,r5
  107eb4:	2940038f 	ldh	r5,14(r5)
  107eb8:	dc801415 	stw	r18,80(sp)
  107ebc:	dc401315 	stw	r17,76(sp)
  107ec0:	dfc01515 	stw	ra,84(sp)
  107ec4:	3023883a 	mov	r17,r6
  107ec8:	3825883a 	mov	r18,r7
  107ecc:	28001016 	blt	r5,zero,107f10 <__swhatbuf_r+0x68>
  107ed0:	d80d883a 	mov	r6,sp
  107ed4:	010bf940 	call	10bf94 <_fstat_r>
  107ed8:	10000d16 	blt	r2,zero,107f10 <__swhatbuf_r+0x68>
  107edc:	d8c00117 	ldw	r3,4(sp)
  107ee0:	00820004 	movi	r2,2048
  107ee4:	18fc000c 	andi	r3,r3,61440
  107ee8:	18c80020 	cmpeqi	r3,r3,8192
  107eec:	90c00015 	stw	r3,0(r18)
  107ef0:	00c10004 	movi	r3,1024
  107ef4:	88c00015 	stw	r3,0(r17)
  107ef8:	dfc01517 	ldw	ra,84(sp)
  107efc:	dc801417 	ldw	r18,80(sp)
  107f00:	dc401317 	ldw	r17,76(sp)
  107f04:	dc001217 	ldw	r16,72(sp)
  107f08:	dec01604 	addi	sp,sp,88
  107f0c:	f800283a 	ret
  107f10:	8080030b 	ldhu	r2,12(r16)
  107f14:	90000015 	stw	zero,0(r18)
  107f18:	1080200c 	andi	r2,r2,128
  107f1c:	10000426 	beq	r2,zero,107f30 <__swhatbuf_r+0x88>
  107f20:	00801004 	movi	r2,64
  107f24:	88800015 	stw	r2,0(r17)
  107f28:	0005883a 	mov	r2,zero
  107f2c:	003ff206 	br	107ef8 <__swhatbuf_r+0x50>
  107f30:	00810004 	movi	r2,1024
  107f34:	88800015 	stw	r2,0(r17)
  107f38:	0005883a 	mov	r2,zero
  107f3c:	003fee06 	br	107ef8 <__swhatbuf_r+0x50>

00107f40 <__smakebuf_r>:
  107f40:	28c0030b 	ldhu	r3,12(r5)
  107f44:	defffa04 	addi	sp,sp,-24
  107f48:	dc000215 	stw	r16,8(sp)
  107f4c:	dfc00515 	stw	ra,20(sp)
  107f50:	dc800415 	stw	r18,16(sp)
  107f54:	dc400315 	stw	r17,12(sp)
  107f58:	18c0008c 	andi	r3,r3,2
  107f5c:	2821883a 	mov	r16,r5
  107f60:	18000b26 	beq	r3,zero,107f90 <__smakebuf_r+0x50>
  107f64:	28c010c4 	addi	r3,r5,67
  107f68:	28c00015 	stw	r3,0(r5)
  107f6c:	28c00415 	stw	r3,16(r5)
  107f70:	00c00044 	movi	r3,1
  107f74:	28c00515 	stw	r3,20(r5)
  107f78:	dfc00517 	ldw	ra,20(sp)
  107f7c:	dc800417 	ldw	r18,16(sp)
  107f80:	dc400317 	ldw	r17,12(sp)
  107f84:	dc000217 	ldw	r16,8(sp)
  107f88:	dec00604 	addi	sp,sp,24
  107f8c:	f800283a 	ret
  107f90:	d9c00104 	addi	r7,sp,4
  107f94:	d80d883a 	mov	r6,sp
  107f98:	2023883a 	mov	r17,r4
  107f9c:	0107ea80 	call	107ea8 <__swhatbuf_r>
  107fa0:	1025883a 	mov	r18,r2
  107fa4:	d8800117 	ldw	r2,4(sp)
  107fa8:	1000131e 	bne	r2,zero,107ff8 <__smakebuf_r+0xb8>
  107fac:	d9400017 	ldw	r5,0(sp)
  107fb0:	8809883a 	mov	r4,r17
  107fb4:	010807c0 	call	10807c <_malloc_r>
  107fb8:	10001c26 	beq	r2,zero,10802c <__smakebuf_r+0xec>
  107fbc:	01000434 	movhi	r4,16
  107fc0:	211c3e04 	addi	r4,r4,28920
  107fc4:	80c0030b 	ldhu	r3,12(r16)
  107fc8:	89000f15 	stw	r4,60(r17)
  107fcc:	80800015 	stw	r2,0(r16)
  107fd0:	80800415 	stw	r2,16(r16)
  107fd4:	d8800017 	ldw	r2,0(sp)
  107fd8:	d9400117 	ldw	r5,4(sp)
  107fdc:	18c02014 	ori	r3,r3,128
  107fe0:	80c0030d 	sth	r3,12(r16)
  107fe4:	80800515 	stw	r2,20(r16)
  107fe8:	28001c1e 	bne	r5,zero,10805c <__smakebuf_r+0x11c>
  107fec:	90c6b03a 	or	r3,r18,r3
  107ff0:	80c0030d 	sth	r3,12(r16)
  107ff4:	003fe006 	br	107f78 <__smakebuf_r+0x38>
  107ff8:	8140038f 	ldh	r5,14(r16)
  107ffc:	8809883a 	mov	r4,r17
  108000:	010bff40 	call	10bff4 <_isatty_r>
  108004:	103fe926 	beq	r2,zero,107fac <__smakebuf_r+0x6c>
  108008:	8080030b 	ldhu	r2,12(r16)
  10800c:	80c010c4 	addi	r3,r16,67
  108010:	80c00015 	stw	r3,0(r16)
  108014:	10800054 	ori	r2,r2,1
  108018:	8080030d 	sth	r2,12(r16)
  10801c:	00800044 	movi	r2,1
  108020:	80c00415 	stw	r3,16(r16)
  108024:	80800515 	stw	r2,20(r16)
  108028:	003fe006 	br	107fac <__smakebuf_r+0x6c>
  10802c:	8080030b 	ldhu	r2,12(r16)
  108030:	10c0800c 	andi	r3,r2,512
  108034:	183fd01e 	bne	r3,zero,107f78 <__smakebuf_r+0x38>
  108038:	10bfff0c 	andi	r2,r2,65532
  10803c:	10800094 	ori	r2,r2,2
  108040:	80c010c4 	addi	r3,r16,67
  108044:	8080030d 	sth	r2,12(r16)
  108048:	00800044 	movi	r2,1
  10804c:	80c00015 	stw	r3,0(r16)
  108050:	80c00415 	stw	r3,16(r16)
  108054:	80800515 	stw	r2,20(r16)
  108058:	003fc706 	br	107f78 <__smakebuf_r+0x38>
  10805c:	8140038f 	ldh	r5,14(r16)
  108060:	8809883a 	mov	r4,r17
  108064:	010bff40 	call	10bff4 <_isatty_r>
  108068:	80c0030b 	ldhu	r3,12(r16)
  10806c:	103fdf26 	beq	r2,zero,107fec <__smakebuf_r+0xac>
  108070:	18ffff0c 	andi	r3,r3,65532
  108074:	18c00054 	ori	r3,r3,1
  108078:	003fdc06 	br	107fec <__smakebuf_r+0xac>

0010807c <_malloc_r>:
  10807c:	defff604 	addi	sp,sp,-40
  108080:	dc400115 	stw	r17,4(sp)
  108084:	2c4002c4 	addi	r17,r5,11
  108088:	dc800215 	stw	r18,8(sp)
  10808c:	dfc00915 	stw	ra,36(sp)
  108090:	df000815 	stw	fp,32(sp)
  108094:	ddc00715 	stw	r23,28(sp)
  108098:	dd800615 	stw	r22,24(sp)
  10809c:	dd400515 	stw	r21,20(sp)
  1080a0:	dd000415 	stw	r20,16(sp)
  1080a4:	dcc00315 	stw	r19,12(sp)
  1080a8:	dc000015 	stw	r16,0(sp)
  1080ac:	888005e8 	cmpgeui	r2,r17,23
  1080b0:	2025883a 	mov	r18,r4
  1080b4:	10001b1e 	bne	r2,zero,108124 <_malloc_r+0xa8>
  1080b8:	29400468 	cmpgeui	r5,r5,17
  1080bc:	2800951e 	bne	r5,zero,108314 <_malloc_r+0x298>
  1080c0:	010fdc80 	call	10fdc8 <__malloc_lock>
  1080c4:	04400404 	movi	r17,16
  1080c8:	00800604 	movi	r2,24
  1080cc:	01800084 	movi	r6,2
  1080d0:	04c00074 	movhi	r19,1
  1080d4:	9cc11504 	addi	r19,r19,1108
  1080d8:	9885883a 	add	r2,r19,r2
  1080dc:	14000117 	ldw	r16,4(r2)
  1080e0:	10fffe04 	addi	r3,r2,-8
  1080e4:	80c09e26 	beq	r16,r3,108360 <_malloc_r+0x2e4>
  1080e8:	80800117 	ldw	r2,4(r16)
  1080ec:	81000317 	ldw	r4,12(r16)
  1080f0:	00ffff04 	movi	r3,-4
  1080f4:	10c4703a 	and	r2,r2,r3
  1080f8:	81400217 	ldw	r5,8(r16)
  1080fc:	8085883a 	add	r2,r16,r2
  108100:	10c00117 	ldw	r3,4(r2)
  108104:	29000315 	stw	r4,12(r5)
  108108:	21400215 	stw	r5,8(r4)
  10810c:	18c00054 	ori	r3,r3,1
  108110:	10c00115 	stw	r3,4(r2)
  108114:	9009883a 	mov	r4,r18
  108118:	010fdec0 	call	10fdec <__malloc_unlock>
  10811c:	80800204 	addi	r2,r16,8
  108120:	00007f06 	br	108320 <_malloc_r+0x2a4>
  108124:	00bffe04 	movi	r2,-8
  108128:	88a2703a 	and	r17,r17,r2
  10812c:	88007916 	blt	r17,zero,108314 <_malloc_r+0x298>
  108130:	89407836 	bltu	r17,r5,108314 <_malloc_r+0x298>
  108134:	010fdc80 	call	10fdc8 <__malloc_lock>
  108138:	88807e28 	cmpgeui	r2,r17,504
  10813c:	10013326 	beq	r2,zero,10860c <_malloc_r+0x590>
  108140:	8804d27a 	srli	r2,r17,9
  108144:	10008226 	beq	r2,zero,108350 <_malloc_r+0x2d4>
  108148:	10c00168 	cmpgeui	r3,r2,5
  10814c:	1801151e 	bne	r3,zero,1085a4 <_malloc_r+0x528>
  108150:	8804d1ba 	srli	r2,r17,6
  108154:	11800e44 	addi	r6,r2,57
  108158:	300a90fa 	slli	r5,r6,3
  10815c:	12000e04 	addi	r8,r2,56
  108160:	04c00074 	movhi	r19,1
  108164:	9cc11504 	addi	r19,r19,1108
  108168:	994b883a 	add	r5,r19,r5
  10816c:	2c000117 	ldw	r16,4(r5)
  108170:	297ffe04 	addi	r5,r5,-8
  108174:	2c001126 	beq	r5,r16,1081bc <_malloc_r+0x140>
  108178:	80800117 	ldw	r2,4(r16)
  10817c:	00ffff04 	movi	r3,-4
  108180:	10c4703a 	and	r2,r2,r3
  108184:	1447c83a 	sub	r3,r2,r17
  108188:	19000408 	cmpgei	r4,r3,16
  10818c:	2000e81e 	bne	r4,zero,108530 <_malloc_r+0x4b4>
  108190:	1800e90e 	bge	r3,zero,108538 <_malloc_r+0x4bc>
  108194:	01ffff04 	movi	r7,-4
  108198:	00000606 	br	1081b4 <_malloc_r+0x138>
  10819c:	80800117 	ldw	r2,4(r16)
  1081a0:	11c4703a 	and	r2,r2,r7
  1081a4:	1447c83a 	sub	r3,r2,r17
  1081a8:	19000408 	cmpgei	r4,r3,16
  1081ac:	2000e01e 	bne	r4,zero,108530 <_malloc_r+0x4b4>
  1081b0:	1800e10e 	bge	r3,zero,108538 <_malloc_r+0x4bc>
  1081b4:	84000317 	ldw	r16,12(r16)
  1081b8:	2c3ff81e 	bne	r5,r16,10819c <_malloc_r+0x120>
  1081bc:	9c000417 	ldw	r16,16(r19)
  1081c0:	02000074 	movhi	r8,1
  1081c4:	42011704 	addi	r8,r8,1116
  1081c8:	82006c26 	beq	r16,r8,10837c <_malloc_r+0x300>
  1081cc:	80c00117 	ldw	r3,4(r16)
  1081d0:	00bfff04 	movi	r2,-4
  1081d4:	1884703a 	and	r2,r3,r2
  1081d8:	1447c83a 	sub	r3,r2,r17
  1081dc:	19000410 	cmplti	r4,r3,16
  1081e0:	20011526 	beq	r4,zero,108638 <_malloc_r+0x5bc>
  1081e4:	9a000515 	stw	r8,20(r19)
  1081e8:	9a000415 	stw	r8,16(r19)
  1081ec:	18010a0e 	bge	r3,zero,108618 <_malloc_r+0x59c>
  1081f0:	10c08028 	cmpgeui	r3,r2,512
  1081f4:	1800d21e 	bne	r3,zero,108540 <_malloc_r+0x4c4>
  1081f8:	1004d0fa 	srli	r2,r2,3
  1081fc:	99400117 	ldw	r5,4(r19)
  108200:	10c00044 	addi	r3,r2,1
  108204:	1009d0ba 	srai	r4,r2,2
  108208:	180690fa 	slli	r3,r3,3
  10820c:	00800044 	movi	r2,1
  108210:	1104983a 	sll	r2,r2,r4
  108214:	98c7883a 	add	r3,r19,r3
  108218:	19000017 	ldw	r4,0(r3)
  10821c:	1144b03a 	or	r2,r2,r5
  108220:	197ffe04 	addi	r5,r3,-8
  108224:	81400315 	stw	r5,12(r16)
  108228:	81000215 	stw	r4,8(r16)
  10822c:	98800115 	stw	r2,4(r19)
  108230:	1c000015 	stw	r16,0(r3)
  108234:	24000315 	stw	r16,12(r4)
  108238:	3007d0ba 	srai	r3,r6,2
  10823c:	01000044 	movi	r4,1
  108240:	20c8983a 	sll	r4,r4,r3
  108244:	11005236 	bltu	r2,r4,108390 <_malloc_r+0x314>
  108248:	2086703a 	and	r3,r4,r2
  10824c:	18000a1e 	bne	r3,zero,108278 <_malloc_r+0x1fc>
  108250:	00ffff04 	movi	r3,-4
  108254:	2109883a 	add	r4,r4,r4
  108258:	30cc703a 	and	r6,r6,r3
  10825c:	2086703a 	and	r3,r4,r2
  108260:	31800104 	addi	r6,r6,4
  108264:	1800041e 	bne	r3,zero,108278 <_malloc_r+0x1fc>
  108268:	2109883a 	add	r4,r4,r4
  10826c:	2086703a 	and	r3,r4,r2
  108270:	31800104 	addi	r6,r6,4
  108274:	183ffc26 	beq	r3,zero,108268 <_malloc_r+0x1ec>
  108278:	027fff04 	movi	r9,-4
  10827c:	301490fa 	slli	r10,r6,3
  108280:	3017883a 	mov	r11,r6
  108284:	9a95883a 	add	r10,r19,r10
  108288:	500f883a 	mov	r7,r10
  10828c:	3c000317 	ldw	r16,12(r7)
  108290:	3c00cd26 	beq	r7,r16,1085c8 <_malloc_r+0x54c>
  108294:	80800117 	ldw	r2,4(r16)
  108298:	1244703a 	and	r2,r2,r9
  10829c:	1447c83a 	sub	r3,r2,r17
  1082a0:	19400408 	cmpgei	r5,r3,16
  1082a4:	2800081e 	bne	r5,zero,1082c8 <_malloc_r+0x24c>
  1082a8:	1800cc0e 	bge	r3,zero,1085dc <_malloc_r+0x560>
  1082ac:	84000317 	ldw	r16,12(r16)
  1082b0:	3c00c526 	beq	r7,r16,1085c8 <_malloc_r+0x54c>
  1082b4:	80800117 	ldw	r2,4(r16)
  1082b8:	1244703a 	and	r2,r2,r9
  1082bc:	1447c83a 	sub	r3,r2,r17
  1082c0:	19400410 	cmplti	r5,r3,16
  1082c4:	283ff81e 	bne	r5,zero,1082a8 <_malloc_r+0x22c>
  1082c8:	81000317 	ldw	r4,12(r16)
  1082cc:	81400217 	ldw	r5,8(r16)
  1082d0:	89800054 	ori	r6,r17,1
  1082d4:	81800115 	stw	r6,4(r16)
  1082d8:	29000315 	stw	r4,12(r5)
  1082dc:	21400215 	stw	r5,8(r4)
  1082e0:	8463883a 	add	r17,r16,r17
  1082e4:	9c400515 	stw	r17,20(r19)
  1082e8:	9c400415 	stw	r17,16(r19)
  1082ec:	19000054 	ori	r4,r3,1
  1082f0:	89000115 	stw	r4,4(r17)
  1082f4:	8085883a 	add	r2,r16,r2
  1082f8:	8a000315 	stw	r8,12(r17)
  1082fc:	8a000215 	stw	r8,8(r17)
  108300:	10c00015 	stw	r3,0(r2)
  108304:	9009883a 	mov	r4,r18
  108308:	010fdec0 	call	10fdec <__malloc_unlock>
  10830c:	80800204 	addi	r2,r16,8
  108310:	00000306 	br	108320 <_malloc_r+0x2a4>
  108314:	00800304 	movi	r2,12
  108318:	90800015 	stw	r2,0(r18)
  10831c:	0005883a 	mov	r2,zero
  108320:	dfc00917 	ldw	ra,36(sp)
  108324:	df000817 	ldw	fp,32(sp)
  108328:	ddc00717 	ldw	r23,28(sp)
  10832c:	dd800617 	ldw	r22,24(sp)
  108330:	dd400517 	ldw	r21,20(sp)
  108334:	dd000417 	ldw	r20,16(sp)
  108338:	dcc00317 	ldw	r19,12(sp)
  10833c:	dc800217 	ldw	r18,8(sp)
  108340:	dc400117 	ldw	r17,4(sp)
  108344:	dc000017 	ldw	r16,0(sp)
  108348:	dec00a04 	addi	sp,sp,40
  10834c:	f800283a 	ret
  108350:	01408004 	movi	r5,512
  108354:	01801004 	movi	r6,64
  108358:	02000fc4 	movi	r8,63
  10835c:	003f8006 	br	108160 <_malloc_r+0xe4>
  108360:	14000317 	ldw	r16,12(r2)
  108364:	31800084 	addi	r6,r6,2
  108368:	143f5f1e 	bne	r2,r16,1080e8 <_malloc_r+0x6c>
  10836c:	9c000417 	ldw	r16,16(r19)
  108370:	02000074 	movhi	r8,1
  108374:	42011704 	addi	r8,r8,1116
  108378:	823f941e 	bne	r16,r8,1081cc <_malloc_r+0x150>
  10837c:	3007d0ba 	srai	r3,r6,2
  108380:	01000044 	movi	r4,1
  108384:	98800117 	ldw	r2,4(r19)
  108388:	20c8983a 	sll	r4,r4,r3
  10838c:	113fae2e 	bgeu	r2,r4,108248 <_malloc_r+0x1cc>
  108390:	9c000217 	ldw	r16,8(r19)
  108394:	00bfff04 	movi	r2,-4
  108398:	85000117 	ldw	r20,4(r16)
  10839c:	a0ac703a 	and	r22,r20,r2
  1083a0:	b4400336 	bltu	r22,r17,1083b0 <_malloc_r+0x334>
  1083a4:	b445c83a 	sub	r2,r22,r17
  1083a8:	10c00408 	cmpgei	r3,r2,16
  1083ac:	1800561e 	bne	r3,zero,108508 <_malloc_r+0x48c>
  1083b0:	00800074 	movhi	r2,1
  1083b4:	10873d17 	ldw	r2,7412(r2)
  1083b8:	00c00074 	movhi	r3,1
  1083bc:	1d075517 	ldw	r20,7508(r3)
  1083c0:	10bfffd8 	cmpnei	r2,r2,-1
  1083c4:	85ab883a 	add	r21,r16,r22
  1083c8:	8d29883a 	add	r20,r17,r20
  1083cc:	1000c826 	beq	r2,zero,1086f0 <_malloc_r+0x674>
  1083d0:	a50403c4 	addi	r20,r20,4111
  1083d4:	00bc0004 	movi	r2,-4096
  1083d8:	a0a8703a 	and	r20,r20,r2
  1083dc:	a00b883a 	mov	r5,r20
  1083e0:	9009883a 	mov	r4,r18
  1083e4:	010a3000 	call	10a300 <_sbrk_r>
  1083e8:	102f883a 	mov	r23,r2
  1083ec:	10bfffd8 	cmpnei	r2,r2,-1
  1083f0:	10009a26 	beq	r2,zero,10865c <_malloc_r+0x5e0>
  1083f4:	bd409836 	bltu	r23,r21,108658 <_malloc_r+0x5dc>
  1083f8:	00800074 	movhi	r2,1
  1083fc:	10876917 	ldw	r2,7588(r2)
  108400:	00c00074 	movhi	r3,1
  108404:	a085883a 	add	r2,r20,r2
  108408:	18876915 	stw	r2,7588(r3)
  10840c:	1007883a 	mov	r3,r2
  108410:	adc0dd26 	beq	r21,r23,108788 <_malloc_r+0x70c>
  108414:	00800074 	movhi	r2,1
  108418:	10873d17 	ldw	r2,7412(r2)
  10841c:	10bfffd8 	cmpnei	r2,r2,-1
  108420:	1000e026 	beq	r2,zero,1087a4 <_malloc_r+0x728>
  108424:	bd6bc83a 	sub	r21,r23,r21
  108428:	a8c7883a 	add	r3,r21,r3
  10842c:	00800074 	movhi	r2,1
  108430:	10c76915 	stw	r3,7588(r2)
  108434:	bf0001cc 	andi	fp,r23,7
  108438:	e000b626 	beq	fp,zero,108714 <_malloc_r+0x698>
  10843c:	bf2fc83a 	sub	r23,r23,fp
  108440:	bdc00204 	addi	r23,r23,8
  108444:	00840204 	movi	r2,4104
  108448:	1705c83a 	sub	r2,r2,fp
  10844c:	bd29883a 	add	r20,r23,r20
  108450:	1505c83a 	sub	r2,r2,r20
  108454:	1543ffcc 	andi	r21,r2,4095
  108458:	a80b883a 	mov	r5,r21
  10845c:	9009883a 	mov	r4,r18
  108460:	010a3000 	call	10a300 <_sbrk_r>
  108464:	10ffffe0 	cmpeqi	r3,r2,-1
  108468:	1800e41e 	bne	r3,zero,1087fc <_malloc_r+0x780>
  10846c:	15c5c83a 	sub	r2,r2,r23
  108470:	1569883a 	add	r20,r2,r21
  108474:	00800074 	movhi	r2,1
  108478:	10876917 	ldw	r2,7588(r2)
  10847c:	9dc00215 	stw	r23,8(r19)
  108480:	a5000054 	ori	r20,r20,1
  108484:	a885883a 	add	r2,r21,r2
  108488:	00c00074 	movhi	r3,1
  10848c:	18876915 	stw	r2,7588(r3)
  108490:	bd000115 	stw	r20,4(r23)
  108494:	84c0c626 	beq	r16,r19,1087b0 <_malloc_r+0x734>
  108498:	b0c00428 	cmpgeui	r3,r22,16
  10849c:	1800c626 	beq	r3,zero,1087b8 <_malloc_r+0x73c>
  1084a0:	81000117 	ldw	r4,4(r16)
  1084a4:	017ffe04 	movi	r5,-8
  1084a8:	b0fffd04 	addi	r3,r22,-12
  1084ac:	1946703a 	and	r3,r3,r5
  1084b0:	2100004c 	andi	r4,r4,1
  1084b4:	20c8b03a 	or	r4,r4,r3
  1084b8:	81000115 	stw	r4,4(r16)
  1084bc:	01400144 	movi	r5,5
  1084c0:	80c9883a 	add	r4,r16,r3
  1084c4:	21400115 	stw	r5,4(r4)
  1084c8:	21400215 	stw	r5,8(r4)
  1084cc:	18c00428 	cmpgeui	r3,r3,16
  1084d0:	1800cf1e 	bne	r3,zero,108810 <_malloc_r+0x794>
  1084d4:	bd000117 	ldw	r20,4(r23)
  1084d8:	b821883a 	mov	r16,r23
  1084dc:	00c00074 	movhi	r3,1
  1084e0:	18c75417 	ldw	r3,7504(r3)
  1084e4:	1880022e 	bgeu	r3,r2,1084f0 <_malloc_r+0x474>
  1084e8:	00c00074 	movhi	r3,1
  1084ec:	18875415 	stw	r2,7504(r3)
  1084f0:	00c00074 	movhi	r3,1
  1084f4:	18c75317 	ldw	r3,7500(r3)
  1084f8:	18805a2e 	bgeu	r3,r2,108664 <_malloc_r+0x5e8>
  1084fc:	00c00074 	movhi	r3,1
  108500:	18875315 	stw	r2,7500(r3)
  108504:	00005706 	br	108664 <_malloc_r+0x5e8>
  108508:	88c00054 	ori	r3,r17,1
  10850c:	80c00115 	stw	r3,4(r16)
  108510:	8463883a 	add	r17,r16,r17
  108514:	10800054 	ori	r2,r2,1
  108518:	9c400215 	stw	r17,8(r19)
  10851c:	88800115 	stw	r2,4(r17)
  108520:	9009883a 	mov	r4,r18
  108524:	010fdec0 	call	10fdec <__malloc_unlock>
  108528:	80800204 	addi	r2,r16,8
  10852c:	003f7c06 	br	108320 <_malloc_r+0x2a4>
  108530:	400d883a 	mov	r6,r8
  108534:	003f2106 	br	1081bc <_malloc_r+0x140>
  108538:	81000317 	ldw	r4,12(r16)
  10853c:	003eee06 	br	1080f8 <_malloc_r+0x7c>
  108540:	1006d27a 	srli	r3,r2,9
  108544:	19000168 	cmpgeui	r4,r3,5
  108548:	20003e26 	beq	r4,zero,108644 <_malloc_r+0x5c8>
  10854c:	19000568 	cmpgeui	r4,r3,21
  108550:	20007a1e 	bne	r4,zero,10873c <_malloc_r+0x6c0>
  108554:	19401704 	addi	r5,r3,92
  108558:	280a90fa 	slli	r5,r5,3
  10855c:	190016c4 	addi	r4,r3,91
  108560:	994b883a 	add	r5,r19,r5
  108564:	28c00017 	ldw	r3,0(r5)
  108568:	297ffe04 	addi	r5,r5,-8
  10856c:	28c06226 	beq	r5,r3,1086f8 <_malloc_r+0x67c>
  108570:	01ffff04 	movi	r7,-4
  108574:	19000117 	ldw	r4,4(r3)
  108578:	21c8703a 	and	r4,r4,r7
  10857c:	1100022e 	bgeu	r2,r4,108588 <_malloc_r+0x50c>
  108580:	18c00217 	ldw	r3,8(r3)
  108584:	28fffb1e 	bne	r5,r3,108574 <_malloc_r+0x4f8>
  108588:	19400317 	ldw	r5,12(r3)
  10858c:	98800117 	ldw	r2,4(r19)
  108590:	81400315 	stw	r5,12(r16)
  108594:	80c00215 	stw	r3,8(r16)
  108598:	2c000215 	stw	r16,8(r5)
  10859c:	1c000315 	stw	r16,12(r3)
  1085a0:	003f2506 	br	108238 <_malloc_r+0x1bc>
  1085a4:	10c00568 	cmpgeui	r3,r2,21
  1085a8:	18003826 	beq	r3,zero,10868c <_malloc_r+0x610>
  1085ac:	10c01568 	cmpgeui	r3,r2,85
  1085b0:	1800691e 	bne	r3,zero,108758 <_malloc_r+0x6dc>
  1085b4:	8804d33a 	srli	r2,r17,12
  1085b8:	11801bc4 	addi	r6,r2,111
  1085bc:	12001b84 	addi	r8,r2,110
  1085c0:	300a90fa 	slli	r5,r6,3
  1085c4:	003ee606 	br	108160 <_malloc_r+0xe4>
  1085c8:	5ac00044 	addi	r11,r11,1
  1085cc:	588000cc 	andi	r2,r11,3
  1085d0:	39c00204 	addi	r7,r7,8
  1085d4:	103f2d1e 	bne	r2,zero,10828c <_malloc_r+0x210>
  1085d8:	00003306 	br	1086a8 <_malloc_r+0x62c>
  1085dc:	8085883a 	add	r2,r16,r2
  1085e0:	10c00117 	ldw	r3,4(r2)
  1085e4:	81000317 	ldw	r4,12(r16)
  1085e8:	81400217 	ldw	r5,8(r16)
  1085ec:	18c00054 	ori	r3,r3,1
  1085f0:	10c00115 	stw	r3,4(r2)
  1085f4:	29000315 	stw	r4,12(r5)
  1085f8:	21400215 	stw	r5,8(r4)
  1085fc:	9009883a 	mov	r4,r18
  108600:	010fdec0 	call	10fdec <__malloc_unlock>
  108604:	80800204 	addi	r2,r16,8
  108608:	003f4506 	br	108320 <_malloc_r+0x2a4>
  10860c:	880cd0fa 	srli	r6,r17,3
  108610:	88800204 	addi	r2,r17,8
  108614:	003eae06 	br	1080d0 <_malloc_r+0x54>
  108618:	8085883a 	add	r2,r16,r2
  10861c:	10c00117 	ldw	r3,4(r2)
  108620:	9009883a 	mov	r4,r18
  108624:	18c00054 	ori	r3,r3,1
  108628:	10c00115 	stw	r3,4(r2)
  10862c:	010fdec0 	call	10fdec <__malloc_unlock>
  108630:	80800204 	addi	r2,r16,8
  108634:	003f3a06 	br	108320 <_malloc_r+0x2a4>
  108638:	89000054 	ori	r4,r17,1
  10863c:	81000115 	stw	r4,4(r16)
  108640:	003f2706 	br	1082e0 <_malloc_r+0x264>
  108644:	1006d1ba 	srli	r3,r2,6
  108648:	19400e44 	addi	r5,r3,57
  10864c:	19000e04 	addi	r4,r3,56
  108650:	280a90fa 	slli	r5,r5,3
  108654:	003fc206 	br	108560 <_malloc_r+0x4e4>
  108658:	84c04626 	beq	r16,r19,108774 <_malloc_r+0x6f8>
  10865c:	9c000217 	ldw	r16,8(r19)
  108660:	85000117 	ldw	r20,4(r16)
  108664:	00bfff04 	movi	r2,-4
  108668:	a0a8703a 	and	r20,r20,r2
  10866c:	a445c83a 	sub	r2,r20,r17
  108670:	a4400236 	bltu	r20,r17,10867c <_malloc_r+0x600>
  108674:	10c00408 	cmpgei	r3,r2,16
  108678:	183fa31e 	bne	r3,zero,108508 <_malloc_r+0x48c>
  10867c:	9009883a 	mov	r4,r18
  108680:	010fdec0 	call	10fdec <__malloc_unlock>
  108684:	0005883a 	mov	r2,zero
  108688:	003f2506 	br	108320 <_malloc_r+0x2a4>
  10868c:	11801704 	addi	r6,r2,92
  108690:	120016c4 	addi	r8,r2,91
  108694:	300a90fa 	slli	r5,r6,3
  108698:	003eb106 	br	108160 <_malloc_r+0xe4>
  10869c:	50800217 	ldw	r2,8(r10)
  1086a0:	31bfffc4 	addi	r6,r6,-1
  1086a4:	1280701e 	bne	r2,r10,108868 <_malloc_r+0x7ec>
  1086a8:	308000cc 	andi	r2,r6,3
  1086ac:	52bffe04 	addi	r10,r10,-8
  1086b0:	103ffa1e 	bne	r2,zero,10869c <_malloc_r+0x620>
  1086b4:	98c00117 	ldw	r3,4(r19)
  1086b8:	0104303a 	nor	r2,zero,r4
  1086bc:	10c4703a 	and	r2,r2,r3
  1086c0:	98800115 	stw	r2,4(r19)
  1086c4:	2109883a 	add	r4,r4,r4
  1086c8:	113f3136 	bltu	r2,r4,108390 <_malloc_r+0x314>
  1086cc:	203f3026 	beq	r4,zero,108390 <_malloc_r+0x314>
  1086d0:	2086703a 	and	r3,r4,r2
  1086d4:	1800041e 	bne	r3,zero,1086e8 <_malloc_r+0x66c>
  1086d8:	2109883a 	add	r4,r4,r4
  1086dc:	2086703a 	and	r3,r4,r2
  1086e0:	5ac00104 	addi	r11,r11,4
  1086e4:	183ffc26 	beq	r3,zero,1086d8 <_malloc_r+0x65c>
  1086e8:	580d883a 	mov	r6,r11
  1086ec:	003ee306 	br	10827c <_malloc_r+0x200>
  1086f0:	a5000404 	addi	r20,r20,16
  1086f4:	003f3906 	br	1083dc <_malloc_r+0x360>
  1086f8:	2009d0ba 	srai	r4,r4,2
  1086fc:	00800044 	movi	r2,1
  108700:	99c00117 	ldw	r7,4(r19)
  108704:	1104983a 	sll	r2,r2,r4
  108708:	11c4b03a 	or	r2,r2,r7
  10870c:	98800115 	stw	r2,4(r19)
  108710:	003f9f06 	br	108590 <_malloc_r+0x514>
  108714:	bd05883a 	add	r2,r23,r20
  108718:	0085c83a 	sub	r2,zero,r2
  10871c:	1543ffcc 	andi	r21,r2,4095
  108720:	a80b883a 	mov	r5,r21
  108724:	9009883a 	mov	r4,r18
  108728:	010a3000 	call	10a300 <_sbrk_r>
  10872c:	10ffffe0 	cmpeqi	r3,r2,-1
  108730:	183f4e26 	beq	r3,zero,10846c <_malloc_r+0x3f0>
  108734:	002b883a 	mov	r21,zero
  108738:	003f4e06 	br	108474 <_malloc_r+0x3f8>
  10873c:	19001568 	cmpgeui	r4,r3,85
  108740:	2000201e 	bne	r4,zero,1087c4 <_malloc_r+0x748>
  108744:	1006d33a 	srli	r3,r2,12
  108748:	19401bc4 	addi	r5,r3,111
  10874c:	19001b84 	addi	r4,r3,110
  108750:	280a90fa 	slli	r5,r5,3
  108754:	003f8206 	br	108560 <_malloc_r+0x4e4>
  108758:	10c05568 	cmpgeui	r3,r2,341
  10875c:	1800201e 	bne	r3,zero,1087e0 <_malloc_r+0x764>
  108760:	8804d3fa 	srli	r2,r17,15
  108764:	11801e04 	addi	r6,r2,120
  108768:	12001dc4 	addi	r8,r2,119
  10876c:	300a90fa 	slli	r5,r6,3
  108770:	003e7b06 	br	108160 <_malloc_r+0xe4>
  108774:	00800074 	movhi	r2,1
  108778:	10c76917 	ldw	r3,7588(r2)
  10877c:	a0c7883a 	add	r3,r20,r3
  108780:	10c76915 	stw	r3,7588(r2)
  108784:	003f2306 	br	108414 <_malloc_r+0x398>
  108788:	a903ffcc 	andi	r4,r21,4095
  10878c:	203f211e 	bne	r4,zero,108414 <_malloc_r+0x398>
  108790:	9c000217 	ldw	r16,8(r19)
  108794:	b529883a 	add	r20,r22,r20
  108798:	a5000054 	ori	r20,r20,1
  10879c:	85000115 	stw	r20,4(r16)
  1087a0:	003f4e06 	br	1084dc <_malloc_r+0x460>
  1087a4:	00800074 	movhi	r2,1
  1087a8:	15c73d15 	stw	r23,7412(r2)
  1087ac:	003f2106 	br	108434 <_malloc_r+0x3b8>
  1087b0:	b821883a 	mov	r16,r23
  1087b4:	003f4906 	br	1084dc <_malloc_r+0x460>
  1087b8:	00800044 	movi	r2,1
  1087bc:	b8800115 	stw	r2,4(r23)
  1087c0:	003fae06 	br	10867c <_malloc_r+0x600>
  1087c4:	19005568 	cmpgeui	r4,r3,341
  1087c8:	2000191e 	bne	r4,zero,108830 <_malloc_r+0x7b4>
  1087cc:	1006d3fa 	srli	r3,r2,15
  1087d0:	19401e04 	addi	r5,r3,120
  1087d4:	19001dc4 	addi	r4,r3,119
  1087d8:	280a90fa 	slli	r5,r5,3
  1087dc:	003f6006 	br	108560 <_malloc_r+0x4e4>
  1087e0:	10815568 	cmpgeui	r2,r2,1365
  1087e4:	1000191e 	bne	r2,zero,10884c <_malloc_r+0x7d0>
  1087e8:	8804d4ba 	srli	r2,r17,18
  1087ec:	11801f44 	addi	r6,r2,125
  1087f0:	12001f04 	addi	r8,r2,124
  1087f4:	300a90fa 	slli	r5,r6,3
  1087f8:	003e5906 	br	108160 <_malloc_r+0xe4>
  1087fc:	e73ffe04 	addi	fp,fp,-8
  108800:	a729883a 	add	r20,r20,fp
  108804:	a5e9c83a 	sub	r20,r20,r23
  108808:	002b883a 	mov	r21,zero
  10880c:	003f1906 	br	108474 <_malloc_r+0x3f8>
  108810:	81400204 	addi	r5,r16,8
  108814:	9009883a 	mov	r4,r18
  108818:	01075600 	call	107560 <_free_r>
  10881c:	9c000217 	ldw	r16,8(r19)
  108820:	00800074 	movhi	r2,1
  108824:	10876917 	ldw	r2,7588(r2)
  108828:	85000117 	ldw	r20,4(r16)
  10882c:	003f2b06 	br	1084dc <_malloc_r+0x460>
  108830:	18c15568 	cmpgeui	r3,r3,1365
  108834:	1800091e 	bne	r3,zero,10885c <_malloc_r+0x7e0>
  108838:	1006d4ba 	srli	r3,r2,18
  10883c:	19401f44 	addi	r5,r3,125
  108840:	19001f04 	addi	r4,r3,124
  108844:	280a90fa 	slli	r5,r5,3
  108848:	003f4506 	br	108560 <_malloc_r+0x4e4>
  10884c:	0140fe04 	movi	r5,1016
  108850:	01801fc4 	movi	r6,127
  108854:	02001f84 	movi	r8,126
  108858:	003e4106 	br	108160 <_malloc_r+0xe4>
  10885c:	0140fe04 	movi	r5,1016
  108860:	01001f84 	movi	r4,126
  108864:	003f3e06 	br	108560 <_malloc_r+0x4e4>
  108868:	98800117 	ldw	r2,4(r19)
  10886c:	003f9506 	br	1086c4 <_malloc_r+0x648>

00108870 <memchr>:
  108870:	208000cc 	andi	r2,r4,3
  108874:	280f883a 	mov	r7,r5
  108878:	10003526 	beq	r2,zero,108950 <memchr+0xe0>
  10887c:	30bfffc4 	addi	r2,r6,-1
  108880:	30001926 	beq	r6,zero,1088e8 <memchr+0x78>
  108884:	20c00003 	ldbu	r3,0(r4)
  108888:	29803fcc 	andi	r6,r5,255
  10888c:	30c0061e 	bne	r6,r3,1088a8 <memchr+0x38>
  108890:	00001706 	br	1088f0 <memchr+0x80>
  108894:	10bfffc4 	addi	r2,r2,-1
  108898:	10ffffe0 	cmpeqi	r3,r2,-1
  10889c:	1800121e 	bne	r3,zero,1088e8 <memchr+0x78>
  1088a0:	20c00003 	ldbu	r3,0(r4)
  1088a4:	19801226 	beq	r3,r6,1088f0 <memchr+0x80>
  1088a8:	21000044 	addi	r4,r4,1
  1088ac:	20c000cc 	andi	r3,r4,3
  1088b0:	183ff81e 	bne	r3,zero,108894 <memchr+0x24>
  1088b4:	10c00128 	cmpgeui	r3,r2,4
  1088b8:	18000f1e 	bne	r3,zero,1088f8 <memchr+0x88>
  1088bc:	10000a26 	beq	r2,zero,1088e8 <memchr+0x78>
  1088c0:	20c00003 	ldbu	r3,0(r4)
  1088c4:	29403fcc 	andi	r5,r5,255
  1088c8:	19400926 	beq	r3,r5,1088f0 <memchr+0x80>
  1088cc:	2085883a 	add	r2,r4,r2
  1088d0:	39403fcc 	andi	r5,r7,255
  1088d4:	00000206 	br	1088e0 <memchr+0x70>
  1088d8:	20c00003 	ldbu	r3,0(r4)
  1088dc:	19400426 	beq	r3,r5,1088f0 <memchr+0x80>
  1088e0:	21000044 	addi	r4,r4,1
  1088e4:	113ffc1e 	bne	r2,r4,1088d8 <memchr+0x68>
  1088e8:	0005883a 	mov	r2,zero
  1088ec:	f800283a 	ret
  1088f0:	2005883a 	mov	r2,r4
  1088f4:	f800283a 	ret
  1088f8:	280c923a 	slli	r6,r5,8
  1088fc:	2a403fcc 	andi	r9,r5,255
  108900:	02bfbff4 	movhi	r10,65279
  108904:	31bfffcc 	andi	r6,r6,65535
  108908:	3246b03a 	or	r3,r6,r9
  10890c:	1812943a 	slli	r9,r3,16
  108910:	02202074 	movhi	r8,32897
  108914:	52bfbfc4 	addi	r10,r10,-257
  108918:	48d2b03a 	or	r9,r9,r3
  10891c:	42202004 	addi	r8,r8,-32640
  108920:	20c00017 	ldw	r3,0(r4)
  108924:	48c6f03a 	xor	r3,r9,r3
  108928:	1a8d883a 	add	r6,r3,r10
  10892c:	00c6303a 	nor	r3,zero,r3
  108930:	30c6703a 	and	r3,r6,r3
  108934:	1a06703a 	and	r3,r3,r8
  108938:	183fe11e 	bne	r3,zero,1088c0 <memchr+0x50>
  10893c:	10bfff04 	addi	r2,r2,-4
  108940:	10c00128 	cmpgeui	r3,r2,4
  108944:	21000104 	addi	r4,r4,4
  108948:	183ff51e 	bne	r3,zero,108920 <memchr+0xb0>
  10894c:	003fdb06 	br	1088bc <memchr+0x4c>
  108950:	3005883a 	mov	r2,r6
  108954:	003fd706 	br	1088b4 <memchr+0x44>

00108958 <memmove>:
  108958:	2005883a 	mov	r2,r4
  10895c:	29000a2e 	bgeu	r5,r4,108988 <memmove+0x30>
  108960:	2989883a 	add	r4,r5,r6
  108964:	1100082e 	bgeu	r2,r4,108988 <memmove+0x30>
  108968:	1187883a 	add	r3,r2,r6
  10896c:	30003e26 	beq	r6,zero,108a68 <memmove+0x110>
  108970:	213fffc4 	addi	r4,r4,-1
  108974:	21400003 	ldbu	r5,0(r4)
  108978:	18ffffc4 	addi	r3,r3,-1
  10897c:	19400005 	stb	r5,0(r3)
  108980:	10fffb1e 	bne	r2,r3,108970 <memmove+0x18>
  108984:	f800283a 	ret
  108988:	30c00430 	cmpltui	r3,r6,16
  10898c:	18000b26 	beq	r3,zero,1089bc <memmove+0x64>
  108990:	1007883a 	mov	r3,r2
  108994:	31ffffc4 	addi	r7,r6,-1
  108998:	30003726 	beq	r6,zero,108a78 <memmove+0x120>
  10899c:	39c00044 	addi	r7,r7,1
  1089a0:	29cf883a 	add	r7,r5,r7
  1089a4:	29400044 	addi	r5,r5,1
  1089a8:	29bfffc3 	ldbu	r6,-1(r5)
  1089ac:	18c00044 	addi	r3,r3,1
  1089b0:	19bfffc5 	stb	r6,-1(r3)
  1089b4:	29fffb1e 	bne	r5,r7,1089a4 <memmove+0x4c>
  1089b8:	f800283a 	ret
  1089bc:	2886b03a 	or	r3,r5,r2
  1089c0:	18c000cc 	andi	r3,r3,3
  1089c4:	1800291e 	bne	r3,zero,108a6c <memmove+0x114>
  1089c8:	327ffc04 	addi	r9,r6,-16
  1089cc:	4812d13a 	srli	r9,r9,4
  1089d0:	280f883a 	mov	r7,r5
  1089d4:	1007883a 	mov	r3,r2
  1089d8:	4a400044 	addi	r9,r9,1
  1089dc:	4812913a 	slli	r9,r9,4
  1089e0:	1251883a 	add	r8,r2,r9
  1089e4:	39000017 	ldw	r4,0(r7)
  1089e8:	18c00404 	addi	r3,r3,16
  1089ec:	39c00404 	addi	r7,r7,16
  1089f0:	193ffc15 	stw	r4,-16(r3)
  1089f4:	393ffd17 	ldw	r4,-12(r7)
  1089f8:	193ffd15 	stw	r4,-12(r3)
  1089fc:	393ffe17 	ldw	r4,-8(r7)
  108a00:	193ffe15 	stw	r4,-8(r3)
  108a04:	393fff17 	ldw	r4,-4(r7)
  108a08:	193fff15 	stw	r4,-4(r3)
  108a0c:	40fff51e 	bne	r8,r3,1089e4 <memmove+0x8c>
  108a10:	3100030c 	andi	r4,r6,12
  108a14:	2a4b883a 	add	r5,r5,r9
  108a18:	320003cc 	andi	r8,r6,15
  108a1c:	20001726 	beq	r4,zero,108a7c <memmove+0x124>
  108a20:	2813883a 	mov	r9,r5
  108a24:	180f883a 	mov	r7,r3
  108a28:	4a400104 	addi	r9,r9,4
  108a2c:	39c00104 	addi	r7,r7,4
  108a30:	4abfff17 	ldw	r10,-4(r9)
  108a34:	41c9c83a 	sub	r4,r8,r7
  108a38:	1909883a 	add	r4,r3,r4
  108a3c:	3abfff15 	stw	r10,-4(r7)
  108a40:	21000128 	cmpgeui	r4,r4,4
  108a44:	203ff81e 	bne	r4,zero,108a28 <memmove+0xd0>
  108a48:	413fff04 	addi	r4,r8,-4
  108a4c:	2008d0ba 	srli	r4,r4,2
  108a50:	318000cc 	andi	r6,r6,3
  108a54:	21000044 	addi	r4,r4,1
  108a58:	200890ba 	slli	r4,r4,2
  108a5c:	1907883a 	add	r3,r3,r4
  108a60:	290b883a 	add	r5,r5,r4
  108a64:	003fcb06 	br	108994 <memmove+0x3c>
  108a68:	f800283a 	ret
  108a6c:	31ffffc4 	addi	r7,r6,-1
  108a70:	1007883a 	mov	r3,r2
  108a74:	003fc906 	br	10899c <memmove+0x44>
  108a78:	f800283a 	ret
  108a7c:	400d883a 	mov	r6,r8
  108a80:	003fc406 	br	108994 <memmove+0x3c>

00108a84 <memset>:
  108a84:	20c000cc 	andi	r3,r4,3
  108a88:	2005883a 	mov	r2,r4
  108a8c:	18003626 	beq	r3,zero,108b68 <memset+0xe4>
  108a90:	31ffffc4 	addi	r7,r6,-1
  108a94:	30003326 	beq	r6,zero,108b64 <memset+0xe0>
  108a98:	2811883a 	mov	r8,r5
  108a9c:	2007883a 	mov	r3,r4
  108aa0:	00000306 	br	108ab0 <memset+0x2c>
  108aa4:	39ffffc4 	addi	r7,r7,-1
  108aa8:	39bfffe0 	cmpeqi	r6,r7,-1
  108aac:	30002d1e 	bne	r6,zero,108b64 <memset+0xe0>
  108ab0:	18c00044 	addi	r3,r3,1
  108ab4:	1a3fffc5 	stb	r8,-1(r3)
  108ab8:	198000cc 	andi	r6,r3,3
  108abc:	303ff91e 	bne	r6,zero,108aa4 <memset+0x20>
  108ac0:	39000130 	cmpltui	r4,r7,4
  108ac4:	2000221e 	bne	r4,zero,108b50 <memset+0xcc>
  108ac8:	29003fcc 	andi	r4,r5,255
  108acc:	200c923a 	slli	r6,r4,8
  108ad0:	3a000430 	cmpltui	r8,r7,16
  108ad4:	3108b03a 	or	r4,r6,r4
  108ad8:	200c943a 	slli	r6,r4,16
  108adc:	310cb03a 	or	r6,r6,r4
  108ae0:	40000e1e 	bne	r8,zero,108b1c <memset+0x98>
  108ae4:	3a3ffc04 	addi	r8,r7,-16
  108ae8:	4010d13a 	srli	r8,r8,4
  108aec:	42000044 	addi	r8,r8,1
  108af0:	4010913a 	slli	r8,r8,4
  108af4:	1a11883a 	add	r8,r3,r8
  108af8:	19800015 	stw	r6,0(r3)
  108afc:	19800115 	stw	r6,4(r3)
  108b00:	19800215 	stw	r6,8(r3)
  108b04:	18c00404 	addi	r3,r3,16
  108b08:	19bfff15 	stw	r6,-4(r3)
  108b0c:	40fffa1e 	bne	r8,r3,108af8 <memset+0x74>
  108b10:	3900030c 	andi	r4,r7,12
  108b14:	39c003cc 	andi	r7,r7,15
  108b18:	20000d26 	beq	r4,zero,108b50 <memset+0xcc>
  108b1c:	1809883a 	mov	r4,r3
  108b20:	21000104 	addi	r4,r4,4
  108b24:	3911c83a 	sub	r8,r7,r4
  108b28:	1a11883a 	add	r8,r3,r8
  108b2c:	21bfff15 	stw	r6,-4(r4)
  108b30:	42000128 	cmpgeui	r8,r8,4
  108b34:	403ffa1e 	bne	r8,zero,108b20 <memset+0x9c>
  108b38:	393fff04 	addi	r4,r7,-4
  108b3c:	2008d0ba 	srli	r4,r4,2
  108b40:	39c000cc 	andi	r7,r7,3
  108b44:	21000044 	addi	r4,r4,1
  108b48:	200890ba 	slli	r4,r4,2
  108b4c:	1907883a 	add	r3,r3,r4
  108b50:	38000426 	beq	r7,zero,108b64 <memset+0xe0>
  108b54:	19cf883a 	add	r7,r3,r7
  108b58:	18c00044 	addi	r3,r3,1
  108b5c:	197fffc5 	stb	r5,-1(r3)
  108b60:	38fffd1e 	bne	r7,r3,108b58 <memset+0xd4>
  108b64:	f800283a 	ret
  108b68:	2007883a 	mov	r3,r4
  108b6c:	300f883a 	mov	r7,r6
  108b70:	003fd306 	br	108ac0 <memset+0x3c>

00108b74 <_Balloc>:
  108b74:	20801317 	ldw	r2,76(r4)
  108b78:	defffc04 	addi	sp,sp,-16
  108b7c:	dc400115 	stw	r17,4(sp)
  108b80:	dc000015 	stw	r16,0(sp)
  108b84:	dfc00315 	stw	ra,12(sp)
  108b88:	dc800215 	stw	r18,8(sp)
  108b8c:	2021883a 	mov	r16,r4
  108b90:	2823883a 	mov	r17,r5
  108b94:	10000e26 	beq	r2,zero,108bd0 <_Balloc+0x5c>
  108b98:	880690ba 	slli	r3,r17,2
  108b9c:	10c7883a 	add	r3,r2,r3
  108ba0:	18800017 	ldw	r2,0(r3)
  108ba4:	10001126 	beq	r2,zero,108bec <_Balloc+0x78>
  108ba8:	11000017 	ldw	r4,0(r2)
  108bac:	19000015 	stw	r4,0(r3)
  108bb0:	10000415 	stw	zero,16(r2)
  108bb4:	10000315 	stw	zero,12(r2)
  108bb8:	dfc00317 	ldw	ra,12(sp)
  108bbc:	dc800217 	ldw	r18,8(sp)
  108bc0:	dc400117 	ldw	r17,4(sp)
  108bc4:	dc000017 	ldw	r16,0(sp)
  108bc8:	dec00404 	addi	sp,sp,16
  108bcc:	f800283a 	ret
  108bd0:	01800844 	movi	r6,33
  108bd4:	01400104 	movi	r5,4
  108bd8:	010bbd00 	call	10bbd0 <_calloc_r>
  108bdc:	80801315 	stw	r2,76(r16)
  108be0:	103fed1e 	bne	r2,zero,108b98 <_Balloc+0x24>
  108be4:	0005883a 	mov	r2,zero
  108be8:	003ff306 	br	108bb8 <_Balloc+0x44>
  108bec:	04800044 	movi	r18,1
  108bf0:	9464983a 	sll	r18,r18,r17
  108bf4:	01400044 	movi	r5,1
  108bf8:	8009883a 	mov	r4,r16
  108bfc:	91800144 	addi	r6,r18,5
  108c00:	300c90ba 	slli	r6,r6,2
  108c04:	010bbd00 	call	10bbd0 <_calloc_r>
  108c08:	103ff626 	beq	r2,zero,108be4 <_Balloc+0x70>
  108c0c:	14400115 	stw	r17,4(r2)
  108c10:	14800215 	stw	r18,8(r2)
  108c14:	003fe606 	br	108bb0 <_Balloc+0x3c>

00108c18 <_Bfree>:
  108c18:	28000726 	beq	r5,zero,108c38 <_Bfree+0x20>
  108c1c:	28c00117 	ldw	r3,4(r5)
  108c20:	20801317 	ldw	r2,76(r4)
  108c24:	180690ba 	slli	r3,r3,2
  108c28:	10c5883a 	add	r2,r2,r3
  108c2c:	10c00017 	ldw	r3,0(r2)
  108c30:	28c00015 	stw	r3,0(r5)
  108c34:	11400015 	stw	r5,0(r2)
  108c38:	f800283a 	ret

00108c3c <__multadd>:
  108c3c:	defff704 	addi	sp,sp,-36
  108c40:	dcc00315 	stw	r19,12(sp)
  108c44:	2cc00417 	ldw	r19,16(r5)
  108c48:	ddc00715 	stw	r23,28(sp)
  108c4c:	dd800615 	stw	r22,24(sp)
  108c50:	dd400515 	stw	r21,20(sp)
  108c54:	dd000415 	stw	r20,16(sp)
  108c58:	dc800215 	stw	r18,8(sp)
  108c5c:	dc400115 	stw	r17,4(sp)
  108c60:	dfc00815 	stw	ra,32(sp)
  108c64:	dc000015 	stw	r16,0(sp)
  108c68:	2829883a 	mov	r20,r5
  108c6c:	202b883a 	mov	r21,r4
  108c70:	3025883a 	mov	r18,r6
  108c74:	3823883a 	mov	r17,r7
  108c78:	2d800504 	addi	r22,r5,20
  108c7c:	002f883a 	mov	r23,zero
  108c80:	b4000017 	ldw	r16,0(r22)
  108c84:	900b883a 	mov	r5,r18
  108c88:	b5800104 	addi	r22,r22,4
  108c8c:	813fffcc 	andi	r4,r16,65535
  108c90:	0102e600 	call	102e60 <__mulsi3>
  108c94:	8008d43a 	srli	r4,r16,16
  108c98:	900b883a 	mov	r5,r18
  108c9c:	1461883a 	add	r16,r2,r17
  108ca0:	0102e600 	call	102e60 <__mulsi3>
  108ca4:	800ed43a 	srli	r7,r16,16
  108ca8:	843fffcc 	andi	r16,r16,65535
  108cac:	bdc00044 	addi	r23,r23,1
  108cb0:	11c5883a 	add	r2,r2,r7
  108cb4:	1006943a 	slli	r3,r2,16
  108cb8:	1022d43a 	srli	r17,r2,16
  108cbc:	1c21883a 	add	r16,r3,r16
  108cc0:	b43fff15 	stw	r16,-4(r22)
  108cc4:	bcffee16 	blt	r23,r19,108c80 <__multadd+0x44>
  108cc8:	88000826 	beq	r17,zero,108cec <__multadd+0xb0>
  108ccc:	a0800217 	ldw	r2,8(r20)
  108cd0:	9880120e 	bge	r19,r2,108d1c <__multadd+0xe0>
  108cd4:	98800144 	addi	r2,r19,5
  108cd8:	100490ba 	slli	r2,r2,2
  108cdc:	9cc00044 	addi	r19,r19,1
  108ce0:	a085883a 	add	r2,r20,r2
  108ce4:	14400015 	stw	r17,0(r2)
  108ce8:	a4c00415 	stw	r19,16(r20)
  108cec:	a005883a 	mov	r2,r20
  108cf0:	dfc00817 	ldw	ra,32(sp)
  108cf4:	ddc00717 	ldw	r23,28(sp)
  108cf8:	dd800617 	ldw	r22,24(sp)
  108cfc:	dd400517 	ldw	r21,20(sp)
  108d00:	dd000417 	ldw	r20,16(sp)
  108d04:	dcc00317 	ldw	r19,12(sp)
  108d08:	dc800217 	ldw	r18,8(sp)
  108d0c:	dc400117 	ldw	r17,4(sp)
  108d10:	dc000017 	ldw	r16,0(sp)
  108d14:	dec00904 	addi	sp,sp,36
  108d18:	f800283a 	ret
  108d1c:	a1400117 	ldw	r5,4(r20)
  108d20:	a809883a 	mov	r4,r21
  108d24:	29400044 	addi	r5,r5,1
  108d28:	0108b740 	call	108b74 <_Balloc>
  108d2c:	a1800417 	ldw	r6,16(r20)
  108d30:	a1400304 	addi	r5,r20,12
  108d34:	11000304 	addi	r4,r2,12
  108d38:	31800084 	addi	r6,r6,2
  108d3c:	300c90ba 	slli	r6,r6,2
  108d40:	1021883a 	mov	r16,r2
  108d44:	0102e880 	call	102e88 <memcpy>
  108d48:	a0000926 	beq	r20,zero,108d70 <__multadd+0x134>
  108d4c:	a0c00117 	ldw	r3,4(r20)
  108d50:	a8801317 	ldw	r2,76(r21)
  108d54:	180690ba 	slli	r3,r3,2
  108d58:	10c5883a 	add	r2,r2,r3
  108d5c:	10c00017 	ldw	r3,0(r2)
  108d60:	a0c00015 	stw	r3,0(r20)
  108d64:	15000015 	stw	r20,0(r2)
  108d68:	8029883a 	mov	r20,r16
  108d6c:	003fd906 	br	108cd4 <__multadd+0x98>
  108d70:	8029883a 	mov	r20,r16
  108d74:	003fd706 	br	108cd4 <__multadd+0x98>

00108d78 <__s2b>:
  108d78:	defff904 	addi	sp,sp,-28
  108d7c:	dc800215 	stw	r18,8(sp)
  108d80:	dc000015 	stw	r16,0(sp)
  108d84:	2025883a 	mov	r18,r4
  108d88:	2821883a 	mov	r16,r5
  108d8c:	39000204 	addi	r4,r7,8
  108d90:	01400244 	movi	r5,9
  108d94:	dcc00315 	stw	r19,12(sp)
  108d98:	dc400115 	stw	r17,4(sp)
  108d9c:	dfc00615 	stw	ra,24(sp)
  108da0:	3823883a 	mov	r17,r7
  108da4:	dd400515 	stw	r21,20(sp)
  108da8:	dd000415 	stw	r20,16(sp)
  108dac:	3027883a 	mov	r19,r6
  108db0:	0102ca80 	call	102ca8 <__divsi3>
  108db4:	88c00290 	cmplti	r3,r17,10
  108db8:	1800311e 	bne	r3,zero,108e80 <__s2b+0x108>
  108dbc:	00c00044 	movi	r3,1
  108dc0:	000b883a 	mov	r5,zero
  108dc4:	18c7883a 	add	r3,r3,r3
  108dc8:	29400044 	addi	r5,r5,1
  108dcc:	18bffd16 	blt	r3,r2,108dc4 <__s2b+0x4c>
  108dd0:	9009883a 	mov	r4,r18
  108dd4:	0108b740 	call	108b74 <_Balloc>
  108dd8:	d8c00717 	ldw	r3,28(sp)
  108ddc:	10c00515 	stw	r3,20(r2)
  108de0:	00c00044 	movi	r3,1
  108de4:	10c00415 	stw	r3,16(r2)
  108de8:	98c00290 	cmplti	r3,r19,10
  108dec:	1800211e 	bne	r3,zero,108e74 <__s2b+0xfc>
  108df0:	85400244 	addi	r21,r16,9
  108df4:	84e9883a 	add	r20,r16,r19
  108df8:	a821883a 	mov	r16,r21
  108dfc:	84000044 	addi	r16,r16,1
  108e00:	81ffffc7 	ldb	r7,-1(r16)
  108e04:	01800284 	movi	r6,10
  108e08:	100b883a 	mov	r5,r2
  108e0c:	39fff404 	addi	r7,r7,-48
  108e10:	9009883a 	mov	r4,r18
  108e14:	0108c3c0 	call	108c3c <__multadd>
  108e18:	a43ff81e 	bne	r20,r16,108dfc <__s2b+0x84>
  108e1c:	9c3ffe04 	addi	r16,r19,-8
  108e20:	ac21883a 	add	r16,r21,r16
  108e24:	9c400a0e 	bge	r19,r17,108e50 <__s2b+0xd8>
  108e28:	8ce3c83a 	sub	r17,r17,r19
  108e2c:	8463883a 	add	r17,r16,r17
  108e30:	84000044 	addi	r16,r16,1
  108e34:	81ffffc7 	ldb	r7,-1(r16)
  108e38:	01800284 	movi	r6,10
  108e3c:	100b883a 	mov	r5,r2
  108e40:	39fff404 	addi	r7,r7,-48
  108e44:	9009883a 	mov	r4,r18
  108e48:	0108c3c0 	call	108c3c <__multadd>
  108e4c:	8c3ff81e 	bne	r17,r16,108e30 <__s2b+0xb8>
  108e50:	dfc00617 	ldw	ra,24(sp)
  108e54:	dd400517 	ldw	r21,20(sp)
  108e58:	dd000417 	ldw	r20,16(sp)
  108e5c:	dcc00317 	ldw	r19,12(sp)
  108e60:	dc800217 	ldw	r18,8(sp)
  108e64:	dc400117 	ldw	r17,4(sp)
  108e68:	dc000017 	ldw	r16,0(sp)
  108e6c:	dec00704 	addi	sp,sp,28
  108e70:	f800283a 	ret
  108e74:	84000284 	addi	r16,r16,10
  108e78:	04c00244 	movi	r19,9
  108e7c:	003fe906 	br	108e24 <__s2b+0xac>
  108e80:	000b883a 	mov	r5,zero
  108e84:	003fd206 	br	108dd0 <__s2b+0x58>

00108e88 <__hi0bits>:
  108e88:	20bfffec 	andhi	r2,r4,65535
  108e8c:	1000131e 	bne	r2,zero,108edc <__hi0bits+0x54>
  108e90:	2008943a 	slli	r4,r4,16
  108e94:	00800404 	movi	r2,16
  108e98:	20ffc02c 	andhi	r3,r4,65280
  108e9c:	1800021e 	bne	r3,zero,108ea8 <__hi0bits+0x20>
  108ea0:	2008923a 	slli	r4,r4,8
  108ea4:	10800204 	addi	r2,r2,8
  108ea8:	20fc002c 	andhi	r3,r4,61440
  108eac:	1800021e 	bne	r3,zero,108eb8 <__hi0bits+0x30>
  108eb0:	2008913a 	slli	r4,r4,4
  108eb4:	10800104 	addi	r2,r2,4
  108eb8:	20f0002c 	andhi	r3,r4,49152
  108ebc:	1800021e 	bne	r3,zero,108ec8 <__hi0bits+0x40>
  108ec0:	200890ba 	slli	r4,r4,2
  108ec4:	10800084 	addi	r2,r2,2
  108ec8:	20000316 	blt	r4,zero,108ed8 <__hi0bits+0x50>
  108ecc:	2110002c 	andhi	r4,r4,16384
  108ed0:	10800044 	addi	r2,r2,1
  108ed4:	20000326 	beq	r4,zero,108ee4 <__hi0bits+0x5c>
  108ed8:	f800283a 	ret
  108edc:	0005883a 	mov	r2,zero
  108ee0:	003fed06 	br	108e98 <__hi0bits+0x10>
  108ee4:	00800804 	movi	r2,32
  108ee8:	f800283a 	ret

00108eec <__lo0bits>:
  108eec:	20c00017 	ldw	r3,0(r4)
  108ef0:	188001cc 	andi	r2,r3,7
  108ef4:	10000826 	beq	r2,zero,108f18 <__lo0bits+0x2c>
  108ef8:	1880004c 	andi	r2,r3,1
  108efc:	10001f1e 	bne	r2,zero,108f7c <__lo0bits+0x90>
  108f00:	1880008c 	andi	r2,r3,2
  108f04:	10002126 	beq	r2,zero,108f8c <__lo0bits+0xa0>
  108f08:	1806d07a 	srli	r3,r3,1
  108f0c:	00800044 	movi	r2,1
  108f10:	20c00015 	stw	r3,0(r4)
  108f14:	f800283a 	ret
  108f18:	18bfffcc 	andi	r2,r3,65535
  108f1c:	1000151e 	bne	r2,zero,108f74 <__lo0bits+0x88>
  108f20:	1806d43a 	srli	r3,r3,16
  108f24:	00800404 	movi	r2,16
  108f28:	19403fcc 	andi	r5,r3,255
  108f2c:	2800021e 	bne	r5,zero,108f38 <__lo0bits+0x4c>
  108f30:	1806d23a 	srli	r3,r3,8
  108f34:	10800204 	addi	r2,r2,8
  108f38:	194003cc 	andi	r5,r3,15
  108f3c:	2800021e 	bne	r5,zero,108f48 <__lo0bits+0x5c>
  108f40:	1806d13a 	srli	r3,r3,4
  108f44:	10800104 	addi	r2,r2,4
  108f48:	194000cc 	andi	r5,r3,3
  108f4c:	2800021e 	bne	r5,zero,108f58 <__lo0bits+0x6c>
  108f50:	1806d0ba 	srli	r3,r3,2
  108f54:	10800084 	addi	r2,r2,2
  108f58:	1940004c 	andi	r5,r3,1
  108f5c:	2800031e 	bne	r5,zero,108f6c <__lo0bits+0x80>
  108f60:	1806d07a 	srli	r3,r3,1
  108f64:	10800044 	addi	r2,r2,1
  108f68:	18000626 	beq	r3,zero,108f84 <__lo0bits+0x98>
  108f6c:	20c00015 	stw	r3,0(r4)
  108f70:	f800283a 	ret
  108f74:	0005883a 	mov	r2,zero
  108f78:	003feb06 	br	108f28 <__lo0bits+0x3c>
  108f7c:	0005883a 	mov	r2,zero
  108f80:	f800283a 	ret
  108f84:	00800804 	movi	r2,32
  108f88:	f800283a 	ret
  108f8c:	1806d0ba 	srli	r3,r3,2
  108f90:	00800084 	movi	r2,2
  108f94:	20c00015 	stw	r3,0(r4)
  108f98:	f800283a 	ret

00108f9c <__i2b>:
  108f9c:	defffe04 	addi	sp,sp,-8
  108fa0:	dc000015 	stw	r16,0(sp)
  108fa4:	2821883a 	mov	r16,r5
  108fa8:	01400044 	movi	r5,1
  108fac:	dfc00115 	stw	ra,4(sp)
  108fb0:	0108b740 	call	108b74 <_Balloc>
  108fb4:	01000044 	movi	r4,1
  108fb8:	14000515 	stw	r16,20(r2)
  108fbc:	11000415 	stw	r4,16(r2)
  108fc0:	dfc00117 	ldw	ra,4(sp)
  108fc4:	dc000017 	ldw	r16,0(sp)
  108fc8:	dec00204 	addi	sp,sp,8
  108fcc:	f800283a 	ret

00108fd0 <__multiply>:
  108fd0:	defff104 	addi	sp,sp,-60
  108fd4:	dd800b15 	stw	r22,44(sp)
  108fd8:	dc400615 	stw	r17,24(sp)
  108fdc:	2d800417 	ldw	r22,16(r5)
  108fe0:	34400417 	ldw	r17,16(r6)
  108fe4:	ddc00c15 	stw	r23,48(sp)
  108fe8:	dc800715 	stw	r18,28(sp)
  108fec:	dfc00e15 	stw	ra,56(sp)
  108ff0:	df000d15 	stw	fp,52(sp)
  108ff4:	dd400a15 	stw	r21,40(sp)
  108ff8:	dd000915 	stw	r20,36(sp)
  108ffc:	dcc00815 	stw	r19,32(sp)
  109000:	dc000515 	stw	r16,20(sp)
  109004:	2825883a 	mov	r18,r5
  109008:	302f883a 	mov	r23,r6
  10900c:	b4400516 	blt	r22,r17,109024 <__multiply+0x54>
  109010:	8807883a 	mov	r3,r17
  109014:	282f883a 	mov	r23,r5
  109018:	b023883a 	mov	r17,r22
  10901c:	3025883a 	mov	r18,r6
  109020:	182d883a 	mov	r22,r3
  109024:	b8800217 	ldw	r2,8(r23)
  109028:	8da9883a 	add	r20,r17,r22
  10902c:	b9400117 	ldw	r5,4(r23)
  109030:	1500010e 	bge	r2,r20,109038 <__multiply+0x68>
  109034:	29400044 	addi	r5,r5,1
  109038:	a02690ba 	slli	r19,r20,2
  10903c:	0108b740 	call	108b74 <_Balloc>
  109040:	10c00504 	addi	r3,r2,20
  109044:	1cc9883a 	add	r4,r3,r19
  109048:	d8800415 	stw	r2,16(sp)
  10904c:	d8c00015 	stw	r3,0(sp)
  109050:	d9000115 	stw	r4,4(sp)
  109054:	1805883a 	mov	r2,r3
  109058:	1900042e 	bgeu	r3,r4,10906c <__multiply+0x9c>
  10905c:	d8c00117 	ldw	r3,4(sp)
  109060:	10000015 	stw	zero,0(r2)
  109064:	10800104 	addi	r2,r2,4
  109068:	10fffc36 	bltu	r2,r3,10905c <__multiply+0x8c>
  10906c:	b02c90ba 	slli	r22,r22,2
  109070:	882290ba 	slli	r17,r17,2
  109074:	94800504 	addi	r18,r18,20
  109078:	b8800504 	addi	r2,r23,20
  10907c:	9587883a 	add	r3,r18,r22
  109080:	d8800315 	stw	r2,12(sp)
  109084:	d8c00215 	stw	r3,8(sp)
  109088:	1463883a 	add	r17,r2,r17
  10908c:	90c00936 	bltu	r18,r3,1090b4 <__multiply+0xe4>
  109090:	00004606 	br	1091ac <__multiply+0x1dc>
  109094:	8020d43a 	srli	r16,r16,16
  109098:	8000271e 	bne	r16,zero,109138 <__multiply+0x168>
  10909c:	d8800017 	ldw	r2,0(sp)
  1090a0:	94800104 	addi	r18,r18,4
  1090a4:	10800104 	addi	r2,r2,4
  1090a8:	d8800015 	stw	r2,0(sp)
  1090ac:	d8800217 	ldw	r2,8(sp)
  1090b0:	90803e2e 	bgeu	r18,r2,1091ac <__multiply+0x1dc>
  1090b4:	94000017 	ldw	r16,0(r18)
  1090b8:	873fffcc 	andi	fp,r16,65535
  1090bc:	e03ff526 	beq	fp,zero,109094 <__multiply+0xc4>
  1090c0:	dcc00017 	ldw	r19,0(sp)
  1090c4:	dd800317 	ldw	r22,12(sp)
  1090c8:	002b883a 	mov	r21,zero
  1090cc:	b5c00017 	ldw	r23,0(r22)
  1090d0:	9c000017 	ldw	r16,0(r19)
  1090d4:	e00b883a 	mov	r5,fp
  1090d8:	b93fffcc 	andi	r4,r23,65535
  1090dc:	0102e600 	call	102e60 <__mulsi3>
  1090e0:	b808d43a 	srli	r4,r23,16
  1090e4:	80ffffcc 	andi	r3,r16,65535
  1090e8:	10c5883a 	add	r2,r2,r3
  1090ec:	e00b883a 	mov	r5,fp
  1090f0:	156b883a 	add	r21,r2,r21
  1090f4:	8020d43a 	srli	r16,r16,16
  1090f8:	0102e600 	call	102e60 <__mulsi3>
  1090fc:	a808d43a 	srli	r4,r21,16
  109100:	1405883a 	add	r2,r2,r16
  109104:	a8ffffcc 	andi	r3,r21,65535
  109108:	1105883a 	add	r2,r2,r4
  10910c:	1008943a 	slli	r4,r2,16
  109110:	9cc00104 	addi	r19,r19,4
  109114:	b5800104 	addi	r22,r22,4
  109118:	20c6b03a 	or	r3,r4,r3
  10911c:	98ffff15 	stw	r3,-4(r19)
  109120:	102ad43a 	srli	r21,r2,16
  109124:	b47fe936 	bltu	r22,r17,1090cc <__multiply+0xfc>
  109128:	9d400015 	stw	r21,0(r19)
  10912c:	94000017 	ldw	r16,0(r18)
  109130:	8020d43a 	srli	r16,r16,16
  109134:	803fd926 	beq	r16,zero,10909c <__multiply+0xcc>
  109138:	ddc00017 	ldw	r23,0(sp)
  10913c:	dd400317 	ldw	r21,12(sp)
  109140:	0027883a 	mov	r19,zero
  109144:	bd800017 	ldw	r22,0(r23)
  109148:	b039883a 	mov	fp,r22
  10914c:	a900000b 	ldhu	r4,0(r21)
  109150:	e038d43a 	srli	fp,fp,16
  109154:	800b883a 	mov	r5,r16
  109158:	0102e600 	call	102e60 <__mulsi3>
  10915c:	1739883a 	add	fp,r2,fp
  109160:	e4e7883a 	add	r19,fp,r19
  109164:	9804943a 	slli	r2,r19,16
  109168:	b0ffffcc 	andi	r3,r22,65535
  10916c:	bdc00104 	addi	r23,r23,4
  109170:	10c6b03a 	or	r3,r2,r3
  109174:	b8ffff15 	stw	r3,-4(r23)
  109178:	ad400104 	addi	r21,r21,4
  10917c:	a93fff8b 	ldhu	r4,-2(r21)
  109180:	bf000017 	ldw	fp,0(r23)
  109184:	800b883a 	mov	r5,r16
  109188:	0102e600 	call	102e60 <__mulsi3>
  10918c:	980cd43a 	srli	r6,r19,16
  109190:	e0ffffcc 	andi	r3,fp,65535
  109194:	10c7883a 	add	r3,r2,r3
  109198:	19ad883a 	add	r22,r3,r6
  10919c:	b026d43a 	srli	r19,r22,16
  1091a0:	ac7fea36 	bltu	r21,r17,10914c <__multiply+0x17c>
  1091a4:	bd800015 	stw	r22,0(r23)
  1091a8:	003fbc06 	br	10909c <__multiply+0xcc>
  1091ac:	05000a0e 	bge	zero,r20,1091d8 <__multiply+0x208>
  1091b0:	d8c00117 	ldw	r3,4(sp)
  1091b4:	18bfff17 	ldw	r2,-4(r3)
  1091b8:	1cffff04 	addi	r19,r3,-4
  1091bc:	10000326 	beq	r2,zero,1091cc <__multiply+0x1fc>
  1091c0:	00000506 	br	1091d8 <__multiply+0x208>
  1091c4:	98800017 	ldw	r2,0(r19)
  1091c8:	1000031e 	bne	r2,zero,1091d8 <__multiply+0x208>
  1091cc:	a53fffc4 	addi	r20,r20,-1
  1091d0:	9cffff04 	addi	r19,r19,-4
  1091d4:	a03ffb1e 	bne	r20,zero,1091c4 <__multiply+0x1f4>
  1091d8:	d8800417 	ldw	r2,16(sp)
  1091dc:	15000415 	stw	r20,16(r2)
  1091e0:	dfc00e17 	ldw	ra,56(sp)
  1091e4:	df000d17 	ldw	fp,52(sp)
  1091e8:	ddc00c17 	ldw	r23,48(sp)
  1091ec:	dd800b17 	ldw	r22,44(sp)
  1091f0:	dd400a17 	ldw	r21,40(sp)
  1091f4:	dd000917 	ldw	r20,36(sp)
  1091f8:	dcc00817 	ldw	r19,32(sp)
  1091fc:	dc800717 	ldw	r18,28(sp)
  109200:	dc400617 	ldw	r17,24(sp)
  109204:	dc000517 	ldw	r16,20(sp)
  109208:	dec00f04 	addi	sp,sp,60
  10920c:	f800283a 	ret

00109210 <__pow5mult>:
  109210:	defffb04 	addi	sp,sp,-20
  109214:	dcc00315 	stw	r19,12(sp)
  109218:	dc000015 	stw	r16,0(sp)
  10921c:	dfc00415 	stw	ra,16(sp)
  109220:	dc800215 	stw	r18,8(sp)
  109224:	dc400115 	stw	r17,4(sp)
  109228:	308000cc 	andi	r2,r6,3
  10922c:	3021883a 	mov	r16,r6
  109230:	2027883a 	mov	r19,r4
  109234:	10002d1e 	bne	r2,zero,1092ec <__pow5mult+0xdc>
  109238:	2825883a 	mov	r18,r5
  10923c:	8021d0ba 	srai	r16,r16,2
  109240:	80001926 	beq	r16,zero,1092a8 <__pow5mult+0x98>
  109244:	9c401217 	ldw	r17,72(r19)
  109248:	8800061e 	bne	r17,zero,109264 <__pow5mult+0x54>
  10924c:	00002f06 	br	10930c <__pow5mult+0xfc>
  109250:	8021d07a 	srai	r16,r16,1
  109254:	80001426 	beq	r16,zero,1092a8 <__pow5mult+0x98>
  109258:	88800017 	ldw	r2,0(r17)
  10925c:	10001a26 	beq	r2,zero,1092c8 <__pow5mult+0xb8>
  109260:	1023883a 	mov	r17,r2
  109264:	8080004c 	andi	r2,r16,1
  109268:	103ff926 	beq	r2,zero,109250 <__pow5mult+0x40>
  10926c:	880d883a 	mov	r6,r17
  109270:	900b883a 	mov	r5,r18
  109274:	9809883a 	mov	r4,r19
  109278:	0108fd00 	call	108fd0 <__multiply>
  10927c:	90001926 	beq	r18,zero,1092e4 <__pow5mult+0xd4>
  109280:	91000117 	ldw	r4,4(r18)
  109284:	98c01317 	ldw	r3,76(r19)
  109288:	8021d07a 	srai	r16,r16,1
  10928c:	200890ba 	slli	r4,r4,2
  109290:	1907883a 	add	r3,r3,r4
  109294:	19000017 	ldw	r4,0(r3)
  109298:	91000015 	stw	r4,0(r18)
  10929c:	1c800015 	stw	r18,0(r3)
  1092a0:	1025883a 	mov	r18,r2
  1092a4:	803fec1e 	bne	r16,zero,109258 <__pow5mult+0x48>
  1092a8:	9005883a 	mov	r2,r18
  1092ac:	dfc00417 	ldw	ra,16(sp)
  1092b0:	dcc00317 	ldw	r19,12(sp)
  1092b4:	dc800217 	ldw	r18,8(sp)
  1092b8:	dc400117 	ldw	r17,4(sp)
  1092bc:	dc000017 	ldw	r16,0(sp)
  1092c0:	dec00504 	addi	sp,sp,20
  1092c4:	f800283a 	ret
  1092c8:	880d883a 	mov	r6,r17
  1092cc:	880b883a 	mov	r5,r17
  1092d0:	9809883a 	mov	r4,r19
  1092d4:	0108fd00 	call	108fd0 <__multiply>
  1092d8:	88800015 	stw	r2,0(r17)
  1092dc:	10000015 	stw	zero,0(r2)
  1092e0:	003fdf06 	br	109260 <__pow5mult+0x50>
  1092e4:	1025883a 	mov	r18,r2
  1092e8:	003fd906 	br	109250 <__pow5mult+0x40>
  1092ec:	100490ba 	slli	r2,r2,2
  1092f0:	00c00474 	movhi	r3,17
  1092f4:	000f883a 	mov	r7,zero
  1092f8:	10c7883a 	add	r3,r2,r3
  1092fc:	198cd817 	ldw	r6,13152(r3)
  109300:	0108c3c0 	call	108c3c <__multadd>
  109304:	1025883a 	mov	r18,r2
  109308:	003fcc06 	br	10923c <__pow5mult+0x2c>
  10930c:	01400044 	movi	r5,1
  109310:	9809883a 	mov	r4,r19
  109314:	0108b740 	call	108b74 <_Balloc>
  109318:	1023883a 	mov	r17,r2
  10931c:	00809c44 	movi	r2,625
  109320:	88800515 	stw	r2,20(r17)
  109324:	00800044 	movi	r2,1
  109328:	88800415 	stw	r2,16(r17)
  10932c:	9c401215 	stw	r17,72(r19)
  109330:	88000015 	stw	zero,0(r17)
  109334:	003fcb06 	br	109264 <__pow5mult+0x54>

00109338 <__lshift>:
  109338:	defff904 	addi	sp,sp,-28
  10933c:	dcc00315 	stw	r19,12(sp)
  109340:	dc400115 	stw	r17,4(sp)
  109344:	2cc00417 	ldw	r19,16(r5)
  109348:	3023d17a 	srai	r17,r6,5
  10934c:	28800217 	ldw	r2,8(r5)
  109350:	dd400515 	stw	r21,20(sp)
  109354:	8ce7883a 	add	r19,r17,r19
  109358:	dd000415 	stw	r20,16(sp)
  10935c:	dc800215 	stw	r18,8(sp)
  109360:	dc000015 	stw	r16,0(sp)
  109364:	dfc00615 	stw	ra,24(sp)
  109368:	9c000044 	addi	r16,r19,1
  10936c:	2825883a 	mov	r18,r5
  109370:	302b883a 	mov	r21,r6
  109374:	2029883a 	mov	r20,r4
  109378:	29400117 	ldw	r5,4(r5)
  10937c:	1400030e 	bge	r2,r16,10938c <__lshift+0x54>
  109380:	1085883a 	add	r2,r2,r2
  109384:	29400044 	addi	r5,r5,1
  109388:	143ffd16 	blt	r2,r16,109380 <__lshift+0x48>
  10938c:	a009883a 	mov	r4,r20
  109390:	0108b740 	call	108b74 <_Balloc>
  109394:	11000504 	addi	r4,r2,20
  109398:	0440090e 	bge	zero,r17,1093c0 <__lshift+0x88>
  10939c:	8c400144 	addi	r17,r17,5
  1093a0:	882290ba 	slli	r17,r17,2
  1093a4:	2007883a 	mov	r3,r4
  1093a8:	144b883a 	add	r5,r2,r17
  1093ac:	18c00104 	addi	r3,r3,4
  1093b0:	183fff15 	stw	zero,-4(r3)
  1093b4:	28fffd1e 	bne	r5,r3,1093ac <__lshift+0x74>
  1093b8:	8c7ffb04 	addi	r17,r17,-20
  1093bc:	2449883a 	add	r4,r4,r17
  1093c0:	92000417 	ldw	r8,16(r18)
  1093c4:	90c00504 	addi	r3,r18,20
  1093c8:	a98007cc 	andi	r6,r21,31
  1093cc:	401090ba 	slli	r8,r8,2
  1093d0:	1a11883a 	add	r8,r3,r8
  1093d4:	30002126 	beq	r6,zero,10945c <__lshift+0x124>
  1093d8:	02400804 	movi	r9,32
  1093dc:	4993c83a 	sub	r9,r9,r6
  1093e0:	000f883a 	mov	r7,zero
  1093e4:	19400017 	ldw	r5,0(r3)
  1093e8:	21000104 	addi	r4,r4,4
  1093ec:	18c00104 	addi	r3,r3,4
  1093f0:	298a983a 	sll	r5,r5,r6
  1093f4:	29cab03a 	or	r5,r5,r7
  1093f8:	217fff15 	stw	r5,-4(r4)
  1093fc:	197fff17 	ldw	r5,-4(r3)
  109400:	2a4ed83a 	srl	r7,r5,r9
  109404:	1a3ff736 	bltu	r3,r8,1093e4 <__lshift+0xac>
  109408:	21c00015 	stw	r7,0(r4)
  10940c:	38000126 	beq	r7,zero,109414 <__lshift+0xdc>
  109410:	8027883a 	mov	r19,r16
  109414:	14c00415 	stw	r19,16(r2)
  109418:	90000726 	beq	r18,zero,109438 <__lshift+0x100>
  10941c:	91000117 	ldw	r4,4(r18)
  109420:	a0c01317 	ldw	r3,76(r20)
  109424:	200890ba 	slli	r4,r4,2
  109428:	1907883a 	add	r3,r3,r4
  10942c:	19000017 	ldw	r4,0(r3)
  109430:	91000015 	stw	r4,0(r18)
  109434:	1c800015 	stw	r18,0(r3)
  109438:	dfc00617 	ldw	ra,24(sp)
  10943c:	dd400517 	ldw	r21,20(sp)
  109440:	dd000417 	ldw	r20,16(sp)
  109444:	dcc00317 	ldw	r19,12(sp)
  109448:	dc800217 	ldw	r18,8(sp)
  10944c:	dc400117 	ldw	r17,4(sp)
  109450:	dc000017 	ldw	r16,0(sp)
  109454:	dec00704 	addi	sp,sp,28
  109458:	f800283a 	ret
  10945c:	18c00104 	addi	r3,r3,4
  109460:	197fff17 	ldw	r5,-4(r3)
  109464:	21000104 	addi	r4,r4,4
  109468:	217fff15 	stw	r5,-4(r4)
  10946c:	1a3ffb36 	bltu	r3,r8,10945c <__lshift+0x124>
  109470:	003fe806 	br	109414 <__lshift+0xdc>

00109474 <__mcmp>:
  109474:	20800417 	ldw	r2,16(r4)
  109478:	28c00417 	ldw	r3,16(r5)
  10947c:	10c5c83a 	sub	r2,r2,r3
  109480:	10000e1e 	bne	r2,zero,1094bc <__mcmp+0x48>
  109484:	180c90ba 	slli	r6,r3,2
  109488:	21000504 	addi	r4,r4,20
  10948c:	29400504 	addi	r5,r5,20
  109490:	2187883a 	add	r3,r4,r6
  109494:	298b883a 	add	r5,r5,r6
  109498:	00000106 	br	1094a0 <__mcmp+0x2c>
  10949c:	20c0082e 	bgeu	r4,r3,1094c0 <__mcmp+0x4c>
  1094a0:	18ffff04 	addi	r3,r3,-4
  1094a4:	297fff04 	addi	r5,r5,-4
  1094a8:	19c00017 	ldw	r7,0(r3)
  1094ac:	29800017 	ldw	r6,0(r5)
  1094b0:	39bffa26 	beq	r7,r6,10949c <__mcmp+0x28>
  1094b4:	3980032e 	bgeu	r7,r6,1094c4 <__mcmp+0x50>
  1094b8:	00bfffc4 	movi	r2,-1
  1094bc:	f800283a 	ret
  1094c0:	f800283a 	ret
  1094c4:	00800044 	movi	r2,1
  1094c8:	f800283a 	ret

001094cc <__mdiff>:
  1094cc:	defffa04 	addi	sp,sp,-24
  1094d0:	dc800215 	stw	r18,8(sp)
  1094d4:	30c00417 	ldw	r3,16(r6)
  1094d8:	2c800417 	ldw	r18,16(r5)
  1094dc:	dd000415 	stw	r20,16(sp)
  1094e0:	dcc00315 	stw	r19,12(sp)
  1094e4:	dc400115 	stw	r17,4(sp)
  1094e8:	dc000015 	stw	r16,0(sp)
  1094ec:	dfc00515 	stw	ra,20(sp)
  1094f0:	90e5c83a 	sub	r18,r18,r3
  1094f4:	2827883a 	mov	r19,r5
  1094f8:	3029883a 	mov	r20,r6
  1094fc:	2c000504 	addi	r16,r5,20
  109500:	34400504 	addi	r17,r6,20
  109504:	9000131e 	bne	r18,zero,109554 <__mdiff+0x88>
  109508:	180690ba 	slli	r3,r3,2
  10950c:	80c5883a 	add	r2,r16,r3
  109510:	88c7883a 	add	r3,r17,r3
  109514:	00000106 	br	10951c <__mdiff+0x50>
  109518:	8080552e 	bgeu	r16,r2,109670 <__mdiff+0x1a4>
  10951c:	10bfff04 	addi	r2,r2,-4
  109520:	18ffff04 	addi	r3,r3,-4
  109524:	11c00017 	ldw	r7,0(r2)
  109528:	19400017 	ldw	r5,0(r3)
  10952c:	397ffa26 	beq	r7,r5,109518 <__mdiff+0x4c>
  109530:	39400a2e 	bgeu	r7,r5,10955c <__mdiff+0x90>
  109534:	8007883a 	mov	r3,r16
  109538:	9805883a 	mov	r2,r19
  10953c:	8821883a 	mov	r16,r17
  109540:	a027883a 	mov	r19,r20
  109544:	1823883a 	mov	r17,r3
  109548:	1029883a 	mov	r20,r2
  10954c:	04800044 	movi	r18,1
  109550:	00000206 	br	10955c <__mdiff+0x90>
  109554:	903ff716 	blt	r18,zero,109534 <__mdiff+0x68>
  109558:	0025883a 	mov	r18,zero
  10955c:	99400117 	ldw	r5,4(r19)
  109560:	0108b740 	call	108b74 <_Balloc>
  109564:	9a400417 	ldw	r9,16(r19)
  109568:	a2c00417 	ldw	r11,16(r20)
  10956c:	12800504 	addi	r10,r2,20
  109570:	481090ba 	slli	r8,r9,2
  109574:	581690ba 	slli	r11,r11,2
  109578:	14800315 	stw	r18,12(r2)
  10957c:	8211883a 	add	r8,r16,r8
  109580:	8ad7883a 	add	r11,r17,r11
  109584:	0007883a 	mov	r3,zero
  109588:	00000106 	br	109590 <__mdiff+0xc4>
  10958c:	3815883a 	mov	r10,r7
  109590:	81000017 	ldw	r4,0(r16)
  109594:	89800017 	ldw	r6,0(r17)
  109598:	51c00104 	addi	r7,r10,4
  10959c:	217fffcc 	andi	r5,r4,65535
  1095a0:	28cb883a 	add	r5,r5,r3
  1095a4:	30ffffcc 	andi	r3,r6,65535
  1095a8:	28cbc83a 	sub	r5,r5,r3
  1095ac:	300cd43a 	srli	r6,r6,16
  1095b0:	2006d43a 	srli	r3,r4,16
  1095b4:	2809d43a 	srai	r4,r5,16
  1095b8:	297fffcc 	andi	r5,r5,65535
  1095bc:	1987c83a 	sub	r3,r3,r6
  1095c0:	1907883a 	add	r3,r3,r4
  1095c4:	1808943a 	slli	r4,r3,16
  1095c8:	8c400104 	addi	r17,r17,4
  1095cc:	84000104 	addi	r16,r16,4
  1095d0:	214ab03a 	or	r5,r4,r5
  1095d4:	397fff15 	stw	r5,-4(r7)
  1095d8:	1807d43a 	srai	r3,r3,16
  1095dc:	8affeb36 	bltu	r17,r11,10958c <__mdiff+0xc0>
  1095e0:	8200152e 	bgeu	r16,r8,109638 <__mdiff+0x16c>
  1095e4:	3815883a 	mov	r10,r7
  1095e8:	800d883a 	mov	r6,r16
  1095ec:	31000017 	ldw	r4,0(r6)
  1095f0:	52800104 	addi	r10,r10,4
  1095f4:	31800104 	addi	r6,r6,4
  1095f8:	217fffcc 	andi	r5,r4,65535
  1095fc:	28cb883a 	add	r5,r5,r3
  109600:	2817d43a 	srai	r11,r5,16
  109604:	2006d43a 	srli	r3,r4,16
  109608:	293fffcc 	andi	r4,r5,65535
  10960c:	1ac7883a 	add	r3,r3,r11
  109610:	180a943a 	slli	r5,r3,16
  109614:	1807d43a 	srai	r3,r3,16
  109618:	290ab03a 	or	r5,r5,r4
  10961c:	517fff15 	stw	r5,-4(r10)
  109620:	323ff236 	bltu	r6,r8,1095ec <__mdiff+0x120>
  109624:	42bfffc4 	addi	r10,r8,-1
  109628:	5415c83a 	sub	r10,r10,r16
  10962c:	5014d0ba 	srli	r10,r10,2
  109630:	501490ba 	slli	r10,r10,2
  109634:	3a95883a 	add	r10,r7,r10
  109638:	2800041e 	bne	r5,zero,10964c <__mdiff+0x180>
  10963c:	52bfff04 	addi	r10,r10,-4
  109640:	50c00017 	ldw	r3,0(r10)
  109644:	4a7fffc4 	addi	r9,r9,-1
  109648:	183ffc26 	beq	r3,zero,10963c <__mdiff+0x170>
  10964c:	12400415 	stw	r9,16(r2)
  109650:	dfc00517 	ldw	ra,20(sp)
  109654:	dd000417 	ldw	r20,16(sp)
  109658:	dcc00317 	ldw	r19,12(sp)
  10965c:	dc800217 	ldw	r18,8(sp)
  109660:	dc400117 	ldw	r17,4(sp)
  109664:	dc000017 	ldw	r16,0(sp)
  109668:	dec00604 	addi	sp,sp,24
  10966c:	f800283a 	ret
  109670:	000b883a 	mov	r5,zero
  109674:	0108b740 	call	108b74 <_Balloc>
  109678:	00c00044 	movi	r3,1
  10967c:	10c00415 	stw	r3,16(r2)
  109680:	10000515 	stw	zero,20(r2)
  109684:	003ff206 	br	109650 <__mdiff+0x184>

00109688 <__ulp>:
  109688:	295ffc2c 	andhi	r5,r5,32752
  10968c:	00ff3034 	movhi	r3,64704
  109690:	28c7883a 	add	r3,r5,r3
  109694:	00c0020e 	bge	zero,r3,1096a0 <__ulp+0x18>
  109698:	0005883a 	mov	r2,zero
  10969c:	f800283a 	ret
  1096a0:	00c7c83a 	sub	r3,zero,r3
  1096a4:	1807d53a 	srai	r3,r3,20
  1096a8:	18800508 	cmpgei	r2,r3,20
  1096ac:	1000041e 	bne	r2,zero,1096c0 <__ulp+0x38>
  1096b0:	01400234 	movhi	r5,8
  1096b4:	28c7d83a 	sra	r3,r5,r3
  1096b8:	0005883a 	mov	r2,zero
  1096bc:	f800283a 	ret
  1096c0:	193ffb04 	addi	r4,r3,-20
  1096c4:	208007c8 	cmpgei	r2,r4,31
  1096c8:	0007883a 	mov	r3,zero
  1096cc:	1000031e 	bne	r2,zero,1096dc <__ulp+0x54>
  1096d0:	00a00034 	movhi	r2,32768
  1096d4:	1104d83a 	srl	r2,r2,r4
  1096d8:	f800283a 	ret
  1096dc:	00800044 	movi	r2,1
  1096e0:	f800283a 	ret

001096e4 <__b2d>:
  1096e4:	defffa04 	addi	sp,sp,-24
  1096e8:	dc000015 	stw	r16,0(sp)
  1096ec:	24000417 	ldw	r16,16(r4)
  1096f0:	dc800215 	stw	r18,8(sp)
  1096f4:	24800504 	addi	r18,r4,20
  1096f8:	802090ba 	slli	r16,r16,2
  1096fc:	dc400115 	stw	r17,4(sp)
  109700:	dd000415 	stw	r20,16(sp)
  109704:	9421883a 	add	r16,r18,r16
  109708:	847fff17 	ldw	r17,-4(r16)
  10970c:	dcc00315 	stw	r19,12(sp)
  109710:	2829883a 	mov	r20,r5
  109714:	8809883a 	mov	r4,r17
  109718:	dfc00515 	stw	ra,20(sp)
  10971c:	0108e880 	call	108e88 <__hi0bits>
  109720:	01000804 	movi	r4,32
  109724:	2087c83a 	sub	r3,r4,r2
  109728:	a0c00015 	stw	r3,0(r20)
  10972c:	10c002c8 	cmpgei	r3,r2,11
  109730:	84ffff04 	addi	r19,r16,-4
  109734:	18001f26 	beq	r3,zero,1097b4 <__b2d+0xd0>
  109738:	10fffd44 	addi	r3,r2,-11
  10973c:	94c00e2e 	bgeu	r18,r19,109778 <__b2d+0x94>
  109740:	80bffe17 	ldw	r2,-8(r16)
  109744:	18001226 	beq	r3,zero,109790 <__b2d+0xac>
  109748:	20c9c83a 	sub	r4,r4,r3
  10974c:	110cd83a 	srl	r6,r2,r4
  109750:	88e2983a 	sll	r17,r17,r3
  109754:	10c4983a 	sll	r2,r2,r3
  109758:	817ffe04 	addi	r5,r16,-8
  10975c:	8986b03a 	or	r3,r17,r6
  109760:	18cffc34 	orhi	r3,r3,16368
  109764:	91400b2e 	bgeu	r18,r5,109794 <__b2d+0xb0>
  109768:	817ffd17 	ldw	r5,-12(r16)
  10976c:	2908d83a 	srl	r4,r5,r4
  109770:	1104b03a 	or	r2,r2,r4
  109774:	00000706 	br	109794 <__b2d+0xb0>
  109778:	18000426 	beq	r3,zero,10978c <__b2d+0xa8>
  10977c:	88c6983a 	sll	r3,r17,r3
  109780:	0005883a 	mov	r2,zero
  109784:	18cffc34 	orhi	r3,r3,16368
  109788:	00000206 	br	109794 <__b2d+0xb0>
  10978c:	0005883a 	mov	r2,zero
  109790:	88cffc34 	orhi	r3,r17,16368
  109794:	dfc00517 	ldw	ra,20(sp)
  109798:	dd000417 	ldw	r20,16(sp)
  10979c:	dcc00317 	ldw	r19,12(sp)
  1097a0:	dc800217 	ldw	r18,8(sp)
  1097a4:	dc400117 	ldw	r17,4(sp)
  1097a8:	dc000017 	ldw	r16,0(sp)
  1097ac:	dec00604 	addi	sp,sp,24
  1097b0:	f800283a 	ret
  1097b4:	014002c4 	movi	r5,11
  1097b8:	2889c83a 	sub	r4,r5,r2
  1097bc:	8906d83a 	srl	r3,r17,r4
  1097c0:	18cffc34 	orhi	r3,r3,16368
  1097c4:	94c00536 	bltu	r18,r19,1097dc <__b2d+0xf8>
  1097c8:	000b883a 	mov	r5,zero
  1097cc:	10800544 	addi	r2,r2,21
  1097d0:	8884983a 	sll	r2,r17,r2
  1097d4:	1144b03a 	or	r2,r2,r5
  1097d8:	003fee06 	br	109794 <__b2d+0xb0>
  1097dc:	817ffe17 	ldw	r5,-8(r16)
  1097e0:	290ad83a 	srl	r5,r5,r4
  1097e4:	003ff906 	br	1097cc <__b2d+0xe8>

001097e8 <__d2b>:
  1097e8:	defff804 	addi	sp,sp,-32
  1097ec:	dc400315 	stw	r17,12(sp)
  1097f0:	3023883a 	mov	r17,r6
  1097f4:	dd000615 	stw	r20,24(sp)
  1097f8:	dc000215 	stw	r16,8(sp)
  1097fc:	2829883a 	mov	r20,r5
  109800:	8820d53a 	srli	r16,r17,20
  109804:	01400044 	movi	r5,1
  109808:	dcc00515 	stw	r19,20(sp)
  10980c:	dc800415 	stw	r18,16(sp)
  109810:	dfc00715 	stw	ra,28(sp)
  109814:	3825883a 	mov	r18,r7
  109818:	0108b740 	call	108b74 <_Balloc>
  10981c:	01800434 	movhi	r6,16
  109820:	31bfffc4 	addi	r6,r6,-1
  109824:	8401ffcc 	andi	r16,r16,2047
  109828:	1027883a 	mov	r19,r2
  10982c:	89a2703a 	and	r17,r17,r6
  109830:	80000126 	beq	r16,zero,109838 <__d2b+0x50>
  109834:	8c400434 	orhi	r17,r17,16
  109838:	dc400115 	stw	r17,4(sp)
  10983c:	a0002826 	beq	r20,zero,1098e0 <__d2b+0xf8>
  109840:	d809883a 	mov	r4,sp
  109844:	dd000015 	stw	r20,0(sp)
  109848:	0108eec0 	call	108eec <__lo0bits>
  10984c:	d8c00117 	ldw	r3,4(sp)
  109850:	1000171e 	bne	r2,zero,1098b0 <__d2b+0xc8>
  109854:	d9000017 	ldw	r4,0(sp)
  109858:	98c00615 	stw	r3,24(r19)
  10985c:	99000515 	stw	r4,20(r19)
  109860:	18001d1e 	bne	r3,zero,1098d8 <__d2b+0xf0>
  109864:	04400044 	movi	r17,1
  109868:	9c400415 	stw	r17,16(r19)
  10986c:	80002526 	beq	r16,zero,109904 <__d2b+0x11c>
  109870:	00c00d44 	movi	r3,53
  109874:	843ef344 	addi	r16,r16,-1075
  109878:	80a1883a 	add	r16,r16,r2
  10987c:	1885c83a 	sub	r2,r3,r2
  109880:	d8c00817 	ldw	r3,32(sp)
  109884:	94000015 	stw	r16,0(r18)
  109888:	18800015 	stw	r2,0(r3)
  10988c:	9805883a 	mov	r2,r19
  109890:	dfc00717 	ldw	ra,28(sp)
  109894:	dd000617 	ldw	r20,24(sp)
  109898:	dcc00517 	ldw	r19,20(sp)
  10989c:	dc800417 	ldw	r18,16(sp)
  1098a0:	dc400317 	ldw	r17,12(sp)
  1098a4:	dc000217 	ldw	r16,8(sp)
  1098a8:	dec00804 	addi	sp,sp,32
  1098ac:	f800283a 	ret
  1098b0:	01000804 	movi	r4,32
  1098b4:	2089c83a 	sub	r4,r4,r2
  1098b8:	1908983a 	sll	r4,r3,r4
  1098bc:	d9400017 	ldw	r5,0(sp)
  1098c0:	1886d83a 	srl	r3,r3,r2
  1098c4:	2148b03a 	or	r4,r4,r5
  1098c8:	99000515 	stw	r4,20(r19)
  1098cc:	d8c00115 	stw	r3,4(sp)
  1098d0:	98c00615 	stw	r3,24(r19)
  1098d4:	183fe326 	beq	r3,zero,109864 <__d2b+0x7c>
  1098d8:	04400084 	movi	r17,2
  1098dc:	003fe206 	br	109868 <__d2b+0x80>
  1098e0:	d9000104 	addi	r4,sp,4
  1098e4:	0108eec0 	call	108eec <__lo0bits>
  1098e8:	00c00044 	movi	r3,1
  1098ec:	98c00415 	stw	r3,16(r19)
  1098f0:	d8c00117 	ldw	r3,4(sp)
  1098f4:	10800804 	addi	r2,r2,32
  1098f8:	04400044 	movi	r17,1
  1098fc:	98c00515 	stw	r3,20(r19)
  109900:	803fdb1e 	bne	r16,zero,109870 <__d2b+0x88>
  109904:	880690ba 	slli	r3,r17,2
  109908:	10bef384 	addi	r2,r2,-1074
  10990c:	8822917a 	slli	r17,r17,5
  109910:	98c7883a 	add	r3,r19,r3
  109914:	19000417 	ldw	r4,16(r3)
  109918:	90800015 	stw	r2,0(r18)
  10991c:	0108e880 	call	108e88 <__hi0bits>
  109920:	88a3c83a 	sub	r17,r17,r2
  109924:	d8800817 	ldw	r2,32(sp)
  109928:	14400015 	stw	r17,0(r2)
  10992c:	003fd706 	br	10988c <__d2b+0xa4>

00109930 <__ratio>:
  109930:	defff904 	addi	sp,sp,-28
  109934:	dc400315 	stw	r17,12(sp)
  109938:	2823883a 	mov	r17,r5
  10993c:	d80b883a 	mov	r5,sp
  109940:	dfc00615 	stw	ra,24(sp)
  109944:	dcc00515 	stw	r19,20(sp)
  109948:	dc800415 	stw	r18,16(sp)
  10994c:	2027883a 	mov	r19,r4
  109950:	dc000215 	stw	r16,8(sp)
  109954:	01096e40 	call	1096e4 <__b2d>
  109958:	d9400104 	addi	r5,sp,4
  10995c:	8809883a 	mov	r4,r17
  109960:	1025883a 	mov	r18,r2
  109964:	1821883a 	mov	r16,r3
  109968:	01096e40 	call	1096e4 <__b2d>
  10996c:	89400417 	ldw	r5,16(r17)
  109970:	99000417 	ldw	r4,16(r19)
  109974:	d9800117 	ldw	r6,4(sp)
  109978:	2149c83a 	sub	r4,r4,r5
  10997c:	d9400017 	ldw	r5,0(sp)
  109980:	2008917a 	slli	r4,r4,5
  109984:	298bc83a 	sub	r5,r5,r6
  109988:	2149883a 	add	r4,r4,r5
  10998c:	01000e0e 	bge	zero,r4,1099c8 <__ratio+0x98>
  109990:	2008953a 	slli	r4,r4,20
  109994:	2421883a 	add	r16,r4,r16
  109998:	100d883a 	mov	r6,r2
  10999c:	180f883a 	mov	r7,r3
  1099a0:	9009883a 	mov	r4,r18
  1099a4:	800b883a 	mov	r5,r16
  1099a8:	010d97c0 	call	10d97c <__divdf3>
  1099ac:	dfc00617 	ldw	ra,24(sp)
  1099b0:	dcc00517 	ldw	r19,20(sp)
  1099b4:	dc800417 	ldw	r18,16(sp)
  1099b8:	dc400317 	ldw	r17,12(sp)
  1099bc:	dc000217 	ldw	r16,8(sp)
  1099c0:	dec00704 	addi	sp,sp,28
  1099c4:	f800283a 	ret
  1099c8:	2008953a 	slli	r4,r4,20
  1099cc:	1907c83a 	sub	r3,r3,r4
  1099d0:	003ff106 	br	109998 <__ratio+0x68>

001099d4 <_mprec_log10>:
  1099d4:	defffe04 	addi	sp,sp,-8
  1099d8:	dc000015 	stw	r16,0(sp)
  1099dc:	dfc00115 	stw	ra,4(sp)
  1099e0:	20800608 	cmpgei	r2,r4,24
  1099e4:	2021883a 	mov	r16,r4
  1099e8:	10000d26 	beq	r2,zero,109a20 <_mprec_log10+0x4c>
  1099ec:	0005883a 	mov	r2,zero
  1099f0:	00cffc34 	movhi	r3,16368
  1099f4:	843fffc4 	addi	r16,r16,-1
  1099f8:	000d883a 	mov	r6,zero
  1099fc:	01d00934 	movhi	r7,16420
  109a00:	1009883a 	mov	r4,r2
  109a04:	180b883a 	mov	r5,r3
  109a08:	010e5400 	call	10e540 <__muldf3>
  109a0c:	803ff91e 	bne	r16,zero,1099f4 <_mprec_log10+0x20>
  109a10:	dfc00117 	ldw	ra,4(sp)
  109a14:	dc000017 	ldw	r16,0(sp)
  109a18:	dec00204 	addi	sp,sp,8
  109a1c:	f800283a 	ret
  109a20:	202090fa 	slli	r16,r4,3
  109a24:	00800474 	movhi	r2,17
  109a28:	108cf004 	addi	r2,r2,13248
  109a2c:	1421883a 	add	r16,r2,r16
  109a30:	80800017 	ldw	r2,0(r16)
  109a34:	80c00117 	ldw	r3,4(r16)
  109a38:	dfc00117 	ldw	ra,4(sp)
  109a3c:	dc000017 	ldw	r16,0(sp)
  109a40:	dec00204 	addi	sp,sp,8
  109a44:	f800283a 	ret

00109a48 <__copybits>:
  109a48:	29ffffc4 	addi	r7,r5,-1
  109a4c:	380fd17a 	srai	r7,r7,5
  109a50:	31400417 	ldw	r5,16(r6)
  109a54:	30800504 	addi	r2,r6,20
  109a58:	39c00044 	addi	r7,r7,1
  109a5c:	280a90ba 	slli	r5,r5,2
  109a60:	380e90ba 	slli	r7,r7,2
  109a64:	114b883a 	add	r5,r2,r5
  109a68:	21cf883a 	add	r7,r4,r7
  109a6c:	11400c2e 	bgeu	r2,r5,109aa0 <__copybits+0x58>
  109a70:	2007883a 	mov	r3,r4
  109a74:	10800104 	addi	r2,r2,4
  109a78:	123fff17 	ldw	r8,-4(r2)
  109a7c:	18c00104 	addi	r3,r3,4
  109a80:	1a3fff15 	stw	r8,-4(r3)
  109a84:	117ffb36 	bltu	r2,r5,109a74 <__copybits+0x2c>
  109a88:	2985c83a 	sub	r2,r5,r6
  109a8c:	10bffac4 	addi	r2,r2,-21
  109a90:	1004d0ba 	srli	r2,r2,2
  109a94:	10800044 	addi	r2,r2,1
  109a98:	100490ba 	slli	r2,r2,2
  109a9c:	2089883a 	add	r4,r4,r2
  109aa0:	21c0032e 	bgeu	r4,r7,109ab0 <__copybits+0x68>
  109aa4:	21000104 	addi	r4,r4,4
  109aa8:	203fff15 	stw	zero,-4(r4)
  109aac:	21fffd36 	bltu	r4,r7,109aa4 <__copybits+0x5c>
  109ab0:	f800283a 	ret

00109ab4 <__any_on>:
  109ab4:	20800417 	ldw	r2,16(r4)
  109ab8:	280dd17a 	srai	r6,r5,5
  109abc:	21000504 	addi	r4,r4,20
  109ac0:	11800c0e 	bge	r2,r6,109af4 <__any_on+0x40>
  109ac4:	100690ba 	slli	r3,r2,2
  109ac8:	20c7883a 	add	r3,r4,r3
  109acc:	20c0142e 	bgeu	r4,r3,109b20 <__any_on+0x6c>
  109ad0:	18bfff17 	ldw	r2,-4(r3)
  109ad4:	18ffff04 	addi	r3,r3,-4
  109ad8:	1000041e 	bne	r2,zero,109aec <__any_on+0x38>
  109adc:	20c00f2e 	bgeu	r4,r3,109b1c <__any_on+0x68>
  109ae0:	18ffff04 	addi	r3,r3,-4
  109ae4:	19400017 	ldw	r5,0(r3)
  109ae8:	283ffc26 	beq	r5,zero,109adc <__any_on+0x28>
  109aec:	00800044 	movi	r2,1
  109af0:	f800283a 	ret
  109af4:	300690ba 	slli	r3,r6,2
  109af8:	20c7883a 	add	r3,r4,r3
  109afc:	30bff30e 	bge	r6,r2,109acc <__any_on+0x18>
  109b00:	294007cc 	andi	r5,r5,31
  109b04:	283ff126 	beq	r5,zero,109acc <__any_on+0x18>
  109b08:	19800017 	ldw	r6,0(r3)
  109b0c:	3144d83a 	srl	r2,r6,r5
  109b10:	114a983a 	sll	r5,r2,r5
  109b14:	317ff51e 	bne	r6,r5,109aec <__any_on+0x38>
  109b18:	003fec06 	br	109acc <__any_on+0x18>
  109b1c:	f800283a 	ret
  109b20:	0005883a 	mov	r2,zero
  109b24:	f800283a 	ret

00109b28 <_putc_r>:
  109b28:	defffc04 	addi	sp,sp,-16
  109b2c:	dc000215 	stw	r16,8(sp)
  109b30:	dfc00315 	stw	ra,12(sp)
  109b34:	2021883a 	mov	r16,r4
  109b38:	20000226 	beq	r4,zero,109b44 <_putc_r+0x1c>
  109b3c:	20800e17 	ldw	r2,56(r4)
  109b40:	10000e26 	beq	r2,zero,109b7c <_putc_r+0x54>
  109b44:	30800217 	ldw	r2,8(r6)
  109b48:	10bfffc4 	addi	r2,r2,-1
  109b4c:	30800215 	stw	r2,8(r6)
  109b50:	10001316 	blt	r2,zero,109ba0 <_putc_r+0x78>
  109b54:	30800017 	ldw	r2,0(r6)
  109b58:	11400005 	stb	r5,0(r2)
  109b5c:	30800017 	ldw	r2,0(r6)
  109b60:	10c00044 	addi	r3,r2,1
  109b64:	30c00015 	stw	r3,0(r6)
  109b68:	10800003 	ldbu	r2,0(r2)
  109b6c:	dfc00317 	ldw	ra,12(sp)
  109b70:	dc000217 	ldw	r16,8(sp)
  109b74:	dec00404 	addi	sp,sp,16
  109b78:	f800283a 	ret
  109b7c:	d9800115 	stw	r6,4(sp)
  109b80:	d9400015 	stw	r5,0(sp)
  109b84:	01073fc0 	call	1073fc <__sinit>
  109b88:	d9800117 	ldw	r6,4(sp)
  109b8c:	d9400017 	ldw	r5,0(sp)
  109b90:	30800217 	ldw	r2,8(r6)
  109b94:	10bfffc4 	addi	r2,r2,-1
  109b98:	30800215 	stw	r2,8(r6)
  109b9c:	103fed0e 	bge	r2,zero,109b54 <_putc_r+0x2c>
  109ba0:	30c00617 	ldw	r3,24(r6)
  109ba4:	10c00e16 	blt	r2,r3,109be0 <_putc_r+0xb8>
  109ba8:	30800017 	ldw	r2,0(r6)
  109bac:	11400005 	stb	r5,0(r2)
  109bb0:	30c00017 	ldw	r3,0(r6)
  109bb4:	18800003 	ldbu	r2,0(r3)
  109bb8:	108002a0 	cmpeqi	r2,r2,10
  109bbc:	1000071e 	bne	r2,zero,109bdc <_putc_r+0xb4>
  109bc0:	18800044 	addi	r2,r3,1
  109bc4:	30800015 	stw	r2,0(r6)
  109bc8:	18800003 	ldbu	r2,0(r3)
  109bcc:	dfc00317 	ldw	ra,12(sp)
  109bd0:	dc000217 	ldw	r16,8(sp)
  109bd4:	dec00404 	addi	sp,sp,16
  109bd8:	f800283a 	ret
  109bdc:	01400284 	movi	r5,10
  109be0:	8009883a 	mov	r4,r16
  109be4:	dfc00317 	ldw	ra,12(sp)
  109be8:	dc000217 	ldw	r16,8(sp)
  109bec:	dec00404 	addi	sp,sp,16
  109bf0:	010b9b81 	jmpi	10b9b8 <__swbuf_r>

00109bf4 <putc>:
  109bf4:	defffc04 	addi	sp,sp,-16
  109bf8:	00800074 	movhi	r2,1
  109bfc:	dc000115 	stw	r16,4(sp)
  109c00:	14073c17 	ldw	r16,7408(r2)
  109c04:	dc400215 	stw	r17,8(sp)
  109c08:	dfc00315 	stw	ra,12(sp)
  109c0c:	2023883a 	mov	r17,r4
  109c10:	80000226 	beq	r16,zero,109c1c <putc+0x28>
  109c14:	80800e17 	ldw	r2,56(r16)
  109c18:	10000f26 	beq	r2,zero,109c58 <putc+0x64>
  109c1c:	28800217 	ldw	r2,8(r5)
  109c20:	10bfffc4 	addi	r2,r2,-1
  109c24:	28800215 	stw	r2,8(r5)
  109c28:	10001316 	blt	r2,zero,109c78 <putc+0x84>
  109c2c:	28800017 	ldw	r2,0(r5)
  109c30:	14400005 	stb	r17,0(r2)
  109c34:	28800017 	ldw	r2,0(r5)
  109c38:	10c00044 	addi	r3,r2,1
  109c3c:	28c00015 	stw	r3,0(r5)
  109c40:	10800003 	ldbu	r2,0(r2)
  109c44:	dfc00317 	ldw	ra,12(sp)
  109c48:	dc400217 	ldw	r17,8(sp)
  109c4c:	dc000117 	ldw	r16,4(sp)
  109c50:	dec00404 	addi	sp,sp,16
  109c54:	f800283a 	ret
  109c58:	8009883a 	mov	r4,r16
  109c5c:	d9400015 	stw	r5,0(sp)
  109c60:	01073fc0 	call	1073fc <__sinit>
  109c64:	d9400017 	ldw	r5,0(sp)
  109c68:	28800217 	ldw	r2,8(r5)
  109c6c:	10bfffc4 	addi	r2,r2,-1
  109c70:	28800215 	stw	r2,8(r5)
  109c74:	103fed0e 	bge	r2,zero,109c2c <putc+0x38>
  109c78:	28c00617 	ldw	r3,24(r5)
  109c7c:	10c00a16 	blt	r2,r3,109ca8 <putc+0xb4>
  109c80:	28800017 	ldw	r2,0(r5)
  109c84:	14400005 	stb	r17,0(r2)
  109c88:	28c00017 	ldw	r3,0(r5)
  109c8c:	18800003 	ldbu	r2,0(r3)
  109c90:	108002a0 	cmpeqi	r2,r2,10
  109c94:	10000c1e 	bne	r2,zero,109cc8 <putc+0xd4>
  109c98:	18800044 	addi	r2,r3,1
  109c9c:	28800015 	stw	r2,0(r5)
  109ca0:	18800003 	ldbu	r2,0(r3)
  109ca4:	003fe706 	br	109c44 <putc+0x50>
  109ca8:	280d883a 	mov	r6,r5
  109cac:	880b883a 	mov	r5,r17
  109cb0:	8009883a 	mov	r4,r16
  109cb4:	dfc00317 	ldw	ra,12(sp)
  109cb8:	dc400217 	ldw	r17,8(sp)
  109cbc:	dc000117 	ldw	r16,4(sp)
  109cc0:	dec00404 	addi	sp,sp,16
  109cc4:	010b9b81 	jmpi	10b9b8 <__swbuf_r>
  109cc8:	280d883a 	mov	r6,r5
  109ccc:	01400284 	movi	r5,10
  109cd0:	003ff706 	br	109cb0 <putc+0xbc>

00109cd4 <_realloc_r>:
  109cd4:	defff504 	addi	sp,sp,-44
  109cd8:	dcc00415 	stw	r19,16(sp)
  109cdc:	dfc00a15 	stw	ra,40(sp)
  109ce0:	df000915 	stw	fp,36(sp)
  109ce4:	ddc00815 	stw	r23,32(sp)
  109ce8:	dd800715 	stw	r22,28(sp)
  109cec:	dd400615 	stw	r21,24(sp)
  109cf0:	dd000515 	stw	r20,20(sp)
  109cf4:	dc800315 	stw	r18,12(sp)
  109cf8:	dc400215 	stw	r17,8(sp)
  109cfc:	dc000115 	stw	r16,4(sp)
  109d00:	3027883a 	mov	r19,r6
  109d04:	28008b26 	beq	r5,zero,109f34 <_realloc_r+0x260>
  109d08:	282d883a 	mov	r22,r5
  109d0c:	202b883a 	mov	r21,r4
  109d10:	9c0002c4 	addi	r16,r19,11
  109d14:	010fdc80 	call	10fdc8 <__malloc_lock>
  109d18:	808005f0 	cmpltui	r2,r16,23
  109d1c:	1000521e 	bne	r2,zero,109e68 <_realloc_r+0x194>
  109d20:	017ffe04 	movi	r5,-8
  109d24:	8160703a 	and	r16,r16,r5
  109d28:	8007883a 	mov	r3,r16
  109d2c:	80005116 	blt	r16,zero,109e74 <_realloc_r+0x1a0>
  109d30:	84c05036 	bltu	r16,r19,109e74 <_realloc_r+0x1a0>
  109d34:	b0bfff17 	ldw	r2,-4(r22)
  109d38:	017fff04 	movi	r5,-4
  109d3c:	b4bffe04 	addi	r18,r22,-8
  109d40:	1162703a 	and	r17,r2,r5
  109d44:	9469883a 	add	r20,r18,r17
  109d48:	88c0390e 	bge	r17,r3,109e30 <_realloc_r+0x15c>
  109d4c:	07000074 	movhi	fp,1
  109d50:	e7011504 	addi	fp,fp,1108
  109d54:	e2000217 	ldw	r8,8(fp)
  109d58:	a1000117 	ldw	r4,4(r20)
  109d5c:	45008e26 	beq	r8,r20,109f98 <_realloc_r+0x2c4>
  109d60:	01bfff84 	movi	r6,-2
  109d64:	218c703a 	and	r6,r4,r6
  109d68:	a18d883a 	add	r6,r20,r6
  109d6c:	31800117 	ldw	r6,4(r6)
  109d70:	3180004c 	andi	r6,r6,1
  109d74:	30004f1e 	bne	r6,zero,109eb4 <_realloc_r+0x1e0>
  109d78:	2148703a 	and	r4,r4,r5
  109d7c:	890b883a 	add	r5,r17,r4
  109d80:	28c0cb0e 	bge	r5,r3,10a0b0 <_realloc_r+0x3dc>
  109d84:	1080004c 	andi	r2,r2,1
  109d88:	10004c1e 	bne	r2,zero,109ebc <_realloc_r+0x1e8>
  109d8c:	b1fffe17 	ldw	r7,-8(r22)
  109d90:	00bfff04 	movi	r2,-4
  109d94:	91cfc83a 	sub	r7,r18,r7
  109d98:	39400117 	ldw	r5,4(r7)
  109d9c:	288a703a 	and	r5,r5,r2
  109da0:	a0000426 	beq	r20,zero,109db4 <_realloc_r+0xe0>
  109da4:	896f883a 	add	r23,r17,r5
  109da8:	b92f883a 	add	r23,r23,r4
  109dac:	4500cb26 	beq	r8,r20,10a0dc <_realloc_r+0x408>
  109db0:	b8c0930e 	bge	r23,r3,10a000 <_realloc_r+0x32c>
  109db4:	38004126 	beq	r7,zero,109ebc <_realloc_r+0x1e8>
  109db8:	896f883a 	add	r23,r17,r5
  109dbc:	b8c03f16 	blt	r23,r3,109ebc <_realloc_r+0x1e8>
  109dc0:	38c00217 	ldw	r3,8(r7)
  109dc4:	38800317 	ldw	r2,12(r7)
  109dc8:	89bfff04 	addi	r6,r17,-4
  109dcc:	31000968 	cmpgeui	r4,r6,37
  109dd0:	18800315 	stw	r2,12(r3)
  109dd4:	10c00215 	stw	r3,8(r2)
  109dd8:	3de9883a 	add	r20,r7,r23
  109ddc:	38c00204 	addi	r3,r7,8
  109de0:	2000f81e 	bne	r4,zero,10a1c4 <_realloc_r+0x4f0>
  109de4:	30800530 	cmpltui	r2,r6,20
  109de8:	b1000017 	ldw	r4,0(r22)
  109dec:	1000eb1e 	bne	r2,zero,10a19c <_realloc_r+0x4c8>
  109df0:	39000215 	stw	r4,8(r7)
  109df4:	b1000117 	ldw	r4,4(r22)
  109df8:	30800728 	cmpgeui	r2,r6,28
  109dfc:	39000315 	stw	r4,12(r7)
  109e00:	1001041e 	bne	r2,zero,10a214 <_realloc_r+0x540>
  109e04:	b1000217 	ldw	r4,8(r22)
  109e08:	38800404 	addi	r2,r7,16
  109e0c:	b5800204 	addi	r22,r22,8
  109e10:	11000015 	stw	r4,0(r2)
  109e14:	b1000117 	ldw	r4,4(r22)
  109e18:	b823883a 	mov	r17,r23
  109e1c:	3825883a 	mov	r18,r7
  109e20:	11000115 	stw	r4,4(r2)
  109e24:	b1000217 	ldw	r4,8(r22)
  109e28:	182d883a 	mov	r22,r3
  109e2c:	11000215 	stw	r4,8(r2)
  109e30:	91800117 	ldw	r6,4(r18)
  109e34:	8c05c83a 	sub	r2,r17,r16
  109e38:	10c00430 	cmpltui	r3,r2,16
  109e3c:	3180004c 	andi	r6,r6,1
  109e40:	18004926 	beq	r3,zero,109f68 <_realloc_r+0x294>
  109e44:	898cb03a 	or	r6,r17,r6
  109e48:	91800115 	stw	r6,4(r18)
  109e4c:	a0800117 	ldw	r2,4(r20)
  109e50:	10800054 	ori	r2,r2,1
  109e54:	a0800115 	stw	r2,4(r20)
  109e58:	a809883a 	mov	r4,r21
  109e5c:	010fdec0 	call	10fdec <__malloc_unlock>
  109e60:	b027883a 	mov	r19,r22
  109e64:	00000606 	br	109e80 <_realloc_r+0x1ac>
  109e68:	04000404 	movi	r16,16
  109e6c:	00c00404 	movi	r3,16
  109e70:	84ffb02e 	bgeu	r16,r19,109d34 <_realloc_r+0x60>
  109e74:	00800304 	movi	r2,12
  109e78:	a8800015 	stw	r2,0(r21)
  109e7c:	0027883a 	mov	r19,zero
  109e80:	9805883a 	mov	r2,r19
  109e84:	dfc00a17 	ldw	ra,40(sp)
  109e88:	df000917 	ldw	fp,36(sp)
  109e8c:	ddc00817 	ldw	r23,32(sp)
  109e90:	dd800717 	ldw	r22,28(sp)
  109e94:	dd400617 	ldw	r21,24(sp)
  109e98:	dd000517 	ldw	r20,20(sp)
  109e9c:	dcc00417 	ldw	r19,16(sp)
  109ea0:	dc800317 	ldw	r18,12(sp)
  109ea4:	dc400217 	ldw	r17,8(sp)
  109ea8:	dc000117 	ldw	r16,4(sp)
  109eac:	dec00b04 	addi	sp,sp,44
  109eb0:	f800283a 	ret
  109eb4:	1080004c 	andi	r2,r2,1
  109eb8:	10007826 	beq	r2,zero,10a09c <_realloc_r+0x3c8>
  109ebc:	980b883a 	mov	r5,r19
  109ec0:	a809883a 	mov	r4,r21
  109ec4:	010807c0 	call	10807c <_malloc_r>
  109ec8:	1027883a 	mov	r19,r2
  109ecc:	10001626 	beq	r2,zero,109f28 <_realloc_r+0x254>
  109ed0:	b0bfff17 	ldw	r2,-4(r22)
  109ed4:	013fff84 	movi	r4,-2
  109ed8:	98fffe04 	addi	r3,r19,-8
  109edc:	1104703a 	and	r2,r2,r4
  109ee0:	9085883a 	add	r2,r18,r2
  109ee4:	10c06726 	beq	r2,r3,10a084 <_realloc_r+0x3b0>
  109ee8:	89bfff04 	addi	r6,r17,-4
  109eec:	30800968 	cmpgeui	r2,r6,37
  109ef0:	1000761e 	bne	r2,zero,10a0cc <_realloc_r+0x3f8>
  109ef4:	30800530 	cmpltui	r2,r6,20
  109ef8:	b1000017 	ldw	r4,0(r22)
  109efc:	10003726 	beq	r2,zero,109fdc <_realloc_r+0x308>
  109f00:	9805883a 	mov	r2,r19
  109f04:	b007883a 	mov	r3,r22
  109f08:	11000015 	stw	r4,0(r2)
  109f0c:	19000117 	ldw	r4,4(r3)
  109f10:	11000115 	stw	r4,4(r2)
  109f14:	18c00217 	ldw	r3,8(r3)
  109f18:	10c00215 	stw	r3,8(r2)
  109f1c:	b00b883a 	mov	r5,r22
  109f20:	a809883a 	mov	r4,r21
  109f24:	01075600 	call	107560 <_free_r>
  109f28:	a809883a 	mov	r4,r21
  109f2c:	010fdec0 	call	10fdec <__malloc_unlock>
  109f30:	003fd306 	br	109e80 <_realloc_r+0x1ac>
  109f34:	300b883a 	mov	r5,r6
  109f38:	dfc00a17 	ldw	ra,40(sp)
  109f3c:	df000917 	ldw	fp,36(sp)
  109f40:	ddc00817 	ldw	r23,32(sp)
  109f44:	dd800717 	ldw	r22,28(sp)
  109f48:	dd400617 	ldw	r21,24(sp)
  109f4c:	dd000517 	ldw	r20,20(sp)
  109f50:	dcc00417 	ldw	r19,16(sp)
  109f54:	dc800317 	ldw	r18,12(sp)
  109f58:	dc400217 	ldw	r17,8(sp)
  109f5c:	dc000117 	ldw	r16,4(sp)
  109f60:	dec00b04 	addi	sp,sp,44
  109f64:	010807c1 	jmpi	10807c <_malloc_r>
  109f68:	340cb03a 	or	r6,r6,r16
  109f6c:	91800115 	stw	r6,4(r18)
  109f70:	940b883a 	add	r5,r18,r16
  109f74:	10800054 	ori	r2,r2,1
  109f78:	28800115 	stw	r2,4(r5)
  109f7c:	a0800117 	ldw	r2,4(r20)
  109f80:	29400204 	addi	r5,r5,8
  109f84:	a809883a 	mov	r4,r21
  109f88:	10800054 	ori	r2,r2,1
  109f8c:	a0800115 	stw	r2,4(r20)
  109f90:	01075600 	call	107560 <_free_r>
  109f94:	003fb006 	br	109e58 <_realloc_r+0x184>
  109f98:	2148703a 	and	r4,r4,r5
  109f9c:	890b883a 	add	r5,r17,r4
  109fa0:	81800404 	addi	r6,r16,16
  109fa4:	29bf7716 	blt	r5,r6,109d84 <_realloc_r+0xb0>
  109fa8:	9425883a 	add	r18,r18,r16
  109fac:	2c05c83a 	sub	r2,r5,r16
  109fb0:	e4800215 	stw	r18,8(fp)
  109fb4:	10800054 	ori	r2,r2,1
  109fb8:	90800115 	stw	r2,4(r18)
  109fbc:	b0bfff17 	ldw	r2,-4(r22)
  109fc0:	a809883a 	mov	r4,r21
  109fc4:	b027883a 	mov	r19,r22
  109fc8:	1080004c 	andi	r2,r2,1
  109fcc:	1420b03a 	or	r16,r2,r16
  109fd0:	b43fff15 	stw	r16,-4(r22)
  109fd4:	010fdec0 	call	10fdec <__malloc_unlock>
  109fd8:	003fa906 	br	109e80 <_realloc_r+0x1ac>
  109fdc:	99000015 	stw	r4,0(r19)
  109fe0:	b0c00117 	ldw	r3,4(r22)
  109fe4:	30800728 	cmpgeui	r2,r6,28
  109fe8:	98c00115 	stw	r3,4(r19)
  109fec:	1000611e 	bne	r2,zero,10a174 <_realloc_r+0x4a0>
  109ff0:	b0c00204 	addi	r3,r22,8
  109ff4:	98800204 	addi	r2,r19,8
  109ff8:	b1000217 	ldw	r4,8(r22)
  109ffc:	003fc206 	br	109f08 <_realloc_r+0x234>
  10a000:	a0800317 	ldw	r2,12(r20)
  10a004:	a0c00217 	ldw	r3,8(r20)
  10a008:	89bfff04 	addi	r6,r17,-4
  10a00c:	31000968 	cmpgeui	r4,r6,37
  10a010:	18800315 	stw	r2,12(r3)
  10a014:	10c00215 	stw	r3,8(r2)
  10a018:	38c00217 	ldw	r3,8(r7)
  10a01c:	38800317 	ldw	r2,12(r7)
  10a020:	3a000204 	addi	r8,r7,8
  10a024:	3de9883a 	add	r20,r7,r23
  10a028:	18800315 	stw	r2,12(r3)
  10a02c:	10c00215 	stw	r3,8(r2)
  10a030:	20006f1e 	bne	r4,zero,10a1f0 <_realloc_r+0x51c>
  10a034:	30800530 	cmpltui	r2,r6,20
  10a038:	b0c00017 	ldw	r3,0(r22)
  10a03c:	10006a1e 	bne	r2,zero,10a1e8 <_realloc_r+0x514>
  10a040:	38c00215 	stw	r3,8(r7)
  10a044:	b0c00117 	ldw	r3,4(r22)
  10a048:	30800728 	cmpgeui	r2,r6,28
  10a04c:	38c00315 	stw	r3,12(r7)
  10a050:	10007a1e 	bne	r2,zero,10a23c <_realloc_r+0x568>
  10a054:	b0c00217 	ldw	r3,8(r22)
  10a058:	38800404 	addi	r2,r7,16
  10a05c:	b5800204 	addi	r22,r22,8
  10a060:	10c00015 	stw	r3,0(r2)
  10a064:	b0c00117 	ldw	r3,4(r22)
  10a068:	b823883a 	mov	r17,r23
  10a06c:	3825883a 	mov	r18,r7
  10a070:	10c00115 	stw	r3,4(r2)
  10a074:	b0c00217 	ldw	r3,8(r22)
  10a078:	402d883a 	mov	r22,r8
  10a07c:	10c00215 	stw	r3,8(r2)
  10a080:	003f6b06 	br	109e30 <_realloc_r+0x15c>
  10a084:	98bfff17 	ldw	r2,-4(r19)
  10a088:	00ffff04 	movi	r3,-4
  10a08c:	10c4703a 	and	r2,r2,r3
  10a090:	88a3883a 	add	r17,r17,r2
  10a094:	9469883a 	add	r20,r18,r17
  10a098:	003f6506 	br	109e30 <_realloc_r+0x15c>
  10a09c:	b1fffe17 	ldw	r7,-8(r22)
  10a0a0:	91cfc83a 	sub	r7,r18,r7
  10a0a4:	39000117 	ldw	r4,4(r7)
  10a0a8:	214a703a 	and	r5,r4,r5
  10a0ac:	003f4106 	br	109db4 <_realloc_r+0xe0>
  10a0b0:	a0800317 	ldw	r2,12(r20)
  10a0b4:	a0c00217 	ldw	r3,8(r20)
  10a0b8:	2823883a 	mov	r17,r5
  10a0bc:	9169883a 	add	r20,r18,r5
  10a0c0:	18800315 	stw	r2,12(r3)
  10a0c4:	10c00215 	stw	r3,8(r2)
  10a0c8:	003f5906 	br	109e30 <_realloc_r+0x15c>
  10a0cc:	b00b883a 	mov	r5,r22
  10a0d0:	9809883a 	mov	r4,r19
  10a0d4:	01089580 	call	108958 <memmove>
  10a0d8:	003f9006 	br	109f1c <_realloc_r+0x248>
  10a0dc:	80800404 	addi	r2,r16,16
  10a0e0:	b8bf3416 	blt	r23,r2,109db4 <_realloc_r+0xe0>
  10a0e4:	38800317 	ldw	r2,12(r7)
  10a0e8:	38c00217 	ldw	r3,8(r7)
  10a0ec:	89bfff04 	addi	r6,r17,-4
  10a0f0:	31000968 	cmpgeui	r4,r6,37
  10a0f4:	18800315 	stw	r2,12(r3)
  10a0f8:	10c00215 	stw	r3,8(r2)
  10a0fc:	3cc00204 	addi	r19,r7,8
  10a100:	20005a1e 	bne	r4,zero,10a26c <_realloc_r+0x598>
  10a104:	30800530 	cmpltui	r2,r6,20
  10a108:	b0c00017 	ldw	r3,0(r22)
  10a10c:	1000551e 	bne	r2,zero,10a264 <_realloc_r+0x590>
  10a110:	38c00215 	stw	r3,8(r7)
  10a114:	b0c00117 	ldw	r3,4(r22)
  10a118:	30800728 	cmpgeui	r2,r6,28
  10a11c:	38c00315 	stw	r3,12(r7)
  10a120:	1000661e 	bne	r2,zero,10a2bc <_realloc_r+0x5e8>
  10a124:	b0c00217 	ldw	r3,8(r22)
  10a128:	38800404 	addi	r2,r7,16
  10a12c:	b5800204 	addi	r22,r22,8
  10a130:	10c00015 	stw	r3,0(r2)
  10a134:	b0c00117 	ldw	r3,4(r22)
  10a138:	10c00115 	stw	r3,4(r2)
  10a13c:	b0c00217 	ldw	r3,8(r22)
  10a140:	10c00215 	stw	r3,8(r2)
  10a144:	3c07883a 	add	r3,r7,r16
  10a148:	bc05c83a 	sub	r2,r23,r16
  10a14c:	e0c00215 	stw	r3,8(fp)
  10a150:	10800054 	ori	r2,r2,1
  10a154:	18800115 	stw	r2,4(r3)
  10a158:	38800117 	ldw	r2,4(r7)
  10a15c:	a809883a 	mov	r4,r21
  10a160:	1080004c 	andi	r2,r2,1
  10a164:	1420b03a 	or	r16,r2,r16
  10a168:	3c000115 	stw	r16,4(r7)
  10a16c:	010fdec0 	call	10fdec <__malloc_unlock>
  10a170:	003f4306 	br	109e80 <_realloc_r+0x1ac>
  10a174:	b0800217 	ldw	r2,8(r22)
  10a178:	31800920 	cmpeqi	r6,r6,36
  10a17c:	98800215 	stw	r2,8(r19)
  10a180:	b0800317 	ldw	r2,12(r22)
  10a184:	98800315 	stw	r2,12(r19)
  10a188:	3000061e 	bne	r6,zero,10a1a4 <_realloc_r+0x4d0>
  10a18c:	b0c00404 	addi	r3,r22,16
  10a190:	98800404 	addi	r2,r19,16
  10a194:	b1000417 	ldw	r4,16(r22)
  10a198:	003f5b06 	br	109f08 <_realloc_r+0x234>
  10a19c:	1805883a 	mov	r2,r3
  10a1a0:	003f1b06 	br	109e10 <_realloc_r+0x13c>
  10a1a4:	b1000417 	ldw	r4,16(r22)
  10a1a8:	b0c00604 	addi	r3,r22,24
  10a1ac:	98800604 	addi	r2,r19,24
  10a1b0:	99000415 	stw	r4,16(r19)
  10a1b4:	b1000517 	ldw	r4,20(r22)
  10a1b8:	99000515 	stw	r4,20(r19)
  10a1bc:	b1000617 	ldw	r4,24(r22)
  10a1c0:	003f5106 	br	109f08 <_realloc_r+0x234>
  10a1c4:	b00b883a 	mov	r5,r22
  10a1c8:	1809883a 	mov	r4,r3
  10a1cc:	d9c00015 	stw	r7,0(sp)
  10a1d0:	01089580 	call	108958 <memmove>
  10a1d4:	d9c00017 	ldw	r7,0(sp)
  10a1d8:	102d883a 	mov	r22,r2
  10a1dc:	b823883a 	mov	r17,r23
  10a1e0:	3825883a 	mov	r18,r7
  10a1e4:	003f1206 	br	109e30 <_realloc_r+0x15c>
  10a1e8:	4005883a 	mov	r2,r8
  10a1ec:	003f9c06 	br	10a060 <_realloc_r+0x38c>
  10a1f0:	b00b883a 	mov	r5,r22
  10a1f4:	4009883a 	mov	r4,r8
  10a1f8:	d9c00015 	stw	r7,0(sp)
  10a1fc:	01089580 	call	108958 <memmove>
  10a200:	d9c00017 	ldw	r7,0(sp)
  10a204:	102d883a 	mov	r22,r2
  10a208:	b823883a 	mov	r17,r23
  10a20c:	3825883a 	mov	r18,r7
  10a210:	003f0706 	br	109e30 <_realloc_r+0x15c>
  10a214:	b0800217 	ldw	r2,8(r22)
  10a218:	31800920 	cmpeqi	r6,r6,36
  10a21c:	38800415 	stw	r2,16(r7)
  10a220:	b0800317 	ldw	r2,12(r22)
  10a224:	38800515 	stw	r2,20(r7)
  10a228:	b1000417 	ldw	r4,16(r22)
  10a22c:	3000151e 	bne	r6,zero,10a284 <_realloc_r+0x5b0>
  10a230:	38800604 	addi	r2,r7,24
  10a234:	b5800404 	addi	r22,r22,16
  10a238:	003ef506 	br	109e10 <_realloc_r+0x13c>
  10a23c:	b0800217 	ldw	r2,8(r22)
  10a240:	31800920 	cmpeqi	r6,r6,36
  10a244:	38800415 	stw	r2,16(r7)
  10a248:	b0800317 	ldw	r2,12(r22)
  10a24c:	38800515 	stw	r2,20(r7)
  10a250:	b0c00417 	ldw	r3,16(r22)
  10a254:	3000121e 	bne	r6,zero,10a2a0 <_realloc_r+0x5cc>
  10a258:	38800604 	addi	r2,r7,24
  10a25c:	b5800404 	addi	r22,r22,16
  10a260:	003f7f06 	br	10a060 <_realloc_r+0x38c>
  10a264:	9805883a 	mov	r2,r19
  10a268:	003fb106 	br	10a130 <_realloc_r+0x45c>
  10a26c:	b00b883a 	mov	r5,r22
  10a270:	9809883a 	mov	r4,r19
  10a274:	d9c00015 	stw	r7,0(sp)
  10a278:	01089580 	call	108958 <memmove>
  10a27c:	d9c00017 	ldw	r7,0(sp)
  10a280:	003fb006 	br	10a144 <_realloc_r+0x470>
  10a284:	b5800604 	addi	r22,r22,24
  10a288:	39000615 	stw	r4,24(r7)
  10a28c:	b13fff17 	ldw	r4,-4(r22)
  10a290:	38800804 	addi	r2,r7,32
  10a294:	39000715 	stw	r4,28(r7)
  10a298:	b1000017 	ldw	r4,0(r22)
  10a29c:	003edc06 	br	109e10 <_realloc_r+0x13c>
  10a2a0:	b5800604 	addi	r22,r22,24
  10a2a4:	38c00615 	stw	r3,24(r7)
  10a2a8:	b0ffff17 	ldw	r3,-4(r22)
  10a2ac:	38800804 	addi	r2,r7,32
  10a2b0:	38c00715 	stw	r3,28(r7)
  10a2b4:	b0c00017 	ldw	r3,0(r22)
  10a2b8:	003f6906 	br	10a060 <_realloc_r+0x38c>
  10a2bc:	b0800217 	ldw	r2,8(r22)
  10a2c0:	31800920 	cmpeqi	r6,r6,36
  10a2c4:	38800415 	stw	r2,16(r7)
  10a2c8:	b0800317 	ldw	r2,12(r22)
  10a2cc:	38800515 	stw	r2,20(r7)
  10a2d0:	b0c00417 	ldw	r3,16(r22)
  10a2d4:	3000031e 	bne	r6,zero,10a2e4 <_realloc_r+0x610>
  10a2d8:	38800604 	addi	r2,r7,24
  10a2dc:	b5800404 	addi	r22,r22,16
  10a2e0:	003f9306 	br	10a130 <_realloc_r+0x45c>
  10a2e4:	b5800604 	addi	r22,r22,24
  10a2e8:	38c00615 	stw	r3,24(r7)
  10a2ec:	b0ffff17 	ldw	r3,-4(r22)
  10a2f0:	38800804 	addi	r2,r7,32
  10a2f4:	38c00715 	stw	r3,28(r7)
  10a2f8:	b0c00017 	ldw	r3,0(r22)
  10a2fc:	003f8c06 	br	10a130 <_realloc_r+0x45c>

0010a300 <_sbrk_r>:
  10a300:	defffe04 	addi	sp,sp,-8
  10a304:	dc000015 	stw	r16,0(sp)
  10a308:	00800074 	movhi	r2,1
  10a30c:	2021883a 	mov	r16,r4
  10a310:	2809883a 	mov	r4,r5
  10a314:	dfc00115 	stw	ra,4(sp)
  10a318:	10075615 	stw	zero,7512(r2)
  10a31c:	010ffc40 	call	10ffc4 <sbrk>
  10a320:	10ffffd8 	cmpnei	r3,r2,-1
  10a324:	18000426 	beq	r3,zero,10a338 <_sbrk_r+0x38>
  10a328:	dfc00117 	ldw	ra,4(sp)
  10a32c:	dc000017 	ldw	r16,0(sp)
  10a330:	dec00204 	addi	sp,sp,8
  10a334:	f800283a 	ret
  10a338:	00c00074 	movhi	r3,1
  10a33c:	18c75617 	ldw	r3,7512(r3)
  10a340:	183ff926 	beq	r3,zero,10a328 <_sbrk_r+0x28>
  10a344:	80c00015 	stw	r3,0(r16)
  10a348:	dfc00117 	ldw	ra,4(sp)
  10a34c:	dc000017 	ldw	r16,0(sp)
  10a350:	dec00204 	addi	sp,sp,8
  10a354:	f800283a 	ret

0010a358 <__sread>:
  10a358:	defffe04 	addi	sp,sp,-8
  10a35c:	dc000015 	stw	r16,0(sp)
  10a360:	2821883a 	mov	r16,r5
  10a364:	2940038f 	ldh	r5,14(r5)
  10a368:	dfc00115 	stw	ra,4(sp)
  10a36c:	010c1900 	call	10c190 <_read_r>
  10a370:	10000716 	blt	r2,zero,10a390 <__sread+0x38>
  10a374:	80c01417 	ldw	r3,80(r16)
  10a378:	1887883a 	add	r3,r3,r2
  10a37c:	80c01415 	stw	r3,80(r16)
  10a380:	dfc00117 	ldw	ra,4(sp)
  10a384:	dc000017 	ldw	r16,0(sp)
  10a388:	dec00204 	addi	sp,sp,8
  10a38c:	f800283a 	ret
  10a390:	80c0030b 	ldhu	r3,12(r16)
  10a394:	18fbffcc 	andi	r3,r3,61439
  10a398:	80c0030d 	sth	r3,12(r16)
  10a39c:	dfc00117 	ldw	ra,4(sp)
  10a3a0:	dc000017 	ldw	r16,0(sp)
  10a3a4:	dec00204 	addi	sp,sp,8
  10a3a8:	f800283a 	ret

0010a3ac <__seofread>:
  10a3ac:	0005883a 	mov	r2,zero
  10a3b0:	f800283a 	ret

0010a3b4 <__swrite>:
  10a3b4:	2880030b 	ldhu	r2,12(r5)
  10a3b8:	defffb04 	addi	sp,sp,-20
  10a3bc:	dcc00315 	stw	r19,12(sp)
  10a3c0:	dc800215 	stw	r18,8(sp)
  10a3c4:	dc400115 	stw	r17,4(sp)
  10a3c8:	dc000015 	stw	r16,0(sp)
  10a3cc:	dfc00415 	stw	ra,16(sp)
  10a3d0:	10c0400c 	andi	r3,r2,256
  10a3d4:	2821883a 	mov	r16,r5
  10a3d8:	2023883a 	mov	r17,r4
  10a3dc:	3025883a 	mov	r18,r6
  10a3e0:	3827883a 	mov	r19,r7
  10a3e4:	2940038f 	ldh	r5,14(r5)
  10a3e8:	18000c1e 	bne	r3,zero,10a41c <__swrite+0x68>
  10a3ec:	10bbffcc 	andi	r2,r2,61439
  10a3f0:	980f883a 	mov	r7,r19
  10a3f4:	900d883a 	mov	r6,r18
  10a3f8:	8809883a 	mov	r4,r17
  10a3fc:	8080030d 	sth	r2,12(r16)
  10a400:	dfc00417 	ldw	ra,16(sp)
  10a404:	dcc00317 	ldw	r19,12(sp)
  10a408:	dc800217 	ldw	r18,8(sp)
  10a40c:	dc400117 	ldw	r17,4(sp)
  10a410:	dc000017 	ldw	r16,0(sp)
  10a414:	dec00504 	addi	sp,sp,20
  10a418:	010bb141 	jmpi	10bb14 <_write_r>
  10a41c:	01c00084 	movi	r7,2
  10a420:	000d883a 	mov	r6,zero
  10a424:	010c0dc0 	call	10c0dc <_lseek_r>
  10a428:	8080030b 	ldhu	r2,12(r16)
  10a42c:	8140038f 	ldh	r5,14(r16)
  10a430:	003fee06 	br	10a3ec <__swrite+0x38>

0010a434 <__sseek>:
  10a434:	defffe04 	addi	sp,sp,-8
  10a438:	dc000015 	stw	r16,0(sp)
  10a43c:	2821883a 	mov	r16,r5
  10a440:	2940038f 	ldh	r5,14(r5)
  10a444:	dfc00115 	stw	ra,4(sp)
  10a448:	010c0dc0 	call	10c0dc <_lseek_r>
  10a44c:	10ffffd8 	cmpnei	r3,r2,-1
  10a450:	18000826 	beq	r3,zero,10a474 <__sseek+0x40>
  10a454:	80c0030b 	ldhu	r3,12(r16)
  10a458:	80801415 	stw	r2,80(r16)
  10a45c:	18c40014 	ori	r3,r3,4096
  10a460:	80c0030d 	sth	r3,12(r16)
  10a464:	dfc00117 	ldw	ra,4(sp)
  10a468:	dc000017 	ldw	r16,0(sp)
  10a46c:	dec00204 	addi	sp,sp,8
  10a470:	f800283a 	ret
  10a474:	80c0030b 	ldhu	r3,12(r16)
  10a478:	18fbffcc 	andi	r3,r3,61439
  10a47c:	80c0030d 	sth	r3,12(r16)
  10a480:	dfc00117 	ldw	ra,4(sp)
  10a484:	dc000017 	ldw	r16,0(sp)
  10a488:	dec00204 	addi	sp,sp,8
  10a48c:	f800283a 	ret

0010a490 <__sclose>:
  10a490:	2940038f 	ldh	r5,14(r5)
  10a494:	010bb781 	jmpi	10bb78 <_close_r>

0010a498 <__sprint_r.part.0>:
  10a498:	28801917 	ldw	r2,100(r5)
  10a49c:	defff604 	addi	sp,sp,-40
  10a4a0:	dd000415 	stw	r20,16(sp)
  10a4a4:	dfc00915 	stw	ra,36(sp)
  10a4a8:	df000815 	stw	fp,32(sp)
  10a4ac:	ddc00715 	stw	r23,28(sp)
  10a4b0:	dd800615 	stw	r22,24(sp)
  10a4b4:	dd400515 	stw	r21,20(sp)
  10a4b8:	dcc00315 	stw	r19,12(sp)
  10a4bc:	dc800215 	stw	r18,8(sp)
  10a4c0:	dc400115 	stw	r17,4(sp)
  10a4c4:	dc000015 	stw	r16,0(sp)
  10a4c8:	1088000c 	andi	r2,r2,8192
  10a4cc:	3029883a 	mov	r20,r6
  10a4d0:	10002c26 	beq	r2,zero,10a584 <__sprint_r.part.0+0xec>
  10a4d4:	30800217 	ldw	r2,8(r6)
  10a4d8:	2823883a 	mov	r17,r5
  10a4dc:	2027883a 	mov	r19,r4
  10a4e0:	35400017 	ldw	r21,0(r6)
  10a4e4:	05ffff04 	movi	r23,-4
  10a4e8:	10002426 	beq	r2,zero,10a57c <__sprint_r.part.0+0xe4>
  10a4ec:	ad800117 	ldw	r22,4(r21)
  10a4f0:	ac000017 	ldw	r16,0(r21)
  10a4f4:	b024d0ba 	srli	r18,r22,2
  10a4f8:	90001b26 	beq	r18,zero,10a568 <__sprint_r.part.0+0xd0>
  10a4fc:	0039883a 	mov	fp,zero
  10a500:	00000206 	br	10a50c <__sprint_r.part.0+0x74>
  10a504:	84000104 	addi	r16,r16,4
  10a508:	97001626 	beq	r18,fp,10a564 <__sprint_r.part.0+0xcc>
  10a50c:	81400017 	ldw	r5,0(r16)
  10a510:	880d883a 	mov	r6,r17
  10a514:	9809883a 	mov	r4,r19
  10a518:	010bef40 	call	10bef4 <_fputwc_r>
  10a51c:	10bfffe0 	cmpeqi	r2,r2,-1
  10a520:	e7000044 	addi	fp,fp,1
  10a524:	103ff726 	beq	r2,zero,10a504 <__sprint_r.part.0+0x6c>
  10a528:	00bfffc4 	movi	r2,-1
  10a52c:	a0000215 	stw	zero,8(r20)
  10a530:	a0000115 	stw	zero,4(r20)
  10a534:	dfc00917 	ldw	ra,36(sp)
  10a538:	df000817 	ldw	fp,32(sp)
  10a53c:	ddc00717 	ldw	r23,28(sp)
  10a540:	dd800617 	ldw	r22,24(sp)
  10a544:	dd400517 	ldw	r21,20(sp)
  10a548:	dd000417 	ldw	r20,16(sp)
  10a54c:	dcc00317 	ldw	r19,12(sp)
  10a550:	dc800217 	ldw	r18,8(sp)
  10a554:	dc400117 	ldw	r17,4(sp)
  10a558:	dc000017 	ldw	r16,0(sp)
  10a55c:	dec00a04 	addi	sp,sp,40
  10a560:	f800283a 	ret
  10a564:	a0800217 	ldw	r2,8(r20)
  10a568:	b5ec703a 	and	r22,r22,r23
  10a56c:	1585c83a 	sub	r2,r2,r22
  10a570:	a0800215 	stw	r2,8(r20)
  10a574:	ad400204 	addi	r21,r21,8
  10a578:	103fdc1e 	bne	r2,zero,10a4ec <__sprint_r.part.0+0x54>
  10a57c:	0005883a 	mov	r2,zero
  10a580:	003fea06 	br	10a52c <__sprint_r.part.0+0x94>
  10a584:	010785c0 	call	10785c <__sfvwrite_r>
  10a588:	003fe806 	br	10a52c <__sprint_r.part.0+0x94>

0010a58c <__sprint_r>:
  10a58c:	30c00217 	ldw	r3,8(r6)
  10a590:	18000126 	beq	r3,zero,10a598 <__sprint_r+0xc>
  10a594:	010a4981 	jmpi	10a498 <__sprint_r.part.0>
  10a598:	30000115 	stw	zero,4(r6)
  10a59c:	0005883a 	mov	r2,zero
  10a5a0:	f800283a 	ret

0010a5a4 <___vfiprintf_internal_r>:
  10a5a4:	deffd004 	addi	sp,sp,-192
  10a5a8:	df002e15 	stw	fp,184(sp)
  10a5ac:	dcc02915 	stw	r19,164(sp)
  10a5b0:	dc802815 	stw	r18,160(sp)
  10a5b4:	dfc02f15 	stw	ra,188(sp)
  10a5b8:	ddc02d15 	stw	r23,180(sp)
  10a5bc:	dd802c15 	stw	r22,176(sp)
  10a5c0:	dd402b15 	stw	r21,172(sp)
  10a5c4:	dd002a15 	stw	r20,168(sp)
  10a5c8:	dc402715 	stw	r17,156(sp)
  10a5cc:	dc002615 	stw	r16,152(sp)
  10a5d0:	d9c00315 	stw	r7,12(sp)
  10a5d4:	2027883a 	mov	r19,r4
  10a5d8:	2825883a 	mov	r18,r5
  10a5dc:	3039883a 	mov	fp,r6
  10a5e0:	20000226 	beq	r4,zero,10a5ec <___vfiprintf_internal_r+0x48>
  10a5e4:	20800e17 	ldw	r2,56(r4)
  10a5e8:	1002ba26 	beq	r2,zero,10b0d4 <___vfiprintf_internal_r+0xb30>
  10a5ec:	9080030b 	ldhu	r2,12(r18)
  10a5f0:	10c8000c 	andi	r3,r2,8192
  10a5f4:	1800061e 	bne	r3,zero,10a610 <___vfiprintf_internal_r+0x6c>
  10a5f8:	90c01917 	ldw	r3,100(r18)
  10a5fc:	0137ffc4 	movi	r4,-8193
  10a600:	10880014 	ori	r2,r2,8192
  10a604:	1906703a 	and	r3,r3,r4
  10a608:	9080030d 	sth	r2,12(r18)
  10a60c:	90c01915 	stw	r3,100(r18)
  10a610:	10c0020c 	andi	r3,r2,8
  10a614:	18009426 	beq	r3,zero,10a868 <___vfiprintf_internal_r+0x2c4>
  10a618:	90c00417 	ldw	r3,16(r18)
  10a61c:	18009226 	beq	r3,zero,10a868 <___vfiprintf_internal_r+0x2c4>
  10a620:	1080068c 	andi	r2,r2,26
  10a624:	10800298 	cmpnei	r2,r2,10
  10a628:	10009726 	beq	r2,zero,10a888 <___vfiprintf_internal_r+0x2e4>
  10a62c:	dc401604 	addi	r17,sp,88
  10a630:	dc400915 	stw	r17,36(sp)
  10a634:	d8000b15 	stw	zero,44(sp)
  10a638:	d8000a15 	stw	zero,40(sp)
  10a63c:	8811883a 	mov	r8,r17
  10a640:	d8000415 	stw	zero,16(sp)
  10a644:	d8000015 	stw	zero,0(sp)
  10a648:	e0800007 	ldb	r2,0(fp)
  10a64c:	1000a226 	beq	r2,zero,10a8d8 <___vfiprintf_internal_r+0x334>
  10a650:	10800960 	cmpeqi	r2,r2,37
  10a654:	1003eb1e 	bne	r2,zero,10b604 <___vfiprintf_internal_r+0x1060>
  10a658:	e021883a 	mov	r16,fp
  10a65c:	00000206 	br	10a668 <___vfiprintf_internal_r+0xc4>
  10a660:	18009226 	beq	r3,zero,10a8ac <___vfiprintf_internal_r+0x308>
  10a664:	a021883a 	mov	r16,r20
  10a668:	80800047 	ldb	r2,1(r16)
  10a66c:	85000044 	addi	r20,r16,1
  10a670:	10c00958 	cmpnei	r3,r2,37
  10a674:	103ffa1e 	bne	r2,zero,10a660 <___vfiprintf_internal_r+0xbc>
  10a678:	a72bc83a 	sub	r21,r20,fp
  10a67c:	a8009626 	beq	r21,zero,10a8d8 <___vfiprintf_internal_r+0x334>
  10a680:	d8c00b17 	ldw	r3,44(sp)
  10a684:	d8800a17 	ldw	r2,40(sp)
  10a688:	47000015 	stw	fp,0(r8)
  10a68c:	a8c7883a 	add	r3,r21,r3
  10a690:	10800044 	addi	r2,r2,1
  10a694:	d8800a15 	stw	r2,40(sp)
  10a698:	45400115 	stw	r21,4(r8)
  10a69c:	d8c00b15 	stw	r3,44(sp)
  10a6a0:	10800208 	cmpgei	r2,r2,8
  10a6a4:	1000841e 	bne	r2,zero,10a8b8 <___vfiprintf_internal_r+0x314>
  10a6a8:	42000204 	addi	r8,r8,8
  10a6ac:	d8c00017 	ldw	r3,0(sp)
  10a6b0:	80800047 	ldb	r2,1(r16)
  10a6b4:	1d47883a 	add	r3,r3,r21
  10a6b8:	d8c00015 	stw	r3,0(sp)
  10a6bc:	10008626 	beq	r2,zero,10a8d8 <___vfiprintf_internal_r+0x334>
  10a6c0:	a0800047 	ldb	r2,1(r20)
  10a6c4:	a7000044 	addi	fp,r20,1
  10a6c8:	d8000845 	stb	zero,33(sp)
  10a6cc:	000b883a 	mov	r5,zero
  10a6d0:	000d883a 	mov	r6,zero
  10a6d4:	027fffc4 	movi	r9,-1
  10a6d8:	0021883a 	mov	r16,zero
  10a6dc:	0019883a 	mov	r12,zero
  10a6e0:	e7000044 	addi	fp,fp,1
  10a6e4:	10fff804 	addi	r3,r2,-32
  10a6e8:	19001668 	cmpgeui	r4,r3,89
  10a6ec:	20009e1e 	bne	r4,zero,10a968 <___vfiprintf_internal_r+0x3c4>
  10a6f0:	180690ba 	slli	r3,r3,2
  10a6f4:	01000474 	movhi	r4,17
  10a6f8:	1909883a 	add	r4,r3,r4
  10a6fc:	20e9c117 	ldw	r3,-22780(r4)
  10a700:	1800683a 	jmp	r3
  10a704:	0010aa40 	call	10aa4 <alt_fd_list+0xb4>
  10a708:	0010a968 	cmpgeui	zero,zero,17061
  10a70c:	0010a968 	cmpgeui	zero,zero,17061
  10a710:	0010aa34 	movhi	zero,17064
  10a714:	0010a968 	cmpgeui	zero,zero,17061
  10a718:	0010a968 	cmpgeui	zero,zero,17061
  10a71c:	0010a968 	cmpgeui	zero,zero,17061
  10a720:	0010a968 	cmpgeui	zero,zero,17061
  10a724:	0010a968 	cmpgeui	zero,zero,17061
  10a728:	0010a968 	cmpgeui	zero,zero,17061
  10a72c:	0010aa0c 	andi	zero,zero,17064
  10a730:	0010a9fc 	xorhi	zero,zero,17063
  10a734:	0010a968 	cmpgeui	zero,zero,17061
  10a738:	0010a9e4 	muli	zero,zero,17063
  10a73c:	0010a998 	cmpnei	zero,zero,17062
  10a740:	0010a968 	cmpgeui	zero,zero,17061
  10a744:	0010a98c 	andi	zero,zero,17062
  10a748:	0010a930 	cmpltui	zero,zero,17060
  10a74c:	0010a930 	cmpltui	zero,zero,17060
  10a750:	0010a930 	cmpltui	zero,zero,17060
  10a754:	0010a930 	cmpltui	zero,zero,17060
  10a758:	0010a930 	cmpltui	zero,zero,17060
  10a75c:	0010a930 	cmpltui	zero,zero,17060
  10a760:	0010a930 	cmpltui	zero,zero,17060
  10a764:	0010a930 	cmpltui	zero,zero,17060
  10a768:	0010a930 	cmpltui	zero,zero,17060
  10a76c:	0010a968 	cmpgeui	zero,zero,17061
  10a770:	0010a968 	cmpgeui	zero,zero,17061
  10a774:	0010a968 	cmpgeui	zero,zero,17061
  10a778:	0010a968 	cmpgeui	zero,zero,17061
  10a77c:	0010a968 	cmpgeui	zero,zero,17061
  10a780:	0010a968 	cmpgeui	zero,zero,17061
  10a784:	0010a968 	cmpgeui	zero,zero,17061
  10a788:	0010a968 	cmpgeui	zero,zero,17061
  10a78c:	0010a968 	cmpgeui	zero,zero,17061
  10a790:	0010a968 	cmpgeui	zero,zero,17061
  10a794:	0010affc 	xorhi	zero,zero,17087
  10a798:	0010a968 	cmpgeui	zero,zero,17061
  10a79c:	0010a968 	cmpgeui	zero,zero,17061
  10a7a0:	0010a968 	cmpgeui	zero,zero,17061
  10a7a4:	0010a968 	cmpgeui	zero,zero,17061
  10a7a8:	0010a968 	cmpgeui	zero,zero,17061
  10a7ac:	0010a968 	cmpgeui	zero,zero,17061
  10a7b0:	0010a968 	cmpgeui	zero,zero,17061
  10a7b4:	0010a968 	cmpgeui	zero,zero,17061
  10a7b8:	0010a968 	cmpgeui	zero,zero,17061
  10a7bc:	0010a968 	cmpgeui	zero,zero,17061
  10a7c0:	0010af94 	movui	zero,17086
  10a7c4:	0010a968 	cmpgeui	zero,zero,17061
  10a7c8:	0010a968 	cmpgeui	zero,zero,17061
  10a7cc:	0010a968 	cmpgeui	zero,zero,17061
  10a7d0:	0010a968 	cmpgeui	zero,zero,17061
  10a7d4:	0010a968 	cmpgeui	zero,zero,17061
  10a7d8:	0010afc8 	cmpgei	zero,zero,17087
  10a7dc:	0010a968 	cmpgeui	zero,zero,17061
  10a7e0:	0010a968 	cmpgeui	zero,zero,17061
  10a7e4:	0010ab98 	cmpnei	zero,zero,17070
  10a7e8:	0010a968 	cmpgeui	zero,zero,17061
  10a7ec:	0010a968 	cmpgeui	zero,zero,17061
  10a7f0:	0010a968 	cmpgeui	zero,zero,17061
  10a7f4:	0010a968 	cmpgeui	zero,zero,17061
  10a7f8:	0010a968 	cmpgeui	zero,zero,17061
  10a7fc:	0010a968 	cmpgeui	zero,zero,17061
  10a800:	0010a968 	cmpgeui	zero,zero,17061
  10a804:	0010a968 	cmpgeui	zero,zero,17061
  10a808:	0010a968 	cmpgeui	zero,zero,17061
  10a80c:	0010a968 	cmpgeui	zero,zero,17061
  10a810:	0010ad34 	movhi	zero,17076
  10a814:	0010acc0 	call	10acc <alt_fd_list+0xdc>
  10a818:	0010a968 	cmpgeui	zero,zero,17061
  10a81c:	0010a968 	cmpgeui	zero,zero,17061
  10a820:	0010a968 	cmpgeui	zero,zero,17061
  10a824:	0010aac8 	cmpgei	zero,zero,17067
  10a828:	0010acc0 	call	10acc <alt_fd_list+0xdc>
  10a82c:	0010a968 	cmpgeui	zero,zero,17061
  10a830:	0010a968 	cmpgeui	zero,zero,17061
  10a834:	0010aab4 	movhi	zero,17066
  10a838:	0010a968 	cmpgeui	zero,zero,17061
  10a83c:	0010ac80 	call	10ac8 <alt_fd_list+0xd8>
  10a840:	0010ab58 	cmpnei	zero,zero,17069
  10a844:	0010aae0 	cmpeqi	zero,zero,17067
  10a848:	0010aad4 	movui	zero,17067
  10a84c:	0010a968 	cmpgeui	zero,zero,17061
  10a850:	0010ac20 	cmpeqi	zero,zero,17072
  10a854:	0010a968 	cmpgeui	zero,zero,17061
  10a858:	0010abe0 	cmpeqi	zero,zero,17071
  10a85c:	0010a968 	cmpgeui	zero,zero,17061
  10a860:	0010a968 	cmpgeui	zero,zero,17061
  10a864:	0010aa6c 	andhi	zero,zero,17065
  10a868:	900b883a 	mov	r5,r18
  10a86c:	9809883a 	mov	r4,r19
  10a870:	01053e40 	call	1053e4 <__swsetup_r>
  10a874:	10040b1e 	bne	r2,zero,10b8a4 <___vfiprintf_internal_r+0x1300>
  10a878:	9080030b 	ldhu	r2,12(r18)
  10a87c:	1080068c 	andi	r2,r2,26
  10a880:	10800298 	cmpnei	r2,r2,10
  10a884:	103f691e 	bne	r2,zero,10a62c <___vfiprintf_internal_r+0x88>
  10a888:	9080038f 	ldh	r2,14(r18)
  10a88c:	103f6716 	blt	r2,zero,10a62c <___vfiprintf_internal_r+0x88>
  10a890:	d9c00317 	ldw	r7,12(sp)
  10a894:	e00d883a 	mov	r6,fp
  10a898:	900b883a 	mov	r5,r18
  10a89c:	9809883a 	mov	r4,r19
  10a8a0:	010b8f80 	call	10b8f8 <__sbprintf>
  10a8a4:	d8800015 	stw	r2,0(sp)
  10a8a8:	00001406 	br	10a8fc <___vfiprintf_internal_r+0x358>
  10a8ac:	a72bc83a 	sub	r21,r20,fp
  10a8b0:	a83f8326 	beq	r21,zero,10a6c0 <___vfiprintf_internal_r+0x11c>
  10a8b4:	003f7206 	br	10a680 <___vfiprintf_internal_r+0xdc>
  10a8b8:	18032f26 	beq	r3,zero,10b578 <___vfiprintf_internal_r+0xfd4>
  10a8bc:	d9800904 	addi	r6,sp,36
  10a8c0:	900b883a 	mov	r5,r18
  10a8c4:	9809883a 	mov	r4,r19
  10a8c8:	010a4980 	call	10a498 <__sprint_r.part.0>
  10a8cc:	1000081e 	bne	r2,zero,10a8f0 <___vfiprintf_internal_r+0x34c>
  10a8d0:	8811883a 	mov	r8,r17
  10a8d4:	003f7506 	br	10a6ac <___vfiprintf_internal_r+0x108>
  10a8d8:	d8800b17 	ldw	r2,44(sp)
  10a8dc:	10000426 	beq	r2,zero,10a8f0 <___vfiprintf_internal_r+0x34c>
  10a8e0:	d9800904 	addi	r6,sp,36
  10a8e4:	900b883a 	mov	r5,r18
  10a8e8:	9809883a 	mov	r4,r19
  10a8ec:	010a4980 	call	10a498 <__sprint_r.part.0>
  10a8f0:	9080030b 	ldhu	r2,12(r18)
  10a8f4:	1080100c 	andi	r2,r2,64
  10a8f8:	1003ea1e 	bne	r2,zero,10b8a4 <___vfiprintf_internal_r+0x1300>
  10a8fc:	d8800017 	ldw	r2,0(sp)
  10a900:	dfc02f17 	ldw	ra,188(sp)
  10a904:	df002e17 	ldw	fp,184(sp)
  10a908:	ddc02d17 	ldw	r23,180(sp)
  10a90c:	dd802c17 	ldw	r22,176(sp)
  10a910:	dd402b17 	ldw	r21,172(sp)
  10a914:	dd002a17 	ldw	r20,168(sp)
  10a918:	dcc02917 	ldw	r19,164(sp)
  10a91c:	dc802817 	ldw	r18,160(sp)
  10a920:	dc402717 	ldw	r17,156(sp)
  10a924:	dc002617 	ldw	r16,152(sp)
  10a928:	dec03004 	addi	sp,sp,192
  10a92c:	f800283a 	ret
  10a930:	0021883a 	mov	r16,zero
  10a934:	113ff404 	addi	r4,r2,-48
  10a938:	800690ba 	slli	r3,r16,2
  10a93c:	e7000044 	addi	fp,fp,1
  10a940:	e0bfffc7 	ldb	r2,-1(fp)
  10a944:	1c21883a 	add	r16,r3,r16
  10a948:	8421883a 	add	r16,r16,r16
  10a94c:	2421883a 	add	r16,r4,r16
  10a950:	113ff404 	addi	r4,r2,-48
  10a954:	20c002b0 	cmpltui	r3,r4,10
  10a958:	183ff71e 	bne	r3,zero,10a938 <___vfiprintf_internal_r+0x394>
  10a95c:	10fff804 	addi	r3,r2,-32
  10a960:	19001668 	cmpgeui	r4,r3,89
  10a964:	203f6226 	beq	r4,zero,10a6f0 <___vfiprintf_internal_r+0x14c>
  10a968:	29403fcc 	andi	r5,r5,255
  10a96c:	2803ab1e 	bne	r5,zero,10b81c <___vfiprintf_internal_r+0x1278>
  10a970:	103fd926 	beq	r2,zero,10a8d8 <___vfiprintf_internal_r+0x334>
  10a974:	d8800c05 	stb	r2,48(sp)
  10a978:	d8000845 	stb	zero,33(sp)
  10a97c:	05400044 	movi	r21,1
  10a980:	05800044 	movi	r22,1
  10a984:	ddc00c04 	addi	r23,sp,48
  10a988:	0000f306 	br	10ad58 <___vfiprintf_internal_r+0x7b4>
  10a98c:	63002014 	ori	r12,r12,128
  10a990:	e0800007 	ldb	r2,0(fp)
  10a994:	003f5206 	br	10a6e0 <___vfiprintf_internal_r+0x13c>
  10a998:	e0800007 	ldb	r2,0(fp)
  10a99c:	e0c00044 	addi	r3,fp,1
  10a9a0:	11000aa0 	cmpeqi	r4,r2,42
  10a9a4:	2003c21e 	bne	r4,zero,10b8b0 <___vfiprintf_internal_r+0x130c>
  10a9a8:	113ff404 	addi	r4,r2,-48
  10a9ac:	21c002b0 	cmpltui	r7,r4,10
  10a9b0:	1839883a 	mov	fp,r3
  10a9b4:	0013883a 	mov	r9,zero
  10a9b8:	383f4a26 	beq	r7,zero,10a6e4 <___vfiprintf_internal_r+0x140>
  10a9bc:	480690ba 	slli	r3,r9,2
  10a9c0:	e7000044 	addi	fp,fp,1
  10a9c4:	e0bfffc7 	ldb	r2,-1(fp)
  10a9c8:	1a53883a 	add	r9,r3,r9
  10a9cc:	4a53883a 	add	r9,r9,r9
  10a9d0:	4913883a 	add	r9,r9,r4
  10a9d4:	113ff404 	addi	r4,r2,-48
  10a9d8:	20c002b0 	cmpltui	r3,r4,10
  10a9dc:	183ff71e 	bne	r3,zero,10a9bc <___vfiprintf_internal_r+0x418>
  10a9e0:	003f4006 	br	10a6e4 <___vfiprintf_internal_r+0x140>
  10a9e4:	e0800003 	ldbu	r2,0(fp)
  10a9e8:	10803fcc 	andi	r2,r2,255
  10a9ec:	1080201c 	xori	r2,r2,128
  10a9f0:	63000114 	ori	r12,r12,4
  10a9f4:	10bfe004 	addi	r2,r2,-128
  10a9f8:	003f3906 	br	10a6e0 <___vfiprintf_internal_r+0x13c>
  10a9fc:	01400044 	movi	r5,1
  10aa00:	01800ac4 	movi	r6,43
  10aa04:	e0800007 	ldb	r2,0(fp)
  10aa08:	003f3506 	br	10a6e0 <___vfiprintf_internal_r+0x13c>
  10aa0c:	d8800317 	ldw	r2,12(sp)
  10aa10:	14000017 	ldw	r16,0(r2)
  10aa14:	15c00104 	addi	r23,r2,4
  10aa18:	e0800003 	ldbu	r2,0(fp)
  10aa1c:	80031416 	blt	r16,zero,10b670 <___vfiprintf_internal_r+0x10cc>
  10aa20:	ddc00315 	stw	r23,12(sp)
  10aa24:	10803fcc 	andi	r2,r2,255
  10aa28:	1080201c 	xori	r2,r2,128
  10aa2c:	10bfe004 	addi	r2,r2,-128
  10aa30:	003f2b06 	br	10a6e0 <___vfiprintf_internal_r+0x13c>
  10aa34:	63000054 	ori	r12,r12,1
  10aa38:	e0800007 	ldb	r2,0(fp)
  10aa3c:	003f2806 	br	10a6e0 <___vfiprintf_internal_r+0x13c>
  10aa40:	30c03fcc 	andi	r3,r6,255
  10aa44:	18c0201c 	xori	r3,r3,128
  10aa48:	18ffe004 	addi	r3,r3,-128
  10aa4c:	e0800003 	ldbu	r2,0(fp)
  10aa50:	183ff41e 	bne	r3,zero,10aa24 <___vfiprintf_internal_r+0x480>
  10aa54:	10803fcc 	andi	r2,r2,255
  10aa58:	1080201c 	xori	r2,r2,128
  10aa5c:	01400044 	movi	r5,1
  10aa60:	01800804 	movi	r6,32
  10aa64:	10bfe004 	addi	r2,r2,-128
  10aa68:	003f1d06 	br	10a6e0 <___vfiprintf_internal_r+0x13c>
  10aa6c:	29403fcc 	andi	r5,r5,255
  10aa70:	2803741e 	bne	r5,zero,10b844 <___vfiprintf_internal_r+0x12a0>
  10aa74:	00c00474 	movhi	r3,17
  10aa78:	18ccc504 	addi	r3,r3,13076
  10aa7c:	d8c00415 	stw	r3,16(sp)
  10aa80:	60c0080c 	andi	r3,r12,32
  10aa84:	18004b26 	beq	r3,zero,10abb4 <___vfiprintf_internal_r+0x610>
  10aa88:	d8c00317 	ldw	r3,12(sp)
  10aa8c:	1d400017 	ldw	r21,0(r3)
  10aa90:	1d800117 	ldw	r22,4(r3)
  10aa94:	18c00204 	addi	r3,r3,8
  10aa98:	d8c00315 	stw	r3,12(sp)
  10aa9c:	60c0004c 	andi	r3,r12,1
  10aaa0:	18000226 	beq	r3,zero,10aaac <___vfiprintf_internal_r+0x508>
  10aaa4:	ad86b03a 	or	r3,r21,r22
  10aaa8:	1802df1e 	bne	r3,zero,10b628 <___vfiprintf_internal_r+0x1084>
  10aaac:	00800084 	movi	r2,2
  10aab0:	00001906 	br	10ab18 <___vfiprintf_internal_r+0x574>
  10aab4:	e0800007 	ldb	r2,0(fp)
  10aab8:	10c01b18 	cmpnei	r3,r2,108
  10aabc:	18033026 	beq	r3,zero,10b780 <___vfiprintf_internal_r+0x11dc>
  10aac0:	63000414 	ori	r12,r12,16
  10aac4:	003f0606 	br	10a6e0 <___vfiprintf_internal_r+0x13c>
  10aac8:	63001014 	ori	r12,r12,64
  10aacc:	e0800007 	ldb	r2,0(fp)
  10aad0:	003f0306 	br	10a6e0 <___vfiprintf_internal_r+0x13c>
  10aad4:	63000814 	ori	r12,r12,32
  10aad8:	e0800007 	ldb	r2,0(fp)
  10aadc:	003f0006 	br	10a6e0 <___vfiprintf_internal_r+0x13c>
  10aae0:	d8c00317 	ldw	r3,12(sp)
  10aae4:	00800c04 	movi	r2,48
  10aae8:	d8800885 	stb	r2,34(sp)
  10aaec:	00801e04 	movi	r2,120
  10aaf0:	01000474 	movhi	r4,17
  10aaf4:	d88008c5 	stb	r2,35(sp)
  10aaf8:	1d400017 	ldw	r21,0(r3)
  10aafc:	18800104 	addi	r2,r3,4
  10ab00:	d8800315 	stw	r2,12(sp)
  10ab04:	208cc504 	addi	r2,r4,13076
  10ab08:	d8800415 	stw	r2,16(sp)
  10ab0c:	002d883a 	mov	r22,zero
  10ab10:	63000094 	ori	r12,r12,2
  10ab14:	00800084 	movi	r2,2
  10ab18:	d8000845 	stb	zero,33(sp)
  10ab1c:	48ffffe0 	cmpeqi	r3,r9,-1
  10ab20:	001b883a 	mov	r13,zero
  10ab24:	18014c1e 	bne	r3,zero,10b058 <___vfiprintf_internal_r+0xab4>
  10ab28:	053fdfc4 	movi	r20,-129
  10ab2c:	ad86b03a 	or	r3,r21,r22
  10ab30:	6528703a 	and	r20,r12,r20
  10ab34:	1802411e 	bne	r3,zero,10b43c <___vfiprintf_internal_r+0xe98>
  10ab38:	48030d1e 	bne	r9,zero,10b770 <___vfiprintf_internal_r+0x11cc>
  10ab3c:	1000791e 	bne	r2,zero,10ad24 <___vfiprintf_internal_r+0x780>
  10ab40:	6580004c 	andi	r22,r12,1
  10ab44:	b002b126 	beq	r22,zero,10b60c <___vfiprintf_internal_r+0x1068>
  10ab48:	00800c04 	movi	r2,48
  10ab4c:	d88015c5 	stb	r2,87(sp)
  10ab50:	ddc015c4 	addi	r23,sp,87
  10ab54:	00017e06 	br	10b150 <___vfiprintf_internal_r+0xbac>
  10ab58:	29403fcc 	andi	r5,r5,255
  10ab5c:	2803461e 	bne	r5,zero,10b878 <___vfiprintf_internal_r+0x12d4>
  10ab60:	6080080c 	andi	r2,r12,32
  10ab64:	10016b1e 	bne	r2,zero,10b114 <___vfiprintf_internal_r+0xb70>
  10ab68:	d8800317 	ldw	r2,12(sp)
  10ab6c:	60c0040c 	andi	r3,r12,16
  10ab70:	15400017 	ldw	r21,0(r2)
  10ab74:	10800104 	addi	r2,r2,4
  10ab78:	18010d1e 	bne	r3,zero,10afb0 <___vfiprintf_internal_r+0xa0c>
  10ab7c:	60c0100c 	andi	r3,r12,64
  10ab80:	18031326 	beq	r3,zero,10b7d0 <___vfiprintf_internal_r+0x122c>
  10ab84:	d8800315 	stw	r2,12(sp)
  10ab88:	ad7fffcc 	andi	r21,r21,65535
  10ab8c:	002d883a 	mov	r22,zero
  10ab90:	0005883a 	mov	r2,zero
  10ab94:	003fe006 	br	10ab18 <___vfiprintf_internal_r+0x574>
  10ab98:	29403fcc 	andi	r5,r5,255
  10ab9c:	2803251e 	bne	r5,zero,10b834 <___vfiprintf_internal_r+0x1290>
  10aba0:	00c00474 	movhi	r3,17
  10aba4:	18ccc004 	addi	r3,r3,13056
  10aba8:	d8c00415 	stw	r3,16(sp)
  10abac:	60c0080c 	andi	r3,r12,32
  10abb0:	183fb51e 	bne	r3,zero,10aa88 <___vfiprintf_internal_r+0x4e4>
  10abb4:	d9000317 	ldw	r4,12(sp)
  10abb8:	60c0040c 	andi	r3,r12,16
  10abbc:	25400017 	ldw	r21,0(r4)
  10abc0:	21000104 	addi	r4,r4,4
  10abc4:	d9000315 	stw	r4,12(sp)
  10abc8:	18026e1e 	bne	r3,zero,10b584 <___vfiprintf_internal_r+0xfe0>
  10abcc:	60c0100c 	andi	r3,r12,64
  10abd0:	18026c26 	beq	r3,zero,10b584 <___vfiprintf_internal_r+0xfe0>
  10abd4:	ad7fffcc 	andi	r21,r21,65535
  10abd8:	002d883a 	mov	r22,zero
  10abdc:	003faf06 	br	10aa9c <___vfiprintf_internal_r+0x4f8>
  10abe0:	29403fcc 	andi	r5,r5,255
  10abe4:	2803151e 	bne	r5,zero,10b83c <___vfiprintf_internal_r+0x1298>
  10abe8:	6080080c 	andi	r2,r12,32
  10abec:	10013b1e 	bne	r2,zero,10b0dc <___vfiprintf_internal_r+0xb38>
  10abf0:	d8800317 	ldw	r2,12(sp)
  10abf4:	60c0040c 	andi	r3,r12,16
  10abf8:	15400017 	ldw	r21,0(r2)
  10abfc:	10800104 	addi	r2,r2,4
  10ac00:	1800f81e 	bne	r3,zero,10afe4 <___vfiprintf_internal_r+0xa40>
  10ac04:	60c0100c 	andi	r3,r12,64
  10ac08:	1802ed26 	beq	r3,zero,10b7c0 <___vfiprintf_internal_r+0x121c>
  10ac0c:	d8800315 	stw	r2,12(sp)
  10ac10:	ad7fffcc 	andi	r21,r21,65535
  10ac14:	002d883a 	mov	r22,zero
  10ac18:	00800044 	movi	r2,1
  10ac1c:	003fbe06 	br	10ab18 <___vfiprintf_internal_r+0x574>
  10ac20:	d8800317 	ldw	r2,12(sp)
  10ac24:	d8000845 	stb	zero,33(sp)
  10ac28:	15c00017 	ldw	r23,0(r2)
  10ac2c:	15000104 	addi	r20,r2,4
  10ac30:	b802da26 	beq	r23,zero,10b79c <___vfiprintf_internal_r+0x11f8>
  10ac34:	48bfffe0 	cmpeqi	r2,r9,-1
  10ac38:	1002901e 	bne	r2,zero,10b67c <___vfiprintf_internal_r+0x10d8>
  10ac3c:	480d883a 	mov	r6,r9
  10ac40:	000b883a 	mov	r5,zero
  10ac44:	b809883a 	mov	r4,r23
  10ac48:	da000315 	stw	r8,12(sp)
  10ac4c:	db000215 	stw	r12,8(sp)
  10ac50:	da400115 	stw	r9,4(sp)
  10ac54:	01088700 	call	108870 <memchr>
  10ac58:	da400117 	ldw	r9,4(sp)
  10ac5c:	db000217 	ldw	r12,8(sp)
  10ac60:	da000317 	ldw	r8,12(sp)
  10ac64:	1002ef26 	beq	r2,zero,10b824 <___vfiprintf_internal_r+0x1280>
  10ac68:	15edc83a 	sub	r22,r2,r23
  10ac6c:	b02b883a 	mov	r21,r22
  10ac70:	b000010e 	bge	r22,zero,10ac78 <___vfiprintf_internal_r+0x6d4>
  10ac74:	002b883a 	mov	r21,zero
  10ac78:	dd000315 	stw	r20,12(sp)
  10ac7c:	00003606 	br	10ad58 <___vfiprintf_internal_r+0x7b4>
  10ac80:	29403fcc 	andi	r5,r5,255
  10ac84:	2802fa1e 	bne	r5,zero,10b870 <___vfiprintf_internal_r+0x12cc>
  10ac88:	d9000317 	ldw	r4,12(sp)
  10ac8c:	6080080c 	andi	r2,r12,32
  10ac90:	20c00104 	addi	r3,r4,4
  10ac94:	10026a1e 	bne	r2,zero,10b640 <___vfiprintf_internal_r+0x109c>
  10ac98:	6080040c 	andi	r2,r12,16
  10ac9c:	1002891e 	bne	r2,zero,10b6c4 <___vfiprintf_internal_r+0x1120>
  10aca0:	6300100c 	andi	r12,r12,64
  10aca4:	60028726 	beq	r12,zero,10b6c4 <___vfiprintf_internal_r+0x1120>
  10aca8:	d8800317 	ldw	r2,12(sp)
  10acac:	d8c00315 	stw	r3,12(sp)
  10acb0:	d8c00017 	ldw	r3,0(sp)
  10acb4:	10800017 	ldw	r2,0(r2)
  10acb8:	10c0000d 	sth	r3,0(r2)
  10acbc:	003e6206 	br	10a648 <___vfiprintf_internal_r+0xa4>
  10acc0:	29403fcc 	andi	r5,r5,255
  10acc4:	2802e81e 	bne	r5,zero,10b868 <___vfiprintf_internal_r+0x12c4>
  10acc8:	6080080c 	andi	r2,r12,32
  10accc:	10010a1e 	bne	r2,zero,10b0f8 <___vfiprintf_internal_r+0xb54>
  10acd0:	d8800317 	ldw	r2,12(sp)
  10acd4:	60c0040c 	andi	r3,r12,16
  10acd8:	10800104 	addi	r2,r2,4
  10acdc:	1800ce1e 	bne	r3,zero,10b018 <___vfiprintf_internal_r+0xa74>
  10ace0:	60c0100c 	andi	r3,r12,64
  10ace4:	1800cc26 	beq	r3,zero,10b018 <___vfiprintf_internal_r+0xa74>
  10ace8:	d8c00317 	ldw	r3,12(sp)
  10acec:	d8800315 	stw	r2,12(sp)
  10acf0:	1d40000f 	ldh	r21,0(r3)
  10acf4:	a82dd7fa 	srai	r22,r21,31
  10acf8:	b005883a 	mov	r2,r22
  10acfc:	1000cc16 	blt	r2,zero,10b030 <___vfiprintf_internal_r+0xa8c>
  10ad00:	48bfffd8 	cmpnei	r2,r9,-1
  10ad04:	db400843 	ldbu	r13,33(sp)
  10ad08:	10010926 	beq	r2,zero,10b130 <___vfiprintf_internal_r+0xb8c>
  10ad0c:	00ffdfc4 	movi	r3,-129
  10ad10:	ad84b03a 	or	r2,r21,r22
  10ad14:	60d8703a 	and	r12,r12,r3
  10ad18:	1001051e 	bne	r2,zero,10b130 <___vfiprintf_internal_r+0xb8c>
  10ad1c:	4801071e 	bne	r9,zero,10b13c <___vfiprintf_internal_r+0xb98>
  10ad20:	6029883a 	mov	r20,r12
  10ad24:	0013883a 	mov	r9,zero
  10ad28:	002d883a 	mov	r22,zero
  10ad2c:	882f883a 	mov	r23,r17
  10ad30:	00010706 	br	10b150 <___vfiprintf_internal_r+0xbac>
  10ad34:	d8c00317 	ldw	r3,12(sp)
  10ad38:	d8000845 	stb	zero,33(sp)
  10ad3c:	05400044 	movi	r21,1
  10ad40:	18800017 	ldw	r2,0(r3)
  10ad44:	18c00104 	addi	r3,r3,4
  10ad48:	d8c00315 	stw	r3,12(sp)
  10ad4c:	d8800c05 	stb	r2,48(sp)
  10ad50:	05800044 	movi	r22,1
  10ad54:	ddc00c04 	addi	r23,sp,48
  10ad58:	6029883a 	mov	r20,r12
  10ad5c:	0013883a 	mov	r9,zero
  10ad60:	a340008c 	andi	r13,r20,2
  10ad64:	68000126 	beq	r13,zero,10ad6c <___vfiprintf_internal_r+0x7c8>
  10ad68:	ad400084 	addi	r21,r21,2
  10ad6c:	d9000a17 	ldw	r4,40(sp)
  10ad70:	a300210c 	andi	r12,r20,132
  10ad74:	d8800b17 	ldw	r2,44(sp)
  10ad78:	21800044 	addi	r6,r4,1
  10ad7c:	300b883a 	mov	r5,r6
  10ad80:	6000021e 	bne	r12,zero,10ad8c <___vfiprintf_internal_r+0x7e8>
  10ad84:	8547c83a 	sub	r3,r16,r21
  10ad88:	00c1ae16 	blt	zero,r3,10b444 <___vfiprintf_internal_r+0xea0>
  10ad8c:	d9800847 	ldb	r6,33(sp)
  10ad90:	40c00204 	addi	r3,r8,8
  10ad94:	30000d26 	beq	r6,zero,10adcc <___vfiprintf_internal_r+0x828>
  10ad98:	d9000844 	addi	r4,sp,33
  10ad9c:	10800044 	addi	r2,r2,1
  10ada0:	41000015 	stw	r4,0(r8)
  10ada4:	01000044 	movi	r4,1
  10ada8:	41000115 	stw	r4,4(r8)
  10adac:	d8800b15 	stw	r2,44(sp)
  10adb0:	d9400a15 	stw	r5,40(sp)
  10adb4:	29000208 	cmpgei	r4,r5,8
  10adb8:	2001831e 	bne	r4,zero,10b3c8 <___vfiprintf_internal_r+0xe24>
  10adbc:	2809883a 	mov	r4,r5
  10adc0:	1811883a 	mov	r8,r3
  10adc4:	29400044 	addi	r5,r5,1
  10adc8:	18c00204 	addi	r3,r3,8
  10adcc:	68001826 	beq	r13,zero,10ae30 <___vfiprintf_internal_r+0x88c>
  10add0:	d9000884 	addi	r4,sp,34
  10add4:	10800084 	addi	r2,r2,2
  10add8:	41000015 	stw	r4,0(r8)
  10addc:	01000084 	movi	r4,2
  10ade0:	41000115 	stw	r4,4(r8)
  10ade4:	d8800b15 	stw	r2,44(sp)
  10ade8:	d9400a15 	stw	r5,40(sp)
  10adec:	29000208 	cmpgei	r4,r5,8
  10adf0:	20018d26 	beq	r4,zero,10b428 <___vfiprintf_internal_r+0xe84>
  10adf4:	1001ed26 	beq	r2,zero,10b5ac <___vfiprintf_internal_r+0x1008>
  10adf8:	d9800904 	addi	r6,sp,36
  10adfc:	900b883a 	mov	r5,r18
  10ae00:	9809883a 	mov	r4,r19
  10ae04:	da400215 	stw	r9,8(sp)
  10ae08:	db000115 	stw	r12,4(sp)
  10ae0c:	010a4980 	call	10a498 <__sprint_r.part.0>
  10ae10:	103eb71e 	bne	r2,zero,10a8f0 <___vfiprintf_internal_r+0x34c>
  10ae14:	d9000a17 	ldw	r4,40(sp)
  10ae18:	d8800b17 	ldw	r2,44(sp)
  10ae1c:	da400217 	ldw	r9,8(sp)
  10ae20:	db000117 	ldw	r12,4(sp)
  10ae24:	d8c01804 	addi	r3,sp,96
  10ae28:	21400044 	addi	r5,r4,1
  10ae2c:	8811883a 	mov	r8,r17
  10ae30:	63002018 	cmpnei	r12,r12,128
  10ae34:	6000e326 	beq	r12,zero,10b1c4 <___vfiprintf_internal_r+0xc20>
  10ae38:	4d93c83a 	sub	r9,r9,r22
  10ae3c:	02412216 	blt	zero,r9,10b2c8 <___vfiprintf_internal_r+0xd24>
  10ae40:	b085883a 	add	r2,r22,r2
  10ae44:	d9400a15 	stw	r5,40(sp)
  10ae48:	45c00015 	stw	r23,0(r8)
  10ae4c:	45800115 	stw	r22,4(r8)
  10ae50:	d8800b15 	stw	r2,44(sp)
  10ae54:	29400210 	cmplti	r5,r5,8
  10ae58:	2800081e 	bne	r5,zero,10ae7c <___vfiprintf_internal_r+0x8d8>
  10ae5c:	10001426 	beq	r2,zero,10aeb0 <___vfiprintf_internal_r+0x90c>
  10ae60:	d9800904 	addi	r6,sp,36
  10ae64:	900b883a 	mov	r5,r18
  10ae68:	9809883a 	mov	r4,r19
  10ae6c:	010a4980 	call	10a498 <__sprint_r.part.0>
  10ae70:	103e9f1e 	bne	r2,zero,10a8f0 <___vfiprintf_internal_r+0x34c>
  10ae74:	d8800b17 	ldw	r2,44(sp)
  10ae78:	8807883a 	mov	r3,r17
  10ae7c:	a500010c 	andi	r20,r20,4
  10ae80:	a0000226 	beq	r20,zero,10ae8c <___vfiprintf_internal_r+0x8e8>
  10ae84:	8569c83a 	sub	r20,r16,r21
  10ae88:	05000f16 	blt	zero,r20,10aec8 <___vfiprintf_internal_r+0x924>
  10ae8c:	8540010e 	bge	r16,r21,10ae94 <___vfiprintf_internal_r+0x8f0>
  10ae90:	a821883a 	mov	r16,r21
  10ae94:	d8c00017 	ldw	r3,0(sp)
  10ae98:	1c07883a 	add	r3,r3,r16
  10ae9c:	d8c00015 	stw	r3,0(sp)
  10aea0:	10013f1e 	bne	r2,zero,10b3a0 <___vfiprintf_internal_r+0xdfc>
  10aea4:	d8000a15 	stw	zero,40(sp)
  10aea8:	8811883a 	mov	r8,r17
  10aeac:	003de606 	br	10a648 <___vfiprintf_internal_r+0xa4>
  10aeb0:	d8000a15 	stw	zero,40(sp)
  10aeb4:	a500010c 	andi	r20,r20,4
  10aeb8:	a0019d26 	beq	r20,zero,10b530 <___vfiprintf_internal_r+0xf8c>
  10aebc:	8569c83a 	sub	r20,r16,r21
  10aec0:	05019b0e 	bge	zero,r20,10b530 <___vfiprintf_internal_r+0xf8c>
  10aec4:	8807883a 	mov	r3,r17
  10aec8:	a1000450 	cmplti	r4,r20,17
  10aecc:	01c00474 	movhi	r7,17
  10aed0:	d9400a17 	ldw	r5,40(sp)
  10aed4:	20026c1e 	bne	r4,zero,10b888 <___vfiprintf_internal_r+0x12e4>
  10aed8:	39cd2604 	addi	r7,r7,13464
  10aedc:	05800404 	movi	r22,16
  10aee0:	00000606 	br	10aefc <___vfiprintf_internal_r+0x958>
  10aee4:	29800084 	addi	r6,r5,2
  10aee8:	18c00204 	addi	r3,r3,8
  10aeec:	200b883a 	mov	r5,r4
  10aef0:	a53ffc04 	addi	r20,r20,-16
  10aef4:	a1000448 	cmpgei	r4,r20,17
  10aef8:	20001726 	beq	r4,zero,10af58 <___vfiprintf_internal_r+0x9b4>
  10aefc:	29000044 	addi	r4,r5,1
  10af00:	10800404 	addi	r2,r2,16
  10af04:	19c00015 	stw	r7,0(r3)
  10af08:	1d800115 	stw	r22,4(r3)
  10af0c:	d8800b15 	stw	r2,44(sp)
  10af10:	d9000a15 	stw	r4,40(sp)
  10af14:	21800208 	cmpgei	r6,r4,8
  10af18:	303ff226 	beq	r6,zero,10aee4 <___vfiprintf_internal_r+0x940>
  10af1c:	d9800904 	addi	r6,sp,36
  10af20:	900b883a 	mov	r5,r18
  10af24:	9809883a 	mov	r4,r19
  10af28:	1000a226 	beq	r2,zero,10b1b4 <___vfiprintf_internal_r+0xc10>
  10af2c:	d9c00115 	stw	r7,4(sp)
  10af30:	010a4980 	call	10a498 <__sprint_r.part.0>
  10af34:	103e6e1e 	bne	r2,zero,10a8f0 <___vfiprintf_internal_r+0x34c>
  10af38:	d9400a17 	ldw	r5,40(sp)
  10af3c:	a53ffc04 	addi	r20,r20,-16
  10af40:	a1000448 	cmpgei	r4,r20,17
  10af44:	d8800b17 	ldw	r2,44(sp)
  10af48:	8807883a 	mov	r3,r17
  10af4c:	29800044 	addi	r6,r5,1
  10af50:	d9c00117 	ldw	r7,4(sp)
  10af54:	203fe91e 	bne	r4,zero,10aefc <___vfiprintf_internal_r+0x958>
  10af58:	1505883a 	add	r2,r2,r20
  10af5c:	d9800a15 	stw	r6,40(sp)
  10af60:	19c00015 	stw	r7,0(r3)
  10af64:	1d000115 	stw	r20,4(r3)
  10af68:	d8800b15 	stw	r2,44(sp)
  10af6c:	31800210 	cmplti	r6,r6,8
  10af70:	303fc61e 	bne	r6,zero,10ae8c <___vfiprintf_internal_r+0x8e8>
  10af74:	10016e26 	beq	r2,zero,10b530 <___vfiprintf_internal_r+0xf8c>
  10af78:	d9800904 	addi	r6,sp,36
  10af7c:	900b883a 	mov	r5,r18
  10af80:	9809883a 	mov	r4,r19
  10af84:	010a4980 	call	10a498 <__sprint_r.part.0>
  10af88:	103e591e 	bne	r2,zero,10a8f0 <___vfiprintf_internal_r+0x34c>
  10af8c:	d8800b17 	ldw	r2,44(sp)
  10af90:	003fbe06 	br	10ae8c <___vfiprintf_internal_r+0x8e8>
  10af94:	29403fcc 	andi	r5,r5,255
  10af98:	28022c1e 	bne	r5,zero,10b84c <___vfiprintf_internal_r+0x12a8>
  10af9c:	6080080c 	andi	r2,r12,32
  10afa0:	63000414 	ori	r12,r12,16
  10afa4:	10005b1e 	bne	r2,zero,10b114 <___vfiprintf_internal_r+0xb70>
  10afa8:	d8800317 	ldw	r2,12(sp)
  10afac:	10800104 	addi	r2,r2,4
  10afb0:	d8c00317 	ldw	r3,12(sp)
  10afb4:	002d883a 	mov	r22,zero
  10afb8:	d8800315 	stw	r2,12(sp)
  10afbc:	1d400017 	ldw	r21,0(r3)
  10afc0:	0005883a 	mov	r2,zero
  10afc4:	003ed406 	br	10ab18 <___vfiprintf_internal_r+0x574>
  10afc8:	29403fcc 	andi	r5,r5,255
  10afcc:	2802211e 	bne	r5,zero,10b854 <___vfiprintf_internal_r+0x12b0>
  10afd0:	6080080c 	andi	r2,r12,32
  10afd4:	63000414 	ori	r12,r12,16
  10afd8:	1000401e 	bne	r2,zero,10b0dc <___vfiprintf_internal_r+0xb38>
  10afdc:	d8800317 	ldw	r2,12(sp)
  10afe0:	10800104 	addi	r2,r2,4
  10afe4:	d8c00317 	ldw	r3,12(sp)
  10afe8:	002d883a 	mov	r22,zero
  10afec:	d8800315 	stw	r2,12(sp)
  10aff0:	1d400017 	ldw	r21,0(r3)
  10aff4:	00800044 	movi	r2,1
  10aff8:	003ec706 	br	10ab18 <___vfiprintf_internal_r+0x574>
  10affc:	29403fcc 	andi	r5,r5,255
  10b000:	28021f1e 	bne	r5,zero,10b880 <___vfiprintf_internal_r+0x12dc>
  10b004:	6080080c 	andi	r2,r12,32
  10b008:	63000414 	ori	r12,r12,16
  10b00c:	10003a1e 	bne	r2,zero,10b0f8 <___vfiprintf_internal_r+0xb54>
  10b010:	d8800317 	ldw	r2,12(sp)
  10b014:	10800104 	addi	r2,r2,4
  10b018:	d8c00317 	ldw	r3,12(sp)
  10b01c:	1d400017 	ldw	r21,0(r3)
  10b020:	d8800315 	stw	r2,12(sp)
  10b024:	a82dd7fa 	srai	r22,r21,31
  10b028:	b005883a 	mov	r2,r22
  10b02c:	103f340e 	bge	r2,zero,10ad00 <___vfiprintf_internal_r+0x75c>
  10b030:	056bc83a 	sub	r21,zero,r21
  10b034:	a804c03a 	cmpne	r2,r21,zero
  10b038:	05adc83a 	sub	r22,zero,r22
  10b03c:	b0adc83a 	sub	r22,r22,r2
  10b040:	00800b44 	movi	r2,45
  10b044:	d8800845 	stb	r2,33(sp)
  10b048:	48ffffe0 	cmpeqi	r3,r9,-1
  10b04c:	03400b44 	movi	r13,45
  10b050:	00800044 	movi	r2,1
  10b054:	183eb426 	beq	r3,zero,10ab28 <___vfiprintf_internal_r+0x584>
  10b058:	10c00060 	cmpeqi	r3,r2,1
  10b05c:	1800341e 	bne	r3,zero,10b130 <___vfiprintf_internal_r+0xb8c>
  10b060:	108000a0 	cmpeqi	r2,r2,2
  10b064:	1000431e 	bne	r2,zero,10b174 <___vfiprintf_internal_r+0xbd0>
  10b068:	8807883a 	mov	r3,r17
  10b06c:	00000106 	br	10b074 <___vfiprintf_internal_r+0xad0>
  10b070:	b807883a 	mov	r3,r23
  10b074:	a808d0fa 	srli	r4,r21,3
  10b078:	b00a977a 	slli	r5,r22,29
  10b07c:	b02cd0fa 	srli	r22,r22,3
  10b080:	ad4001cc 	andi	r21,r21,7
  10b084:	a8800c04 	addi	r2,r21,48
  10b088:	292ab03a 	or	r21,r5,r4
  10b08c:	18bfffc5 	stb	r2,-1(r3)
  10b090:	ad88b03a 	or	r4,r21,r22
  10b094:	1dffffc4 	addi	r23,r3,-1
  10b098:	203ff51e 	bne	r4,zero,10b070 <___vfiprintf_internal_r+0xacc>
  10b09c:	6100004c 	andi	r4,r12,1
  10b0a0:	20004126 	beq	r4,zero,10b1a8 <___vfiprintf_internal_r+0xc04>
  10b0a4:	10803fcc 	andi	r2,r2,255
  10b0a8:	1080201c 	xori	r2,r2,128
  10b0ac:	10bfe004 	addi	r2,r2,-128
  10b0b0:	10800c18 	cmpnei	r2,r2,48
  10b0b4:	10003c26 	beq	r2,zero,10b1a8 <___vfiprintf_internal_r+0xc04>
  10b0b8:	18ffff84 	addi	r3,r3,-2
  10b0bc:	00800c04 	movi	r2,48
  10b0c0:	b8bfffc5 	stb	r2,-1(r23)
  10b0c4:	88edc83a 	sub	r22,r17,r3
  10b0c8:	6029883a 	mov	r20,r12
  10b0cc:	182f883a 	mov	r23,r3
  10b0d0:	00001f06 	br	10b150 <___vfiprintf_internal_r+0xbac>
  10b0d4:	01073fc0 	call	1073fc <__sinit>
  10b0d8:	003d4406 	br	10a5ec <___vfiprintf_internal_r+0x48>
  10b0dc:	d8c00317 	ldw	r3,12(sp)
  10b0e0:	00800044 	movi	r2,1
  10b0e4:	1d400017 	ldw	r21,0(r3)
  10b0e8:	1d800117 	ldw	r22,4(r3)
  10b0ec:	18c00204 	addi	r3,r3,8
  10b0f0:	d8c00315 	stw	r3,12(sp)
  10b0f4:	003e8806 	br	10ab18 <___vfiprintf_internal_r+0x574>
  10b0f8:	d8c00317 	ldw	r3,12(sp)
  10b0fc:	18800117 	ldw	r2,4(r3)
  10b100:	1d400017 	ldw	r21,0(r3)
  10b104:	18c00204 	addi	r3,r3,8
  10b108:	d8c00315 	stw	r3,12(sp)
  10b10c:	102d883a 	mov	r22,r2
  10b110:	003efa06 	br	10acfc <___vfiprintf_internal_r+0x758>
  10b114:	d8c00317 	ldw	r3,12(sp)
  10b118:	0005883a 	mov	r2,zero
  10b11c:	1d400017 	ldw	r21,0(r3)
  10b120:	1d800117 	ldw	r22,4(r3)
  10b124:	18c00204 	addi	r3,r3,8
  10b128:	d8c00315 	stw	r3,12(sp)
  10b12c:	003e7a06 	br	10ab18 <___vfiprintf_internal_r+0x574>
  10b130:	b0016a1e 	bne	r22,zero,10b6dc <___vfiprintf_internal_r+0x1138>
  10b134:	a88002a8 	cmpgeui	r2,r21,10
  10b138:	1001681e 	bne	r2,zero,10b6dc <___vfiprintf_internal_r+0x1138>
  10b13c:	ad400c04 	addi	r21,r21,48
  10b140:	dd4015c5 	stb	r21,87(sp)
  10b144:	6029883a 	mov	r20,r12
  10b148:	05800044 	movi	r22,1
  10b14c:	ddc015c4 	addi	r23,sp,87
  10b150:	482b883a 	mov	r21,r9
  10b154:	4d80010e 	bge	r9,r22,10b15c <___vfiprintf_internal_r+0xbb8>
  10b158:	b02b883a 	mov	r21,r22
  10b15c:	6b403fcc 	andi	r13,r13,255
  10b160:	6b40201c 	xori	r13,r13,128
  10b164:	6b7fe004 	addi	r13,r13,-128
  10b168:	683efd26 	beq	r13,zero,10ad60 <___vfiprintf_internal_r+0x7bc>
  10b16c:	ad400044 	addi	r21,r21,1
  10b170:	003efb06 	br	10ad60 <___vfiprintf_internal_r+0x7bc>
  10b174:	882f883a 	mov	r23,r17
  10b178:	d9000417 	ldw	r4,16(sp)
  10b17c:	a88003cc 	andi	r2,r21,15
  10b180:	b006973a 	slli	r3,r22,28
  10b184:	2085883a 	add	r2,r4,r2
  10b188:	a82ad13a 	srli	r21,r21,4
  10b18c:	10800003 	ldbu	r2,0(r2)
  10b190:	b02cd13a 	srli	r22,r22,4
  10b194:	bdffffc4 	addi	r23,r23,-1
  10b198:	1d6ab03a 	or	r21,r3,r21
  10b19c:	b8800005 	stb	r2,0(r23)
  10b1a0:	ad84b03a 	or	r2,r21,r22
  10b1a4:	103ff41e 	bne	r2,zero,10b178 <___vfiprintf_internal_r+0xbd4>
  10b1a8:	8dedc83a 	sub	r22,r17,r23
  10b1ac:	6029883a 	mov	r20,r12
  10b1b0:	003fe706 	br	10b150 <___vfiprintf_internal_r+0xbac>
  10b1b4:	01800044 	movi	r6,1
  10b1b8:	000b883a 	mov	r5,zero
  10b1bc:	8807883a 	mov	r3,r17
  10b1c0:	003f4b06 	br	10aef0 <___vfiprintf_internal_r+0x94c>
  10b1c4:	8559c83a 	sub	r12,r16,r21
  10b1c8:	033f1b0e 	bge	zero,r12,10ae38 <___vfiprintf_internal_r+0x894>
  10b1cc:	61800450 	cmplti	r6,r12,17
  10b1d0:	01c00474 	movhi	r7,17
  10b1d4:	3001af1e 	bne	r6,zero,10b894 <___vfiprintf_internal_r+0x12f0>
  10b1d8:	39cd2204 	addi	r7,r7,13448
  10b1dc:	03400404 	movi	r13,16
  10b1e0:	00000606 	br	10b1fc <___vfiprintf_internal_r+0xc58>
  10b1e4:	21800084 	addi	r6,r4,2
  10b1e8:	42000204 	addi	r8,r8,8
  10b1ec:	1809883a 	mov	r4,r3
  10b1f0:	633ffc04 	addi	r12,r12,-16
  10b1f4:	60c00448 	cmpgei	r3,r12,17
  10b1f8:	18001c26 	beq	r3,zero,10b26c <___vfiprintf_internal_r+0xcc8>
  10b1fc:	20c00044 	addi	r3,r4,1
  10b200:	10800404 	addi	r2,r2,16
  10b204:	41c00015 	stw	r7,0(r8)
  10b208:	43400115 	stw	r13,4(r8)
  10b20c:	d8800b15 	stw	r2,44(sp)
  10b210:	d8c00a15 	stw	r3,40(sp)
  10b214:	19400208 	cmpgei	r5,r3,8
  10b218:	283ff226 	beq	r5,zero,10b1e4 <___vfiprintf_internal_r+0xc40>
  10b21c:	d9800904 	addi	r6,sp,36
  10b220:	900b883a 	mov	r5,r18
  10b224:	9809883a 	mov	r4,r19
  10b228:	10006326 	beq	r2,zero,10b3b8 <___vfiprintf_internal_r+0xe14>
  10b22c:	d9c00515 	stw	r7,20(sp)
  10b230:	db000215 	stw	r12,8(sp)
  10b234:	da400115 	stw	r9,4(sp)
  10b238:	010a4980 	call	10a498 <__sprint_r.part.0>
  10b23c:	103dac1e 	bne	r2,zero,10a8f0 <___vfiprintf_internal_r+0x34c>
  10b240:	db000217 	ldw	r12,8(sp)
  10b244:	d9000a17 	ldw	r4,40(sp)
  10b248:	d8800b17 	ldw	r2,44(sp)
  10b24c:	633ffc04 	addi	r12,r12,-16
  10b250:	60c00448 	cmpgei	r3,r12,17
  10b254:	8811883a 	mov	r8,r17
  10b258:	21800044 	addi	r6,r4,1
  10b25c:	d9c00517 	ldw	r7,20(sp)
  10b260:	03400404 	movi	r13,16
  10b264:	da400117 	ldw	r9,4(sp)
  10b268:	183fe41e 	bne	r3,zero,10b1fc <___vfiprintf_internal_r+0xc58>
  10b26c:	43400204 	addi	r13,r8,8
  10b270:	1305883a 	add	r2,r2,r12
  10b274:	41c00015 	stw	r7,0(r8)
  10b278:	43000115 	stw	r12,4(r8)
  10b27c:	d8800b15 	stw	r2,44(sp)
  10b280:	d9800a15 	stw	r6,40(sp)
  10b284:	30c00208 	cmpgei	r3,r6,8
  10b288:	1800e226 	beq	r3,zero,10b614 <___vfiprintf_internal_r+0x1070>
  10b28c:	10015726 	beq	r2,zero,10b7ec <___vfiprintf_internal_r+0x1248>
  10b290:	d9800904 	addi	r6,sp,36
  10b294:	900b883a 	mov	r5,r18
  10b298:	9809883a 	mov	r4,r19
  10b29c:	da400115 	stw	r9,4(sp)
  10b2a0:	010a4980 	call	10a498 <__sprint_r.part.0>
  10b2a4:	103d921e 	bne	r2,zero,10a8f0 <___vfiprintf_internal_r+0x34c>
  10b2a8:	da400117 	ldw	r9,4(sp)
  10b2ac:	d9000a17 	ldw	r4,40(sp)
  10b2b0:	d8800b17 	ldw	r2,44(sp)
  10b2b4:	4d93c83a 	sub	r9,r9,r22
  10b2b8:	d8c01804 	addi	r3,sp,96
  10b2bc:	21400044 	addi	r5,r4,1
  10b2c0:	8811883a 	mov	r8,r17
  10b2c4:	027ede0e 	bge	zero,r9,10ae40 <___vfiprintf_internal_r+0x89c>
  10b2c8:	49800450 	cmplti	r6,r9,17
  10b2cc:	01c00474 	movhi	r7,17
  10b2d0:	3001431e 	bne	r6,zero,10b7e0 <___vfiprintf_internal_r+0x123c>
  10b2d4:	39cd2204 	addi	r7,r7,13448
  10b2d8:	03000404 	movi	r12,16
  10b2dc:	00000606 	br	10b2f8 <___vfiprintf_internal_r+0xd54>
  10b2e0:	21400084 	addi	r5,r4,2
  10b2e4:	42000204 	addi	r8,r8,8
  10b2e8:	1809883a 	mov	r4,r3
  10b2ec:	4a7ffc04 	addi	r9,r9,-16
  10b2f0:	48c00448 	cmpgei	r3,r9,17
  10b2f4:	18001a26 	beq	r3,zero,10b360 <___vfiprintf_internal_r+0xdbc>
  10b2f8:	20c00044 	addi	r3,r4,1
  10b2fc:	10800404 	addi	r2,r2,16
  10b300:	41c00015 	stw	r7,0(r8)
  10b304:	43000115 	stw	r12,4(r8)
  10b308:	d8800b15 	stw	r2,44(sp)
  10b30c:	d8c00a15 	stw	r3,40(sp)
  10b310:	19400208 	cmpgei	r5,r3,8
  10b314:	283ff226 	beq	r5,zero,10b2e0 <___vfiprintf_internal_r+0xd3c>
  10b318:	d9800904 	addi	r6,sp,36
  10b31c:	900b883a 	mov	r5,r18
  10b320:	9809883a 	mov	r4,r19
  10b324:	10001a26 	beq	r2,zero,10b390 <___vfiprintf_internal_r+0xdec>
  10b328:	d9c00215 	stw	r7,8(sp)
  10b32c:	da400115 	stw	r9,4(sp)
  10b330:	010a4980 	call	10a498 <__sprint_r.part.0>
  10b334:	103d6e1e 	bne	r2,zero,10a8f0 <___vfiprintf_internal_r+0x34c>
  10b338:	da400117 	ldw	r9,4(sp)
  10b33c:	d9000a17 	ldw	r4,40(sp)
  10b340:	d8800b17 	ldw	r2,44(sp)
  10b344:	4a7ffc04 	addi	r9,r9,-16
  10b348:	48c00448 	cmpgei	r3,r9,17
  10b34c:	8811883a 	mov	r8,r17
  10b350:	21400044 	addi	r5,r4,1
  10b354:	d9c00217 	ldw	r7,8(sp)
  10b358:	03000404 	movi	r12,16
  10b35c:	183fe61e 	bne	r3,zero,10b2f8 <___vfiprintf_internal_r+0xd54>
  10b360:	41000204 	addi	r4,r8,8
  10b364:	1245883a 	add	r2,r2,r9
  10b368:	41c00015 	stw	r7,0(r8)
  10b36c:	42400115 	stw	r9,4(r8)
  10b370:	d8800b15 	stw	r2,44(sp)
  10b374:	d9400a15 	stw	r5,40(sp)
  10b378:	28c00208 	cmpgei	r3,r5,8
  10b37c:	1800721e 	bne	r3,zero,10b548 <___vfiprintf_internal_r+0xfa4>
  10b380:	29400044 	addi	r5,r5,1
  10b384:	20c00204 	addi	r3,r4,8
  10b388:	2011883a 	mov	r8,r4
  10b38c:	003eac06 	br	10ae40 <___vfiprintf_internal_r+0x89c>
  10b390:	01400044 	movi	r5,1
  10b394:	0009883a 	mov	r4,zero
  10b398:	8811883a 	mov	r8,r17
  10b39c:	003fd306 	br	10b2ec <___vfiprintf_internal_r+0xd48>
  10b3a0:	d9800904 	addi	r6,sp,36
  10b3a4:	900b883a 	mov	r5,r18
  10b3a8:	9809883a 	mov	r4,r19
  10b3ac:	010a4980 	call	10a498 <__sprint_r.part.0>
  10b3b0:	103ebc26 	beq	r2,zero,10aea4 <___vfiprintf_internal_r+0x900>
  10b3b4:	003d4e06 	br	10a8f0 <___vfiprintf_internal_r+0x34c>
  10b3b8:	01800044 	movi	r6,1
  10b3bc:	0009883a 	mov	r4,zero
  10b3c0:	8811883a 	mov	r8,r17
  10b3c4:	003f8a06 	br	10b1f0 <___vfiprintf_internal_r+0xc4c>
  10b3c8:	10007026 	beq	r2,zero,10b58c <___vfiprintf_internal_r+0xfe8>
  10b3cc:	d9800904 	addi	r6,sp,36
  10b3d0:	900b883a 	mov	r5,r18
  10b3d4:	9809883a 	mov	r4,r19
  10b3d8:	da400515 	stw	r9,20(sp)
  10b3dc:	db000215 	stw	r12,8(sp)
  10b3e0:	db400115 	stw	r13,4(sp)
  10b3e4:	010a4980 	call	10a498 <__sprint_r.part.0>
  10b3e8:	103d411e 	bne	r2,zero,10a8f0 <___vfiprintf_internal_r+0x34c>
  10b3ec:	d9000a17 	ldw	r4,40(sp)
  10b3f0:	d8800b17 	ldw	r2,44(sp)
  10b3f4:	d8c01804 	addi	r3,sp,96
  10b3f8:	21400044 	addi	r5,r4,1
  10b3fc:	8811883a 	mov	r8,r17
  10b400:	da400517 	ldw	r9,20(sp)
  10b404:	db000217 	ldw	r12,8(sp)
  10b408:	db400117 	ldw	r13,4(sp)
  10b40c:	003e6f06 	br	10adcc <___vfiprintf_internal_r+0x828>
  10b410:	d8800884 	addi	r2,sp,34
  10b414:	d8801615 	stw	r2,88(sp)
  10b418:	00800084 	movi	r2,2
  10b41c:	d8801715 	stw	r2,92(sp)
  10b420:	d8c01804 	addi	r3,sp,96
  10b424:	01400044 	movi	r5,1
  10b428:	1811883a 	mov	r8,r3
  10b42c:	2809883a 	mov	r4,r5
  10b430:	21400044 	addi	r5,r4,1
  10b434:	40c00204 	addi	r3,r8,8
  10b438:	003e7d06 	br	10ae30 <___vfiprintf_internal_r+0x88c>
  10b43c:	a019883a 	mov	r12,r20
  10b440:	003f0506 	br	10b058 <___vfiprintf_internal_r+0xab4>
  10b444:	19400450 	cmplti	r5,r3,17
  10b448:	01c00474 	movhi	r7,17
  10b44c:	2801031e 	bne	r5,zero,10b85c <___vfiprintf_internal_r+0x12b8>
  10b450:	39cd2604 	addi	r7,r7,13464
  10b454:	03800404 	movi	r14,16
  10b458:	00000706 	br	10b478 <___vfiprintf_internal_r+0xed4>
  10b45c:	23c00084 	addi	r15,r4,2
  10b460:	42000204 	addi	r8,r8,8
  10b464:	3009883a 	mov	r4,r6
  10b468:	18fffc04 	addi	r3,r3,-16
  10b46c:	19400448 	cmpgei	r5,r3,17
  10b470:	28002026 	beq	r5,zero,10b4f4 <___vfiprintf_internal_r+0xf50>
  10b474:	21800044 	addi	r6,r4,1
  10b478:	10800404 	addi	r2,r2,16
  10b47c:	41c00015 	stw	r7,0(r8)
  10b480:	43800115 	stw	r14,4(r8)
  10b484:	d8800b15 	stw	r2,44(sp)
  10b488:	d9800a15 	stw	r6,40(sp)
  10b48c:	31400208 	cmpgei	r5,r6,8
  10b490:	283ff226 	beq	r5,zero,10b45c <___vfiprintf_internal_r+0xeb8>
  10b494:	d9800904 	addi	r6,sp,36
  10b498:	900b883a 	mov	r5,r18
  10b49c:	9809883a 	mov	r4,r19
  10b4a0:	10001f26 	beq	r2,zero,10b520 <___vfiprintf_internal_r+0xf7c>
  10b4a4:	d9c00715 	stw	r7,28(sp)
  10b4a8:	d8c00615 	stw	r3,24(sp)
  10b4ac:	da400515 	stw	r9,20(sp)
  10b4b0:	db000215 	stw	r12,8(sp)
  10b4b4:	db400115 	stw	r13,4(sp)
  10b4b8:	010a4980 	call	10a498 <__sprint_r.part.0>
  10b4bc:	103d0c1e 	bne	r2,zero,10a8f0 <___vfiprintf_internal_r+0x34c>
  10b4c0:	d8c00617 	ldw	r3,24(sp)
  10b4c4:	d9000a17 	ldw	r4,40(sp)
  10b4c8:	d8800b17 	ldw	r2,44(sp)
  10b4cc:	18fffc04 	addi	r3,r3,-16
  10b4d0:	19400448 	cmpgei	r5,r3,17
  10b4d4:	8811883a 	mov	r8,r17
  10b4d8:	23c00044 	addi	r15,r4,1
  10b4dc:	d9c00717 	ldw	r7,28(sp)
  10b4e0:	03800404 	movi	r14,16
  10b4e4:	da400517 	ldw	r9,20(sp)
  10b4e8:	db000217 	ldw	r12,8(sp)
  10b4ec:	db400117 	ldw	r13,4(sp)
  10b4f0:	283fe01e 	bne	r5,zero,10b474 <___vfiprintf_internal_r+0xed0>
  10b4f4:	10c5883a 	add	r2,r2,r3
  10b4f8:	40c00115 	stw	r3,4(r8)
  10b4fc:	41c00015 	stw	r7,0(r8)
  10b500:	d8800b15 	stw	r2,44(sp)
  10b504:	dbc00a15 	stw	r15,40(sp)
  10b508:	78c00208 	cmpgei	r3,r15,8
  10b50c:	18002c1e 	bne	r3,zero,10b5c0 <___vfiprintf_internal_r+0x101c>
  10b510:	42000204 	addi	r8,r8,8
  10b514:	79400044 	addi	r5,r15,1
  10b518:	7809883a 	mov	r4,r15
  10b51c:	003e1b06 	br	10ad8c <___vfiprintf_internal_r+0x7e8>
  10b520:	0009883a 	mov	r4,zero
  10b524:	03c00044 	movi	r15,1
  10b528:	8811883a 	mov	r8,r17
  10b52c:	003fce06 	br	10b468 <___vfiprintf_internal_r+0xec4>
  10b530:	8540010e 	bge	r16,r21,10b538 <___vfiprintf_internal_r+0xf94>
  10b534:	a821883a 	mov	r16,r21
  10b538:	d8800017 	ldw	r2,0(sp)
  10b53c:	1405883a 	add	r2,r2,r16
  10b540:	d8800015 	stw	r2,0(sp)
  10b544:	003e5706 	br	10aea4 <___vfiprintf_internal_r+0x900>
  10b548:	10008126 	beq	r2,zero,10b750 <___vfiprintf_internal_r+0x11ac>
  10b54c:	d9800904 	addi	r6,sp,36
  10b550:	900b883a 	mov	r5,r18
  10b554:	9809883a 	mov	r4,r19
  10b558:	010a4980 	call	10a498 <__sprint_r.part.0>
  10b55c:	103ce41e 	bne	r2,zero,10a8f0 <___vfiprintf_internal_r+0x34c>
  10b560:	d9400a17 	ldw	r5,40(sp)
  10b564:	d8800b17 	ldw	r2,44(sp)
  10b568:	d8c01804 	addi	r3,sp,96
  10b56c:	29400044 	addi	r5,r5,1
  10b570:	8811883a 	mov	r8,r17
  10b574:	003e3206 	br	10ae40 <___vfiprintf_internal_r+0x89c>
  10b578:	d8000a15 	stw	zero,40(sp)
  10b57c:	8811883a 	mov	r8,r17
  10b580:	003c4a06 	br	10a6ac <___vfiprintf_internal_r+0x108>
  10b584:	002d883a 	mov	r22,zero
  10b588:	003d4406 	br	10aa9c <___vfiprintf_internal_r+0x4f8>
  10b58c:	68003326 	beq	r13,zero,10b65c <___vfiprintf_internal_r+0x10b8>
  10b590:	d8800884 	addi	r2,sp,34
  10b594:	d8801615 	stw	r2,88(sp)
  10b598:	00800084 	movi	r2,2
  10b59c:	d8801715 	stw	r2,92(sp)
  10b5a0:	da001804 	addi	r8,sp,96
  10b5a4:	01000044 	movi	r4,1
  10b5a8:	003fa106 	br	10b430 <___vfiprintf_internal_r+0xe8c>
  10b5ac:	d8c01804 	addi	r3,sp,96
  10b5b0:	01400044 	movi	r5,1
  10b5b4:	0009883a 	mov	r4,zero
  10b5b8:	8811883a 	mov	r8,r17
  10b5bc:	003e1c06 	br	10ae30 <___vfiprintf_internal_r+0x88c>
  10b5c0:	10003826 	beq	r2,zero,10b6a4 <___vfiprintf_internal_r+0x1100>
  10b5c4:	d9800904 	addi	r6,sp,36
  10b5c8:	900b883a 	mov	r5,r18
  10b5cc:	9809883a 	mov	r4,r19
  10b5d0:	da400515 	stw	r9,20(sp)
  10b5d4:	db000215 	stw	r12,8(sp)
  10b5d8:	db400115 	stw	r13,4(sp)
  10b5dc:	010a4980 	call	10a498 <__sprint_r.part.0>
  10b5e0:	103cc31e 	bne	r2,zero,10a8f0 <___vfiprintf_internal_r+0x34c>
  10b5e4:	d9000a17 	ldw	r4,40(sp)
  10b5e8:	d8800b17 	ldw	r2,44(sp)
  10b5ec:	8811883a 	mov	r8,r17
  10b5f0:	21400044 	addi	r5,r4,1
  10b5f4:	da400517 	ldw	r9,20(sp)
  10b5f8:	db000217 	ldw	r12,8(sp)
  10b5fc:	db400117 	ldw	r13,4(sp)
  10b600:	003de206 	br	10ad8c <___vfiprintf_internal_r+0x7e8>
  10b604:	e029883a 	mov	r20,fp
  10b608:	003c2d06 	br	10a6c0 <___vfiprintf_internal_r+0x11c>
  10b60c:	882f883a 	mov	r23,r17
  10b610:	003ecf06 	br	10b150 <___vfiprintf_internal_r+0xbac>
  10b614:	31400044 	addi	r5,r6,1
  10b618:	68c00204 	addi	r3,r13,8
  10b61c:	3009883a 	mov	r4,r6
  10b620:	6811883a 	mov	r8,r13
  10b624:	003e0406 	br	10ae38 <___vfiprintf_internal_r+0x894>
  10b628:	00c00c04 	movi	r3,48
  10b62c:	d88008c5 	stb	r2,35(sp)
  10b630:	d8c00885 	stb	r3,34(sp)
  10b634:	63000094 	ori	r12,r12,2
  10b638:	00800084 	movi	r2,2
  10b63c:	003d3606 	br	10ab18 <___vfiprintf_internal_r+0x574>
  10b640:	d9400017 	ldw	r5,0(sp)
  10b644:	20800017 	ldw	r2,0(r4)
  10b648:	d8c00315 	stw	r3,12(sp)
  10b64c:	2809d7fa 	srai	r4,r5,31
  10b650:	11400015 	stw	r5,0(r2)
  10b654:	11000115 	stw	r4,4(r2)
  10b658:	003bfb06 	br	10a648 <___vfiprintf_internal_r+0xa4>
  10b65c:	0009883a 	mov	r4,zero
  10b660:	d8c01804 	addi	r3,sp,96
  10b664:	01400044 	movi	r5,1
  10b668:	8811883a 	mov	r8,r17
  10b66c:	003df006 	br	10ae30 <___vfiprintf_internal_r+0x88c>
  10b670:	0421c83a 	sub	r16,zero,r16
  10b674:	ddc00315 	stw	r23,12(sp)
  10b678:	003cdb06 	br	10a9e8 <___vfiprintf_internal_r+0x444>
  10b67c:	b809883a 	mov	r4,r23
  10b680:	da000215 	stw	r8,8(sp)
  10b684:	db000115 	stw	r12,4(sp)
  10b688:	01030ec0 	call	1030ec <strlen>
  10b68c:	102d883a 	mov	r22,r2
  10b690:	102b883a 	mov	r21,r2
  10b694:	dd000315 	stw	r20,12(sp)
  10b698:	db000117 	ldw	r12,4(sp)
  10b69c:	da000217 	ldw	r8,8(sp)
  10b6a0:	003dad06 	br	10ad58 <___vfiprintf_internal_r+0x7b4>
  10b6a4:	d8c00847 	ldb	r3,33(sp)
  10b6a8:	1800551e 	bne	r3,zero,10b800 <___vfiprintf_internal_r+0x125c>
  10b6ac:	683f581e 	bne	r13,zero,10b410 <___vfiprintf_internal_r+0xe6c>
  10b6b0:	0009883a 	mov	r4,zero
  10b6b4:	d8c01804 	addi	r3,sp,96
  10b6b8:	01400044 	movi	r5,1
  10b6bc:	8811883a 	mov	r8,r17
  10b6c0:	003ddd06 	br	10ae38 <___vfiprintf_internal_r+0x894>
  10b6c4:	d8800317 	ldw	r2,12(sp)
  10b6c8:	10800017 	ldw	r2,0(r2)
  10b6cc:	d8c00315 	stw	r3,12(sp)
  10b6d0:	d8c00017 	ldw	r3,0(sp)
  10b6d4:	10c00015 	stw	r3,0(r2)
  10b6d8:	003bdb06 	br	10a648 <___vfiprintf_internal_r+0xa4>
  10b6dc:	882f883a 	mov	r23,r17
  10b6e0:	00000206 	br	10b6ec <___vfiprintf_internal_r+0x1148>
  10b6e4:	102b883a 	mov	r21,r2
  10b6e8:	182d883a 	mov	r22,r3
  10b6ec:	a809883a 	mov	r4,r21
  10b6f0:	b00b883a 	mov	r5,r22
  10b6f4:	01800284 	movi	r6,10
  10b6f8:	000f883a 	mov	r7,zero
  10b6fc:	db400615 	stw	r13,24(sp)
  10b700:	da000515 	stw	r8,20(sp)
  10b704:	da400215 	stw	r9,8(sp)
  10b708:	db000115 	stw	r12,4(sp)
  10b70c:	010ca140 	call	10ca14 <__umoddi3>
  10b710:	10800c04 	addi	r2,r2,48
  10b714:	bdffffc4 	addi	r23,r23,-1
  10b718:	a809883a 	mov	r4,r21
  10b71c:	b00b883a 	mov	r5,r22
  10b720:	b8800005 	stb	r2,0(r23)
  10b724:	01800284 	movi	r6,10
  10b728:	000f883a 	mov	r7,zero
  10b72c:	010c3f80 	call	10c3f8 <__udivdi3>
  10b730:	db000117 	ldw	r12,4(sp)
  10b734:	da400217 	ldw	r9,8(sp)
  10b738:	da000517 	ldw	r8,20(sp)
  10b73c:	db400617 	ldw	r13,24(sp)
  10b740:	b03fe81e 	bne	r22,zero,10b6e4 <___vfiprintf_internal_r+0x1140>
  10b744:	ad4002a8 	cmpgeui	r21,r21,10
  10b748:	a83fe61e 	bne	r21,zero,10b6e4 <___vfiprintf_internal_r+0x1140>
  10b74c:	003e9606 	br	10b1a8 <___vfiprintf_internal_r+0xc04>
  10b750:	00c00044 	movi	r3,1
  10b754:	d8c00a15 	stw	r3,40(sp)
  10b758:	b005883a 	mov	r2,r22
  10b75c:	ddc01615 	stw	r23,88(sp)
  10b760:	dd801715 	stw	r22,92(sp)
  10b764:	dd800b15 	stw	r22,44(sp)
  10b768:	d8c01804 	addi	r3,sp,96
  10b76c:	003dc306 	br	10ae7c <___vfiprintf_internal_r+0x8d8>
  10b770:	10c00060 	cmpeqi	r3,r2,1
  10b774:	a019883a 	mov	r12,r20
  10b778:	183e3926 	beq	r3,zero,10b060 <___vfiprintf_internal_r+0xabc>
  10b77c:	003e6f06 	br	10b13c <___vfiprintf_internal_r+0xb98>
  10b780:	e0800043 	ldbu	r2,1(fp)
  10b784:	63000814 	ori	r12,r12,32
  10b788:	e7000044 	addi	fp,fp,1
  10b78c:	10803fcc 	andi	r2,r2,255
  10b790:	1080201c 	xori	r2,r2,128
  10b794:	10bfe004 	addi	r2,r2,-128
  10b798:	003bd106 	br	10a6e0 <___vfiprintf_internal_r+0x13c>
  10b79c:	488001f0 	cmpltui	r2,r9,7
  10b7a0:	482d883a 	mov	r22,r9
  10b7a4:	1000011e 	bne	r2,zero,10b7ac <___vfiprintf_internal_r+0x1208>
  10b7a8:	05800184 	movi	r22,6
  10b7ac:	05c00474 	movhi	r23,17
  10b7b0:	b02b883a 	mov	r21,r22
  10b7b4:	dd000315 	stw	r20,12(sp)
  10b7b8:	bdccca04 	addi	r23,r23,13096
  10b7bc:	003d6606 	br	10ad58 <___vfiprintf_internal_r+0x7b4>
  10b7c0:	d8800315 	stw	r2,12(sp)
  10b7c4:	002d883a 	mov	r22,zero
  10b7c8:	00800044 	movi	r2,1
  10b7cc:	003cd206 	br	10ab18 <___vfiprintf_internal_r+0x574>
  10b7d0:	d8800315 	stw	r2,12(sp)
  10b7d4:	002d883a 	mov	r22,zero
  10b7d8:	0005883a 	mov	r2,zero
  10b7dc:	003cce06 	br	10ab18 <___vfiprintf_internal_r+0x574>
  10b7e0:	1809883a 	mov	r4,r3
  10b7e4:	39cd2204 	addi	r7,r7,13448
  10b7e8:	003ede06 	br	10b364 <___vfiprintf_internal_r+0xdc0>
  10b7ec:	d8c01804 	addi	r3,sp,96
  10b7f0:	01400044 	movi	r5,1
  10b7f4:	0009883a 	mov	r4,zero
  10b7f8:	8811883a 	mov	r8,r17
  10b7fc:	003d8e06 	br	10ae38 <___vfiprintf_internal_r+0x894>
  10b800:	d8800844 	addi	r2,sp,33
  10b804:	d8801615 	stw	r2,88(sp)
  10b808:	00800044 	movi	r2,1
  10b80c:	d8801715 	stw	r2,92(sp)
  10b810:	d8c01804 	addi	r3,sp,96
  10b814:	01400044 	movi	r5,1
  10b818:	003d6806 	br	10adbc <___vfiprintf_internal_r+0x818>
  10b81c:	d9800845 	stb	r6,33(sp)
  10b820:	003c5306 	br	10a970 <___vfiprintf_internal_r+0x3cc>
  10b824:	482b883a 	mov	r21,r9
  10b828:	dd000315 	stw	r20,12(sp)
  10b82c:	482d883a 	mov	r22,r9
  10b830:	003d4906 	br	10ad58 <___vfiprintf_internal_r+0x7b4>
  10b834:	d9800845 	stb	r6,33(sp)
  10b838:	003cd906 	br	10aba0 <___vfiprintf_internal_r+0x5fc>
  10b83c:	d9800845 	stb	r6,33(sp)
  10b840:	003ce906 	br	10abe8 <___vfiprintf_internal_r+0x644>
  10b844:	d9800845 	stb	r6,33(sp)
  10b848:	003c8a06 	br	10aa74 <___vfiprintf_internal_r+0x4d0>
  10b84c:	d9800845 	stb	r6,33(sp)
  10b850:	003dd206 	br	10af9c <___vfiprintf_internal_r+0x9f8>
  10b854:	d9800845 	stb	r6,33(sp)
  10b858:	003ddd06 	br	10afd0 <___vfiprintf_internal_r+0xa2c>
  10b85c:	301f883a 	mov	r15,r6
  10b860:	39cd2604 	addi	r7,r7,13464
  10b864:	003f2306 	br	10b4f4 <___vfiprintf_internal_r+0xf50>
  10b868:	d9800845 	stb	r6,33(sp)
  10b86c:	003d1606 	br	10acc8 <___vfiprintf_internal_r+0x724>
  10b870:	d9800845 	stb	r6,33(sp)
  10b874:	003d0406 	br	10ac88 <___vfiprintf_internal_r+0x6e4>
  10b878:	d9800845 	stb	r6,33(sp)
  10b87c:	003cb806 	br	10ab60 <___vfiprintf_internal_r+0x5bc>
  10b880:	d9800845 	stb	r6,33(sp)
  10b884:	003ddf06 	br	10b004 <___vfiprintf_internal_r+0xa60>
  10b888:	29800044 	addi	r6,r5,1
  10b88c:	39cd2604 	addi	r7,r7,13464
  10b890:	003db106 	br	10af58 <___vfiprintf_internal_r+0x9b4>
  10b894:	181b883a 	mov	r13,r3
  10b898:	280d883a 	mov	r6,r5
  10b89c:	39cd2204 	addi	r7,r7,13448
  10b8a0:	003e7306 	br	10b270 <___vfiprintf_internal_r+0xccc>
  10b8a4:	00bfffc4 	movi	r2,-1
  10b8a8:	d8800015 	stw	r2,0(sp)
  10b8ac:	003c1306 	br	10a8fc <___vfiprintf_internal_r+0x358>
  10b8b0:	d8800317 	ldw	r2,12(sp)
  10b8b4:	12400017 	ldw	r9,0(r2)
  10b8b8:	15c00104 	addi	r23,r2,4
  10b8bc:	4800010e 	bge	r9,zero,10b8c4 <___vfiprintf_internal_r+0x1320>
  10b8c0:	027fffc4 	movi	r9,-1
  10b8c4:	e0800043 	ldbu	r2,1(fp)
  10b8c8:	ddc00315 	stw	r23,12(sp)
  10b8cc:	1839883a 	mov	fp,r3
  10b8d0:	10803fcc 	andi	r2,r2,255
  10b8d4:	1080201c 	xori	r2,r2,128
  10b8d8:	10bfe004 	addi	r2,r2,-128
  10b8dc:	003b8006 	br	10a6e0 <___vfiprintf_internal_r+0x13c>

0010b8e0 <__vfiprintf_internal>:
  10b8e0:	00800074 	movhi	r2,1
  10b8e4:	300f883a 	mov	r7,r6
  10b8e8:	280d883a 	mov	r6,r5
  10b8ec:	200b883a 	mov	r5,r4
  10b8f0:	11073c17 	ldw	r4,7408(r2)
  10b8f4:	010a5a41 	jmpi	10a5a4 <___vfiprintf_internal_r>

0010b8f8 <__sbprintf>:
  10b8f8:	2880030b 	ldhu	r2,12(r5)
  10b8fc:	2b001917 	ldw	r12,100(r5)
  10b900:	2ac0038b 	ldhu	r11,14(r5)
  10b904:	2a800717 	ldw	r10,28(r5)
  10b908:	2a400917 	ldw	r9,36(r5)
  10b90c:	defee204 	addi	sp,sp,-1144
  10b910:	da001a04 	addi	r8,sp,104
  10b914:	00c10004 	movi	r3,1024
  10b918:	dc011a15 	stw	r16,1128(sp)
  10b91c:	10bfff4c 	andi	r2,r2,65533
  10b920:	2821883a 	mov	r16,r5
  10b924:	d80b883a 	mov	r5,sp
  10b928:	dc811c15 	stw	r18,1136(sp)
  10b92c:	dc411b15 	stw	r17,1132(sp)
  10b930:	dfc11d15 	stw	ra,1140(sp)
  10b934:	2025883a 	mov	r18,r4
  10b938:	d880030d 	sth	r2,12(sp)
  10b93c:	db001915 	stw	r12,100(sp)
  10b940:	dac0038d 	sth	r11,14(sp)
  10b944:	da800715 	stw	r10,28(sp)
  10b948:	da400915 	stw	r9,36(sp)
  10b94c:	da000015 	stw	r8,0(sp)
  10b950:	da000415 	stw	r8,16(sp)
  10b954:	d8c00215 	stw	r3,8(sp)
  10b958:	d8c00515 	stw	r3,20(sp)
  10b95c:	d8000615 	stw	zero,24(sp)
  10b960:	010a5a40 	call	10a5a4 <___vfiprintf_internal_r>
  10b964:	1023883a 	mov	r17,r2
  10b968:	10000d0e 	bge	r2,zero,10b9a0 <__sbprintf+0xa8>
  10b96c:	d880030b 	ldhu	r2,12(sp)
  10b970:	1080100c 	andi	r2,r2,64
  10b974:	10000326 	beq	r2,zero,10b984 <__sbprintf+0x8c>
  10b978:	8080030b 	ldhu	r2,12(r16)
  10b97c:	10801014 	ori	r2,r2,64
  10b980:	8080030d 	sth	r2,12(r16)
  10b984:	8805883a 	mov	r2,r17
  10b988:	dfc11d17 	ldw	ra,1140(sp)
  10b98c:	dc811c17 	ldw	r18,1136(sp)
  10b990:	dc411b17 	ldw	r17,1132(sp)
  10b994:	dc011a17 	ldw	r16,1128(sp)
  10b998:	dec11e04 	addi	sp,sp,1144
  10b99c:	f800283a 	ret
  10b9a0:	d80b883a 	mov	r5,sp
  10b9a4:	9009883a 	mov	r4,r18
  10b9a8:	01070680 	call	107068 <_fflush_r>
  10b9ac:	103fef26 	beq	r2,zero,10b96c <__sbprintf+0x74>
  10b9b0:	047fffc4 	movi	r17,-1
  10b9b4:	003fed06 	br	10b96c <__sbprintf+0x74>

0010b9b8 <__swbuf_r>:
  10b9b8:	defffb04 	addi	sp,sp,-20
  10b9bc:	dc800215 	stw	r18,8(sp)
  10b9c0:	dc400115 	stw	r17,4(sp)
  10b9c4:	dc000015 	stw	r16,0(sp)
  10b9c8:	dfc00415 	stw	ra,16(sp)
  10b9cc:	dcc00315 	stw	r19,12(sp)
  10b9d0:	2023883a 	mov	r17,r4
  10b9d4:	2825883a 	mov	r18,r5
  10b9d8:	3021883a 	mov	r16,r6
  10b9dc:	20000226 	beq	r4,zero,10b9e8 <__swbuf_r+0x30>
  10b9e0:	20800e17 	ldw	r2,56(r4)
  10b9e4:	10003e26 	beq	r2,zero,10bae0 <__swbuf_r+0x128>
  10b9e8:	80800617 	ldw	r2,24(r16)
  10b9ec:	80c0030b 	ldhu	r3,12(r16)
  10b9f0:	80800215 	stw	r2,8(r16)
  10b9f4:	1880020c 	andi	r2,r3,8
  10b9f8:	10001f26 	beq	r2,zero,10ba78 <__swbuf_r+0xc0>
  10b9fc:	80800417 	ldw	r2,16(r16)
  10ba00:	10001d26 	beq	r2,zero,10ba78 <__swbuf_r+0xc0>
  10ba04:	1908000c 	andi	r4,r3,8192
  10ba08:	94c03fcc 	andi	r19,r18,255
  10ba0c:	20002326 	beq	r4,zero,10ba9c <__swbuf_r+0xe4>
  10ba10:	80c00017 	ldw	r3,0(r16)
  10ba14:	81000517 	ldw	r4,20(r16)
  10ba18:	1885c83a 	sub	r2,r3,r2
  10ba1c:	1100290e 	bge	r2,r4,10bac4 <__swbuf_r+0x10c>
  10ba20:	10800044 	addi	r2,r2,1
  10ba24:	81000217 	ldw	r4,8(r16)
  10ba28:	19400044 	addi	r5,r3,1
  10ba2c:	81400015 	stw	r5,0(r16)
  10ba30:	213fffc4 	addi	r4,r4,-1
  10ba34:	81000215 	stw	r4,8(r16)
  10ba38:	1c800005 	stb	r18,0(r3)
  10ba3c:	80c00517 	ldw	r3,20(r16)
  10ba40:	18802926 	beq	r3,r2,10bae8 <__swbuf_r+0x130>
  10ba44:	8080030b 	ldhu	r2,12(r16)
  10ba48:	1080004c 	andi	r2,r2,1
  10ba4c:	10000226 	beq	r2,zero,10ba58 <__swbuf_r+0xa0>
  10ba50:	98800298 	cmpnei	r2,r19,10
  10ba54:	10002426 	beq	r2,zero,10bae8 <__swbuf_r+0x130>
  10ba58:	9805883a 	mov	r2,r19
  10ba5c:	dfc00417 	ldw	ra,16(sp)
  10ba60:	dcc00317 	ldw	r19,12(sp)
  10ba64:	dc800217 	ldw	r18,8(sp)
  10ba68:	dc400117 	ldw	r17,4(sp)
  10ba6c:	dc000017 	ldw	r16,0(sp)
  10ba70:	dec00504 	addi	sp,sp,20
  10ba74:	f800283a 	ret
  10ba78:	800b883a 	mov	r5,r16
  10ba7c:	8809883a 	mov	r4,r17
  10ba80:	01053e40 	call	1053e4 <__swsetup_r>
  10ba84:	10001c1e 	bne	r2,zero,10baf8 <__swbuf_r+0x140>
  10ba88:	80c0030b 	ldhu	r3,12(r16)
  10ba8c:	80800417 	ldw	r2,16(r16)
  10ba90:	94c03fcc 	andi	r19,r18,255
  10ba94:	1908000c 	andi	r4,r3,8192
  10ba98:	203fdd1e 	bne	r4,zero,10ba10 <__swbuf_r+0x58>
  10ba9c:	81001917 	ldw	r4,100(r16)
  10baa0:	18c80014 	ori	r3,r3,8192
  10baa4:	0177ffc4 	movi	r5,-8193
  10baa8:	2148703a 	and	r4,r4,r5
  10baac:	80c0030d 	sth	r3,12(r16)
  10bab0:	80c00017 	ldw	r3,0(r16)
  10bab4:	81001915 	stw	r4,100(r16)
  10bab8:	81000517 	ldw	r4,20(r16)
  10babc:	1885c83a 	sub	r2,r3,r2
  10bac0:	113fd716 	blt	r2,r4,10ba20 <__swbuf_r+0x68>
  10bac4:	800b883a 	mov	r5,r16
  10bac8:	8809883a 	mov	r4,r17
  10bacc:	01070680 	call	107068 <_fflush_r>
  10bad0:	1000091e 	bne	r2,zero,10baf8 <__swbuf_r+0x140>
  10bad4:	80c00017 	ldw	r3,0(r16)
  10bad8:	00800044 	movi	r2,1
  10badc:	003fd106 	br	10ba24 <__swbuf_r+0x6c>
  10bae0:	01073fc0 	call	1073fc <__sinit>
  10bae4:	003fc006 	br	10b9e8 <__swbuf_r+0x30>
  10bae8:	800b883a 	mov	r5,r16
  10baec:	8809883a 	mov	r4,r17
  10baf0:	01070680 	call	107068 <_fflush_r>
  10baf4:	103fd826 	beq	r2,zero,10ba58 <__swbuf_r+0xa0>
  10baf8:	04ffffc4 	movi	r19,-1
  10bafc:	003fd606 	br	10ba58 <__swbuf_r+0xa0>

0010bb00 <__swbuf>:
  10bb00:	00800074 	movhi	r2,1
  10bb04:	280d883a 	mov	r6,r5
  10bb08:	200b883a 	mov	r5,r4
  10bb0c:	11073c17 	ldw	r4,7408(r2)
  10bb10:	010b9b81 	jmpi	10b9b8 <__swbuf_r>

0010bb14 <_write_r>:
  10bb14:	defffe04 	addi	sp,sp,-8
  10bb18:	2805883a 	mov	r2,r5
  10bb1c:	dc000015 	stw	r16,0(sp)
  10bb20:	300b883a 	mov	r5,r6
  10bb24:	2021883a 	mov	r16,r4
  10bb28:	380d883a 	mov	r6,r7
  10bb2c:	1009883a 	mov	r4,r2
  10bb30:	00800074 	movhi	r2,1
  10bb34:	dfc00115 	stw	ra,4(sp)
  10bb38:	10075615 	stw	zero,7512(r2)
  10bb3c:	01102840 	call	110284 <write>
  10bb40:	10ffffd8 	cmpnei	r3,r2,-1
  10bb44:	18000426 	beq	r3,zero,10bb58 <_write_r+0x44>
  10bb48:	dfc00117 	ldw	ra,4(sp)
  10bb4c:	dc000017 	ldw	r16,0(sp)
  10bb50:	dec00204 	addi	sp,sp,8
  10bb54:	f800283a 	ret
  10bb58:	00c00074 	movhi	r3,1
  10bb5c:	18c75617 	ldw	r3,7512(r3)
  10bb60:	183ff926 	beq	r3,zero,10bb48 <_write_r+0x34>
  10bb64:	80c00015 	stw	r3,0(r16)
  10bb68:	dfc00117 	ldw	ra,4(sp)
  10bb6c:	dc000017 	ldw	r16,0(sp)
  10bb70:	dec00204 	addi	sp,sp,8
  10bb74:	f800283a 	ret

0010bb78 <_close_r>:
  10bb78:	defffe04 	addi	sp,sp,-8
  10bb7c:	dc000015 	stw	r16,0(sp)
  10bb80:	00800074 	movhi	r2,1
  10bb84:	2021883a 	mov	r16,r4
  10bb88:	2809883a 	mov	r4,r5
  10bb8c:	dfc00115 	stw	ra,4(sp)
  10bb90:	10075615 	stw	zero,7512(r2)
  10bb94:	010f9540 	call	10f954 <close>
  10bb98:	10ffffd8 	cmpnei	r3,r2,-1
  10bb9c:	18000426 	beq	r3,zero,10bbb0 <_close_r+0x38>
  10bba0:	dfc00117 	ldw	ra,4(sp)
  10bba4:	dc000017 	ldw	r16,0(sp)
  10bba8:	dec00204 	addi	sp,sp,8
  10bbac:	f800283a 	ret
  10bbb0:	00c00074 	movhi	r3,1
  10bbb4:	18c75617 	ldw	r3,7512(r3)
  10bbb8:	183ff926 	beq	r3,zero,10bba0 <_close_r+0x28>
  10bbbc:	80c00015 	stw	r3,0(r16)
  10bbc0:	dfc00117 	ldw	ra,4(sp)
  10bbc4:	dc000017 	ldw	r16,0(sp)
  10bbc8:	dec00204 	addi	sp,sp,8
  10bbcc:	f800283a 	ret

0010bbd0 <_calloc_r>:
  10bbd0:	defffe04 	addi	sp,sp,-8
  10bbd4:	2805883a 	mov	r2,r5
  10bbd8:	dc000015 	stw	r16,0(sp)
  10bbdc:	300b883a 	mov	r5,r6
  10bbe0:	2021883a 	mov	r16,r4
  10bbe4:	1009883a 	mov	r4,r2
  10bbe8:	dfc00115 	stw	ra,4(sp)
  10bbec:	0102e600 	call	102e60 <__mulsi3>
  10bbf0:	100b883a 	mov	r5,r2
  10bbf4:	8009883a 	mov	r4,r16
  10bbf8:	010807c0 	call	10807c <_malloc_r>
  10bbfc:	1007883a 	mov	r3,r2
  10bc00:	10000c26 	beq	r2,zero,10bc34 <_calloc_r+0x64>
  10bc04:	11bfff17 	ldw	r6,-4(r2)
  10bc08:	00bfff04 	movi	r2,-4
  10bc0c:	308c703a 	and	r6,r6,r2
  10bc10:	31bfff04 	addi	r6,r6,-4
  10bc14:	30800968 	cmpgeui	r2,r6,37
  10bc18:	1000151e 	bne	r2,zero,10bc70 <_calloc_r+0xa0>
  10bc1c:	30800530 	cmpltui	r2,r6,20
  10bc20:	10000926 	beq	r2,zero,10bc48 <_calloc_r+0x78>
  10bc24:	1805883a 	mov	r2,r3
  10bc28:	10000015 	stw	zero,0(r2)
  10bc2c:	10000115 	stw	zero,4(r2)
  10bc30:	10000215 	stw	zero,8(r2)
  10bc34:	1805883a 	mov	r2,r3
  10bc38:	dfc00117 	ldw	ra,4(sp)
  10bc3c:	dc000017 	ldw	r16,0(sp)
  10bc40:	dec00204 	addi	sp,sp,8
  10bc44:	f800283a 	ret
  10bc48:	18000015 	stw	zero,0(r3)
  10bc4c:	18000115 	stw	zero,4(r3)
  10bc50:	30800728 	cmpgeui	r2,r6,28
  10bc54:	10000b26 	beq	r2,zero,10bc84 <_calloc_r+0xb4>
  10bc58:	18000215 	stw	zero,8(r3)
  10bc5c:	18000315 	stw	zero,12(r3)
  10bc60:	31800920 	cmpeqi	r6,r6,36
  10bc64:	3000091e 	bne	r6,zero,10bc8c <_calloc_r+0xbc>
  10bc68:	18800404 	addi	r2,r3,16
  10bc6c:	003fee06 	br	10bc28 <_calloc_r+0x58>
  10bc70:	1809883a 	mov	r4,r3
  10bc74:	000b883a 	mov	r5,zero
  10bc78:	0108a840 	call	108a84 <memset>
  10bc7c:	1007883a 	mov	r3,r2
  10bc80:	003fec06 	br	10bc34 <_calloc_r+0x64>
  10bc84:	18800204 	addi	r2,r3,8
  10bc88:	003fe706 	br	10bc28 <_calloc_r+0x58>
  10bc8c:	18000415 	stw	zero,16(r3)
  10bc90:	18800604 	addi	r2,r3,24
  10bc94:	18000515 	stw	zero,20(r3)
  10bc98:	003fe306 	br	10bc28 <_calloc_r+0x58>

0010bc9c <_fclose_r>:
  10bc9c:	defffc04 	addi	sp,sp,-16
  10bca0:	dfc00315 	stw	ra,12(sp)
  10bca4:	dc800215 	stw	r18,8(sp)
  10bca8:	dc400115 	stw	r17,4(sp)
  10bcac:	dc000015 	stw	r16,0(sp)
  10bcb0:	28000726 	beq	r5,zero,10bcd0 <_fclose_r+0x34>
  10bcb4:	2023883a 	mov	r17,r4
  10bcb8:	2821883a 	mov	r16,r5
  10bcbc:	20000226 	beq	r4,zero,10bcc8 <_fclose_r+0x2c>
  10bcc0:	20800e17 	ldw	r2,56(r4)
  10bcc4:	10002726 	beq	r2,zero,10bd64 <_fclose_r+0xc8>
  10bcc8:	8080030f 	ldh	r2,12(r16)
  10bccc:	1000081e 	bne	r2,zero,10bcf0 <_fclose_r+0x54>
  10bcd0:	0025883a 	mov	r18,zero
  10bcd4:	9005883a 	mov	r2,r18
  10bcd8:	dfc00317 	ldw	ra,12(sp)
  10bcdc:	dc800217 	ldw	r18,8(sp)
  10bce0:	dc400117 	ldw	r17,4(sp)
  10bce4:	dc000017 	ldw	r16,0(sp)
  10bce8:	dec00404 	addi	sp,sp,16
  10bcec:	f800283a 	ret
  10bcf0:	800b883a 	mov	r5,r16
  10bcf4:	8809883a 	mov	r4,r17
  10bcf8:	0106e400 	call	106e40 <__sflush_r>
  10bcfc:	1025883a 	mov	r18,r2
  10bd00:	80800b17 	ldw	r2,44(r16)
  10bd04:	10000426 	beq	r2,zero,10bd18 <_fclose_r+0x7c>
  10bd08:	81400717 	ldw	r5,28(r16)
  10bd0c:	8809883a 	mov	r4,r17
  10bd10:	103ee83a 	callr	r2
  10bd14:	10001716 	blt	r2,zero,10bd74 <_fclose_r+0xd8>
  10bd18:	8080030b 	ldhu	r2,12(r16)
  10bd1c:	1080200c 	andi	r2,r2,128
  10bd20:	1000181e 	bne	r2,zero,10bd84 <_fclose_r+0xe8>
  10bd24:	81400c17 	ldw	r5,48(r16)
  10bd28:	28000526 	beq	r5,zero,10bd40 <_fclose_r+0xa4>
  10bd2c:	80801004 	addi	r2,r16,64
  10bd30:	28800226 	beq	r5,r2,10bd3c <_fclose_r+0xa0>
  10bd34:	8809883a 	mov	r4,r17
  10bd38:	01075600 	call	107560 <_free_r>
  10bd3c:	80000c15 	stw	zero,48(r16)
  10bd40:	81401117 	ldw	r5,68(r16)
  10bd44:	28000326 	beq	r5,zero,10bd54 <_fclose_r+0xb8>
  10bd48:	8809883a 	mov	r4,r17
  10bd4c:	01075600 	call	107560 <_free_r>
  10bd50:	80001115 	stw	zero,68(r16)
  10bd54:	010740c0 	call	10740c <__sfp_lock_acquire>
  10bd58:	8000030d 	sth	zero,12(r16)
  10bd5c:	01074100 	call	107410 <__sfp_lock_release>
  10bd60:	003fdc06 	br	10bcd4 <_fclose_r+0x38>
  10bd64:	01073fc0 	call	1073fc <__sinit>
  10bd68:	8080030f 	ldh	r2,12(r16)
  10bd6c:	103fd826 	beq	r2,zero,10bcd0 <_fclose_r+0x34>
  10bd70:	003fdf06 	br	10bcf0 <_fclose_r+0x54>
  10bd74:	8080030b 	ldhu	r2,12(r16)
  10bd78:	04bfffc4 	movi	r18,-1
  10bd7c:	1080200c 	andi	r2,r2,128
  10bd80:	103fe826 	beq	r2,zero,10bd24 <_fclose_r+0x88>
  10bd84:	81400417 	ldw	r5,16(r16)
  10bd88:	8809883a 	mov	r4,r17
  10bd8c:	01075600 	call	107560 <_free_r>
  10bd90:	003fe406 	br	10bd24 <_fclose_r+0x88>

0010bd94 <fclose>:
  10bd94:	00800074 	movhi	r2,1
  10bd98:	200b883a 	mov	r5,r4
  10bd9c:	11073c17 	ldw	r4,7408(r2)
  10bda0:	010bc9c1 	jmpi	10bc9c <_fclose_r>

0010bda4 <__fputwc>:
  10bda4:	defff904 	addi	sp,sp,-28
  10bda8:	dcc00415 	stw	r19,16(sp)
  10bdac:	dc800315 	stw	r18,12(sp)
  10bdb0:	dc000115 	stw	r16,4(sp)
  10bdb4:	dfc00615 	stw	ra,24(sp)
  10bdb8:	dd000515 	stw	r20,20(sp)
  10bdbc:	dc400215 	stw	r17,8(sp)
  10bdc0:	2025883a 	mov	r18,r4
  10bdc4:	2827883a 	mov	r19,r5
  10bdc8:	3021883a 	mov	r16,r6
  10bdcc:	010c0bc0 	call	10c0bc <__locale_mb_cur_max>
  10bdd0:	10800058 	cmpnei	r2,r2,1
  10bdd4:	1000071e 	bne	r2,zero,10bdf4 <__fputwc+0x50>
  10bdd8:	98bfffc4 	addi	r2,r19,-1
  10bddc:	10803fe8 	cmpgeui	r2,r2,255
  10bde0:	1000041e 	bne	r2,zero,10bdf4 <__fputwc+0x50>
  10bde4:	980b883a 	mov	r5,r19
  10bde8:	dcc000c5 	stb	r19,3(sp)
  10bdec:	05000044 	movi	r20,1
  10bdf0:	00000a06 	br	10be1c <__fputwc+0x78>
  10bdf4:	81c01704 	addi	r7,r16,92
  10bdf8:	980d883a 	mov	r6,r19
  10bdfc:	d94000c4 	addi	r5,sp,3
  10be00:	9009883a 	mov	r4,r18
  10be04:	010c2cc0 	call	10c2cc <_wcrtomb_r>
  10be08:	1029883a 	mov	r20,r2
  10be0c:	10bfffd8 	cmpnei	r2,r2,-1
  10be10:	10003426 	beq	r2,zero,10bee4 <__fputwc+0x140>
  10be14:	a0002926 	beq	r20,zero,10bebc <__fputwc+0x118>
  10be18:	d94000c3 	ldbu	r5,3(sp)
  10be1c:	0023883a 	mov	r17,zero
  10be20:	00000a06 	br	10be4c <__fputwc+0xa8>
  10be24:	80800017 	ldw	r2,0(r16)
  10be28:	11400005 	stb	r5,0(r2)
  10be2c:	80800017 	ldw	r2,0(r16)
  10be30:	10800044 	addi	r2,r2,1
  10be34:	80800015 	stw	r2,0(r16)
  10be38:	8c400044 	addi	r17,r17,1
  10be3c:	d88000c4 	addi	r2,sp,3
  10be40:	1445883a 	add	r2,r2,r17
  10be44:	8d001d2e 	bgeu	r17,r20,10bebc <__fputwc+0x118>
  10be48:	11400003 	ldbu	r5,0(r2)
  10be4c:	80800217 	ldw	r2,8(r16)
  10be50:	10bfffc4 	addi	r2,r2,-1
  10be54:	80800215 	stw	r2,8(r16)
  10be58:	103ff20e 	bge	r2,zero,10be24 <__fputwc+0x80>
  10be5c:	80c00617 	ldw	r3,24(r16)
  10be60:	10c01016 	blt	r2,r3,10bea4 <__fputwc+0x100>
  10be64:	80800017 	ldw	r2,0(r16)
  10be68:	11400005 	stb	r5,0(r2)
  10be6c:	80800017 	ldw	r2,0(r16)
  10be70:	10c00003 	ldbu	r3,0(r2)
  10be74:	10800044 	addi	r2,r2,1
  10be78:	18c002a0 	cmpeqi	r3,r3,10
  10be7c:	183fed26 	beq	r3,zero,10be34 <__fputwc+0x90>
  10be80:	800d883a 	mov	r6,r16
  10be84:	01400284 	movi	r5,10
  10be88:	9009883a 	mov	r4,r18
  10be8c:	010b9b80 	call	10b9b8 <__swbuf_r>
  10be90:	10bfffe0 	cmpeqi	r2,r2,-1
  10be94:	10803fcc 	andi	r2,r2,255
  10be98:	103fe726 	beq	r2,zero,10be38 <__fputwc+0x94>
  10be9c:	053fffc4 	movi	r20,-1
  10bea0:	00000706 	br	10bec0 <__fputwc+0x11c>
  10bea4:	29403fcc 	andi	r5,r5,255
  10bea8:	800d883a 	mov	r6,r16
  10beac:	9009883a 	mov	r4,r18
  10beb0:	010b9b80 	call	10b9b8 <__swbuf_r>
  10beb4:	10bfffe0 	cmpeqi	r2,r2,-1
  10beb8:	003ff606 	br	10be94 <__fputwc+0xf0>
  10bebc:	9829883a 	mov	r20,r19
  10bec0:	a005883a 	mov	r2,r20
  10bec4:	dfc00617 	ldw	ra,24(sp)
  10bec8:	dd000517 	ldw	r20,20(sp)
  10becc:	dcc00417 	ldw	r19,16(sp)
  10bed0:	dc800317 	ldw	r18,12(sp)
  10bed4:	dc400217 	ldw	r17,8(sp)
  10bed8:	dc000117 	ldw	r16,4(sp)
  10bedc:	dec00704 	addi	sp,sp,28
  10bee0:	f800283a 	ret
  10bee4:	8080030b 	ldhu	r2,12(r16)
  10bee8:	10801014 	ori	r2,r2,64
  10beec:	8080030d 	sth	r2,12(r16)
  10bef0:	003ff306 	br	10bec0 <__fputwc+0x11c>

0010bef4 <_fputwc_r>:
  10bef4:	3080030b 	ldhu	r2,12(r6)
  10bef8:	10c8000c 	andi	r3,r2,8192
  10befc:	1800051e 	bne	r3,zero,10bf14 <_fputwc_r+0x20>
  10bf00:	30c01917 	ldw	r3,100(r6)
  10bf04:	10880014 	ori	r2,r2,8192
  10bf08:	3080030d 	sth	r2,12(r6)
  10bf0c:	18880014 	ori	r2,r3,8192
  10bf10:	30801915 	stw	r2,100(r6)
  10bf14:	010bda41 	jmpi	10bda4 <__fputwc>

0010bf18 <fputwc>:
  10bf18:	defffc04 	addi	sp,sp,-16
  10bf1c:	00800074 	movhi	r2,1
  10bf20:	dc000115 	stw	r16,4(sp)
  10bf24:	14073c17 	ldw	r16,7408(r2)
  10bf28:	dc400215 	stw	r17,8(sp)
  10bf2c:	dfc00315 	stw	ra,12(sp)
  10bf30:	2023883a 	mov	r17,r4
  10bf34:	80000226 	beq	r16,zero,10bf40 <fputwc+0x28>
  10bf38:	80800e17 	ldw	r2,56(r16)
  10bf3c:	10001026 	beq	r2,zero,10bf80 <fputwc+0x68>
  10bf40:	2880030b 	ldhu	r2,12(r5)
  10bf44:	10c8000c 	andi	r3,r2,8192
  10bf48:	1800051e 	bne	r3,zero,10bf60 <fputwc+0x48>
  10bf4c:	28c01917 	ldw	r3,100(r5)
  10bf50:	10880014 	ori	r2,r2,8192
  10bf54:	2880030d 	sth	r2,12(r5)
  10bf58:	18880014 	ori	r2,r3,8192
  10bf5c:	28801915 	stw	r2,100(r5)
  10bf60:	280d883a 	mov	r6,r5
  10bf64:	8009883a 	mov	r4,r16
  10bf68:	880b883a 	mov	r5,r17
  10bf6c:	dfc00317 	ldw	ra,12(sp)
  10bf70:	dc400217 	ldw	r17,8(sp)
  10bf74:	dc000117 	ldw	r16,4(sp)
  10bf78:	dec00404 	addi	sp,sp,16
  10bf7c:	010bda41 	jmpi	10bda4 <__fputwc>
  10bf80:	8009883a 	mov	r4,r16
  10bf84:	d9400015 	stw	r5,0(sp)
  10bf88:	01073fc0 	call	1073fc <__sinit>
  10bf8c:	d9400017 	ldw	r5,0(sp)
  10bf90:	003feb06 	br	10bf40 <fputwc+0x28>

0010bf94 <_fstat_r>:
  10bf94:	defffe04 	addi	sp,sp,-8
  10bf98:	2805883a 	mov	r2,r5
  10bf9c:	dc000015 	stw	r16,0(sp)
  10bfa0:	300b883a 	mov	r5,r6
  10bfa4:	2021883a 	mov	r16,r4
  10bfa8:	1009883a 	mov	r4,r2
  10bfac:	00800074 	movhi	r2,1
  10bfb0:	dfc00115 	stw	ra,4(sp)
  10bfb4:	10075615 	stw	zero,7512(r2)
  10bfb8:	010fa980 	call	10fa98 <fstat>
  10bfbc:	10ffffd8 	cmpnei	r3,r2,-1
  10bfc0:	18000426 	beq	r3,zero,10bfd4 <_fstat_r+0x40>
  10bfc4:	dfc00117 	ldw	ra,4(sp)
  10bfc8:	dc000017 	ldw	r16,0(sp)
  10bfcc:	dec00204 	addi	sp,sp,8
  10bfd0:	f800283a 	ret
  10bfd4:	00c00074 	movhi	r3,1
  10bfd8:	18c75617 	ldw	r3,7512(r3)
  10bfdc:	183ff926 	beq	r3,zero,10bfc4 <_fstat_r+0x30>
  10bfe0:	80c00015 	stw	r3,0(r16)
  10bfe4:	dfc00117 	ldw	ra,4(sp)
  10bfe8:	dc000017 	ldw	r16,0(sp)
  10bfec:	dec00204 	addi	sp,sp,8
  10bff0:	f800283a 	ret

0010bff4 <_isatty_r>:
  10bff4:	defffe04 	addi	sp,sp,-8
  10bff8:	dc000015 	stw	r16,0(sp)
  10bffc:	00800074 	movhi	r2,1
  10c000:	2021883a 	mov	r16,r4
  10c004:	2809883a 	mov	r4,r5
  10c008:	dfc00115 	stw	ra,4(sp)
  10c00c:	10075615 	stw	zero,7512(r2)
  10c010:	010fb900 	call	10fb90 <isatty>
  10c014:	10ffffd8 	cmpnei	r3,r2,-1
  10c018:	18000426 	beq	r3,zero,10c02c <_isatty_r+0x38>
  10c01c:	dfc00117 	ldw	ra,4(sp)
  10c020:	dc000017 	ldw	r16,0(sp)
  10c024:	dec00204 	addi	sp,sp,8
  10c028:	f800283a 	ret
  10c02c:	00c00074 	movhi	r3,1
  10c030:	18c75617 	ldw	r3,7512(r3)
  10c034:	183ff926 	beq	r3,zero,10c01c <_isatty_r+0x28>
  10c038:	80c00015 	stw	r3,0(r16)
  10c03c:	dfc00117 	ldw	ra,4(sp)
  10c040:	dc000017 	ldw	r16,0(sp)
  10c044:	dec00204 	addi	sp,sp,8
  10c048:	f800283a 	ret

0010c04c <_setlocale_r>:
  10c04c:	30001826 	beq	r6,zero,10c0b0 <_setlocale_r+0x64>
  10c050:	01400474 	movhi	r5,17
  10c054:	defffe04 	addi	sp,sp,-8
  10c058:	294d2b04 	addi	r5,r5,13484
  10c05c:	3009883a 	mov	r4,r6
  10c060:	dc000015 	stw	r16,0(sp)
  10c064:	dfc00115 	stw	ra,4(sp)
  10c068:	3021883a 	mov	r16,r6
  10c06c:	010c1f40 	call	10c1f4 <strcmp>
  10c070:	1000061e 	bne	r2,zero,10c08c <_setlocale_r+0x40>
  10c074:	00800474 	movhi	r2,17
  10c078:	108d2a04 	addi	r2,r2,13480
  10c07c:	dfc00117 	ldw	ra,4(sp)
  10c080:	dc000017 	ldw	r16,0(sp)
  10c084:	dec00204 	addi	sp,sp,8
  10c088:	f800283a 	ret
  10c08c:	01400474 	movhi	r5,17
  10c090:	294d2a04 	addi	r5,r5,13480
  10c094:	8009883a 	mov	r4,r16
  10c098:	010c1f40 	call	10c1f4 <strcmp>
  10c09c:	103ff526 	beq	r2,zero,10c074 <_setlocale_r+0x28>
  10c0a0:	80800003 	ldbu	r2,0(r16)
  10c0a4:	103ff326 	beq	r2,zero,10c074 <_setlocale_r+0x28>
  10c0a8:	0005883a 	mov	r2,zero
  10c0ac:	003ff306 	br	10c07c <_setlocale_r+0x30>
  10c0b0:	00800474 	movhi	r2,17
  10c0b4:	108d2a04 	addi	r2,r2,13480
  10c0b8:	f800283a 	ret

0010c0bc <__locale_mb_cur_max>:
  10c0bc:	00800074 	movhi	r2,1
  10c0c0:	10826107 	ldb	r2,2436(r2)
  10c0c4:	f800283a 	ret

0010c0c8 <setlocale>:
  10c0c8:	00800074 	movhi	r2,1
  10c0cc:	280d883a 	mov	r6,r5
  10c0d0:	200b883a 	mov	r5,r4
  10c0d4:	11073c17 	ldw	r4,7408(r2)
  10c0d8:	010c04c1 	jmpi	10c04c <_setlocale_r>

0010c0dc <_lseek_r>:
  10c0dc:	defffe04 	addi	sp,sp,-8
  10c0e0:	2805883a 	mov	r2,r5
  10c0e4:	dc000015 	stw	r16,0(sp)
  10c0e8:	300b883a 	mov	r5,r6
  10c0ec:	2021883a 	mov	r16,r4
  10c0f0:	380d883a 	mov	r6,r7
  10c0f4:	1009883a 	mov	r4,r2
  10c0f8:	00800074 	movhi	r2,1
  10c0fc:	dfc00115 	stw	ra,4(sp)
  10c100:	10075615 	stw	zero,7512(r2)
  10c104:	010fc7c0 	call	10fc7c <lseek>
  10c108:	10ffffd8 	cmpnei	r3,r2,-1
  10c10c:	18000426 	beq	r3,zero,10c120 <_lseek_r+0x44>
  10c110:	dfc00117 	ldw	ra,4(sp)
  10c114:	dc000017 	ldw	r16,0(sp)
  10c118:	dec00204 	addi	sp,sp,8
  10c11c:	f800283a 	ret
  10c120:	00c00074 	movhi	r3,1
  10c124:	18c75617 	ldw	r3,7512(r3)
  10c128:	183ff926 	beq	r3,zero,10c110 <_lseek_r+0x34>
  10c12c:	80c00015 	stw	r3,0(r16)
  10c130:	dfc00117 	ldw	ra,4(sp)
  10c134:	dc000017 	ldw	r16,0(sp)
  10c138:	dec00204 	addi	sp,sp,8
  10c13c:	f800283a 	ret

0010c140 <_mbtowc_r>:
  10c140:	00800074 	movhi	r2,1
  10c144:	10825017 	ldw	r2,2368(r2)
  10c148:	1000683a 	jmp	r2

0010c14c <__ascii_mbtowc>:
  10c14c:	deffff04 	addi	sp,sp,-4
  10c150:	28000826 	beq	r5,zero,10c174 <__ascii_mbtowc+0x28>
  10c154:	30000926 	beq	r6,zero,10c17c <__ascii_mbtowc+0x30>
  10c158:	38000b26 	beq	r7,zero,10c188 <__ascii_mbtowc+0x3c>
  10c15c:	30800003 	ldbu	r2,0(r6)
  10c160:	28800015 	stw	r2,0(r5)
  10c164:	30800003 	ldbu	r2,0(r6)
  10c168:	1004c03a 	cmpne	r2,r2,zero
  10c16c:	dec00104 	addi	sp,sp,4
  10c170:	f800283a 	ret
  10c174:	d80b883a 	mov	r5,sp
  10c178:	303ff71e 	bne	r6,zero,10c158 <__ascii_mbtowc+0xc>
  10c17c:	0005883a 	mov	r2,zero
  10c180:	dec00104 	addi	sp,sp,4
  10c184:	f800283a 	ret
  10c188:	00bfff84 	movi	r2,-2
  10c18c:	003ff706 	br	10c16c <__ascii_mbtowc+0x20>

0010c190 <_read_r>:
  10c190:	defffe04 	addi	sp,sp,-8
  10c194:	2805883a 	mov	r2,r5
  10c198:	dc000015 	stw	r16,0(sp)
  10c19c:	300b883a 	mov	r5,r6
  10c1a0:	2021883a 	mov	r16,r4
  10c1a4:	380d883a 	mov	r6,r7
  10c1a8:	1009883a 	mov	r4,r2
  10c1ac:	00800074 	movhi	r2,1
  10c1b0:	dfc00115 	stw	ra,4(sp)
  10c1b4:	10075615 	stw	zero,7512(r2)
  10c1b8:	010fe4c0 	call	10fe4c <read>
  10c1bc:	10ffffd8 	cmpnei	r3,r2,-1
  10c1c0:	18000426 	beq	r3,zero,10c1d4 <_read_r+0x44>
  10c1c4:	dfc00117 	ldw	ra,4(sp)
  10c1c8:	dc000017 	ldw	r16,0(sp)
  10c1cc:	dec00204 	addi	sp,sp,8
  10c1d0:	f800283a 	ret
  10c1d4:	00c00074 	movhi	r3,1
  10c1d8:	18c75617 	ldw	r3,7512(r3)
  10c1dc:	183ff926 	beq	r3,zero,10c1c4 <_read_r+0x34>
  10c1e0:	80c00015 	stw	r3,0(r16)
  10c1e4:	dfc00117 	ldw	ra,4(sp)
  10c1e8:	dc000017 	ldw	r16,0(sp)
  10c1ec:	dec00204 	addi	sp,sp,8
  10c1f0:	f800283a 	ret

0010c1f4 <strcmp>:
  10c1f4:	2144b03a 	or	r2,r4,r5
  10c1f8:	108000cc 	andi	r2,r2,3
  10c1fc:	1000171e 	bne	r2,zero,10c25c <strcmp+0x68>
  10c200:	20800017 	ldw	r2,0(r4)
  10c204:	28c00017 	ldw	r3,0(r5)
  10c208:	10c0141e 	bne	r2,r3,10c25c <strcmp+0x68>
  10c20c:	027fbff4 	movhi	r9,65279
  10c210:	4a7fbfc4 	addi	r9,r9,-257
  10c214:	1247883a 	add	r3,r2,r9
  10c218:	02202074 	movhi	r8,32897
  10c21c:	0084303a 	nor	r2,zero,r2
  10c220:	1884703a 	and	r2,r3,r2
  10c224:	42202004 	addi	r8,r8,-32640
  10c228:	1204703a 	and	r2,r2,r8
  10c22c:	10000226 	beq	r2,zero,10c238 <strcmp+0x44>
  10c230:	00002406 	br	10c2c4 <strcmp+0xd0>
  10c234:	1000231e 	bne	r2,zero,10c2c4 <strcmp+0xd0>
  10c238:	21000104 	addi	r4,r4,4
  10c23c:	20c00017 	ldw	r3,0(r4)
  10c240:	29400104 	addi	r5,r5,4
  10c244:	29800017 	ldw	r6,0(r5)
  10c248:	1a45883a 	add	r2,r3,r9
  10c24c:	00ce303a 	nor	r7,zero,r3
  10c250:	11c4703a 	and	r2,r2,r7
  10c254:	1204703a 	and	r2,r2,r8
  10c258:	19bff626 	beq	r3,r6,10c234 <strcmp+0x40>
  10c25c:	20800003 	ldbu	r2,0(r4)
  10c260:	10c03fcc 	andi	r3,r2,255
  10c264:	18c0201c 	xori	r3,r3,128
  10c268:	18ffe004 	addi	r3,r3,-128
  10c26c:	18000d26 	beq	r3,zero,10c2a4 <strcmp+0xb0>
  10c270:	29800007 	ldb	r6,0(r5)
  10c274:	10803fcc 	andi	r2,r2,255
  10c278:	19800326 	beq	r3,r6,10c288 <strcmp+0x94>
  10c27c:	00000a06 	br	10c2a8 <strcmp+0xb4>
  10c280:	29800007 	ldb	r6,0(r5)
  10c284:	11800b1e 	bne	r2,r6,10c2b4 <strcmp+0xc0>
  10c288:	21000044 	addi	r4,r4,1
  10c28c:	20c00003 	ldbu	r3,0(r4)
  10c290:	29400044 	addi	r5,r5,1
  10c294:	18803fcc 	andi	r2,r3,255
  10c298:	1080201c 	xori	r2,r2,128
  10c29c:	10bfe004 	addi	r2,r2,-128
  10c2a0:	103ff71e 	bne	r2,zero,10c280 <strcmp+0x8c>
  10c2a4:	0005883a 	mov	r2,zero
  10c2a8:	28c00003 	ldbu	r3,0(r5)
  10c2ac:	10c5c83a 	sub	r2,r2,r3
  10c2b0:	f800283a 	ret
  10c2b4:	18803fcc 	andi	r2,r3,255
  10c2b8:	28c00003 	ldbu	r3,0(r5)
  10c2bc:	10c5c83a 	sub	r2,r2,r3
  10c2c0:	f800283a 	ret
  10c2c4:	0005883a 	mov	r2,zero
  10c2c8:	f800283a 	ret

0010c2cc <_wcrtomb_r>:
  10c2cc:	defffa04 	addi	sp,sp,-24
  10c2d0:	dc400415 	stw	r17,16(sp)
  10c2d4:	dc000315 	stw	r16,12(sp)
  10c2d8:	00800074 	movhi	r2,1
  10c2dc:	dfc00515 	stw	ra,20(sp)
  10c2e0:	2021883a 	mov	r16,r4
  10c2e4:	3823883a 	mov	r17,r7
  10c2e8:	10824f17 	ldw	r2,2364(r2)
  10c2ec:	28000826 	beq	r5,zero,10c310 <_wcrtomb_r+0x44>
  10c2f0:	103ee83a 	callr	r2
  10c2f4:	10ffffd8 	cmpnei	r3,r2,-1
  10c2f8:	18000a26 	beq	r3,zero,10c324 <_wcrtomb_r+0x58>
  10c2fc:	dfc00517 	ldw	ra,20(sp)
  10c300:	dc400417 	ldw	r17,16(sp)
  10c304:	dc000317 	ldw	r16,12(sp)
  10c308:	dec00604 	addi	sp,sp,24
  10c30c:	f800283a 	ret
  10c310:	000d883a 	mov	r6,zero
  10c314:	d9400084 	addi	r5,sp,2
  10c318:	103ee83a 	callr	r2
  10c31c:	10ffffd8 	cmpnei	r3,r2,-1
  10c320:	183ff61e 	bne	r3,zero,10c2fc <_wcrtomb_r+0x30>
  10c324:	00802284 	movi	r2,138
  10c328:	88000015 	stw	zero,0(r17)
  10c32c:	80800015 	stw	r2,0(r16)
  10c330:	00bfffc4 	movi	r2,-1
  10c334:	003ff106 	br	10c2fc <_wcrtomb_r+0x30>

0010c338 <wcrtomb>:
  10c338:	defffa04 	addi	sp,sp,-24
  10c33c:	00800074 	movhi	r2,1
  10c340:	dc400415 	stw	r17,16(sp)
  10c344:	dc000315 	stw	r16,12(sp)
  10c348:	dfc00515 	stw	ra,20(sp)
  10c34c:	14073c17 	ldw	r16,7408(r2)
  10c350:	00800074 	movhi	r2,1
  10c354:	3023883a 	mov	r17,r6
  10c358:	10824f17 	ldw	r2,2364(r2)
  10c35c:	300f883a 	mov	r7,r6
  10c360:	20000b26 	beq	r4,zero,10c390 <wcrtomb+0x58>
  10c364:	280d883a 	mov	r6,r5
  10c368:	200b883a 	mov	r5,r4
  10c36c:	8009883a 	mov	r4,r16
  10c370:	103ee83a 	callr	r2
  10c374:	10ffffd8 	cmpnei	r3,r2,-1
  10c378:	18000b26 	beq	r3,zero,10c3a8 <wcrtomb+0x70>
  10c37c:	dfc00517 	ldw	ra,20(sp)
  10c380:	dc400417 	ldw	r17,16(sp)
  10c384:	dc000317 	ldw	r16,12(sp)
  10c388:	dec00604 	addi	sp,sp,24
  10c38c:	f800283a 	ret
  10c390:	000d883a 	mov	r6,zero
  10c394:	d9400084 	addi	r5,sp,2
  10c398:	8009883a 	mov	r4,r16
  10c39c:	103ee83a 	callr	r2
  10c3a0:	10ffffd8 	cmpnei	r3,r2,-1
  10c3a4:	183ff51e 	bne	r3,zero,10c37c <wcrtomb+0x44>
  10c3a8:	00802284 	movi	r2,138
  10c3ac:	88000015 	stw	zero,0(r17)
  10c3b0:	80800015 	stw	r2,0(r16)
  10c3b4:	00bfffc4 	movi	r2,-1
  10c3b8:	003ff006 	br	10c37c <wcrtomb+0x44>

0010c3bc <_wctomb_r>:
  10c3bc:	00800074 	movhi	r2,1
  10c3c0:	10824f17 	ldw	r2,2364(r2)
  10c3c4:	1000683a 	jmp	r2

0010c3c8 <__ascii_wctomb>:
  10c3c8:	28000926 	beq	r5,zero,10c3f0 <__ascii_wctomb+0x28>
  10c3cc:	30804030 	cmpltui	r2,r6,256
  10c3d0:	10000326 	beq	r2,zero,10c3e0 <__ascii_wctomb+0x18>
  10c3d4:	29800005 	stb	r6,0(r5)
  10c3d8:	00800044 	movi	r2,1
  10c3dc:	f800283a 	ret
  10c3e0:	00802284 	movi	r2,138
  10c3e4:	20800015 	stw	r2,0(r4)
  10c3e8:	00bfffc4 	movi	r2,-1
  10c3ec:	f800283a 	ret
  10c3f0:	0005883a 	mov	r2,zero
  10c3f4:	f800283a 	ret

0010c3f8 <__udivdi3>:
  10c3f8:	defff504 	addi	sp,sp,-44
  10c3fc:	dd000515 	stw	r20,20(sp)
  10c400:	dc000115 	stw	r16,4(sp)
  10c404:	dfc00a15 	stw	ra,40(sp)
  10c408:	df000915 	stw	fp,36(sp)
  10c40c:	ddc00815 	stw	r23,32(sp)
  10c410:	dd800715 	stw	r22,28(sp)
  10c414:	dd400615 	stw	r21,24(sp)
  10c418:	dcc00415 	stw	r19,16(sp)
  10c41c:	dc800315 	stw	r18,12(sp)
  10c420:	dc400215 	stw	r17,8(sp)
  10c424:	2029883a 	mov	r20,r4
  10c428:	2821883a 	mov	r16,r5
  10c42c:	38008c1e 	bne	r7,zero,10c660 <__udivdi3+0x268>
  10c430:	3827883a 	mov	r19,r7
  10c434:	3023883a 	mov	r17,r6
  10c438:	2025883a 	mov	r18,r4
  10c43c:	2980422e 	bgeu	r5,r6,10c548 <__udivdi3+0x150>
  10c440:	00bfffd4 	movui	r2,65535
  10c444:	282f883a 	mov	r23,r5
  10c448:	1180af2e 	bgeu	r2,r6,10c708 <__udivdi3+0x310>
  10c44c:	00804034 	movhi	r2,256
  10c450:	30815936 	bltu	r6,r2,10c9b8 <__udivdi3+0x5c0>
  10c454:	3006d63a 	srli	r3,r6,24
  10c458:	04c00604 	movi	r19,24
  10c45c:	00800474 	movhi	r2,17
  10c460:	1885883a 	add	r2,r3,r2
  10c464:	108dce43 	ldbu	r2,14137(r2)
  10c468:	14e7883a 	add	r19,r2,r19
  10c46c:	00800804 	movi	r2,32
  10c470:	14c5c83a 	sub	r2,r2,r19
  10c474:	10000526 	beq	r2,zero,10c48c <__udivdi3+0x94>
  10c478:	80a0983a 	sll	r16,r16,r2
  10c47c:	a4e6d83a 	srl	r19,r20,r19
  10c480:	30a2983a 	sll	r17,r6,r2
  10c484:	a0a4983a 	sll	r18,r20,r2
  10c488:	9c2eb03a 	or	r23,r19,r16
  10c48c:	882ad43a 	srli	r21,r17,16
  10c490:	b809883a 	mov	r4,r23
  10c494:	8dbfffcc 	andi	r22,r17,65535
  10c498:	a80b883a 	mov	r5,r21
  10c49c:	0102e040 	call	102e04 <__umodsi3>
  10c4a0:	a80b883a 	mov	r5,r21
  10c4a4:	b809883a 	mov	r4,r23
  10c4a8:	1029883a 	mov	r20,r2
  10c4ac:	0102da00 	call	102da0 <__udivsi3>
  10c4b0:	100b883a 	mov	r5,r2
  10c4b4:	b009883a 	mov	r4,r22
  10c4b8:	1021883a 	mov	r16,r2
  10c4bc:	0102e600 	call	102e60 <__mulsi3>
  10c4c0:	a028943a 	slli	r20,r20,16
  10c4c4:	9006d43a 	srli	r3,r18,16
  10c4c8:	a0c6b03a 	or	r3,r20,r3
  10c4cc:	1880052e 	bgeu	r3,r2,10c4e4 <__udivdi3+0xec>
  10c4d0:	1c47883a 	add	r3,r3,r17
  10c4d4:	813fffc4 	addi	r4,r16,-1
  10c4d8:	1c400136 	bltu	r3,r17,10c4e0 <__udivdi3+0xe8>
  10c4dc:	18814736 	bltu	r3,r2,10c9fc <__udivdi3+0x604>
  10c4e0:	2021883a 	mov	r16,r4
  10c4e4:	18a7c83a 	sub	r19,r3,r2
  10c4e8:	9809883a 	mov	r4,r19
  10c4ec:	a80b883a 	mov	r5,r21
  10c4f0:	0102e040 	call	102e04 <__umodsi3>
  10c4f4:	1029883a 	mov	r20,r2
  10c4f8:	9809883a 	mov	r4,r19
  10c4fc:	a80b883a 	mov	r5,r21
  10c500:	a028943a 	slli	r20,r20,16
  10c504:	0102da00 	call	102da0 <__udivsi3>
  10c508:	100b883a 	mov	r5,r2
  10c50c:	b009883a 	mov	r4,r22
  10c510:	94bfffcc 	andi	r18,r18,65535
  10c514:	1027883a 	mov	r19,r2
  10c518:	a4a4b03a 	or	r18,r20,r18
  10c51c:	0102e600 	call	102e60 <__mulsi3>
  10c520:	9080052e 	bgeu	r18,r2,10c538 <__udivdi3+0x140>
  10c524:	8ca5883a 	add	r18,r17,r18
  10c528:	98ffffc4 	addi	r3,r19,-1
  10c52c:	94400136 	bltu	r18,r17,10c534 <__udivdi3+0x13c>
  10c530:	90813036 	bltu	r18,r2,10c9f4 <__udivdi3+0x5fc>
  10c534:	1827883a 	mov	r19,r3
  10c538:	8004943a 	slli	r2,r16,16
  10c53c:	0007883a 	mov	r3,zero
  10c540:	14c4b03a 	or	r2,r2,r19
  10c544:	00005a06 	br	10c6b0 <__udivdi3+0x2b8>
  10c548:	3000041e 	bne	r6,zero,10c55c <__udivdi3+0x164>
  10c54c:	000b883a 	mov	r5,zero
  10c550:	01000044 	movi	r4,1
  10c554:	0102da00 	call	102da0 <__udivsi3>
  10c558:	1023883a 	mov	r17,r2
  10c55c:	00bfffd4 	movui	r2,65535
  10c560:	1440642e 	bgeu	r2,r17,10c6f4 <__udivdi3+0x2fc>
  10c564:	00804034 	movhi	r2,256
  10c568:	88811036 	bltu	r17,r2,10c9ac <__udivdi3+0x5b4>
  10c56c:	8806d63a 	srli	r3,r17,24
  10c570:	04c00604 	movi	r19,24
  10c574:	00800474 	movhi	r2,17
  10c578:	1885883a 	add	r2,r3,r2
  10c57c:	108dce43 	ldbu	r2,14137(r2)
  10c580:	00c00804 	movi	r3,32
  10c584:	14e7883a 	add	r19,r2,r19
  10c588:	1cc7c83a 	sub	r3,r3,r19
  10c58c:	1800631e 	bne	r3,zero,10c71c <__udivdi3+0x324>
  10c590:	882ad43a 	srli	r21,r17,16
  10c594:	8461c83a 	sub	r16,r16,r17
  10c598:	8dbfffcc 	andi	r22,r17,65535
  10c59c:	00c00044 	movi	r3,1
  10c5a0:	8009883a 	mov	r4,r16
  10c5a4:	a80b883a 	mov	r5,r21
  10c5a8:	d8c00015 	stw	r3,0(sp)
  10c5ac:	0102e040 	call	102e04 <__umodsi3>
  10c5b0:	8009883a 	mov	r4,r16
  10c5b4:	a80b883a 	mov	r5,r21
  10c5b8:	1029883a 	mov	r20,r2
  10c5bc:	0102da00 	call	102da0 <__udivsi3>
  10c5c0:	1009883a 	mov	r4,r2
  10c5c4:	b00b883a 	mov	r5,r22
  10c5c8:	1021883a 	mov	r16,r2
  10c5cc:	0102e600 	call	102e60 <__mulsi3>
  10c5d0:	a028943a 	slli	r20,r20,16
  10c5d4:	9008d43a 	srli	r4,r18,16
  10c5d8:	d8c00017 	ldw	r3,0(sp)
  10c5dc:	a108b03a 	or	r4,r20,r4
  10c5e0:	2080052e 	bgeu	r4,r2,10c5f8 <__udivdi3+0x200>
  10c5e4:	2449883a 	add	r4,r4,r17
  10c5e8:	817fffc4 	addi	r5,r16,-1
  10c5ec:	24400136 	bltu	r4,r17,10c5f4 <__udivdi3+0x1fc>
  10c5f0:	20810536 	bltu	r4,r2,10ca08 <__udivdi3+0x610>
  10c5f4:	2821883a 	mov	r16,r5
  10c5f8:	20a7c83a 	sub	r19,r4,r2
  10c5fc:	9809883a 	mov	r4,r19
  10c600:	a80b883a 	mov	r5,r21
  10c604:	d8c00015 	stw	r3,0(sp)
  10c608:	0102e040 	call	102e04 <__umodsi3>
  10c60c:	1029883a 	mov	r20,r2
  10c610:	9809883a 	mov	r4,r19
  10c614:	a80b883a 	mov	r5,r21
  10c618:	a028943a 	slli	r20,r20,16
  10c61c:	0102da00 	call	102da0 <__udivsi3>
  10c620:	b00b883a 	mov	r5,r22
  10c624:	1009883a 	mov	r4,r2
  10c628:	94bfffcc 	andi	r18,r18,65535
  10c62c:	1027883a 	mov	r19,r2
  10c630:	a4a4b03a 	or	r18,r20,r18
  10c634:	0102e600 	call	102e60 <__mulsi3>
  10c638:	d8c00017 	ldw	r3,0(sp)
  10c63c:	9080052e 	bgeu	r18,r2,10c654 <__udivdi3+0x25c>
  10c640:	8ca5883a 	add	r18,r17,r18
  10c644:	993fffc4 	addi	r4,r19,-1
  10c648:	94400136 	bltu	r18,r17,10c650 <__udivdi3+0x258>
  10c64c:	9080e736 	bltu	r18,r2,10c9ec <__udivdi3+0x5f4>
  10c650:	2027883a 	mov	r19,r4
  10c654:	8004943a 	slli	r2,r16,16
  10c658:	14c4b03a 	or	r2,r2,r19
  10c65c:	00001406 	br	10c6b0 <__udivdi3+0x2b8>
  10c660:	29c01136 	bltu	r5,r7,10c6a8 <__udivdi3+0x2b0>
  10c664:	00bfffd4 	movui	r2,65535
  10c668:	11c01d2e 	bgeu	r2,r7,10c6e0 <__udivdi3+0x2e8>
  10c66c:	00804034 	movhi	r2,256
  10c670:	3880c336 	bltu	r7,r2,10c980 <__udivdi3+0x588>
  10c674:	3808d63a 	srli	r4,r7,24
  10c678:	00c00604 	movi	r3,24
  10c67c:	00800474 	movhi	r2,17
  10c680:	2085883a 	add	r2,r4,r2
  10c684:	110dce43 	ldbu	r4,14137(r2)
  10c688:	20c9883a 	add	r4,r4,r3
  10c68c:	00c00804 	movi	r3,32
  10c690:	192fc83a 	sub	r23,r3,r4
  10c694:	b800581e 	bne	r23,zero,10c7f8 <__udivdi3+0x400>
  10c698:	3c00bc36 	bltu	r7,r16,10c98c <__udivdi3+0x594>
  10c69c:	a185403a 	cmpgeu	r2,r20,r6
  10c6a0:	0007883a 	mov	r3,zero
  10c6a4:	00000206 	br	10c6b0 <__udivdi3+0x2b8>
  10c6a8:	0007883a 	mov	r3,zero
  10c6ac:	0005883a 	mov	r2,zero
  10c6b0:	dfc00a17 	ldw	ra,40(sp)
  10c6b4:	df000917 	ldw	fp,36(sp)
  10c6b8:	ddc00817 	ldw	r23,32(sp)
  10c6bc:	dd800717 	ldw	r22,28(sp)
  10c6c0:	dd400617 	ldw	r21,24(sp)
  10c6c4:	dd000517 	ldw	r20,20(sp)
  10c6c8:	dcc00417 	ldw	r19,16(sp)
  10c6cc:	dc800317 	ldw	r18,12(sp)
  10c6d0:	dc400217 	ldw	r17,8(sp)
  10c6d4:	dc000117 	ldw	r16,4(sp)
  10c6d8:	dec00b04 	addi	sp,sp,44
  10c6dc:	f800283a 	ret
  10c6e0:	38804030 	cmpltui	r2,r7,256
  10c6e4:	1000ac1e 	bne	r2,zero,10c998 <__udivdi3+0x5a0>
  10c6e8:	3808d23a 	srli	r4,r7,8
  10c6ec:	00c00204 	movi	r3,8
  10c6f0:	003fe206 	br	10c67c <__udivdi3+0x284>
  10c6f4:	88804030 	cmpltui	r2,r17,256
  10c6f8:	1000b21e 	bne	r2,zero,10c9c4 <__udivdi3+0x5cc>
  10c6fc:	8806d23a 	srli	r3,r17,8
  10c700:	04c00204 	movi	r19,8
  10c704:	003f9b06 	br	10c574 <__udivdi3+0x17c>
  10c708:	30804030 	cmpltui	r2,r6,256
  10c70c:	1000a51e 	bne	r2,zero,10c9a4 <__udivdi3+0x5ac>
  10c710:	3006d23a 	srli	r3,r6,8
  10c714:	04c00204 	movi	r19,8
  10c718:	003f5006 	br	10c45c <__udivdi3+0x64>
  10c71c:	88e2983a 	sll	r17,r17,r3
  10c720:	84eed83a 	srl	r23,r16,r19
  10c724:	a0e4983a 	sll	r18,r20,r3
  10c728:	882ad43a 	srli	r21,r17,16
  10c72c:	b809883a 	mov	r4,r23
  10c730:	80e0983a 	sll	r16,r16,r3
  10c734:	a80b883a 	mov	r5,r21
  10c738:	0102e040 	call	102e04 <__umodsi3>
  10c73c:	b809883a 	mov	r4,r23
  10c740:	a4e6d83a 	srl	r19,r20,r19
  10c744:	a80b883a 	mov	r5,r21
  10c748:	1029883a 	mov	r20,r2
  10c74c:	8dbfffcc 	andi	r22,r17,65535
  10c750:	0102da00 	call	102da0 <__udivsi3>
  10c754:	b009883a 	mov	r4,r22
  10c758:	100b883a 	mov	r5,r2
  10c75c:	9c26b03a 	or	r19,r19,r16
  10c760:	102f883a 	mov	r23,r2
  10c764:	0102e600 	call	102e60 <__mulsi3>
  10c768:	a028943a 	slli	r20,r20,16
  10c76c:	9808d43a 	srli	r4,r19,16
  10c770:	a108b03a 	or	r4,r20,r4
  10c774:	2080062e 	bgeu	r4,r2,10c790 <__udivdi3+0x398>
  10c778:	2449883a 	add	r4,r4,r17
  10c77c:	b8ffffc4 	addi	r3,r23,-1
  10c780:	24409836 	bltu	r4,r17,10c9e4 <__udivdi3+0x5ec>
  10c784:	2080972e 	bgeu	r4,r2,10c9e4 <__udivdi3+0x5ec>
  10c788:	bdffff84 	addi	r23,r23,-2
  10c78c:	2449883a 	add	r4,r4,r17
  10c790:	20a1c83a 	sub	r16,r4,r2
  10c794:	8009883a 	mov	r4,r16
  10c798:	a80b883a 	mov	r5,r21
  10c79c:	0102e040 	call	102e04 <__umodsi3>
  10c7a0:	1029883a 	mov	r20,r2
  10c7a4:	8009883a 	mov	r4,r16
  10c7a8:	a80b883a 	mov	r5,r21
  10c7ac:	a020943a 	slli	r16,r20,16
  10c7b0:	0102da00 	call	102da0 <__udivsi3>
  10c7b4:	100b883a 	mov	r5,r2
  10c7b8:	b009883a 	mov	r4,r22
  10c7bc:	9cffffcc 	andi	r19,r19,65535
  10c7c0:	1039883a 	mov	fp,r2
  10c7c4:	84e0b03a 	or	r16,r16,r19
  10c7c8:	0102e600 	call	102e60 <__mulsi3>
  10c7cc:	8080062e 	bgeu	r16,r2,10c7e8 <__udivdi3+0x3f0>
  10c7d0:	8461883a 	add	r16,r16,r17
  10c7d4:	e0ffffc4 	addi	r3,fp,-1
  10c7d8:	84407e36 	bltu	r16,r17,10c9d4 <__udivdi3+0x5dc>
  10c7dc:	80807d2e 	bgeu	r16,r2,10c9d4 <__udivdi3+0x5dc>
  10c7e0:	e73fff84 	addi	fp,fp,-2
  10c7e4:	8461883a 	add	r16,r16,r17
  10c7e8:	b806943a 	slli	r3,r23,16
  10c7ec:	80a1c83a 	sub	r16,r16,r2
  10c7f0:	1f06b03a 	or	r3,r3,fp
  10c7f4:	003f6a06 	br	10c5a0 <__udivdi3+0x1a8>
  10c7f8:	3106d83a 	srl	r3,r6,r4
  10c7fc:	3dce983a 	sll	r7,r7,r23
  10c800:	8122d83a 	srl	r17,r16,r4
  10c804:	a104d83a 	srl	r2,r20,r4
  10c808:	19ecb03a 	or	r22,r3,r7
  10c80c:	b024d43a 	srli	r18,r22,16
  10c810:	85e0983a 	sll	r16,r16,r23
  10c814:	8809883a 	mov	r4,r17
  10c818:	900b883a 	mov	r5,r18
  10c81c:	1420b03a 	or	r16,r2,r16
  10c820:	b0bfffcc 	andi	r2,r22,65535
  10c824:	35ea983a 	sll	r21,r6,r23
  10c828:	d8800015 	stw	r2,0(sp)
  10c82c:	0102e040 	call	102e04 <__umodsi3>
  10c830:	900b883a 	mov	r5,r18
  10c834:	8809883a 	mov	r4,r17
  10c838:	1027883a 	mov	r19,r2
  10c83c:	0102da00 	call	102da0 <__udivsi3>
  10c840:	b13fffcc 	andi	r4,r22,65535
  10c844:	100b883a 	mov	r5,r2
  10c848:	1039883a 	mov	fp,r2
  10c84c:	0102e600 	call	102e60 <__mulsi3>
  10c850:	9826943a 	slli	r19,r19,16
  10c854:	8008d43a 	srli	r4,r16,16
  10c858:	9908b03a 	or	r4,r19,r4
  10c85c:	2080062e 	bgeu	r4,r2,10c878 <__udivdi3+0x480>
  10c860:	2589883a 	add	r4,r4,r22
  10c864:	e0ffffc4 	addi	r3,fp,-1
  10c868:	25805c36 	bltu	r4,r22,10c9dc <__udivdi3+0x5e4>
  10c86c:	20805b2e 	bgeu	r4,r2,10c9dc <__udivdi3+0x5e4>
  10c870:	e73fff84 	addi	fp,fp,-2
  10c874:	2589883a 	add	r4,r4,r22
  10c878:	20a3c83a 	sub	r17,r4,r2
  10c87c:	8809883a 	mov	r4,r17
  10c880:	900b883a 	mov	r5,r18
  10c884:	0102e040 	call	102e04 <__umodsi3>
  10c888:	1027883a 	mov	r19,r2
  10c88c:	8809883a 	mov	r4,r17
  10c890:	900b883a 	mov	r5,r18
  10c894:	9826943a 	slli	r19,r19,16
  10c898:	0102da00 	call	102da0 <__udivsi3>
  10c89c:	100b883a 	mov	r5,r2
  10c8a0:	b13fffcc 	andi	r4,r22,65535
  10c8a4:	843fffcc 	andi	r16,r16,65535
  10c8a8:	1023883a 	mov	r17,r2
  10c8ac:	9c20b03a 	or	r16,r19,r16
  10c8b0:	0102e600 	call	102e60 <__mulsi3>
  10c8b4:	8080062e 	bgeu	r16,r2,10c8d0 <__udivdi3+0x4d8>
  10c8b8:	85a1883a 	add	r16,r16,r22
  10c8bc:	88ffffc4 	addi	r3,r17,-1
  10c8c0:	85804236 	bltu	r16,r22,10c9cc <__udivdi3+0x5d4>
  10c8c4:	8080412e 	bgeu	r16,r2,10c9cc <__udivdi3+0x5d4>
  10c8c8:	8c7fff84 	addi	r17,r17,-2
  10c8cc:	85a1883a 	add	r16,r16,r22
  10c8d0:	e038943a 	slli	fp,fp,16
  10c8d4:	adbfffcc 	andi	r22,r21,65535
  10c8d8:	b00b883a 	mov	r5,r22
  10c8dc:	e478b03a 	or	fp,fp,r17
  10c8e0:	e024d43a 	srli	r18,fp,16
  10c8e4:	e4ffffcc 	andi	r19,fp,65535
  10c8e8:	9809883a 	mov	r4,r19
  10c8ec:	a82ad43a 	srli	r21,r21,16
  10c8f0:	80a1c83a 	sub	r16,r16,r2
  10c8f4:	0102e600 	call	102e60 <__mulsi3>
  10c8f8:	9009883a 	mov	r4,r18
  10c8fc:	b00b883a 	mov	r5,r22
  10c900:	d8800015 	stw	r2,0(sp)
  10c904:	0102e600 	call	102e60 <__mulsi3>
  10c908:	9009883a 	mov	r4,r18
  10c90c:	a80b883a 	mov	r5,r21
  10c910:	1023883a 	mov	r17,r2
  10c914:	0102e600 	call	102e60 <__mulsi3>
  10c918:	a80b883a 	mov	r5,r21
  10c91c:	9809883a 	mov	r4,r19
  10c920:	1025883a 	mov	r18,r2
  10c924:	0102e600 	call	102e60 <__mulsi3>
  10c928:	d9800017 	ldw	r6,0(sp)
  10c92c:	1445883a 	add	r2,r2,r17
  10c930:	3006d43a 	srli	r3,r6,16
  10c934:	1885883a 	add	r2,r3,r2
  10c938:	1440022e 	bgeu	r2,r17,10c944 <__udivdi3+0x54c>
  10c93c:	00c00074 	movhi	r3,1
  10c940:	90e5883a 	add	r18,r18,r3
  10c944:	1006d43a 	srli	r3,r2,16
  10c948:	1c87883a 	add	r3,r3,r18
  10c94c:	80c00936 	bltu	r16,r3,10c974 <__udivdi3+0x57c>
  10c950:	80c00326 	beq	r16,r3,10c960 <__udivdi3+0x568>
  10c954:	e005883a 	mov	r2,fp
  10c958:	0007883a 	mov	r3,zero
  10c95c:	003f5406 	br	10c6b0 <__udivdi3+0x2b8>
  10c960:	1004943a 	slli	r2,r2,16
  10c964:	a5c6983a 	sll	r3,r20,r23
  10c968:	31bfffcc 	andi	r6,r6,65535
  10c96c:	1185883a 	add	r2,r2,r6
  10c970:	18bff82e 	bgeu	r3,r2,10c954 <__udivdi3+0x55c>
  10c974:	e0bfffc4 	addi	r2,fp,-1
  10c978:	0007883a 	mov	r3,zero
  10c97c:	003f4c06 	br	10c6b0 <__udivdi3+0x2b8>
  10c980:	3808d43a 	srli	r4,r7,16
  10c984:	00c00404 	movi	r3,16
  10c988:	003f3c06 	br	10c67c <__udivdi3+0x284>
  10c98c:	0007883a 	mov	r3,zero
  10c990:	00800044 	movi	r2,1
  10c994:	003f4606 	br	10c6b0 <__udivdi3+0x2b8>
  10c998:	3809883a 	mov	r4,r7
  10c99c:	0007883a 	mov	r3,zero
  10c9a0:	003f3606 	br	10c67c <__udivdi3+0x284>
  10c9a4:	3007883a 	mov	r3,r6
  10c9a8:	003eac06 	br	10c45c <__udivdi3+0x64>
  10c9ac:	8806d43a 	srli	r3,r17,16
  10c9b0:	04c00404 	movi	r19,16
  10c9b4:	003eef06 	br	10c574 <__udivdi3+0x17c>
  10c9b8:	3006d43a 	srli	r3,r6,16
  10c9bc:	04c00404 	movi	r19,16
  10c9c0:	003ea606 	br	10c45c <__udivdi3+0x64>
  10c9c4:	8807883a 	mov	r3,r17
  10c9c8:	003eea06 	br	10c574 <__udivdi3+0x17c>
  10c9cc:	1823883a 	mov	r17,r3
  10c9d0:	003fbf06 	br	10c8d0 <__udivdi3+0x4d8>
  10c9d4:	1839883a 	mov	fp,r3
  10c9d8:	003f8306 	br	10c7e8 <__udivdi3+0x3f0>
  10c9dc:	1839883a 	mov	fp,r3
  10c9e0:	003fa506 	br	10c878 <__udivdi3+0x480>
  10c9e4:	182f883a 	mov	r23,r3
  10c9e8:	003f6906 	br	10c790 <__udivdi3+0x398>
  10c9ec:	9cffff84 	addi	r19,r19,-2
  10c9f0:	003f1806 	br	10c654 <__udivdi3+0x25c>
  10c9f4:	9cffff84 	addi	r19,r19,-2
  10c9f8:	003ecf06 	br	10c538 <__udivdi3+0x140>
  10c9fc:	843fff84 	addi	r16,r16,-2
  10ca00:	1c47883a 	add	r3,r3,r17
  10ca04:	003eb706 	br	10c4e4 <__udivdi3+0xec>
  10ca08:	843fff84 	addi	r16,r16,-2
  10ca0c:	2449883a 	add	r4,r4,r17
  10ca10:	003ef906 	br	10c5f8 <__udivdi3+0x200>

0010ca14 <__umoddi3>:
  10ca14:	defff304 	addi	sp,sp,-52
  10ca18:	dc400415 	stw	r17,16(sp)
  10ca1c:	dc000315 	stw	r16,12(sp)
  10ca20:	dfc00c15 	stw	ra,48(sp)
  10ca24:	df000b15 	stw	fp,44(sp)
  10ca28:	ddc00a15 	stw	r23,40(sp)
  10ca2c:	dd800915 	stw	r22,36(sp)
  10ca30:	dd400815 	stw	r21,32(sp)
  10ca34:	dd000715 	stw	r20,28(sp)
  10ca38:	dcc00615 	stw	r19,24(sp)
  10ca3c:	dc800515 	stw	r18,20(sp)
  10ca40:	2823883a 	mov	r17,r5
  10ca44:	2021883a 	mov	r16,r4
  10ca48:	3800781e 	bne	r7,zero,10cc2c <__umoddi3+0x218>
  10ca4c:	3825883a 	mov	r18,r7
  10ca50:	3027883a 	mov	r19,r6
  10ca54:	2029883a 	mov	r20,r4
  10ca58:	29803d2e 	bgeu	r5,r6,10cb50 <__umoddi3+0x13c>
  10ca5c:	00bfffd4 	movui	r2,65535
  10ca60:	2839883a 	mov	fp,r5
  10ca64:	11809f36 	bltu	r2,r6,10cce4 <__umoddi3+0x2d0>
  10ca68:	30804030 	cmpltui	r2,r6,256
  10ca6c:	1001451e 	bne	r2,zero,10cf84 <__umoddi3+0x570>
  10ca70:	3006d23a 	srli	r3,r6,8
  10ca74:	04800204 	movi	r18,8
  10ca78:	00800474 	movhi	r2,17
  10ca7c:	1885883a 	add	r2,r3,r2
  10ca80:	110dce43 	ldbu	r4,14137(r2)
  10ca84:	00800804 	movi	r2,32
  10ca88:	2489883a 	add	r4,r4,r18
  10ca8c:	1125c83a 	sub	r18,r2,r4
  10ca90:	90000526 	beq	r18,zero,10caa8 <__umoddi3+0x94>
  10ca94:	8ca2983a 	sll	r17,r17,r18
  10ca98:	8108d83a 	srl	r4,r16,r4
  10ca9c:	34a6983a 	sll	r19,r6,r18
  10caa0:	84a8983a 	sll	r20,r16,r18
  10caa4:	2478b03a 	or	fp,r4,r17
  10caa8:	982cd43a 	srli	r22,r19,16
  10caac:	e009883a 	mov	r4,fp
  10cab0:	9dffffcc 	andi	r23,r19,65535
  10cab4:	b00b883a 	mov	r5,r22
  10cab8:	0102e040 	call	102e04 <__umodsi3>
  10cabc:	b00b883a 	mov	r5,r22
  10cac0:	e009883a 	mov	r4,fp
  10cac4:	102b883a 	mov	r21,r2
  10cac8:	0102da00 	call	102da0 <__udivsi3>
  10cacc:	100b883a 	mov	r5,r2
  10cad0:	b809883a 	mov	r4,r23
  10cad4:	0102e600 	call	102e60 <__mulsi3>
  10cad8:	a82a943a 	slli	r21,r21,16
  10cadc:	a006d43a 	srli	r3,r20,16
  10cae0:	a8c6b03a 	or	r3,r21,r3
  10cae4:	1880032e 	bgeu	r3,r2,10caf4 <__umoddi3+0xe0>
  10cae8:	1cc7883a 	add	r3,r3,r19
  10caec:	1cc00136 	bltu	r3,r19,10caf4 <__umoddi3+0xe0>
  10caf0:	18813836 	bltu	r3,r2,10cfd4 <__umoddi3+0x5c0>
  10caf4:	18a1c83a 	sub	r16,r3,r2
  10caf8:	b00b883a 	mov	r5,r22
  10cafc:	8009883a 	mov	r4,r16
  10cb00:	0102e040 	call	102e04 <__umodsi3>
  10cb04:	b00b883a 	mov	r5,r22
  10cb08:	8009883a 	mov	r4,r16
  10cb0c:	1023883a 	mov	r17,r2
  10cb10:	0102da00 	call	102da0 <__udivsi3>
  10cb14:	100b883a 	mov	r5,r2
  10cb18:	b809883a 	mov	r4,r23
  10cb1c:	8822943a 	slli	r17,r17,16
  10cb20:	0102e600 	call	102e60 <__mulsi3>
  10cb24:	a0ffffcc 	andi	r3,r20,65535
  10cb28:	88c6b03a 	or	r3,r17,r3
  10cb2c:	1880042e 	bgeu	r3,r2,10cb40 <__umoddi3+0x12c>
  10cb30:	1cc7883a 	add	r3,r3,r19
  10cb34:	1cc00236 	bltu	r3,r19,10cb40 <__umoddi3+0x12c>
  10cb38:	1880012e 	bgeu	r3,r2,10cb40 <__umoddi3+0x12c>
  10cb3c:	1cc7883a 	add	r3,r3,r19
  10cb40:	1885c83a 	sub	r2,r3,r2
  10cb44:	1484d83a 	srl	r2,r2,r18
  10cb48:	0007883a 	mov	r3,zero
  10cb4c:	00003a06 	br	10cc38 <__umoddi3+0x224>
  10cb50:	3000041e 	bne	r6,zero,10cb64 <__umoddi3+0x150>
  10cb54:	000b883a 	mov	r5,zero
  10cb58:	01000044 	movi	r4,1
  10cb5c:	0102da00 	call	102da0 <__udivsi3>
  10cb60:	1027883a 	mov	r19,r2
  10cb64:	00bfffd4 	movui	r2,65535
  10cb68:	14c0592e 	bgeu	r2,r19,10ccd0 <__umoddi3+0x2bc>
  10cb6c:	00804034 	movhi	r2,256
  10cb70:	98810c36 	bltu	r19,r2,10cfa4 <__umoddi3+0x590>
  10cb74:	9806d63a 	srli	r3,r19,24
  10cb78:	04800604 	movi	r18,24
  10cb7c:	00800474 	movhi	r2,17
  10cb80:	1885883a 	add	r2,r3,r2
  10cb84:	10cdce43 	ldbu	r3,14137(r2)
  10cb88:	00800804 	movi	r2,32
  10cb8c:	1c87883a 	add	r3,r3,r18
  10cb90:	10e5c83a 	sub	r18,r2,r3
  10cb94:	9000c51e 	bne	r18,zero,10ceac <__umoddi3+0x498>
  10cb98:	982ad43a 	srli	r21,r19,16
  10cb9c:	8ce3c83a 	sub	r17,r17,r19
  10cba0:	9dbfffcc 	andi	r22,r19,65535
  10cba4:	a80b883a 	mov	r5,r21
  10cba8:	8809883a 	mov	r4,r17
  10cbac:	0102e040 	call	102e04 <__umodsi3>
  10cbb0:	a80b883a 	mov	r5,r21
  10cbb4:	8809883a 	mov	r4,r17
  10cbb8:	102f883a 	mov	r23,r2
  10cbbc:	0102da00 	call	102da0 <__udivsi3>
  10cbc0:	b00b883a 	mov	r5,r22
  10cbc4:	1009883a 	mov	r4,r2
  10cbc8:	0102e600 	call	102e60 <__mulsi3>
  10cbcc:	b82e943a 	slli	r23,r23,16
  10cbd0:	a006d43a 	srli	r3,r20,16
  10cbd4:	b8c6b03a 	or	r3,r23,r3
  10cbd8:	1880042e 	bgeu	r3,r2,10cbec <__umoddi3+0x1d8>
  10cbdc:	1cc7883a 	add	r3,r3,r19
  10cbe0:	1cc00236 	bltu	r3,r19,10cbec <__umoddi3+0x1d8>
  10cbe4:	1880012e 	bgeu	r3,r2,10cbec <__umoddi3+0x1d8>
  10cbe8:	1cc7883a 	add	r3,r3,r19
  10cbec:	18a1c83a 	sub	r16,r3,r2
  10cbf0:	a80b883a 	mov	r5,r21
  10cbf4:	8009883a 	mov	r4,r16
  10cbf8:	0102e040 	call	102e04 <__umodsi3>
  10cbfc:	1023883a 	mov	r17,r2
  10cc00:	a80b883a 	mov	r5,r21
  10cc04:	8009883a 	mov	r4,r16
  10cc08:	0102da00 	call	102da0 <__udivsi3>
  10cc0c:	8822943a 	slli	r17,r17,16
  10cc10:	b00b883a 	mov	r5,r22
  10cc14:	1009883a 	mov	r4,r2
  10cc18:	0102e600 	call	102e60 <__mulsi3>
  10cc1c:	a53fffcc 	andi	r20,r20,65535
  10cc20:	8d06b03a 	or	r3,r17,r20
  10cc24:	18bfc62e 	bgeu	r3,r2,10cb40 <__umoddi3+0x12c>
  10cc28:	003fc106 	br	10cb30 <__umoddi3+0x11c>
  10cc2c:	2005883a 	mov	r2,r4
  10cc30:	29c00d2e 	bgeu	r5,r7,10cc68 <__umoddi3+0x254>
  10cc34:	2807883a 	mov	r3,r5
  10cc38:	dfc00c17 	ldw	ra,48(sp)
  10cc3c:	df000b17 	ldw	fp,44(sp)
  10cc40:	ddc00a17 	ldw	r23,40(sp)
  10cc44:	dd800917 	ldw	r22,36(sp)
  10cc48:	dd400817 	ldw	r21,32(sp)
  10cc4c:	dd000717 	ldw	r20,28(sp)
  10cc50:	dcc00617 	ldw	r19,24(sp)
  10cc54:	dc800517 	ldw	r18,20(sp)
  10cc58:	dc400417 	ldw	r17,16(sp)
  10cc5c:	dc000317 	ldw	r16,12(sp)
  10cc60:	dec00d04 	addi	sp,sp,52
  10cc64:	f800283a 	ret
  10cc68:	013fffd4 	movui	r4,65535
  10cc6c:	2807883a 	mov	r3,r5
  10cc70:	21c0122e 	bgeu	r4,r7,10ccbc <__umoddi3+0x2a8>
  10cc74:	01004034 	movhi	r4,256
  10cc78:	3900c736 	bltu	r7,r4,10cf98 <__umoddi3+0x584>
  10cc7c:	3810d63a 	srli	r8,r7,24
  10cc80:	01400604 	movi	r5,24
  10cc84:	01000474 	movhi	r4,17
  10cc88:	4109883a 	add	r4,r8,r4
  10cc8c:	250dce43 	ldbu	r20,14137(r4)
  10cc90:	05400804 	movi	r21,32
  10cc94:	a169883a 	add	r20,r20,r5
  10cc98:	ad2bc83a 	sub	r21,r21,r20
  10cc9c:	a800161e 	bne	r21,zero,10ccf8 <__umoddi3+0x2e4>
  10cca0:	3c400136 	bltu	r7,r17,10cca8 <__umoddi3+0x294>
  10cca4:	81bfe436 	bltu	r16,r6,10cc38 <__umoddi3+0x224>
  10cca8:	8185c83a 	sub	r2,r16,r6
  10ccac:	89cfc83a 	sub	r7,r17,r7
  10ccb0:	8087803a 	cmpltu	r3,r16,r2
  10ccb4:	38c7c83a 	sub	r3,r7,r3
  10ccb8:	003fdf06 	br	10cc38 <__umoddi3+0x224>
  10ccbc:	39004030 	cmpltui	r4,r7,256
  10ccc0:	2000b21e 	bne	r4,zero,10cf8c <__umoddi3+0x578>
  10ccc4:	3810d23a 	srli	r8,r7,8
  10ccc8:	01400204 	movi	r5,8
  10cccc:	003fed06 	br	10cc84 <__umoddi3+0x270>
  10ccd0:	98804030 	cmpltui	r2,r19,256
  10ccd4:	1000b61e 	bne	r2,zero,10cfb0 <__umoddi3+0x59c>
  10ccd8:	9806d23a 	srli	r3,r19,8
  10ccdc:	04800204 	movi	r18,8
  10cce0:	003fa606 	br	10cb7c <__umoddi3+0x168>
  10cce4:	00804034 	movhi	r2,256
  10cce8:	3080b336 	bltu	r6,r2,10cfb8 <__umoddi3+0x5a4>
  10ccec:	3006d63a 	srli	r3,r6,24
  10ccf0:	04800604 	movi	r18,24
  10ccf4:	003f6006 	br	10ca78 <__umoddi3+0x64>
  10ccf8:	3508d83a 	srl	r4,r6,r20
  10ccfc:	3d4e983a 	sll	r7,r7,r21
  10cd00:	8d38d83a 	srl	fp,r17,r20
  10cd04:	8504d83a 	srl	r2,r16,r20
  10cd08:	21e4b03a 	or	r18,r4,r7
  10cd0c:	902cd43a 	srli	r22,r18,16
  10cd10:	8d62983a 	sll	r17,r17,r21
  10cd14:	e009883a 	mov	r4,fp
  10cd18:	b00b883a 	mov	r5,r22
  10cd1c:	3566983a 	sll	r19,r6,r21
  10cd20:	1462b03a 	or	r17,r2,r17
  10cd24:	0102e040 	call	102e04 <__umodsi3>
  10cd28:	e009883a 	mov	r4,fp
  10cd2c:	b00b883a 	mov	r5,r22
  10cd30:	95ffffcc 	andi	r23,r18,65535
  10cd34:	d8800015 	stw	r2,0(sp)
  10cd38:	0102da00 	call	102da0 <__udivsi3>
  10cd3c:	100b883a 	mov	r5,r2
  10cd40:	b809883a 	mov	r4,r23
  10cd44:	1039883a 	mov	fp,r2
  10cd48:	0102e600 	call	102e60 <__mulsi3>
  10cd4c:	d9800017 	ldw	r6,0(sp)
  10cd50:	8806d43a 	srli	r3,r17,16
  10cd54:	8560983a 	sll	r16,r16,r21
  10cd58:	300c943a 	slli	r6,r6,16
  10cd5c:	30c6b03a 	or	r3,r6,r3
  10cd60:	1880062e 	bgeu	r3,r2,10cd7c <__umoddi3+0x368>
  10cd64:	1c87883a 	add	r3,r3,r18
  10cd68:	e13fffc4 	addi	r4,fp,-1
  10cd6c:	1c809736 	bltu	r3,r18,10cfcc <__umoddi3+0x5b8>
  10cd70:	1880962e 	bgeu	r3,r2,10cfcc <__umoddi3+0x5b8>
  10cd74:	e73fff84 	addi	fp,fp,-2
  10cd78:	1c87883a 	add	r3,r3,r18
  10cd7c:	1887c83a 	sub	r3,r3,r2
  10cd80:	b00b883a 	mov	r5,r22
  10cd84:	1809883a 	mov	r4,r3
  10cd88:	d8c00115 	stw	r3,4(sp)
  10cd8c:	0102e040 	call	102e04 <__umodsi3>
  10cd90:	d8c00117 	ldw	r3,4(sp)
  10cd94:	b00b883a 	mov	r5,r22
  10cd98:	d8800015 	stw	r2,0(sp)
  10cd9c:	1809883a 	mov	r4,r3
  10cda0:	0102da00 	call	102da0 <__udivsi3>
  10cda4:	100b883a 	mov	r5,r2
  10cda8:	b809883a 	mov	r4,r23
  10cdac:	102d883a 	mov	r22,r2
  10cdb0:	0102e600 	call	102e60 <__mulsi3>
  10cdb4:	d9800017 	ldw	r6,0(sp)
  10cdb8:	8c7fffcc 	andi	r17,r17,65535
  10cdbc:	300c943a 	slli	r6,r6,16
  10cdc0:	3462b03a 	or	r17,r6,r17
  10cdc4:	8880062e 	bgeu	r17,r2,10cde0 <__umoddi3+0x3cc>
  10cdc8:	8ca3883a 	add	r17,r17,r18
  10cdcc:	b0ffffc4 	addi	r3,r22,-1
  10cdd0:	8c807c36 	bltu	r17,r18,10cfc4 <__umoddi3+0x5b0>
  10cdd4:	88807b2e 	bgeu	r17,r2,10cfc4 <__umoddi3+0x5b0>
  10cdd8:	b5bfff84 	addi	r22,r22,-2
  10cddc:	8ca3883a 	add	r17,r17,r18
  10cde0:	e038943a 	slli	fp,fp,16
  10cde4:	980cd43a 	srli	r6,r19,16
  10cde8:	98ffffcc 	andi	r3,r19,65535
  10cdec:	e5b8b03a 	or	fp,fp,r22
  10cdf0:	e02cd43a 	srli	r22,fp,16
  10cdf4:	e73fffcc 	andi	fp,fp,65535
  10cdf8:	180b883a 	mov	r5,r3
  10cdfc:	e009883a 	mov	r4,fp
  10ce00:	d9800215 	stw	r6,8(sp)
  10ce04:	d8c00015 	stw	r3,0(sp)
  10ce08:	88a3c83a 	sub	r17,r17,r2
  10ce0c:	0102e600 	call	102e60 <__mulsi3>
  10ce10:	d8c00017 	ldw	r3,0(sp)
  10ce14:	b009883a 	mov	r4,r22
  10ce18:	102f883a 	mov	r23,r2
  10ce1c:	180b883a 	mov	r5,r3
  10ce20:	0102e600 	call	102e60 <__mulsi3>
  10ce24:	d9800217 	ldw	r6,8(sp)
  10ce28:	b009883a 	mov	r4,r22
  10ce2c:	d8800115 	stw	r2,4(sp)
  10ce30:	300b883a 	mov	r5,r6
  10ce34:	d9800015 	stw	r6,0(sp)
  10ce38:	0102e600 	call	102e60 <__mulsi3>
  10ce3c:	d9800017 	ldw	r6,0(sp)
  10ce40:	e009883a 	mov	r4,fp
  10ce44:	102d883a 	mov	r22,r2
  10ce48:	300b883a 	mov	r5,r6
  10ce4c:	0102e600 	call	102e60 <__mulsi3>
  10ce50:	d9c00117 	ldw	r7,4(sp)
  10ce54:	b808d43a 	srli	r4,r23,16
  10ce58:	11c5883a 	add	r2,r2,r7
  10ce5c:	2085883a 	add	r2,r4,r2
  10ce60:	11c0022e 	bgeu	r2,r7,10ce6c <__umoddi3+0x458>
  10ce64:	00c00074 	movhi	r3,1
  10ce68:	b0ed883a 	add	r22,r22,r3
  10ce6c:	1006d43a 	srli	r3,r2,16
  10ce70:	1004943a 	slli	r2,r2,16
  10ce74:	bdffffcc 	andi	r23,r23,65535
  10ce78:	1d87883a 	add	r3,r3,r22
  10ce7c:	15c5883a 	add	r2,r2,r23
  10ce80:	88c03a36 	bltu	r17,r3,10cf6c <__umoddi3+0x558>
  10ce84:	88c03826 	beq	r17,r3,10cf68 <__umoddi3+0x554>
  10ce88:	8085c83a 	sub	r2,r16,r2
  10ce8c:	80a1803a 	cmpltu	r16,r16,r2
  10ce90:	88c7c83a 	sub	r3,r17,r3
  10ce94:	1c07c83a 	sub	r3,r3,r16
  10ce98:	1d20983a 	sll	r16,r3,r20
  10ce9c:	1544d83a 	srl	r2,r2,r21
  10cea0:	1d46d83a 	srl	r3,r3,r21
  10cea4:	8084b03a 	or	r2,r16,r2
  10cea8:	003f6306 	br	10cc38 <__umoddi3+0x224>
  10ceac:	9ca6983a 	sll	r19,r19,r18
  10ceb0:	88f8d83a 	srl	fp,r17,r3
  10ceb4:	80c6d83a 	srl	r3,r16,r3
  10ceb8:	982ad43a 	srli	r21,r19,16
  10cebc:	8ca2983a 	sll	r17,r17,r18
  10cec0:	e009883a 	mov	r4,fp
  10cec4:	a80b883a 	mov	r5,r21
  10cec8:	1c6eb03a 	or	r23,r3,r17
  10cecc:	0102e040 	call	102e04 <__umodsi3>
  10ced0:	a80b883a 	mov	r5,r21
  10ced4:	e009883a 	mov	r4,fp
  10ced8:	1029883a 	mov	r20,r2
  10cedc:	9dbfffcc 	andi	r22,r19,65535
  10cee0:	0102da00 	call	102da0 <__udivsi3>
  10cee4:	b009883a 	mov	r4,r22
  10cee8:	100b883a 	mov	r5,r2
  10ceec:	0102e600 	call	102e60 <__mulsi3>
  10cef0:	a006943a 	slli	r3,r20,16
  10cef4:	b808d43a 	srli	r4,r23,16
  10cef8:	84a8983a 	sll	r20,r16,r18
  10cefc:	1906b03a 	or	r3,r3,r4
  10cf00:	1880042e 	bgeu	r3,r2,10cf14 <__umoddi3+0x500>
  10cf04:	1cc7883a 	add	r3,r3,r19
  10cf08:	1cc00236 	bltu	r3,r19,10cf14 <__umoddi3+0x500>
  10cf0c:	1880012e 	bgeu	r3,r2,10cf14 <__umoddi3+0x500>
  10cf10:	1cc7883a 	add	r3,r3,r19
  10cf14:	18a3c83a 	sub	r17,r3,r2
  10cf18:	8809883a 	mov	r4,r17
  10cf1c:	a80b883a 	mov	r5,r21
  10cf20:	0102e040 	call	102e04 <__umodsi3>
  10cf24:	1021883a 	mov	r16,r2
  10cf28:	8809883a 	mov	r4,r17
  10cf2c:	a80b883a 	mov	r5,r21
  10cf30:	8022943a 	slli	r17,r16,16
  10cf34:	0102da00 	call	102da0 <__udivsi3>
  10cf38:	100b883a 	mov	r5,r2
  10cf3c:	b009883a 	mov	r4,r22
  10cf40:	bdffffcc 	andi	r23,r23,65535
  10cf44:	0102e600 	call	102e60 <__mulsi3>
  10cf48:	8de2b03a 	or	r17,r17,r23
  10cf4c:	8880042e 	bgeu	r17,r2,10cf60 <__umoddi3+0x54c>
  10cf50:	8ce3883a 	add	r17,r17,r19
  10cf54:	8cc00236 	bltu	r17,r19,10cf60 <__umoddi3+0x54c>
  10cf58:	8880012e 	bgeu	r17,r2,10cf60 <__umoddi3+0x54c>
  10cf5c:	8ce3883a 	add	r17,r17,r19
  10cf60:	88a3c83a 	sub	r17,r17,r2
  10cf64:	003f0f06 	br	10cba4 <__umoddi3+0x190>
  10cf68:	80bfc72e 	bgeu	r16,r2,10ce88 <__umoddi3+0x474>
  10cf6c:	14e7c83a 	sub	r19,r2,r19
  10cf70:	14c5803a 	cmpltu	r2,r2,r19
  10cf74:	1489883a 	add	r4,r2,r18
  10cf78:	1907c83a 	sub	r3,r3,r4
  10cf7c:	9805883a 	mov	r2,r19
  10cf80:	003fc106 	br	10ce88 <__umoddi3+0x474>
  10cf84:	3007883a 	mov	r3,r6
  10cf88:	003ebb06 	br	10ca78 <__umoddi3+0x64>
  10cf8c:	3811883a 	mov	r8,r7
  10cf90:	000b883a 	mov	r5,zero
  10cf94:	003f3b06 	br	10cc84 <__umoddi3+0x270>
  10cf98:	3810d43a 	srli	r8,r7,16
  10cf9c:	01400404 	movi	r5,16
  10cfa0:	003f3806 	br	10cc84 <__umoddi3+0x270>
  10cfa4:	9806d43a 	srli	r3,r19,16
  10cfa8:	04800404 	movi	r18,16
  10cfac:	003ef306 	br	10cb7c <__umoddi3+0x168>
  10cfb0:	9807883a 	mov	r3,r19
  10cfb4:	003ef106 	br	10cb7c <__umoddi3+0x168>
  10cfb8:	3006d43a 	srli	r3,r6,16
  10cfbc:	04800404 	movi	r18,16
  10cfc0:	003ead06 	br	10ca78 <__umoddi3+0x64>
  10cfc4:	182d883a 	mov	r22,r3
  10cfc8:	003f8506 	br	10cde0 <__umoddi3+0x3cc>
  10cfcc:	2039883a 	mov	fp,r4
  10cfd0:	003f6a06 	br	10cd7c <__umoddi3+0x368>
  10cfd4:	1cc7883a 	add	r3,r3,r19
  10cfd8:	003ec606 	br	10caf4 <__umoddi3+0xe0>

0010cfdc <__adddf3>:
  10cfdc:	02000434 	movhi	r8,16
  10cfe0:	defffb04 	addi	sp,sp,-20
  10cfe4:	423fffc4 	addi	r8,r8,-1
  10cfe8:	2a12703a 	and	r9,r5,r8
  10cfec:	3a06703a 	and	r3,r7,r8
  10cff0:	3804d53a 	srli	r2,r7,20
  10cff4:	dc000015 	stw	r16,0(sp)
  10cff8:	2820d53a 	srli	r16,r5,20
  10cffc:	2016d77a 	srli	r11,r4,29
  10d000:	3014d77a 	srli	r10,r6,29
  10d004:	280ad7fa 	srli	r5,r5,31
  10d008:	481290fa 	slli	r9,r9,3
  10d00c:	180690fa 	slli	r3,r3,3
  10d010:	380ed7fa 	srli	r7,r7,31
  10d014:	dc400115 	stw	r17,4(sp)
  10d018:	8401ffcc 	andi	r16,r16,2047
  10d01c:	1081ffcc 	andi	r2,r2,2047
  10d020:	dfc00415 	stw	ra,16(sp)
  10d024:	dcc00315 	stw	r19,12(sp)
  10d028:	dc800215 	stw	r18,8(sp)
  10d02c:	5a52b03a 	or	r9,r11,r9
  10d030:	50c6b03a 	or	r3,r10,r3
  10d034:	2823883a 	mov	r17,r5
  10d038:	201890fa 	slli	r12,r4,3
  10d03c:	301690fa 	slli	r11,r6,3
  10d040:	8095c83a 	sub	r10,r16,r2
  10d044:	29c06a26 	beq	r5,r7,10d1f0 <__adddf3+0x214>
  10d048:	0280590e 	bge	zero,r10,10d1b0 <__adddf3+0x1d4>
  10d04c:	10007c26 	beq	r2,zero,10d240 <__adddf3+0x264>
  10d050:	8081ffd8 	cmpnei	r2,r16,2047
  10d054:	10010726 	beq	r2,zero,10d474 <__adddf3+0x498>
  10d058:	18c02034 	orhi	r3,r3,128
  10d05c:	50800e48 	cmpgei	r2,r10,57
  10d060:	1000ed1e 	bne	r2,zero,10d418 <__adddf3+0x43c>
  10d064:	50800808 	cmpgei	r2,r10,32
  10d068:	1001541e 	bne	r2,zero,10d5bc <__adddf3+0x5e0>
  10d06c:	01000804 	movi	r4,32
  10d070:	2289c83a 	sub	r4,r4,r10
  10d074:	1926983a 	sll	r19,r3,r4
  10d078:	5a84d83a 	srl	r2,r11,r10
  10d07c:	5908983a 	sll	r4,r11,r4
  10d080:	1a86d83a 	srl	r3,r3,r10
  10d084:	98a6b03a 	or	r19,r19,r2
  10d088:	2016c03a 	cmpne	r11,r4,zero
  10d08c:	9ae6b03a 	or	r19,r19,r11
  10d090:	48d3c83a 	sub	r9,r9,r3
  10d094:	64e7c83a 	sub	r19,r12,r19
  10d098:	64c9803a 	cmpltu	r4,r12,r19
  10d09c:	4909c83a 	sub	r4,r9,r4
  10d0a0:	2080202c 	andhi	r2,r4,128
  10d0a4:	10008726 	beq	r2,zero,10d2c4 <__adddf3+0x2e8>
  10d0a8:	02402034 	movhi	r9,128
  10d0ac:	4a7fffc4 	addi	r9,r9,-1
  10d0b0:	2264703a 	and	r18,r4,r9
  10d0b4:	9000cf26 	beq	r18,zero,10d3f4 <__adddf3+0x418>
  10d0b8:	9009883a 	mov	r4,r18
  10d0bc:	010f8c40 	call	10f8c4 <__clzsi2>
  10d0c0:	10fffe04 	addi	r3,r2,-8
  10d0c4:	01000804 	movi	r4,32
  10d0c8:	20c9c83a 	sub	r4,r4,r3
  10d0cc:	990ad83a 	srl	r5,r19,r4
  10d0d0:	90c8983a 	sll	r4,r18,r3
  10d0d4:	98e6983a 	sll	r19,r19,r3
  10d0d8:	2908b03a 	or	r4,r5,r4
  10d0dc:	1c00be16 	blt	r3,r16,10d3d8 <__adddf3+0x3fc>
  10d0e0:	1c21c83a 	sub	r16,r3,r16
  10d0e4:	81400044 	addi	r5,r16,1
  10d0e8:	28800808 	cmpgei	r2,r5,32
  10d0ec:	10011b1e 	bne	r2,zero,10d55c <__adddf3+0x580>
  10d0f0:	00800804 	movi	r2,32
  10d0f4:	1145c83a 	sub	r2,r2,r5
  10d0f8:	9946d83a 	srl	r3,r19,r5
  10d0fc:	98a6983a 	sll	r19,r19,r2
  10d100:	2084983a 	sll	r2,r4,r2
  10d104:	2148d83a 	srl	r4,r4,r5
  10d108:	9826c03a 	cmpne	r19,r19,zero
  10d10c:	10c4b03a 	or	r2,r2,r3
  10d110:	14e6b03a 	or	r19,r2,r19
  10d114:	0021883a 	mov	r16,zero
  10d118:	988001cc 	andi	r2,r19,7
  10d11c:	10000726 	beq	r2,zero,10d13c <__adddf3+0x160>
  10d120:	988003cc 	andi	r2,r19,15
  10d124:	10800120 	cmpeqi	r2,r2,4
  10d128:	1000041e 	bne	r2,zero,10d13c <__adddf3+0x160>
  10d12c:	99400104 	addi	r5,r19,4
  10d130:	2ce7803a 	cmpltu	r19,r5,r19
  10d134:	24c9883a 	add	r4,r4,r19
  10d138:	2827883a 	mov	r19,r5
  10d13c:	2080202c 	andhi	r2,r4,128
  10d140:	10006226 	beq	r2,zero,10d2cc <__adddf3+0x2f0>
  10d144:	84000044 	addi	r16,r16,1
  10d148:	8081ffe0 	cmpeqi	r2,r16,2047
  10d14c:	8401ffcc 	andi	r16,r16,2047
  10d150:	1000731e 	bne	r2,zero,10d320 <__adddf3+0x344>
  10d154:	017fe034 	movhi	r5,65408
  10d158:	297fffc4 	addi	r5,r5,-1
  10d15c:	214a703a 	and	r5,r4,r5
  10d160:	2804977a 	slli	r2,r5,29
  10d164:	280a927a 	slli	r5,r5,9
  10d168:	9826d0fa 	srli	r19,r19,3
  10d16c:	2808d33a 	srli	r4,r5,12
  10d170:	14c4b03a 	or	r2,r2,r19
  10d174:	8020953a 	slli	r16,r16,20
  10d178:	00c00434 	movhi	r3,16
  10d17c:	8c403fcc 	andi	r17,r17,255
  10d180:	882297fa 	slli	r17,r17,31
  10d184:	18ffffc4 	addi	r3,r3,-1
  10d188:	20c6703a 	and	r3,r4,r3
  10d18c:	1c06b03a 	or	r3,r3,r16
  10d190:	1c46b03a 	or	r3,r3,r17
  10d194:	dfc00417 	ldw	ra,16(sp)
  10d198:	dcc00317 	ldw	r19,12(sp)
  10d19c:	dc800217 	ldw	r18,8(sp)
  10d1a0:	dc400117 	ldw	r17,4(sp)
  10d1a4:	dc000017 	ldw	r16,0(sp)
  10d1a8:	dec00504 	addi	sp,sp,20
  10d1ac:	f800283a 	ret
  10d1b0:	50002b1e 	bne	r10,zero,10d260 <__adddf3+0x284>
  10d1b4:	80800044 	addi	r2,r16,1
  10d1b8:	1081ff8c 	andi	r2,r2,2046
  10d1bc:	1000a11e 	bne	r2,zero,10d444 <__adddf3+0x468>
  10d1c0:	4b0ab03a 	or	r5,r9,r12
  10d1c4:	1ac4b03a 	or	r2,r3,r11
  10d1c8:	80015c1e 	bne	r16,zero,10d73c <__adddf3+0x760>
  10d1cc:	28012826 	beq	r5,zero,10d670 <__adddf3+0x694>
  10d1d0:	1001671e 	bne	r2,zero,10d770 <__adddf3+0x794>
  10d1d4:	4826977a 	slli	r19,r9,29
  10d1d8:	00c80034 	movhi	r3,8192
  10d1dc:	18ffffc4 	addi	r3,r3,-1
  10d1e0:	20c4703a 	and	r2,r4,r3
  10d1e4:	9884b03a 	or	r2,r19,r2
  10d1e8:	4812d0fa 	srli	r9,r9,3
  10d1ec:	00003d06 	br	10d2e4 <__adddf3+0x308>
  10d1f0:	02804f0e 	bge	zero,r10,10d330 <__adddf3+0x354>
  10d1f4:	10002426 	beq	r2,zero,10d288 <__adddf3+0x2ac>
  10d1f8:	8081ffd8 	cmpnei	r2,r16,2047
  10d1fc:	10009d26 	beq	r2,zero,10d474 <__adddf3+0x498>
  10d200:	18c02034 	orhi	r3,r3,128
  10d204:	50800e48 	cmpgei	r2,r10,57
  10d208:	10003b1e 	bne	r2,zero,10d2f8 <__adddf3+0x31c>
  10d20c:	50800808 	cmpgei	r2,r10,32
  10d210:	10010326 	beq	r2,zero,10d620 <__adddf3+0x644>
  10d214:	54fff804 	addi	r19,r10,-32
  10d218:	51000820 	cmpeqi	r4,r10,32
  10d21c:	1cc4d83a 	srl	r2,r3,r19
  10d220:	2000041e 	bne	r4,zero,10d234 <__adddf3+0x258>
  10d224:	01001004 	movi	r4,64
  10d228:	2295c83a 	sub	r10,r4,r10
  10d22c:	1a86983a 	sll	r3,r3,r10
  10d230:	58d6b03a 	or	r11,r11,r3
  10d234:	5826c03a 	cmpne	r19,r11,zero
  10d238:	98a6b03a 	or	r19,r19,r2
  10d23c:	00003006 	br	10d300 <__adddf3+0x324>
  10d240:	1ac4b03a 	or	r2,r3,r11
  10d244:	10007726 	beq	r2,zero,10d424 <__adddf3+0x448>
  10d248:	50bfffc4 	addi	r2,r10,-1
  10d24c:	10011926 	beq	r2,zero,10d6b4 <__adddf3+0x6d8>
  10d250:	5281ffd8 	cmpnei	r10,r10,2047
  10d254:	50012026 	beq	r10,zero,10d6d8 <__adddf3+0x6fc>
  10d258:	1015883a 	mov	r10,r2
  10d25c:	003f7f06 	br	10d05c <__adddf3+0x80>
  10d260:	1409c83a 	sub	r4,r2,r16
  10d264:	8000a61e 	bne	r16,zero,10d500 <__adddf3+0x524>
  10d268:	4b0ab03a 	or	r5,r9,r12
  10d26c:	2800f726 	beq	r5,zero,10d64c <__adddf3+0x670>
  10d270:	217fffc4 	addi	r5,r4,-1
  10d274:	28017f26 	beq	r5,zero,10d874 <__adddf3+0x898>
  10d278:	2101ffd8 	cmpnei	r4,r4,2047
  10d27c:	2001a326 	beq	r4,zero,10d90c <__adddf3+0x930>
  10d280:	2809883a 	mov	r4,r5
  10d284:	0000a106 	br	10d50c <__adddf3+0x530>
  10d288:	1ac4b03a 	or	r2,r3,r11
  10d28c:	10006526 	beq	r2,zero,10d424 <__adddf3+0x448>
  10d290:	50bfffc4 	addi	r2,r10,-1
  10d294:	10000426 	beq	r2,zero,10d2a8 <__adddf3+0x2cc>
  10d298:	5281ffd8 	cmpnei	r10,r10,2047
  10d29c:	50014326 	beq	r10,zero,10d7ac <__adddf3+0x7d0>
  10d2a0:	1015883a 	mov	r10,r2
  10d2a4:	003fd706 	br	10d204 <__adddf3+0x228>
  10d2a8:	62e7883a 	add	r19,r12,r11
  10d2ac:	48d3883a 	add	r9,r9,r3
  10d2b0:	9b09803a 	cmpltu	r4,r19,r12
  10d2b4:	4909883a 	add	r4,r9,r4
  10d2b8:	2080202c 	andhi	r2,r4,128
  10d2bc:	1000b41e 	bne	r2,zero,10d590 <__adddf3+0x5b4>
  10d2c0:	04000044 	movi	r16,1
  10d2c4:	988001cc 	andi	r2,r19,7
  10d2c8:	103f951e 	bne	r2,zero,10d120 <__adddf3+0x144>
  10d2cc:	9826d0fa 	srli	r19,r19,3
  10d2d0:	2004977a 	slli	r2,r4,29
  10d2d4:	2012d0fa 	srli	r9,r4,3
  10d2d8:	9884b03a 	or	r2,r19,r2
  10d2dc:	80c1ffe0 	cmpeqi	r3,r16,2047
  10d2e0:	1800351e 	bne	r3,zero,10d3b8 <__adddf3+0x3dc>
  10d2e4:	01000434 	movhi	r4,16
  10d2e8:	213fffc4 	addi	r4,r4,-1
  10d2ec:	4908703a 	and	r4,r9,r4
  10d2f0:	8401ffcc 	andi	r16,r16,2047
  10d2f4:	003f9f06 	br	10d174 <__adddf3+0x198>
  10d2f8:	1ac8b03a 	or	r4,r3,r11
  10d2fc:	2026c03a 	cmpne	r19,r4,zero
  10d300:	9b27883a 	add	r19,r19,r12
  10d304:	9b09803a 	cmpltu	r4,r19,r12
  10d308:	2249883a 	add	r4,r4,r9
  10d30c:	2080202c 	andhi	r2,r4,128
  10d310:	103fec26 	beq	r2,zero,10d2c4 <__adddf3+0x2e8>
  10d314:	84000044 	addi	r16,r16,1
  10d318:	8081ffe0 	cmpeqi	r2,r16,2047
  10d31c:	10009d26 	beq	r2,zero,10d594 <__adddf3+0x5b8>
  10d320:	0401ffc4 	movi	r16,2047
  10d324:	0009883a 	mov	r4,zero
  10d328:	0005883a 	mov	r2,zero
  10d32c:	003f9106 	br	10d174 <__adddf3+0x198>
  10d330:	5000571e 	bne	r10,zero,10d490 <__adddf3+0x4b4>
  10d334:	80800044 	addi	r2,r16,1
  10d338:	1141ff8c 	andi	r5,r2,2046
  10d33c:	2800ed1e 	bne	r5,zero,10d6f4 <__adddf3+0x718>
  10d340:	4b04b03a 	or	r2,r9,r12
  10d344:	8000a826 	beq	r16,zero,10d5e8 <__adddf3+0x60c>
  10d348:	10010226 	beq	r2,zero,10d754 <__adddf3+0x778>
  10d34c:	1ad6b03a 	or	r11,r3,r11
  10d350:	480a977a 	slli	r5,r9,29
  10d354:	4812d0fa 	srli	r9,r9,3
  10d358:	58015f26 	beq	r11,zero,10d8d8 <__adddf3+0x8fc>
  10d35c:	02080034 	movhi	r8,8192
  10d360:	423fffc4 	addi	r8,r8,-1
  10d364:	2204703a 	and	r2,r4,r8
  10d368:	4900022c 	andhi	r4,r9,8
  10d36c:	114ab03a 	or	r5,r2,r5
  10d370:	20000826 	beq	r4,zero,10d394 <__adddf3+0x3b8>
  10d374:	1808d0fa 	srli	r4,r3,3
  10d378:	2080022c 	andhi	r2,r4,8
  10d37c:	1000051e 	bne	r2,zero,10d394 <__adddf3+0x3b8>
  10d380:	1806977a 	slli	r3,r3,29
  10d384:	3204703a 	and	r2,r6,r8
  10d388:	3823883a 	mov	r17,r7
  10d38c:	10cab03a 	or	r5,r2,r3
  10d390:	2013883a 	mov	r9,r4
  10d394:	2804d77a 	srli	r2,r5,29
  10d398:	480890fa 	slli	r4,r9,3
  10d39c:	00c80034 	movhi	r3,8192
  10d3a0:	18ffffc4 	addi	r3,r3,-1
  10d3a4:	1108b03a 	or	r4,r2,r4
  10d3a8:	2004977a 	slli	r2,r4,29
  10d3ac:	2012d0fa 	srli	r9,r4,3
  10d3b0:	28ca703a 	and	r5,r5,r3
  10d3b4:	1144b03a 	or	r2,r2,r5
  10d3b8:	4886b03a 	or	r3,r9,r2
  10d3bc:	18016b26 	beq	r3,zero,10d96c <__adddf3+0x990>
  10d3c0:	00c00434 	movhi	r3,16
  10d3c4:	49000234 	orhi	r4,r9,8
  10d3c8:	18ffffc4 	addi	r3,r3,-1
  10d3cc:	20c8703a 	and	r4,r4,r3
  10d3d0:	0401ffc4 	movi	r16,2047
  10d3d4:	003f6706 	br	10d174 <__adddf3+0x198>
  10d3d8:	017fe034 	movhi	r5,65408
  10d3dc:	297fffc4 	addi	r5,r5,-1
  10d3e0:	988001cc 	andi	r2,r19,7
  10d3e4:	80e1c83a 	sub	r16,r16,r3
  10d3e8:	2148703a 	and	r4,r4,r5
  10d3ec:	103f4c1e 	bne	r2,zero,10d120 <__adddf3+0x144>
  10d3f0:	003fb606 	br	10d2cc <__adddf3+0x2f0>
  10d3f4:	9809883a 	mov	r4,r19
  10d3f8:	010f8c40 	call	10f8c4 <__clzsi2>
  10d3fc:	10c00604 	addi	r3,r2,24
  10d400:	19000808 	cmpgei	r4,r3,32
  10d404:	203f2f26 	beq	r4,zero,10d0c4 <__adddf3+0xe8>
  10d408:	113ffe04 	addi	r4,r2,-8
  10d40c:	9908983a 	sll	r4,r19,r4
  10d410:	0027883a 	mov	r19,zero
  10d414:	003f3106 	br	10d0dc <__adddf3+0x100>
  10d418:	1ac8b03a 	or	r4,r3,r11
  10d41c:	2026c03a 	cmpne	r19,r4,zero
  10d420:	003f1c06 	br	10d094 <__adddf3+0xb8>
  10d424:	4826977a 	slli	r19,r9,29
  10d428:	00c80034 	movhi	r3,8192
  10d42c:	18ffffc4 	addi	r3,r3,-1
  10d430:	20c4703a 	and	r2,r4,r3
  10d434:	14c4b03a 	or	r2,r2,r19
  10d438:	4812d0fa 	srli	r9,r9,3
  10d43c:	5021883a 	mov	r16,r10
  10d440:	003fa606 	br	10d2dc <__adddf3+0x300>
  10d444:	62e7c83a 	sub	r19,r12,r11
  10d448:	48e5c83a 	sub	r18,r9,r3
  10d44c:	64c9803a 	cmpltu	r4,r12,r19
  10d450:	9125c83a 	sub	r18,r18,r4
  10d454:	9080202c 	andhi	r2,r18,128
  10d458:	1000b21e 	bne	r2,zero,10d724 <__adddf3+0x748>
  10d45c:	9c84b03a 	or	r2,r19,r18
  10d460:	103f141e 	bne	r2,zero,10d0b4 <__adddf3+0xd8>
  10d464:	0013883a 	mov	r9,zero
  10d468:	0021883a 	mov	r16,zero
  10d46c:	0023883a 	mov	r17,zero
  10d470:	003f9c06 	br	10d2e4 <__adddf3+0x308>
  10d474:	4826977a 	slli	r19,r9,29
  10d478:	00c80034 	movhi	r3,8192
  10d47c:	18ffffc4 	addi	r3,r3,-1
  10d480:	20c4703a 	and	r2,r4,r3
  10d484:	14c4b03a 	or	r2,r2,r19
  10d488:	4812d0fa 	srli	r9,r9,3
  10d48c:	003fca06 	br	10d3b8 <__adddf3+0x3dc>
  10d490:	1409c83a 	sub	r4,r2,r16
  10d494:	80005e1e 	bne	r16,zero,10d610 <__adddf3+0x634>
  10d498:	4b0ab03a 	or	r5,r9,r12
  10d49c:	28011326 	beq	r5,zero,10d8ec <__adddf3+0x910>
  10d4a0:	217fffc4 	addi	r5,r4,-1
  10d4a4:	28012c26 	beq	r5,zero,10d958 <__adddf3+0x97c>
  10d4a8:	2101ffd8 	cmpnei	r4,r4,2047
  10d4ac:	2000a926 	beq	r4,zero,10d754 <__adddf3+0x778>
  10d4b0:	2809883a 	mov	r4,r5
  10d4b4:	21400e48 	cmpgei	r5,r4,57
  10d4b8:	2800b91e 	bne	r5,zero,10d7a0 <__adddf3+0x7c4>
  10d4bc:	21400808 	cmpgei	r5,r4,32
  10d4c0:	28011a1e 	bne	r5,zero,10d92c <__adddf3+0x950>
  10d4c4:	01400804 	movi	r5,32
  10d4c8:	290bc83a 	sub	r5,r5,r4
  10d4cc:	4966983a 	sll	r19,r9,r5
  10d4d0:	610cd83a 	srl	r6,r12,r4
  10d4d4:	614a983a 	sll	r5,r12,r5
  10d4d8:	4912d83a 	srl	r9,r9,r4
  10d4dc:	99a6b03a 	or	r19,r19,r6
  10d4e0:	280ac03a 	cmpne	r5,r5,zero
  10d4e4:	9966b03a 	or	r19,r19,r5
  10d4e8:	1a47883a 	add	r3,r3,r9
  10d4ec:	9ae7883a 	add	r19,r19,r11
  10d4f0:	9ac9803a 	cmpltu	r4,r19,r11
  10d4f4:	20c9883a 	add	r4,r4,r3
  10d4f8:	1021883a 	mov	r16,r2
  10d4fc:	003f8306 	br	10d30c <__adddf3+0x330>
  10d500:	1141ffd8 	cmpnei	r5,r2,2047
  10d504:	28006326 	beq	r5,zero,10d694 <__adddf3+0x6b8>
  10d508:	4a402034 	orhi	r9,r9,128
  10d50c:	21400e48 	cmpgei	r5,r4,57
  10d510:	28006e1e 	bne	r5,zero,10d6cc <__adddf3+0x6f0>
  10d514:	21400808 	cmpgei	r5,r4,32
  10d518:	2800ab1e 	bne	r5,zero,10d7c8 <__adddf3+0x7ec>
  10d51c:	01400804 	movi	r5,32
  10d520:	290bc83a 	sub	r5,r5,r4
  10d524:	4966983a 	sll	r19,r9,r5
  10d528:	610cd83a 	srl	r6,r12,r4
  10d52c:	614a983a 	sll	r5,r12,r5
  10d530:	4912d83a 	srl	r9,r9,r4
  10d534:	99a6b03a 	or	r19,r19,r6
  10d538:	280ac03a 	cmpne	r5,r5,zero
  10d53c:	9966b03a 	or	r19,r19,r5
  10d540:	1a47c83a 	sub	r3,r3,r9
  10d544:	5ce7c83a 	sub	r19,r11,r19
  10d548:	5cc9803a 	cmpltu	r4,r11,r19
  10d54c:	1909c83a 	sub	r4,r3,r4
  10d550:	3823883a 	mov	r17,r7
  10d554:	1021883a 	mov	r16,r2
  10d558:	003ed106 	br	10d0a0 <__adddf3+0xc4>
  10d55c:	843ff844 	addi	r16,r16,-31
  10d560:	28800820 	cmpeqi	r2,r5,32
  10d564:	2420d83a 	srl	r16,r4,r16
  10d568:	1000041e 	bne	r2,zero,10d57c <__adddf3+0x5a0>
  10d56c:	00801004 	movi	r2,64
  10d570:	114bc83a 	sub	r5,r2,r5
  10d574:	2148983a 	sll	r4,r4,r5
  10d578:	9926b03a 	or	r19,r19,r4
  10d57c:	9826c03a 	cmpne	r19,r19,zero
  10d580:	9c26b03a 	or	r19,r19,r16
  10d584:	0009883a 	mov	r4,zero
  10d588:	0021883a 	mov	r16,zero
  10d58c:	003f4d06 	br	10d2c4 <__adddf3+0x2e8>
  10d590:	04000084 	movi	r16,2
  10d594:	00bfe034 	movhi	r2,65408
  10d598:	10bfffc4 	addi	r2,r2,-1
  10d59c:	208a703a 	and	r5,r4,r2
  10d5a0:	9804d07a 	srli	r2,r19,1
  10d5a4:	280697fa 	slli	r3,r5,31
  10d5a8:	9cc0004c 	andi	r19,r19,1
  10d5ac:	14e6b03a 	or	r19,r2,r19
  10d5b0:	2808d07a 	srli	r4,r5,1
  10d5b4:	1ce6b03a 	or	r19,r3,r19
  10d5b8:	003ed706 	br	10d118 <__adddf3+0x13c>
  10d5bc:	54fff804 	addi	r19,r10,-32
  10d5c0:	50800820 	cmpeqi	r2,r10,32
  10d5c4:	1ce6d83a 	srl	r19,r3,r19
  10d5c8:	1000041e 	bne	r2,zero,10d5dc <__adddf3+0x600>
  10d5cc:	00801004 	movi	r2,64
  10d5d0:	1295c83a 	sub	r10,r2,r10
  10d5d4:	1a86983a 	sll	r3,r3,r10
  10d5d8:	58d6b03a 	or	r11,r11,r3
  10d5dc:	5808c03a 	cmpne	r4,r11,zero
  10d5e0:	24e6b03a 	or	r19,r4,r19
  10d5e4:	003eab06 	br	10d094 <__adddf3+0xb8>
  10d5e8:	1000a926 	beq	r2,zero,10d890 <__adddf3+0x8b4>
  10d5ec:	1ac4b03a 	or	r2,r3,r11
  10d5f0:	1000ae1e 	bne	r2,zero,10d8ac <__adddf3+0x8d0>
  10d5f4:	4806977a 	slli	r3,r9,29
  10d5f8:	00880034 	movhi	r2,8192
  10d5fc:	10bfffc4 	addi	r2,r2,-1
  10d600:	2084703a 	and	r2,r4,r2
  10d604:	10c4b03a 	or	r2,r2,r3
  10d608:	4812d0fa 	srli	r9,r9,3
  10d60c:	003f3506 	br	10d2e4 <__adddf3+0x308>
  10d610:	1141ffd8 	cmpnei	r5,r2,2047
  10d614:	28004f26 	beq	r5,zero,10d754 <__adddf3+0x778>
  10d618:	4a402034 	orhi	r9,r9,128
  10d61c:	003fa506 	br	10d4b4 <__adddf3+0x4d8>
  10d620:	01000804 	movi	r4,32
  10d624:	2289c83a 	sub	r4,r4,r10
  10d628:	1926983a 	sll	r19,r3,r4
  10d62c:	5a84d83a 	srl	r2,r11,r10
  10d630:	5908983a 	sll	r4,r11,r4
  10d634:	1a86d83a 	srl	r3,r3,r10
  10d638:	98a6b03a 	or	r19,r19,r2
  10d63c:	2016c03a 	cmpne	r11,r4,zero
  10d640:	9ae6b03a 	or	r19,r19,r11
  10d644:	48d3883a 	add	r9,r9,r3
  10d648:	003f2d06 	br	10d300 <__adddf3+0x324>
  10d64c:	01480034 	movhi	r5,8192
  10d650:	1826977a 	slli	r19,r3,29
  10d654:	297fffc4 	addi	r5,r5,-1
  10d658:	3144703a 	and	r2,r6,r5
  10d65c:	14c4b03a 	or	r2,r2,r19
  10d660:	1812d0fa 	srli	r9,r3,3
  10d664:	3823883a 	mov	r17,r7
  10d668:	2021883a 	mov	r16,r4
  10d66c:	003f1b06 	br	10d2dc <__adddf3+0x300>
  10d670:	10007d26 	beq	r2,zero,10d868 <__adddf3+0x88c>
  10d674:	00880034 	movhi	r2,8192
  10d678:	1808977a 	slli	r4,r3,29
  10d67c:	10bfffc4 	addi	r2,r2,-1
  10d680:	3084703a 	and	r2,r6,r2
  10d684:	1104b03a 	or	r2,r2,r4
  10d688:	1812d0fa 	srli	r9,r3,3
  10d68c:	3823883a 	mov	r17,r7
  10d690:	003f1406 	br	10d2e4 <__adddf3+0x308>
  10d694:	180a977a 	slli	r5,r3,29
  10d698:	01080034 	movhi	r4,8192
  10d69c:	213fffc4 	addi	r4,r4,-1
  10d6a0:	3104703a 	and	r2,r6,r4
  10d6a4:	2884b03a 	or	r2,r5,r2
  10d6a8:	1812d0fa 	srli	r9,r3,3
  10d6ac:	3823883a 	mov	r17,r7
  10d6b0:	003f4106 	br	10d3b8 <__adddf3+0x3dc>
  10d6b4:	62e7c83a 	sub	r19,r12,r11
  10d6b8:	48d3c83a 	sub	r9,r9,r3
  10d6bc:	64c9803a 	cmpltu	r4,r12,r19
  10d6c0:	4909c83a 	sub	r4,r9,r4
  10d6c4:	04000044 	movi	r16,1
  10d6c8:	003e7506 	br	10d0a0 <__adddf3+0xc4>
  10d6cc:	4b12b03a 	or	r9,r9,r12
  10d6d0:	4826c03a 	cmpne	r19,r9,zero
  10d6d4:	003f9b06 	br	10d544 <__adddf3+0x568>
  10d6d8:	4826977a 	slli	r19,r9,29
  10d6dc:	00c80034 	movhi	r3,8192
  10d6e0:	18ffffc4 	addi	r3,r3,-1
  10d6e4:	20c4703a 	and	r2,r4,r3
  10d6e8:	9884b03a 	or	r2,r19,r2
  10d6ec:	4812d0fa 	srli	r9,r9,3
  10d6f0:	003f3106 	br	10d3b8 <__adddf3+0x3dc>
  10d6f4:	1101ffe0 	cmpeqi	r4,r2,2047
  10d6f8:	203f091e 	bne	r4,zero,10d320 <__adddf3+0x344>
  10d6fc:	62d7883a 	add	r11,r12,r11
  10d700:	5b09803a 	cmpltu	r4,r11,r12
  10d704:	48d3883a 	add	r9,r9,r3
  10d708:	490b883a 	add	r5,r9,r4
  10d70c:	282697fa 	slli	r19,r5,31
  10d710:	5816d07a 	srli	r11,r11,1
  10d714:	2808d07a 	srli	r4,r5,1
  10d718:	1021883a 	mov	r16,r2
  10d71c:	9ae6b03a 	or	r19,r19,r11
  10d720:	003ee806 	br	10d2c4 <__adddf3+0x2e8>
  10d724:	5b27c83a 	sub	r19,r11,r12
  10d728:	1a53c83a 	sub	r9,r3,r9
  10d72c:	5cc9803a 	cmpltu	r4,r11,r19
  10d730:	4925c83a 	sub	r18,r9,r4
  10d734:	3823883a 	mov	r17,r7
  10d738:	003e5e06 	br	10d0b4 <__adddf3+0xd8>
  10d73c:	28002d1e 	bne	r5,zero,10d7f4 <__adddf3+0x818>
  10d740:	103fd41e 	bne	r2,zero,10d694 <__adddf3+0x6b8>
  10d744:	00bfffc4 	movi	r2,-1
  10d748:	0023883a 	mov	r17,zero
  10d74c:	4013883a 	mov	r9,r8
  10d750:	003f1b06 	br	10d3c0 <__adddf3+0x3e4>
  10d754:	00880034 	movhi	r2,8192
  10d758:	1808977a 	slli	r4,r3,29
  10d75c:	10bfffc4 	addi	r2,r2,-1
  10d760:	3084703a 	and	r2,r6,r2
  10d764:	1104b03a 	or	r2,r2,r4
  10d768:	1812d0fa 	srli	r9,r3,3
  10d76c:	003f1206 	br	10d3b8 <__adddf3+0x3dc>
  10d770:	62e7c83a 	sub	r19,r12,r11
  10d774:	48cbc83a 	sub	r5,r9,r3
  10d778:	64c9803a 	cmpltu	r4,r12,r19
  10d77c:	2909c83a 	sub	r4,r5,r4
  10d780:	2080202c 	andhi	r2,r4,128
  10d784:	10003626 	beq	r2,zero,10d860 <__adddf3+0x884>
  10d788:	5b27c83a 	sub	r19,r11,r12
  10d78c:	1a53c83a 	sub	r9,r3,r9
  10d790:	5cc9803a 	cmpltu	r4,r11,r19
  10d794:	4909c83a 	sub	r4,r9,r4
  10d798:	3823883a 	mov	r17,r7
  10d79c:	003e5e06 	br	10d118 <__adddf3+0x13c>
  10d7a0:	4b12b03a 	or	r9,r9,r12
  10d7a4:	4826c03a 	cmpne	r19,r9,zero
  10d7a8:	003f5006 	br	10d4ec <__adddf3+0x510>
  10d7ac:	4806977a 	slli	r3,r9,29
  10d7b0:	00880034 	movhi	r2,8192
  10d7b4:	10bfffc4 	addi	r2,r2,-1
  10d7b8:	2084703a 	and	r2,r4,r2
  10d7bc:	10c4b03a 	or	r2,r2,r3
  10d7c0:	4812d0fa 	srli	r9,r9,3
  10d7c4:	003efc06 	br	10d3b8 <__adddf3+0x3dc>
  10d7c8:	217ff804 	addi	r5,r4,-32
  10d7cc:	21800820 	cmpeqi	r6,r4,32
  10d7d0:	494ad83a 	srl	r5,r9,r5
  10d7d4:	3000041e 	bne	r6,zero,10d7e8 <__adddf3+0x80c>
  10d7d8:	01801004 	movi	r6,64
  10d7dc:	3109c83a 	sub	r4,r6,r4
  10d7e0:	4912983a 	sll	r9,r9,r4
  10d7e4:	6258b03a 	or	r12,r12,r9
  10d7e8:	6026c03a 	cmpne	r19,r12,zero
  10d7ec:	9966b03a 	or	r19,r19,r5
  10d7f0:	003f5406 	br	10d544 <__adddf3+0x568>
  10d7f4:	480a977a 	slli	r5,r9,29
  10d7f8:	4812d0fa 	srli	r9,r9,3
  10d7fc:	10003626 	beq	r2,zero,10d8d8 <__adddf3+0x8fc>
  10d800:	02080034 	movhi	r8,8192
  10d804:	423fffc4 	addi	r8,r8,-1
  10d808:	2204703a 	and	r2,r4,r8
  10d80c:	4900022c 	andhi	r4,r9,8
  10d810:	114ab03a 	or	r5,r2,r5
  10d814:	20000826 	beq	r4,zero,10d838 <__adddf3+0x85c>
  10d818:	1808d0fa 	srli	r4,r3,3
  10d81c:	2080022c 	andhi	r2,r4,8
  10d820:	1000051e 	bne	r2,zero,10d838 <__adddf3+0x85c>
  10d824:	1806977a 	slli	r3,r3,29
  10d828:	3204703a 	and	r2,r6,r8
  10d82c:	3823883a 	mov	r17,r7
  10d830:	10cab03a 	or	r5,r2,r3
  10d834:	2013883a 	mov	r9,r4
  10d838:	480890fa 	slli	r4,r9,3
  10d83c:	2804d77a 	srli	r2,r5,29
  10d840:	00c80034 	movhi	r3,8192
  10d844:	18ffffc4 	addi	r3,r3,-1
  10d848:	1108b03a 	or	r4,r2,r4
  10d84c:	200c977a 	slli	r6,r4,29
  10d850:	28c4703a 	and	r2,r5,r3
  10d854:	2012d0fa 	srli	r9,r4,3
  10d858:	3084b03a 	or	r2,r6,r2
  10d85c:	003ed606 	br	10d3b8 <__adddf3+0x3dc>
  10d860:	9904b03a 	or	r2,r19,r4
  10d864:	103e971e 	bne	r2,zero,10d2c4 <__adddf3+0x2e8>
  10d868:	0013883a 	mov	r9,zero
  10d86c:	0023883a 	mov	r17,zero
  10d870:	003e9c06 	br	10d2e4 <__adddf3+0x308>
  10d874:	5b27c83a 	sub	r19,r11,r12
  10d878:	1a53c83a 	sub	r9,r3,r9
  10d87c:	5cc9803a 	cmpltu	r4,r11,r19
  10d880:	4909c83a 	sub	r4,r9,r4
  10d884:	3823883a 	mov	r17,r7
  10d888:	04000044 	movi	r16,1
  10d88c:	003e0406 	br	10d0a0 <__adddf3+0xc4>
  10d890:	180a977a 	slli	r5,r3,29
  10d894:	01080034 	movhi	r4,8192
  10d898:	213fffc4 	addi	r4,r4,-1
  10d89c:	3104703a 	and	r2,r6,r4
  10d8a0:	2884b03a 	or	r2,r5,r2
  10d8a4:	1812d0fa 	srli	r9,r3,3
  10d8a8:	003e8e06 	br	10d2e4 <__adddf3+0x308>
  10d8ac:	62e7883a 	add	r19,r12,r11
  10d8b0:	48d3883a 	add	r9,r9,r3
  10d8b4:	9b09803a 	cmpltu	r4,r19,r12
  10d8b8:	4909883a 	add	r4,r9,r4
  10d8bc:	2080202c 	andhi	r2,r4,128
  10d8c0:	103e8026 	beq	r2,zero,10d2c4 <__adddf3+0x2e8>
  10d8c4:	00bfe034 	movhi	r2,65408
  10d8c8:	10bfffc4 	addi	r2,r2,-1
  10d8cc:	2088703a 	and	r4,r4,r2
  10d8d0:	04000044 	movi	r16,1
  10d8d4:	003e7b06 	br	10d2c4 <__adddf3+0x2e8>
  10d8d8:	00880034 	movhi	r2,8192
  10d8dc:	10bfffc4 	addi	r2,r2,-1
  10d8e0:	2084703a 	and	r2,r4,r2
  10d8e4:	1144b03a 	or	r2,r2,r5
  10d8e8:	003eb306 	br	10d3b8 <__adddf3+0x3dc>
  10d8ec:	180e977a 	slli	r7,r3,29
  10d8f0:	01480034 	movhi	r5,8192
  10d8f4:	297fffc4 	addi	r5,r5,-1
  10d8f8:	3144703a 	and	r2,r6,r5
  10d8fc:	3884b03a 	or	r2,r7,r2
  10d900:	1812d0fa 	srli	r9,r3,3
  10d904:	2021883a 	mov	r16,r4
  10d908:	003e7406 	br	10d2dc <__adddf3+0x300>
  10d90c:	00880034 	movhi	r2,8192
  10d910:	1808977a 	slli	r4,r3,29
  10d914:	10bfffc4 	addi	r2,r2,-1
  10d918:	3084703a 	and	r2,r6,r2
  10d91c:	1104b03a 	or	r2,r2,r4
  10d920:	1812d0fa 	srli	r9,r3,3
  10d924:	3823883a 	mov	r17,r7
  10d928:	003ea306 	br	10d3b8 <__adddf3+0x3dc>
  10d92c:	217ff804 	addi	r5,r4,-32
  10d930:	21800820 	cmpeqi	r6,r4,32
  10d934:	494ad83a 	srl	r5,r9,r5
  10d938:	3000041e 	bne	r6,zero,10d94c <__adddf3+0x970>
  10d93c:	01801004 	movi	r6,64
  10d940:	3109c83a 	sub	r4,r6,r4
  10d944:	4912983a 	sll	r9,r9,r4
  10d948:	6258b03a 	or	r12,r12,r9
  10d94c:	6026c03a 	cmpne	r19,r12,zero
  10d950:	9966b03a 	or	r19,r19,r5
  10d954:	003ee506 	br	10d4ec <__adddf3+0x510>
  10d958:	62e7883a 	add	r19,r12,r11
  10d95c:	48d3883a 	add	r9,r9,r3
  10d960:	9ac9803a 	cmpltu	r4,r19,r11
  10d964:	4909883a 	add	r4,r9,r4
  10d968:	003e5306 	br	10d2b8 <__adddf3+0x2dc>
  10d96c:	0005883a 	mov	r2,zero
  10d970:	0401ffc4 	movi	r16,2047
  10d974:	0009883a 	mov	r4,zero
  10d978:	003dfe06 	br	10d174 <__adddf3+0x198>

0010d97c <__divdf3>:
  10d97c:	deffef04 	addi	sp,sp,-68
  10d980:	2804d53a 	srli	r2,r5,20
  10d984:	dd000b15 	stw	r20,44(sp)
  10d988:	2828d7fa 	srli	r20,r5,31
  10d98c:	dc400815 	stw	r17,32(sp)
  10d990:	04400434 	movhi	r17,16
  10d994:	dd800d15 	stw	r22,52(sp)
  10d998:	dcc00a15 	stw	r19,40(sp)
  10d99c:	8c7fffc4 	addi	r17,r17,-1
  10d9a0:	dfc01015 	stw	ra,64(sp)
  10d9a4:	df000f15 	stw	fp,60(sp)
  10d9a8:	ddc00e15 	stw	r23,56(sp)
  10d9ac:	dd400c15 	stw	r21,48(sp)
  10d9b0:	dc800915 	stw	r18,36(sp)
  10d9b4:	dc000715 	stw	r16,28(sp)
  10d9b8:	1081ffcc 	andi	r2,r2,2047
  10d9bc:	2027883a 	mov	r19,r4
  10d9c0:	2c62703a 	and	r17,r5,r17
  10d9c4:	a02d883a 	mov	r22,r20
  10d9c8:	10008726 	beq	r2,zero,10dbe8 <__divdf3+0x26c>
  10d9cc:	10c1ffe0 	cmpeqi	r3,r2,2047
  10d9d0:	18009d1e 	bne	r3,zero,10dc48 <__divdf3+0x2cc>
  10d9d4:	880a90fa 	slli	r5,r17,3
  10d9d8:	2008d77a 	srli	r4,r4,29
  10d9dc:	982690fa 	slli	r19,r19,3
  10d9e0:	14bf0044 	addi	r18,r2,-1023
  10d9e4:	2148b03a 	or	r4,r4,r5
  10d9e8:	24002034 	orhi	r16,r4,128
  10d9ec:	0023883a 	mov	r17,zero
  10d9f0:	002f883a 	mov	r23,zero
  10d9f4:	3806d53a 	srli	r3,r7,20
  10d9f8:	01000434 	movhi	r4,16
  10d9fc:	213fffc4 	addi	r4,r4,-1
  10da00:	18c1ffcc 	andi	r3,r3,2047
  10da04:	392a703a 	and	r21,r7,r4
  10da08:	3838d7fa 	srli	fp,r7,31
  10da0c:	18006326 	beq	r3,zero,10db9c <__divdf3+0x220>
  10da10:	1881ffe0 	cmpeqi	r2,r3,2047
  10da14:	1000201e 	bne	r2,zero,10da98 <__divdf3+0x11c>
  10da18:	a80890fa 	slli	r4,r21,3
  10da1c:	300ed77a 	srli	r7,r6,29
  10da20:	300a90fa 	slli	r5,r6,3
  10da24:	18ff0044 	addi	r3,r3,-1023
  10da28:	3908b03a 	or	r4,r7,r4
  10da2c:	90e5c83a 	sub	r18,r18,r3
  10da30:	25402034 	orhi	r21,r4,128
  10da34:	0007883a 	mov	r3,zero
  10da38:	88800428 	cmpgeui	r2,r17,16
  10da3c:	a70cf03a 	xor	r6,r20,fp
  10da40:	1000ab1e 	bne	r2,zero,10dcf0 <__divdf3+0x374>
  10da44:	882290ba 	slli	r17,r17,2
  10da48:	00800474 	movhi	r2,17
  10da4c:	8885883a 	add	r2,r17,r2
  10da50:	10b69617 	ldw	r2,-9640(r2)
  10da54:	1000683a 	jmp	r2
  10da58:	0010dcf0 	cmpltui	zero,zero,17267
  10da5c:	0010db8c 	andi	zero,zero,17262
  10da60:	0010db30 	cmpltui	zero,zero,17260
  10da64:	0010dab4 	movhi	zero,17258
  10da68:	0010db30 	cmpltui	zero,zero,17260
  10da6c:	0010dcac 	andhi	zero,zero,17266
  10da70:	0010db30 	cmpltui	zero,zero,17260
  10da74:	0010dab4 	movhi	zero,17258
  10da78:	0010db8c 	andi	zero,zero,17262
  10da7c:	0010db8c 	andi	zero,zero,17262
  10da80:	0010dcac 	andhi	zero,zero,17266
  10da84:	0010dab4 	movhi	zero,17258
  10da88:	0010dac4 	movi	zero,17259
  10da8c:	0010dac4 	movi	zero,17259
  10da90:	0010dac4 	movi	zero,17259
  10da94:	0010dcc4 	movi	zero,17267
  10da98:	a98ab03a 	or	r5,r21,r6
  10da9c:	94be0044 	addi	r18,r18,-2047
  10daa0:	28007e1e 	bne	r5,zero,10dc9c <__divdf3+0x320>
  10daa4:	8c400094 	ori	r17,r17,2
  10daa8:	002b883a 	mov	r21,zero
  10daac:	00c00084 	movi	r3,2
  10dab0:	003fe106 	br	10da38 <__divdf3+0xbc>
  10dab4:	e02d883a 	mov	r22,fp
  10dab8:	a821883a 	mov	r16,r21
  10dabc:	2827883a 	mov	r19,r5
  10dac0:	182f883a 	mov	r23,r3
  10dac4:	b88000a0 	cmpeqi	r2,r23,2
  10dac8:	1001ab1e 	bne	r2,zero,10e178 <__divdf3+0x7fc>
  10dacc:	b88000e0 	cmpeqi	r2,r23,3
  10dad0:	1001f91e 	bne	r2,zero,10e2b8 <__divdf3+0x93c>
  10dad4:	b8800060 	cmpeqi	r2,r23,1
  10dad8:	1000141e 	bne	r2,zero,10db2c <__divdf3+0x1b0>
  10dadc:	9500ffc4 	addi	r20,r18,1023
  10dae0:	b00d883a 	mov	r6,r22
  10dae4:	0501870e 	bge	zero,r20,10e104 <__divdf3+0x788>
  10dae8:	988001cc 	andi	r2,r19,7
  10daec:	1001c11e 	bne	r2,zero,10e1f4 <__divdf3+0x878>
  10daf0:	9826d0fa 	srli	r19,r19,3
  10daf4:	8080402c 	andhi	r2,r16,256
  10daf8:	10000426 	beq	r2,zero,10db0c <__divdf3+0x190>
  10dafc:	00bfc034 	movhi	r2,65280
  10db00:	10bfffc4 	addi	r2,r2,-1
  10db04:	80a0703a 	and	r16,r16,r2
  10db08:	95010004 	addi	r20,r18,1024
  10db0c:	a081ffc8 	cmpgei	r2,r20,2047
  10db10:	10001e1e 	bne	r2,zero,10db8c <__divdf3+0x210>
  10db14:	8006977a 	slli	r3,r16,29
  10db18:	8008927a 	slli	r4,r16,9
  10db1c:	a081ffcc 	andi	r2,r20,2047
  10db20:	1ce6b03a 	or	r19,r3,r19
  10db24:	2008d33a 	srli	r4,r4,12
  10db28:	00000406 	br	10db3c <__divdf3+0x1c0>
  10db2c:	b00d883a 	mov	r6,r22
  10db30:	0005883a 	mov	r2,zero
  10db34:	0009883a 	mov	r4,zero
  10db38:	0027883a 	mov	r19,zero
  10db3c:	1004953a 	slli	r2,r2,20
  10db40:	00c00434 	movhi	r3,16
  10db44:	300c97fa 	slli	r6,r6,31
  10db48:	18ffffc4 	addi	r3,r3,-1
  10db4c:	20c6703a 	and	r3,r4,r3
  10db50:	1886b03a 	or	r3,r3,r2
  10db54:	1986b03a 	or	r3,r3,r6
  10db58:	9805883a 	mov	r2,r19
  10db5c:	dfc01017 	ldw	ra,64(sp)
  10db60:	df000f17 	ldw	fp,60(sp)
  10db64:	ddc00e17 	ldw	r23,56(sp)
  10db68:	dd800d17 	ldw	r22,52(sp)
  10db6c:	dd400c17 	ldw	r21,48(sp)
  10db70:	dd000b17 	ldw	r20,44(sp)
  10db74:	dcc00a17 	ldw	r19,40(sp)
  10db78:	dc800917 	ldw	r18,36(sp)
  10db7c:	dc400817 	ldw	r17,32(sp)
  10db80:	dc000717 	ldw	r16,28(sp)
  10db84:	dec01104 	addi	sp,sp,68
  10db88:	f800283a 	ret
  10db8c:	0081ffc4 	movi	r2,2047
  10db90:	0009883a 	mov	r4,zero
  10db94:	0027883a 	mov	r19,zero
  10db98:	003fe806 	br	10db3c <__divdf3+0x1c0>
  10db9c:	a98ab03a 	or	r5,r21,r6
  10dba0:	28003a26 	beq	r5,zero,10dc8c <__divdf3+0x310>
  10dba4:	a8014926 	beq	r21,zero,10e0cc <__divdf3+0x750>
  10dba8:	a809883a 	mov	r4,r21
  10dbac:	d9800015 	stw	r6,0(sp)
  10dbb0:	010f8c40 	call	10f8c4 <__clzsi2>
  10dbb4:	d9800017 	ldw	r6,0(sp)
  10dbb8:	11fffd44 	addi	r7,r2,-11
  10dbbc:	00c00744 	movi	r3,29
  10dbc0:	117ffe04 	addi	r5,r2,-8
  10dbc4:	19c7c83a 	sub	r3,r3,r7
  10dbc8:	a948983a 	sll	r4,r21,r5
  10dbcc:	30c6d83a 	srl	r3,r6,r3
  10dbd0:	314a983a 	sll	r5,r6,r5
  10dbd4:	192ab03a 	or	r21,r3,r4
  10dbd8:	1485883a 	add	r2,r2,r18
  10dbdc:	1480fcc4 	addi	r18,r2,1011
  10dbe0:	0007883a 	mov	r3,zero
  10dbe4:	003f9406 	br	10da38 <__divdf3+0xbc>
  10dbe8:	2460b03a 	or	r16,r4,r17
  10dbec:	202b883a 	mov	r21,r4
  10dbf0:	80002126 	beq	r16,zero,10dc78 <__divdf3+0x2fc>
  10dbf4:	d9c00115 	stw	r7,4(sp)
  10dbf8:	d9800015 	stw	r6,0(sp)
  10dbfc:	88012826 	beq	r17,zero,10e0a0 <__divdf3+0x724>
  10dc00:	8809883a 	mov	r4,r17
  10dc04:	010f8c40 	call	10f8c4 <__clzsi2>
  10dc08:	d9800017 	ldw	r6,0(sp)
  10dc0c:	d9c00117 	ldw	r7,4(sp)
  10dc10:	1025883a 	mov	r18,r2
  10dc14:	143ffd44 	addi	r16,r2,-11
  10dc18:	01000744 	movi	r4,29
  10dc1c:	94fffe04 	addi	r19,r18,-8
  10dc20:	2409c83a 	sub	r4,r4,r16
  10dc24:	8cca983a 	sll	r5,r17,r19
  10dc28:	a908d83a 	srl	r4,r21,r4
  10dc2c:	ace6983a 	sll	r19,r21,r19
  10dc30:	2160b03a 	or	r16,r4,r5
  10dc34:	00bf0344 	movi	r2,-1011
  10dc38:	14a5c83a 	sub	r18,r2,r18
  10dc3c:	0023883a 	mov	r17,zero
  10dc40:	002f883a 	mov	r23,zero
  10dc44:	003f6b06 	br	10d9f4 <__divdf3+0x78>
  10dc48:	2460b03a 	or	r16,r4,r17
  10dc4c:	8000051e 	bne	r16,zero,10dc64 <__divdf3+0x2e8>
  10dc50:	0027883a 	mov	r19,zero
  10dc54:	04400204 	movi	r17,8
  10dc58:	0481ffc4 	movi	r18,2047
  10dc5c:	05c00084 	movi	r23,2
  10dc60:	003f6406 	br	10d9f4 <__divdf3+0x78>
  10dc64:	8821883a 	mov	r16,r17
  10dc68:	0481ffc4 	movi	r18,2047
  10dc6c:	04400304 	movi	r17,12
  10dc70:	05c000c4 	movi	r23,3
  10dc74:	003f5f06 	br	10d9f4 <__divdf3+0x78>
  10dc78:	0027883a 	mov	r19,zero
  10dc7c:	04400104 	movi	r17,4
  10dc80:	0025883a 	mov	r18,zero
  10dc84:	05c00044 	movi	r23,1
  10dc88:	003f5a06 	br	10d9f4 <__divdf3+0x78>
  10dc8c:	8c400054 	ori	r17,r17,1
  10dc90:	002b883a 	mov	r21,zero
  10dc94:	00c00044 	movi	r3,1
  10dc98:	003f6706 	br	10da38 <__divdf3+0xbc>
  10dc9c:	8c4000d4 	ori	r17,r17,3
  10dca0:	300b883a 	mov	r5,r6
  10dca4:	00c000c4 	movi	r3,3
  10dca8:	003f6306 	br	10da38 <__divdf3+0xbc>
  10dcac:	01000434 	movhi	r4,16
  10dcb0:	000d883a 	mov	r6,zero
  10dcb4:	213fffc4 	addi	r4,r4,-1
  10dcb8:	04ffffc4 	movi	r19,-1
  10dcbc:	0081ffc4 	movi	r2,2047
  10dcc0:	003f9e06 	br	10db3c <__divdf3+0x1c0>
  10dcc4:	8080022c 	andhi	r2,r16,8
  10dcc8:	1000d426 	beq	r2,zero,10e01c <__divdf3+0x6a0>
  10dccc:	a880022c 	andhi	r2,r21,8
  10dcd0:	1000d21e 	bne	r2,zero,10e01c <__divdf3+0x6a0>
  10dcd4:	00800434 	movhi	r2,16
  10dcd8:	a9000234 	orhi	r4,r21,8
  10dcdc:	10bfffc4 	addi	r2,r2,-1
  10dce0:	2088703a 	and	r4,r4,r2
  10dce4:	e00d883a 	mov	r6,fp
  10dce8:	2827883a 	mov	r19,r5
  10dcec:	003ff306 	br	10dcbc <__divdf3+0x340>
  10dcf0:	ac00e536 	bltu	r21,r16,10e088 <__divdf3+0x70c>
  10dcf4:	ac00e326 	beq	r21,r16,10e084 <__divdf3+0x708>
  10dcf8:	94bfffc4 	addi	r18,r18,-1
  10dcfc:	0029883a 	mov	r20,zero
  10dd00:	280ed63a 	srli	r7,r5,24
  10dd04:	a82a923a 	slli	r21,r21,8
  10dd08:	2804923a 	slli	r2,r5,8
  10dd0c:	8009883a 	mov	r4,r16
  10dd10:	3d62b03a 	or	r17,r7,r21
  10dd14:	882ad43a 	srli	r21,r17,16
  10dd18:	d9800115 	stw	r6,4(sp)
  10dd1c:	d8800015 	stw	r2,0(sp)
  10dd20:	a80b883a 	mov	r5,r21
  10dd24:	0102da00 	call	102da0 <__udivsi3>
  10dd28:	8f3fffcc 	andi	fp,r17,65535
  10dd2c:	100b883a 	mov	r5,r2
  10dd30:	e009883a 	mov	r4,fp
  10dd34:	102f883a 	mov	r23,r2
  10dd38:	0102e600 	call	102e60 <__mulsi3>
  10dd3c:	a80b883a 	mov	r5,r21
  10dd40:	8009883a 	mov	r4,r16
  10dd44:	102d883a 	mov	r22,r2
  10dd48:	0102e040 	call	102e04 <__umodsi3>
  10dd4c:	1006943a 	slli	r3,r2,16
  10dd50:	9804d43a 	srli	r2,r19,16
  10dd54:	d9800117 	ldw	r6,4(sp)
  10dd58:	10c4b03a 	or	r2,r2,r3
  10dd5c:	1580042e 	bgeu	r2,r22,10dd70 <__divdf3+0x3f4>
  10dd60:	1445883a 	add	r2,r2,r17
  10dd64:	b8ffffc4 	addi	r3,r23,-1
  10dd68:	1441102e 	bgeu	r2,r17,10e1ac <__divdf3+0x830>
  10dd6c:	182f883a 	mov	r23,r3
  10dd70:	15adc83a 	sub	r22,r2,r22
  10dd74:	a80b883a 	mov	r5,r21
  10dd78:	b009883a 	mov	r4,r22
  10dd7c:	d9800215 	stw	r6,8(sp)
  10dd80:	0102da00 	call	102da0 <__udivsi3>
  10dd84:	100b883a 	mov	r5,r2
  10dd88:	e009883a 	mov	r4,fp
  10dd8c:	1021883a 	mov	r16,r2
  10dd90:	0102e600 	call	102e60 <__mulsi3>
  10dd94:	a80b883a 	mov	r5,r21
  10dd98:	b009883a 	mov	r4,r22
  10dd9c:	d8800115 	stw	r2,4(sp)
  10dda0:	0102e040 	call	102e04 <__umodsi3>
  10dda4:	1004943a 	slli	r2,r2,16
  10dda8:	da000117 	ldw	r8,4(sp)
  10ddac:	9cffffcc 	andi	r19,r19,65535
  10ddb0:	9884b03a 	or	r2,r19,r2
  10ddb4:	d9800217 	ldw	r6,8(sp)
  10ddb8:	1200042e 	bgeu	r2,r8,10ddcc <__divdf3+0x450>
  10ddbc:	1445883a 	add	r2,r2,r17
  10ddc0:	80ffffc4 	addi	r3,r16,-1
  10ddc4:	1440f52e 	bgeu	r2,r17,10e19c <__divdf3+0x820>
  10ddc8:	1821883a 	mov	r16,r3
  10ddcc:	b808943a 	slli	r4,r23,16
  10ddd0:	d8c00017 	ldw	r3,0(sp)
  10ddd4:	1211c83a 	sub	r8,r2,r8
  10ddd8:	2420b03a 	or	r16,r4,r16
  10dddc:	182cd43a 	srli	r22,r3,16
  10dde0:	1dffffcc 	andi	r23,r3,65535
  10dde4:	8026d43a 	srli	r19,r16,16
  10dde8:	80ffffcc 	andi	r3,r16,65535
  10ddec:	180b883a 	mov	r5,r3
  10ddf0:	b809883a 	mov	r4,r23
  10ddf4:	d9800615 	stw	r6,24(sp)
  10ddf8:	da000415 	stw	r8,16(sp)
  10ddfc:	d8c00515 	stw	r3,20(sp)
  10de00:	0102e600 	call	102e60 <__mulsi3>
  10de04:	b80b883a 	mov	r5,r23
  10de08:	9809883a 	mov	r4,r19
  10de0c:	d8800315 	stw	r2,12(sp)
  10de10:	0102e600 	call	102e60 <__mulsi3>
  10de14:	b00b883a 	mov	r5,r22
  10de18:	9809883a 	mov	r4,r19
  10de1c:	d8800215 	stw	r2,8(sp)
  10de20:	0102e600 	call	102e60 <__mulsi3>
  10de24:	d8c00517 	ldw	r3,20(sp)
  10de28:	b009883a 	mov	r4,r22
  10de2c:	d8800115 	stw	r2,4(sp)
  10de30:	180b883a 	mov	r5,r3
  10de34:	0102e600 	call	102e60 <__mulsi3>
  10de38:	da400317 	ldw	r9,12(sp)
  10de3c:	dac00217 	ldw	r11,8(sp)
  10de40:	da800117 	ldw	r10,4(sp)
  10de44:	4806d43a 	srli	r3,r9,16
  10de48:	12c5883a 	add	r2,r2,r11
  10de4c:	da000417 	ldw	r8,16(sp)
  10de50:	1887883a 	add	r3,r3,r2
  10de54:	d9800617 	ldw	r6,24(sp)
  10de58:	1ac0022e 	bgeu	r3,r11,10de64 <__divdf3+0x4e8>
  10de5c:	00800074 	movhi	r2,1
  10de60:	5095883a 	add	r10,r10,r2
  10de64:	1826d43a 	srli	r19,r3,16
  10de68:	1806943a 	slli	r3,r3,16
  10de6c:	4a7fffcc 	andi	r9,r9,65535
  10de70:	9aa7883a 	add	r19,r19,r10
  10de74:	1a47883a 	add	r3,r3,r9
  10de78:	44c07736 	bltu	r8,r19,10e058 <__divdf3+0x6dc>
  10de7c:	44c07526 	beq	r8,r19,10e054 <__divdf3+0x6d8>
  10de80:	a0c7c83a 	sub	r3,r20,r3
  10de84:	44c5c83a 	sub	r2,r8,r19
  10de88:	a0e7803a 	cmpltu	r19,r20,r3
  10de8c:	d8c00115 	stw	r3,4(sp)
  10de90:	14e7c83a 	sub	r19,r2,r19
  10de94:	9500ffc4 	addi	r20,r18,1023
  10de98:	8cc0cd26 	beq	r17,r19,10e1d0 <__divdf3+0x854>
  10de9c:	a80b883a 	mov	r5,r21
  10dea0:	9809883a 	mov	r4,r19
  10dea4:	d9800415 	stw	r6,16(sp)
  10dea8:	0102da00 	call	102da0 <__udivsi3>
  10deac:	100b883a 	mov	r5,r2
  10deb0:	e009883a 	mov	r4,fp
  10deb4:	d8800315 	stw	r2,12(sp)
  10deb8:	0102e600 	call	102e60 <__mulsi3>
  10debc:	9809883a 	mov	r4,r19
  10dec0:	a80b883a 	mov	r5,r21
  10dec4:	d8800215 	stw	r2,8(sp)
  10dec8:	0102e040 	call	102e04 <__umodsi3>
  10decc:	d8c00117 	ldw	r3,4(sp)
  10ded0:	1008943a 	slli	r4,r2,16
  10ded4:	da400217 	ldw	r9,8(sp)
  10ded8:	1804d43a 	srli	r2,r3,16
  10dedc:	da000317 	ldw	r8,12(sp)
  10dee0:	d9800417 	ldw	r6,16(sp)
  10dee4:	1104b03a 	or	r2,r2,r4
  10dee8:	1240062e 	bgeu	r2,r9,10df04 <__divdf3+0x588>
  10deec:	1445883a 	add	r2,r2,r17
  10def0:	413fffc4 	addi	r4,r8,-1
  10def4:	1440bd36 	bltu	r2,r17,10e1ec <__divdf3+0x870>
  10def8:	1240bc2e 	bgeu	r2,r9,10e1ec <__divdf3+0x870>
  10defc:	423fff84 	addi	r8,r8,-2
  10df00:	1445883a 	add	r2,r2,r17
  10df04:	1267c83a 	sub	r19,r2,r9
  10df08:	a80b883a 	mov	r5,r21
  10df0c:	9809883a 	mov	r4,r19
  10df10:	d8c00415 	stw	r3,16(sp)
  10df14:	d9800315 	stw	r6,12(sp)
  10df18:	da000215 	stw	r8,8(sp)
  10df1c:	0102da00 	call	102da0 <__udivsi3>
  10df20:	e009883a 	mov	r4,fp
  10df24:	100b883a 	mov	r5,r2
  10df28:	d8800115 	stw	r2,4(sp)
  10df2c:	0102e600 	call	102e60 <__mulsi3>
  10df30:	a80b883a 	mov	r5,r21
  10df34:	9809883a 	mov	r4,r19
  10df38:	1039883a 	mov	fp,r2
  10df3c:	0102e040 	call	102e04 <__umodsi3>
  10df40:	d8c00417 	ldw	r3,16(sp)
  10df44:	1004943a 	slli	r2,r2,16
  10df48:	da400117 	ldw	r9,4(sp)
  10df4c:	18ffffcc 	andi	r3,r3,65535
  10df50:	1886b03a 	or	r3,r3,r2
  10df54:	da000217 	ldw	r8,8(sp)
  10df58:	d9800317 	ldw	r6,12(sp)
  10df5c:	1f00062e 	bgeu	r3,fp,10df78 <__divdf3+0x5fc>
  10df60:	1c47883a 	add	r3,r3,r17
  10df64:	48bfffc4 	addi	r2,r9,-1
  10df68:	1c409e36 	bltu	r3,r17,10e1e4 <__divdf3+0x868>
  10df6c:	1f009d2e 	bgeu	r3,fp,10e1e4 <__divdf3+0x868>
  10df70:	4a7fff84 	addi	r9,r9,-2
  10df74:	1c47883a 	add	r3,r3,r17
  10df78:	4010943a 	slli	r8,r8,16
  10df7c:	1f2bc83a 	sub	r21,r3,fp
  10df80:	b80b883a 	mov	r5,r23
  10df84:	4266b03a 	or	r19,r8,r9
  10df88:	98ffffcc 	andi	r3,r19,65535
  10df8c:	9838d43a 	srli	fp,r19,16
  10df90:	1809883a 	mov	r4,r3
  10df94:	d9800415 	stw	r6,16(sp)
  10df98:	d8c00315 	stw	r3,12(sp)
  10df9c:	0102e600 	call	102e60 <__mulsi3>
  10dfa0:	b80b883a 	mov	r5,r23
  10dfa4:	e009883a 	mov	r4,fp
  10dfa8:	d8800215 	stw	r2,8(sp)
  10dfac:	0102e600 	call	102e60 <__mulsi3>
  10dfb0:	e00b883a 	mov	r5,fp
  10dfb4:	b009883a 	mov	r4,r22
  10dfb8:	d8800115 	stw	r2,4(sp)
  10dfbc:	0102e600 	call	102e60 <__mulsi3>
  10dfc0:	d8c00317 	ldw	r3,12(sp)
  10dfc4:	b009883a 	mov	r4,r22
  10dfc8:	102f883a 	mov	r23,r2
  10dfcc:	180b883a 	mov	r5,r3
  10dfd0:	0102e600 	call	102e60 <__mulsi3>
  10dfd4:	da000217 	ldw	r8,8(sp)
  10dfd8:	da400117 	ldw	r9,4(sp)
  10dfdc:	d9800417 	ldw	r6,16(sp)
  10dfe0:	4006d43a 	srli	r3,r8,16
  10dfe4:	1245883a 	add	r2,r2,r9
  10dfe8:	1885883a 	add	r2,r3,r2
  10dfec:	1240022e 	bgeu	r2,r9,10dff8 <__divdf3+0x67c>
  10dff0:	00c00074 	movhi	r3,1
  10dff4:	b8ef883a 	add	r23,r23,r3
  10dff8:	1008d43a 	srli	r4,r2,16
  10dffc:	1004943a 	slli	r2,r2,16
  10e000:	423fffcc 	andi	r8,r8,65535
  10e004:	25c9883a 	add	r4,r4,r23
  10e008:	1205883a 	add	r2,r2,r8
  10e00c:	a9000a36 	bltu	r21,r4,10e038 <__divdf3+0x6bc>
  10e010:	a9000826 	beq	r21,r4,10e034 <__divdf3+0x6b8>
  10e014:	9cc00054 	ori	r19,r19,1
  10e018:	003eb206 	br	10dae4 <__divdf3+0x168>
  10e01c:	00800434 	movhi	r2,16
  10e020:	81000234 	orhi	r4,r16,8
  10e024:	10bfffc4 	addi	r2,r2,-1
  10e028:	2088703a 	and	r4,r4,r2
  10e02c:	a00d883a 	mov	r6,r20
  10e030:	003f2206 	br	10dcbc <__divdf3+0x340>
  10e034:	103eab26 	beq	r2,zero,10dae4 <__divdf3+0x168>
  10e038:	8d47883a 	add	r3,r17,r21
  10e03c:	997fffc4 	addi	r5,r19,-1
  10e040:	1c405e36 	bltu	r3,r17,10e1bc <__divdf3+0x840>
  10e044:	19007b36 	bltu	r3,r4,10e234 <__divdf3+0x8b8>
  10e048:	1900a126 	beq	r3,r4,10e2d0 <__divdf3+0x954>
  10e04c:	2827883a 	mov	r19,r5
  10e050:	003ff006 	br	10e014 <__divdf3+0x698>
  10e054:	a0ff8a2e 	bgeu	r20,r3,10de80 <__divdf3+0x504>
  10e058:	d8800017 	ldw	r2,0(sp)
  10e05c:	a0a9883a 	add	r20,r20,r2
  10e060:	a085803a 	cmpltu	r2,r20,r2
  10e064:	1445883a 	add	r2,r2,r17
  10e068:	4091883a 	add	r8,r8,r2
  10e06c:	80bfffc4 	addi	r2,r16,-1
  10e070:	8a00462e 	bgeu	r17,r8,10e18c <__divdf3+0x810>
  10e074:	44c06836 	bltu	r8,r19,10e218 <__divdf3+0x89c>
  10e078:	9a006626 	beq	r19,r8,10e214 <__divdf3+0x898>
  10e07c:	1021883a 	mov	r16,r2
  10e080:	003f7f06 	br	10de80 <__divdf3+0x504>
  10e084:	997f1c36 	bltu	r19,r5,10dcf8 <__divdf3+0x37c>
  10e088:	800697fa 	slli	r3,r16,31
  10e08c:	9804d07a 	srli	r2,r19,1
  10e090:	982897fa 	slli	r20,r19,31
  10e094:	8020d07a 	srli	r16,r16,1
  10e098:	18a6b03a 	or	r19,r3,r2
  10e09c:	003f1806 	br	10dd00 <__divdf3+0x384>
  10e0a0:	010f8c40 	call	10f8c4 <__clzsi2>
  10e0a4:	14000544 	addi	r16,r2,21
  10e0a8:	81000748 	cmpgei	r4,r16,29
  10e0ac:	14800804 	addi	r18,r2,32
  10e0b0:	d9800017 	ldw	r6,0(sp)
  10e0b4:	d9c00117 	ldw	r7,4(sp)
  10e0b8:	203ed726 	beq	r4,zero,10dc18 <__divdf3+0x29c>
  10e0bc:	113ffe04 	addi	r4,r2,-8
  10e0c0:	9920983a 	sll	r16,r19,r4
  10e0c4:	0027883a 	mov	r19,zero
  10e0c8:	003eda06 	br	10dc34 <__divdf3+0x2b8>
  10e0cc:	3009883a 	mov	r4,r6
  10e0d0:	d9800015 	stw	r6,0(sp)
  10e0d4:	010f8c40 	call	10f8c4 <__clzsi2>
  10e0d8:	11c00544 	addi	r7,r2,21
  10e0dc:	38c00748 	cmpgei	r3,r7,29
  10e0e0:	1009883a 	mov	r4,r2
  10e0e4:	d9800017 	ldw	r6,0(sp)
  10e0e8:	10800804 	addi	r2,r2,32
  10e0ec:	183eb326 	beq	r3,zero,10dbbc <__divdf3+0x240>
  10e0f0:	213ffe04 	addi	r4,r4,-8
  10e0f4:	312a983a 	sll	r21,r6,r4
  10e0f8:	000b883a 	mov	r5,zero
  10e0fc:	003eb606 	br	10dbd8 <__divdf3+0x25c>
  10e100:	04ffffc4 	movi	r19,-1
  10e104:	01000044 	movi	r4,1
  10e108:	2509c83a 	sub	r4,r4,r20
  10e10c:	20800e48 	cmpgei	r2,r4,57
  10e110:	103e871e 	bne	r2,zero,10db30 <__divdf3+0x1b4>
  10e114:	20800808 	cmpgei	r2,r4,32
  10e118:	10004e1e 	bne	r2,zero,10e254 <__divdf3+0x8d8>
  10e11c:	90810784 	addi	r2,r18,1054
  10e120:	8086983a 	sll	r3,r16,r2
  10e124:	990ad83a 	srl	r5,r19,r4
  10e128:	9884983a 	sll	r2,r19,r2
  10e12c:	8108d83a 	srl	r4,r16,r4
  10e130:	1966b03a 	or	r19,r3,r5
  10e134:	1004c03a 	cmpne	r2,r2,zero
  10e138:	98a6b03a 	or	r19,r19,r2
  10e13c:	988001cc 	andi	r2,r19,7
  10e140:	10000726 	beq	r2,zero,10e160 <__divdf3+0x7e4>
  10e144:	988003cc 	andi	r2,r19,15
  10e148:	10800120 	cmpeqi	r2,r2,4
  10e14c:	1000041e 	bne	r2,zero,10e160 <__divdf3+0x7e4>
  10e150:	98800104 	addi	r2,r19,4
  10e154:	14e7803a 	cmpltu	r19,r2,r19
  10e158:	24c9883a 	add	r4,r4,r19
  10e15c:	1027883a 	mov	r19,r2
  10e160:	2080202c 	andhi	r2,r4,128
  10e164:	10005026 	beq	r2,zero,10e2a8 <__divdf3+0x92c>
  10e168:	00800044 	movi	r2,1
  10e16c:	0009883a 	mov	r4,zero
  10e170:	0027883a 	mov	r19,zero
  10e174:	003e7106 	br	10db3c <__divdf3+0x1c0>
  10e178:	b00d883a 	mov	r6,r22
  10e17c:	0081ffc4 	movi	r2,2047
  10e180:	0009883a 	mov	r4,zero
  10e184:	0027883a 	mov	r19,zero
  10e188:	003e6c06 	br	10db3c <__divdf3+0x1c0>
  10e18c:	8a3fbb1e 	bne	r17,r8,10e07c <__divdf3+0x700>
  10e190:	d9000017 	ldw	r4,0(sp)
  10e194:	a13fb936 	bltu	r20,r4,10e07c <__divdf3+0x700>
  10e198:	003fb606 	br	10e074 <__divdf3+0x6f8>
  10e19c:	123f0a2e 	bgeu	r2,r8,10ddc8 <__divdf3+0x44c>
  10e1a0:	843fff84 	addi	r16,r16,-2
  10e1a4:	1445883a 	add	r2,r2,r17
  10e1a8:	003f0806 	br	10ddcc <__divdf3+0x450>
  10e1ac:	15beef2e 	bgeu	r2,r22,10dd6c <__divdf3+0x3f0>
  10e1b0:	bdffff84 	addi	r23,r23,-2
  10e1b4:	1445883a 	add	r2,r2,r17
  10e1b8:	003eed06 	br	10dd70 <__divdf3+0x3f4>
  10e1bc:	2827883a 	mov	r19,r5
  10e1c0:	193f941e 	bne	r3,r4,10e014 <__divdf3+0x698>
  10e1c4:	d8c00017 	ldw	r3,0(sp)
  10e1c8:	18bf921e 	bne	r3,r2,10e014 <__divdf3+0x698>
  10e1cc:	003e4506 	br	10dae4 <__divdf3+0x168>
  10e1d0:	053fcb0e 	bge	zero,r20,10e100 <__divdf3+0x784>
  10e1d4:	0027883a 	mov	r19,zero
  10e1d8:	00c00044 	movi	r3,1
  10e1dc:	80e1883a 	add	r16,r16,r3
  10e1e0:	003e4406 	br	10daf4 <__divdf3+0x178>
  10e1e4:	1013883a 	mov	r9,r2
  10e1e8:	003f6306 	br	10df78 <__divdf3+0x5fc>
  10e1ec:	2011883a 	mov	r8,r4
  10e1f0:	003f4406 	br	10df04 <__divdf3+0x588>
  10e1f4:	988003cc 	andi	r2,r19,15
  10e1f8:	10800118 	cmpnei	r2,r2,4
  10e1fc:	103e3c26 	beq	r2,zero,10daf0 <__divdf3+0x174>
  10e200:	98800104 	addi	r2,r19,4
  10e204:	00fffec4 	movi	r3,-5
  10e208:	1cc7803a 	cmpltu	r3,r3,r19
  10e20c:	1026d0fa 	srli	r19,r2,3
  10e210:	003ff206 	br	10e1dc <__divdf3+0x860>
  10e214:	a0ff992e 	bgeu	r20,r3,10e07c <__divdf3+0x700>
  10e218:	d8800017 	ldw	r2,0(sp)
  10e21c:	843fff84 	addi	r16,r16,-2
  10e220:	a0a9883a 	add	r20,r20,r2
  10e224:	a085803a 	cmpltu	r2,r20,r2
  10e228:	1445883a 	add	r2,r2,r17
  10e22c:	4091883a 	add	r8,r8,r2
  10e230:	003f1306 	br	10de80 <__divdf3+0x504>
  10e234:	d9c00017 	ldw	r7,0(sp)
  10e238:	9cffff84 	addi	r19,r19,-2
  10e23c:	39cb883a 	add	r5,r7,r7
  10e240:	29cf803a 	cmpltu	r7,r5,r7
  10e244:	3c4f883a 	add	r7,r7,r17
  10e248:	19c7883a 	add	r3,r3,r7
  10e24c:	d9400015 	stw	r5,0(sp)
  10e250:	003fdb06 	br	10e1c0 <__divdf3+0x844>
  10e254:	00bff844 	movi	r2,-31
  10e258:	1529c83a 	sub	r20,r2,r20
  10e25c:	21000820 	cmpeqi	r4,r4,32
  10e260:	8528d83a 	srl	r20,r16,r20
  10e264:	2000031e 	bne	r4,zero,10e274 <__divdf3+0x8f8>
  10e268:	90810f84 	addi	r2,r18,1086
  10e26c:	8088983a 	sll	r4,r16,r2
  10e270:	9926b03a 	or	r19,r19,r4
  10e274:	9826c03a 	cmpne	r19,r19,zero
  10e278:	9d26b03a 	or	r19,r19,r20
  10e27c:	9c0001cc 	andi	r16,r19,7
  10e280:	8000051e 	bne	r16,zero,10e298 <__divdf3+0x91c>
  10e284:	0009883a 	mov	r4,zero
  10e288:	9826d0fa 	srli	r19,r19,3
  10e28c:	0005883a 	mov	r2,zero
  10e290:	9c26b03a 	or	r19,r19,r16
  10e294:	003e2906 	br	10db3c <__divdf3+0x1c0>
  10e298:	988003cc 	andi	r2,r19,15
  10e29c:	10800118 	cmpnei	r2,r2,4
  10e2a0:	0009883a 	mov	r4,zero
  10e2a4:	103faa1e 	bne	r2,zero,10e150 <__divdf3+0x7d4>
  10e2a8:	2004927a 	slli	r2,r4,9
  10e2ac:	2020977a 	slli	r16,r4,29
  10e2b0:	1008d33a 	srli	r4,r2,12
  10e2b4:	003ff406 	br	10e288 <__divdf3+0x90c>
  10e2b8:	00800434 	movhi	r2,16
  10e2bc:	81000234 	orhi	r4,r16,8
  10e2c0:	10bfffc4 	addi	r2,r2,-1
  10e2c4:	2088703a 	and	r4,r4,r2
  10e2c8:	b00d883a 	mov	r6,r22
  10e2cc:	003e7b06 	br	10dcbc <__divdf3+0x340>
  10e2d0:	d9c00017 	ldw	r7,0(sp)
  10e2d4:	38bfd736 	bltu	r7,r2,10e234 <__divdf3+0x8b8>
  10e2d8:	2827883a 	mov	r19,r5
  10e2dc:	003fb906 	br	10e1c4 <__divdf3+0x848>

0010e2e0 <__eqdf2>:
  10e2e0:	2810d53a 	srli	r8,r5,20
  10e2e4:	3806d53a 	srli	r3,r7,20
  10e2e8:	00800434 	movhi	r2,16
  10e2ec:	4201ffcc 	andi	r8,r8,2047
  10e2f0:	10bfffc4 	addi	r2,r2,-1
  10e2f4:	4281ffd8 	cmpnei	r10,r8,2047
  10e2f8:	2892703a 	and	r9,r5,r2
  10e2fc:	18c1ffcc 	andi	r3,r3,2047
  10e300:	3884703a 	and	r2,r7,r2
  10e304:	280ad7fa 	srli	r5,r5,31
  10e308:	380ed7fa 	srli	r7,r7,31
  10e30c:	50000626 	beq	r10,zero,10e328 <__eqdf2+0x48>
  10e310:	1a81ffe0 	cmpeqi	r10,r3,2047
  10e314:	5000021e 	bne	r10,zero,10e320 <__eqdf2+0x40>
  10e318:	40c0011e 	bne	r8,r3,10e320 <__eqdf2+0x40>
  10e31c:	48800826 	beq	r9,r2,10e340 <__eqdf2+0x60>
  10e320:	00800044 	movi	r2,1
  10e324:	f800283a 	ret
  10e328:	4914b03a 	or	r10,r9,r4
  10e32c:	503ffc1e 	bne	r10,zero,10e320 <__eqdf2+0x40>
  10e330:	18c1ffd8 	cmpnei	r3,r3,2047
  10e334:	183ffa1e 	bne	r3,zero,10e320 <__eqdf2+0x40>
  10e338:	1184b03a 	or	r2,r2,r6
  10e33c:	103ff81e 	bne	r2,zero,10e320 <__eqdf2+0x40>
  10e340:	21bff71e 	bne	r4,r6,10e320 <__eqdf2+0x40>
  10e344:	29c00426 	beq	r5,r7,10e358 <__eqdf2+0x78>
  10e348:	403ff51e 	bne	r8,zero,10e320 <__eqdf2+0x40>
  10e34c:	4904b03a 	or	r2,r9,r4
  10e350:	1004c03a 	cmpne	r2,r2,zero
  10e354:	f800283a 	ret
  10e358:	0005883a 	mov	r2,zero
  10e35c:	f800283a 	ret

0010e360 <__gedf2>:
  10e360:	2810d53a 	srli	r8,r5,20
  10e364:	3812d53a 	srli	r9,r7,20
  10e368:	00800434 	movhi	r2,16
  10e36c:	4201ffcc 	andi	r8,r8,2047
  10e370:	10bfffc4 	addi	r2,r2,-1
  10e374:	4281ffd8 	cmpnei	r10,r8,2047
  10e378:	2896703a 	and	r11,r5,r2
  10e37c:	3886703a 	and	r3,r7,r2
  10e380:	280ad7fa 	srli	r5,r5,31
  10e384:	4a41ffcc 	andi	r9,r9,2047
  10e388:	3804d7fa 	srli	r2,r7,31
  10e38c:	50000b26 	beq	r10,zero,10e3bc <__gedf2+0x5c>
  10e390:	49c1ffd8 	cmpnei	r7,r9,2047
  10e394:	38000d26 	beq	r7,zero,10e3cc <__gedf2+0x6c>
  10e398:	4000191e 	bne	r8,zero,10e400 <__gedf2+0xa0>
  10e39c:	5914b03a 	or	r10,r11,r4
  10e3a0:	500f003a 	cmpeq	r7,r10,zero
  10e3a4:	4800131e 	bne	r9,zero,10e3f4 <__gedf2+0x94>
  10e3a8:	1998b03a 	or	r12,r3,r6
  10e3ac:	6000111e 	bne	r12,zero,10e3f4 <__gedf2+0x94>
  10e3b0:	50000a1e 	bne	r10,zero,10e3dc <__gedf2+0x7c>
  10e3b4:	0005883a 	mov	r2,zero
  10e3b8:	f800283a 	ret
  10e3bc:	590eb03a 	or	r7,r11,r4
  10e3c0:	38001e1e 	bne	r7,zero,10e43c <__gedf2+0xdc>
  10e3c4:	49c1ffe0 	cmpeqi	r7,r9,2047
  10e3c8:	38000d26 	beq	r7,zero,10e400 <__gedf2+0xa0>
  10e3cc:	198eb03a 	or	r7,r3,r6
  10e3d0:	38001a1e 	bne	r7,zero,10e43c <__gedf2+0xdc>
  10e3d4:	40000526 	beq	r8,zero,10e3ec <__gedf2+0x8c>
  10e3d8:	28800d26 	beq	r5,r2,10e410 <__gedf2+0xb0>
  10e3dc:	00800044 	movi	r2,1
  10e3e0:	28000626 	beq	r5,zero,10e3fc <__gedf2+0x9c>
  10e3e4:	00bfffc4 	movi	r2,-1
  10e3e8:	f800283a 	ret
  10e3ec:	590eb03a 	or	r7,r11,r4
  10e3f0:	380f003a 	cmpeq	r7,r7,zero
  10e3f4:	383ff826 	beq	r7,zero,10e3d8 <__gedf2+0x78>
  10e3f8:	103ffa26 	beq	r2,zero,10e3e4 <__gedf2+0x84>
  10e3fc:	f800283a 	ret
  10e400:	483ff51e 	bne	r9,zero,10e3d8 <__gedf2+0x78>
  10e404:	198eb03a 	or	r7,r3,r6
  10e408:	383ff31e 	bne	r7,zero,10e3d8 <__gedf2+0x78>
  10e40c:	003ff306 	br	10e3dc <__gedf2+0x7c>
  10e410:	4a000716 	blt	r9,r8,10e430 <__gedf2+0xd0>
  10e414:	427ff816 	blt	r8,r9,10e3f8 <__gedf2+0x98>
  10e418:	1afff036 	bltu	r3,r11,10e3dc <__gedf2+0x7c>
  10e41c:	58c00926 	beq	r11,r3,10e444 <__gedf2+0xe4>
  10e420:	58ffe42e 	bgeu	r11,r3,10e3b4 <__gedf2+0x54>
  10e424:	283fef26 	beq	r5,zero,10e3e4 <__gedf2+0x84>
  10e428:	2805883a 	mov	r2,r5
  10e42c:	f800283a 	ret
  10e430:	103fec1e 	bne	r2,zero,10e3e4 <__gedf2+0x84>
  10e434:	00800044 	movi	r2,1
  10e438:	f800283a 	ret
  10e43c:	00bfff84 	movi	r2,-2
  10e440:	f800283a 	ret
  10e444:	313fe536 	bltu	r6,r4,10e3dc <__gedf2+0x7c>
  10e448:	21bfda2e 	bgeu	r4,r6,10e3b4 <__gedf2+0x54>
  10e44c:	003ff506 	br	10e424 <__gedf2+0xc4>

0010e450 <__ledf2>:
  10e450:	2810d53a 	srli	r8,r5,20
  10e454:	3812d53a 	srli	r9,r7,20
  10e458:	00800434 	movhi	r2,16
  10e45c:	4201ffcc 	andi	r8,r8,2047
  10e460:	10bfffc4 	addi	r2,r2,-1
  10e464:	4281ffd8 	cmpnei	r10,r8,2047
  10e468:	2896703a 	and	r11,r5,r2
  10e46c:	3886703a 	and	r3,r7,r2
  10e470:	280ad7fa 	srli	r5,r5,31
  10e474:	4a41ffcc 	andi	r9,r9,2047
  10e478:	3804d7fa 	srli	r2,r7,31
  10e47c:	50000b26 	beq	r10,zero,10e4ac <__ledf2+0x5c>
  10e480:	49c1ffd8 	cmpnei	r7,r9,2047
  10e484:	38000d26 	beq	r7,zero,10e4bc <__ledf2+0x6c>
  10e488:	40001b1e 	bne	r8,zero,10e4f8 <__ledf2+0xa8>
  10e48c:	5914b03a 	or	r10,r11,r4
  10e490:	500f003a 	cmpeq	r7,r10,zero
  10e494:	48000e1e 	bne	r9,zero,10e4d0 <__ledf2+0x80>
  10e498:	1998b03a 	or	r12,r3,r6
  10e49c:	60000c1e 	bne	r12,zero,10e4d0 <__ledf2+0x80>
  10e4a0:	50000d1e 	bne	r10,zero,10e4d8 <__ledf2+0x88>
  10e4a4:	0005883a 	mov	r2,zero
  10e4a8:	f800283a 	ret
  10e4ac:	590eb03a 	or	r7,r11,r4
  10e4b0:	38000d1e 	bne	r7,zero,10e4e8 <__ledf2+0x98>
  10e4b4:	49c1ffe0 	cmpeqi	r7,r9,2047
  10e4b8:	38000f26 	beq	r7,zero,10e4f8 <__ledf2+0xa8>
  10e4bc:	198eb03a 	or	r7,r3,r6
  10e4c0:	3800091e 	bne	r7,zero,10e4e8 <__ledf2+0x98>
  10e4c4:	4000031e 	bne	r8,zero,10e4d4 <__ledf2+0x84>
  10e4c8:	590eb03a 	or	r7,r11,r4
  10e4cc:	380f003a 	cmpeq	r7,r7,zero
  10e4d0:	3800071e 	bne	r7,zero,10e4f0 <__ledf2+0xa0>
  10e4d4:	28800c26 	beq	r5,r2,10e508 <__ledf2+0xb8>
  10e4d8:	00800044 	movi	r2,1
  10e4dc:	28000526 	beq	r5,zero,10e4f4 <__ledf2+0xa4>
  10e4e0:	00bfffc4 	movi	r2,-1
  10e4e4:	f800283a 	ret
  10e4e8:	00800084 	movi	r2,2
  10e4ec:	f800283a 	ret
  10e4f0:	103ffb26 	beq	r2,zero,10e4e0 <__ledf2+0x90>
  10e4f4:	f800283a 	ret
  10e4f8:	483ff61e 	bne	r9,zero,10e4d4 <__ledf2+0x84>
  10e4fc:	198eb03a 	or	r7,r3,r6
  10e500:	383ff41e 	bne	r7,zero,10e4d4 <__ledf2+0x84>
  10e504:	003ff406 	br	10e4d8 <__ledf2+0x88>
  10e508:	4a00030e 	bge	r9,r8,10e518 <__ledf2+0xc8>
  10e50c:	103ff41e 	bne	r2,zero,10e4e0 <__ledf2+0x90>
  10e510:	00800044 	movi	r2,1
  10e514:	f800283a 	ret
  10e518:	427ff516 	blt	r8,r9,10e4f0 <__ledf2+0xa0>
  10e51c:	1affee36 	bltu	r3,r11,10e4d8 <__ledf2+0x88>
  10e520:	58c00426 	beq	r11,r3,10e534 <__ledf2+0xe4>
  10e524:	58ffdf2e 	bgeu	r11,r3,10e4a4 <__ledf2+0x54>
  10e528:	283fed26 	beq	r5,zero,10e4e0 <__ledf2+0x90>
  10e52c:	2805883a 	mov	r2,r5
  10e530:	f800283a 	ret
  10e534:	313fe836 	bltu	r6,r4,10e4d8 <__ledf2+0x88>
  10e538:	21bfda2e 	bgeu	r4,r6,10e4a4 <__ledf2+0x54>
  10e53c:	003ffa06 	br	10e528 <__ledf2+0xd8>

0010e540 <__muldf3>:
  10e540:	2810d53a 	srli	r8,r5,20
  10e544:	deffef04 	addi	sp,sp,-68
  10e548:	dc000715 	stw	r16,28(sp)
  10e54c:	04000434 	movhi	r16,16
  10e550:	dd000b15 	stw	r20,44(sp)
  10e554:	dc800915 	stw	r18,36(sp)
  10e558:	843fffc4 	addi	r16,r16,-1
  10e55c:	dfc01015 	stw	ra,64(sp)
  10e560:	df000f15 	stw	fp,60(sp)
  10e564:	ddc00e15 	stw	r23,56(sp)
  10e568:	dd800d15 	stw	r22,52(sp)
  10e56c:	dd400c15 	stw	r21,48(sp)
  10e570:	dcc00a15 	stw	r19,40(sp)
  10e574:	dc400815 	stw	r17,32(sp)
  10e578:	4201ffcc 	andi	r8,r8,2047
  10e57c:	2025883a 	mov	r18,r4
  10e580:	2c20703a 	and	r16,r5,r16
  10e584:	2828d7fa 	srli	r20,r5,31
  10e588:	40005d26 	beq	r8,zero,10e700 <__muldf3+0x1c0>
  10e58c:	4081ffe0 	cmpeqi	r2,r8,2047
  10e590:	1000721e 	bne	r2,zero,10e75c <__muldf3+0x21c>
  10e594:	802090fa 	slli	r16,r16,3
  10e598:	2006d77a 	srli	r3,r4,29
  10e59c:	202c90fa 	slli	r22,r4,3
  10e5a0:	423f0044 	addi	r8,r8,-1023
  10e5a4:	1c20b03a 	or	r16,r3,r16
  10e5a8:	84002034 	orhi	r16,r16,128
  10e5ac:	0027883a 	mov	r19,zero
  10e5b0:	002f883a 	mov	r23,zero
  10e5b4:	3806d53a 	srli	r3,r7,20
  10e5b8:	04400434 	movhi	r17,16
  10e5bc:	8c7fffc4 	addi	r17,r17,-1
  10e5c0:	18c1ffcc 	andi	r3,r3,2047
  10e5c4:	3c62703a 	and	r17,r7,r17
  10e5c8:	382ad7fa 	srli	r21,r7,31
  10e5cc:	18006a26 	beq	r3,zero,10e778 <__muldf3+0x238>
  10e5d0:	1881ffe0 	cmpeqi	r2,r3,2047
  10e5d4:	1000211e 	bne	r2,zero,10e65c <__muldf3+0x11c>
  10e5d8:	882290fa 	slli	r17,r17,3
  10e5dc:	3008d77a 	srli	r4,r6,29
  10e5e0:	302490fa 	slli	r18,r6,3
  10e5e4:	18ff0044 	addi	r3,r3,-1023
  10e5e8:	2462b03a 	or	r17,r4,r17
  10e5ec:	40d1883a 	add	r8,r8,r3
  10e5f0:	8c402034 	orhi	r17,r17,128
  10e5f4:	0007883a 	mov	r3,zero
  10e5f8:	98800428 	cmpgeui	r2,r19,16
  10e5fc:	a54cf03a 	xor	r6,r20,r21
  10e600:	42400044 	addi	r9,r8,1
  10e604:	10009b1e 	bne	r2,zero,10e874 <__muldf3+0x334>
  10e608:	982690ba 	slli	r19,r19,2
  10e60c:	00800474 	movhi	r2,17
  10e610:	9885883a 	add	r2,r19,r2
  10e614:	10b98717 	ldw	r2,-6628(r2)
  10e618:	1000683a 	jmp	r2
  10e61c:	0010e874 	movhi	zero,17313
  10e620:	0010e67c 	xorhi	zero,zero,17305
  10e624:	0010e67c 	xorhi	zero,zero,17305
  10e628:	0010e678 	rdprs	zero,zero,17305
  10e62c:	0010e688 	cmpgei	zero,zero,17306
  10e630:	0010e688 	cmpgei	zero,zero,17306
  10e634:	0010e830 	cmpltui	zero,zero,17312
  10e638:	0010e678 	rdprs	zero,zero,17305
  10e63c:	0010e688 	cmpgei	zero,zero,17306
  10e640:	0010e830 	cmpltui	zero,zero,17312
  10e644:	0010e688 	cmpgei	zero,zero,17306
  10e648:	0010e678 	rdprs	zero,zero,17305
  10e64c:	0010e828 	cmpgeui	zero,zero,17312
  10e650:	0010e828 	cmpgeui	zero,zero,17312
  10e654:	0010e828 	cmpgeui	zero,zero,17312
  10e658:	0010e848 	cmpgei	zero,zero,17313
  10e65c:	3464b03a 	or	r18,r6,r17
  10e660:	4201ffc4 	addi	r8,r8,2047
  10e664:	90006c1e 	bne	r18,zero,10e818 <__muldf3+0x2d8>
  10e668:	9cc00094 	ori	r19,r19,2
  10e66c:	0023883a 	mov	r17,zero
  10e670:	00c00084 	movi	r3,2
  10e674:	003fe006 	br	10e5f8 <__muldf3+0xb8>
  10e678:	a80d883a 	mov	r6,r21
  10e67c:	8821883a 	mov	r16,r17
  10e680:	902d883a 	mov	r22,r18
  10e684:	182f883a 	mov	r23,r3
  10e688:	b88000a0 	cmpeqi	r2,r23,2
  10e68c:	1000501e 	bne	r2,zero,10e7d0 <__muldf3+0x290>
  10e690:	b88000e0 	cmpeqi	r2,r23,3
  10e694:	10019d1e 	bne	r2,zero,10ed0c <__muldf3+0x7cc>
  10e698:	b8800060 	cmpeqi	r2,r23,1
  10e69c:	10012a26 	beq	r2,zero,10eb48 <__muldf3+0x608>
  10e6a0:	0007883a 	mov	r3,zero
  10e6a4:	0021883a 	mov	r16,zero
  10e6a8:	002d883a 	mov	r22,zero
  10e6ac:	04400434 	movhi	r17,16
  10e6b0:	1806953a 	slli	r3,r3,20
  10e6b4:	31803fcc 	andi	r6,r6,255
  10e6b8:	8c7fffc4 	addi	r17,r17,-1
  10e6bc:	300c97fa 	slli	r6,r6,31
  10e6c0:	8460703a 	and	r16,r16,r17
  10e6c4:	80c6b03a 	or	r3,r16,r3
  10e6c8:	1986b03a 	or	r3,r3,r6
  10e6cc:	b005883a 	mov	r2,r22
  10e6d0:	dfc01017 	ldw	ra,64(sp)
  10e6d4:	df000f17 	ldw	fp,60(sp)
  10e6d8:	ddc00e17 	ldw	r23,56(sp)
  10e6dc:	dd800d17 	ldw	r22,52(sp)
  10e6e0:	dd400c17 	ldw	r21,48(sp)
  10e6e4:	dd000b17 	ldw	r20,44(sp)
  10e6e8:	dcc00a17 	ldw	r19,40(sp)
  10e6ec:	dc800917 	ldw	r18,36(sp)
  10e6f0:	dc400817 	ldw	r17,32(sp)
  10e6f4:	dc000717 	ldw	r16,28(sp)
  10e6f8:	dec01104 	addi	sp,sp,68
  10e6fc:	f800283a 	ret
  10e700:	812cb03a 	or	r22,r16,r4
  10e704:	b0003f26 	beq	r22,zero,10e804 <__muldf3+0x2c4>
  10e708:	d9c00115 	stw	r7,4(sp)
  10e70c:	d9800015 	stw	r6,0(sp)
  10e710:	80013b26 	beq	r16,zero,10ec00 <__muldf3+0x6c0>
  10e714:	8009883a 	mov	r4,r16
  10e718:	010f8c40 	call	10f8c4 <__clzsi2>
  10e71c:	d9800017 	ldw	r6,0(sp)
  10e720:	d9c00117 	ldw	r7,4(sp)
  10e724:	1007883a 	mov	r3,r2
  10e728:	117ffd44 	addi	r5,r2,-11
  10e72c:	01000744 	movi	r4,29
  10e730:	1dbffe04 	addi	r22,r3,-8
  10e734:	2149c83a 	sub	r4,r4,r5
  10e738:	85a0983a 	sll	r16,r16,r22
  10e73c:	9108d83a 	srl	r4,r18,r4
  10e740:	95ac983a 	sll	r22,r18,r22
  10e744:	2420b03a 	or	r16,r4,r16
  10e748:	023f0344 	movi	r8,-1011
  10e74c:	40d1c83a 	sub	r8,r8,r3
  10e750:	0027883a 	mov	r19,zero
  10e754:	002f883a 	mov	r23,zero
  10e758:	003f9606 	br	10e5b4 <__muldf3+0x74>
  10e75c:	812cb03a 	or	r22,r16,r4
  10e760:	b000231e 	bne	r22,zero,10e7f0 <__muldf3+0x2b0>
  10e764:	0021883a 	mov	r16,zero
  10e768:	04c00204 	movi	r19,8
  10e76c:	0201ffc4 	movi	r8,2047
  10e770:	05c00084 	movi	r23,2
  10e774:	003f8f06 	br	10e5b4 <__muldf3+0x74>
  10e778:	3464b03a 	or	r18,r6,r17
  10e77c:	90001826 	beq	r18,zero,10e7e0 <__muldf3+0x2a0>
  10e780:	88011126 	beq	r17,zero,10ebc8 <__muldf3+0x688>
  10e784:	8809883a 	mov	r4,r17
  10e788:	d9800115 	stw	r6,4(sp)
  10e78c:	da000015 	stw	r8,0(sp)
  10e790:	010f8c40 	call	10f8c4 <__clzsi2>
  10e794:	da000017 	ldw	r8,0(sp)
  10e798:	d9800117 	ldw	r6,4(sp)
  10e79c:	1007883a 	mov	r3,r2
  10e7a0:	117ffd44 	addi	r5,r2,-11
  10e7a4:	01000744 	movi	r4,29
  10e7a8:	1cbffe04 	addi	r18,r3,-8
  10e7ac:	2149c83a 	sub	r4,r4,r5
  10e7b0:	8ca2983a 	sll	r17,r17,r18
  10e7b4:	3108d83a 	srl	r4,r6,r4
  10e7b8:	34a4983a 	sll	r18,r6,r18
  10e7bc:	2462b03a 	or	r17,r4,r17
  10e7c0:	40d1c83a 	sub	r8,r8,r3
  10e7c4:	423f0344 	addi	r8,r8,-1011
  10e7c8:	0007883a 	mov	r3,zero
  10e7cc:	003f8a06 	br	10e5f8 <__muldf3+0xb8>
  10e7d0:	00c1ffc4 	movi	r3,2047
  10e7d4:	0021883a 	mov	r16,zero
  10e7d8:	002d883a 	mov	r22,zero
  10e7dc:	003fb306 	br	10e6ac <__muldf3+0x16c>
  10e7e0:	9cc00054 	ori	r19,r19,1
  10e7e4:	0023883a 	mov	r17,zero
  10e7e8:	00c00044 	movi	r3,1
  10e7ec:	003f8206 	br	10e5f8 <__muldf3+0xb8>
  10e7f0:	202d883a 	mov	r22,r4
  10e7f4:	04c00304 	movi	r19,12
  10e7f8:	0201ffc4 	movi	r8,2047
  10e7fc:	05c000c4 	movi	r23,3
  10e800:	003f6c06 	br	10e5b4 <__muldf3+0x74>
  10e804:	0021883a 	mov	r16,zero
  10e808:	04c00104 	movi	r19,4
  10e80c:	0011883a 	mov	r8,zero
  10e810:	05c00044 	movi	r23,1
  10e814:	003f6706 	br	10e5b4 <__muldf3+0x74>
  10e818:	9cc000d4 	ori	r19,r19,3
  10e81c:	3025883a 	mov	r18,r6
  10e820:	00c000c4 	movi	r3,3
  10e824:	003f7406 	br	10e5f8 <__muldf3+0xb8>
  10e828:	a00d883a 	mov	r6,r20
  10e82c:	003f9606 	br	10e688 <__muldf3+0x148>
  10e830:	04000434 	movhi	r16,16
  10e834:	000d883a 	mov	r6,zero
  10e838:	843fffc4 	addi	r16,r16,-1
  10e83c:	05bfffc4 	movi	r22,-1
  10e840:	00c1ffc4 	movi	r3,2047
  10e844:	003f9906 	br	10e6ac <__muldf3+0x16c>
  10e848:	8080022c 	andhi	r2,r16,8
  10e84c:	1000d826 	beq	r2,zero,10ebb0 <__muldf3+0x670>
  10e850:	8880022c 	andhi	r2,r17,8
  10e854:	1000d61e 	bne	r2,zero,10ebb0 <__muldf3+0x670>
  10e858:	00800434 	movhi	r2,16
  10e85c:	8c000234 	orhi	r16,r17,8
  10e860:	10bfffc4 	addi	r2,r2,-1
  10e864:	80a0703a 	and	r16,r16,r2
  10e868:	a80d883a 	mov	r6,r21
  10e86c:	902d883a 	mov	r22,r18
  10e870:	003ff306 	br	10e840 <__muldf3+0x300>
  10e874:	b028d43a 	srli	r20,r22,16
  10e878:	902ed43a 	srli	r23,r18,16
  10e87c:	b5bfffcc 	andi	r22,r22,65535
  10e880:	94bfffcc 	andi	r18,r18,65535
  10e884:	b00b883a 	mov	r5,r22
  10e888:	9009883a 	mov	r4,r18
  10e88c:	d9800215 	stw	r6,8(sp)
  10e890:	da000115 	stw	r8,4(sp)
  10e894:	da400015 	stw	r9,0(sp)
  10e898:	0102e600 	call	102e60 <__mulsi3>
  10e89c:	900b883a 	mov	r5,r18
  10e8a0:	a009883a 	mov	r4,r20
  10e8a4:	1027883a 	mov	r19,r2
  10e8a8:	0102e600 	call	102e60 <__mulsi3>
  10e8ac:	b80b883a 	mov	r5,r23
  10e8b0:	a009883a 	mov	r4,r20
  10e8b4:	102b883a 	mov	r21,r2
  10e8b8:	0102e600 	call	102e60 <__mulsi3>
  10e8bc:	b00b883a 	mov	r5,r22
  10e8c0:	b809883a 	mov	r4,r23
  10e8c4:	1039883a 	mov	fp,r2
  10e8c8:	0102e600 	call	102e60 <__mulsi3>
  10e8cc:	9806d43a 	srli	r3,r19,16
  10e8d0:	1545883a 	add	r2,r2,r21
  10e8d4:	da400017 	ldw	r9,0(sp)
  10e8d8:	1885883a 	add	r2,r3,r2
  10e8dc:	da000117 	ldw	r8,4(sp)
  10e8e0:	d9800217 	ldw	r6,8(sp)
  10e8e4:	1540022e 	bgeu	r2,r21,10e8f0 <__muldf3+0x3b0>
  10e8e8:	00c00074 	movhi	r3,1
  10e8ec:	e0f9883a 	add	fp,fp,r3
  10e8f0:	1006943a 	slli	r3,r2,16
  10e8f4:	1004d43a 	srli	r2,r2,16
  10e8f8:	882ad43a 	srli	r21,r17,16
  10e8fc:	9cffffcc 	andi	r19,r19,65535
  10e900:	8c7fffcc 	andi	r17,r17,65535
  10e904:	b00b883a 	mov	r5,r22
  10e908:	8809883a 	mov	r4,r17
  10e90c:	d8800015 	stw	r2,0(sp)
  10e910:	1cc5883a 	add	r2,r3,r19
  10e914:	d9800515 	stw	r6,20(sp)
  10e918:	da000415 	stw	r8,16(sp)
  10e91c:	da400315 	stw	r9,12(sp)
  10e920:	d8800115 	stw	r2,4(sp)
  10e924:	0102e600 	call	102e60 <__mulsi3>
  10e928:	a009883a 	mov	r4,r20
  10e92c:	880b883a 	mov	r5,r17
  10e930:	d8800215 	stw	r2,8(sp)
  10e934:	0102e600 	call	102e60 <__mulsi3>
  10e938:	a009883a 	mov	r4,r20
  10e93c:	a80b883a 	mov	r5,r21
  10e940:	1027883a 	mov	r19,r2
  10e944:	0102e600 	call	102e60 <__mulsi3>
  10e948:	b00b883a 	mov	r5,r22
  10e94c:	a809883a 	mov	r4,r21
  10e950:	1029883a 	mov	r20,r2
  10e954:	0102e600 	call	102e60 <__mulsi3>
  10e958:	d9c00217 	ldw	r7,8(sp)
  10e95c:	14c5883a 	add	r2,r2,r19
  10e960:	da400317 	ldw	r9,12(sp)
  10e964:	3806d43a 	srli	r3,r7,16
  10e968:	da000417 	ldw	r8,16(sp)
  10e96c:	d9800517 	ldw	r6,20(sp)
  10e970:	1885883a 	add	r2,r3,r2
  10e974:	14c0022e 	bgeu	r2,r19,10e980 <__muldf3+0x440>
  10e978:	00c00074 	movhi	r3,1
  10e97c:	a0e9883a 	add	r20,r20,r3
  10e980:	1006d43a 	srli	r3,r2,16
  10e984:	1004943a 	slli	r2,r2,16
  10e988:	802cd43a 	srli	r22,r16,16
  10e98c:	843fffcc 	andi	r16,r16,65535
  10e990:	3cffffcc 	andi	r19,r7,65535
  10e994:	9009883a 	mov	r4,r18
  10e998:	800b883a 	mov	r5,r16
  10e99c:	d9800615 	stw	r6,24(sp)
  10e9a0:	da000515 	stw	r8,20(sp)
  10e9a4:	da400415 	stw	r9,16(sp)
  10e9a8:	1d29883a 	add	r20,r3,r20
  10e9ac:	14e7883a 	add	r19,r2,r19
  10e9b0:	0102e600 	call	102e60 <__mulsi3>
  10e9b4:	900b883a 	mov	r5,r18
  10e9b8:	b009883a 	mov	r4,r22
  10e9bc:	d8800315 	stw	r2,12(sp)
  10e9c0:	0102e600 	call	102e60 <__mulsi3>
  10e9c4:	b00b883a 	mov	r5,r22
  10e9c8:	b809883a 	mov	r4,r23
  10e9cc:	1025883a 	mov	r18,r2
  10e9d0:	0102e600 	call	102e60 <__mulsi3>
  10e9d4:	800b883a 	mov	r5,r16
  10e9d8:	b809883a 	mov	r4,r23
  10e9dc:	d8800215 	stw	r2,8(sp)
  10e9e0:	0102e600 	call	102e60 <__mulsi3>
  10e9e4:	d8c00317 	ldw	r3,12(sp)
  10e9e8:	d9400017 	ldw	r5,0(sp)
  10e9ec:	1485883a 	add	r2,r2,r18
  10e9f0:	1808d43a 	srli	r4,r3,16
  10e9f4:	2ccf883a 	add	r7,r5,r19
  10e9f8:	da800217 	ldw	r10,8(sp)
  10e9fc:	2085883a 	add	r2,r4,r2
  10ea00:	da400417 	ldw	r9,16(sp)
  10ea04:	da000517 	ldw	r8,20(sp)
  10ea08:	d9800617 	ldw	r6,24(sp)
  10ea0c:	1480022e 	bgeu	r2,r18,10ea18 <__muldf3+0x4d8>
  10ea10:	01000074 	movhi	r4,1
  10ea14:	5115883a 	add	r10,r10,r4
  10ea18:	1024d43a 	srli	r18,r2,16
  10ea1c:	1004943a 	slli	r2,r2,16
  10ea20:	1dffffcc 	andi	r23,r3,65535
  10ea24:	8809883a 	mov	r4,r17
  10ea28:	800b883a 	mov	r5,r16
  10ea2c:	d9800615 	stw	r6,24(sp)
  10ea30:	da000515 	stw	r8,20(sp)
  10ea34:	da400415 	stw	r9,16(sp)
  10ea38:	d9c00315 	stw	r7,12(sp)
  10ea3c:	92a5883a 	add	r18,r18,r10
  10ea40:	15ef883a 	add	r23,r2,r23
  10ea44:	0102e600 	call	102e60 <__mulsi3>
  10ea48:	880b883a 	mov	r5,r17
  10ea4c:	b009883a 	mov	r4,r22
  10ea50:	d8800215 	stw	r2,8(sp)
  10ea54:	0102e600 	call	102e60 <__mulsi3>
  10ea58:	b00b883a 	mov	r5,r22
  10ea5c:	a809883a 	mov	r4,r21
  10ea60:	d8800015 	stw	r2,0(sp)
  10ea64:	0102e600 	call	102e60 <__mulsi3>
  10ea68:	800b883a 	mov	r5,r16
  10ea6c:	a809883a 	mov	r4,r21
  10ea70:	1023883a 	mov	r17,r2
  10ea74:	0102e600 	call	102e60 <__mulsi3>
  10ea78:	da800217 	ldw	r10,8(sp)
  10ea7c:	d8c00017 	ldw	r3,0(sp)
  10ea80:	d9c00317 	ldw	r7,12(sp)
  10ea84:	500ad43a 	srli	r5,r10,16
  10ea88:	10c5883a 	add	r2,r2,r3
  10ea8c:	da400417 	ldw	r9,16(sp)
  10ea90:	288b883a 	add	r5,r5,r2
  10ea94:	da000517 	ldw	r8,20(sp)
  10ea98:	d9800617 	ldw	r6,24(sp)
  10ea9c:	28c0022e 	bgeu	r5,r3,10eaa8 <__muldf3+0x568>
  10eaa0:	00800074 	movhi	r2,1
  10eaa4:	88a3883a 	add	r17,r17,r2
  10eaa8:	2806943a 	slli	r3,r5,16
  10eaac:	52bfffcc 	andi	r10,r10,65535
  10eab0:	3f39883a 	add	fp,r7,fp
  10eab4:	1a87883a 	add	r3,r3,r10
  10eab8:	e4e7803a 	cmpltu	r19,fp,r19
  10eabc:	1d07883a 	add	r3,r3,r20
  10eac0:	e5f9883a 	add	fp,fp,r23
  10eac4:	1ce1883a 	add	r16,r3,r19
  10eac8:	e5c9803a 	cmpltu	r4,fp,r23
  10eacc:	848f883a 	add	r7,r16,r18
  10ead0:	280ad43a 	srli	r5,r5,16
  10ead4:	3915883a 	add	r10,r7,r4
  10ead8:	1d29803a 	cmpltu	r20,r3,r20
  10eadc:	84e1803a 	cmpltu	r16,r16,r19
  10eae0:	5109803a 	cmpltu	r4,r10,r4
  10eae4:	a420b03a 	or	r16,r20,r16
  10eae8:	3ca5803a 	cmpltu	r18,r7,r18
  10eaec:	8161883a 	add	r16,r16,r5
  10eaf0:	9108b03a 	or	r4,r18,r4
  10eaf4:	8121883a 	add	r16,r16,r4
  10eaf8:	e02c927a 	slli	r22,fp,9
  10eafc:	8461883a 	add	r16,r16,r17
  10eb00:	d8c00117 	ldw	r3,4(sp)
  10eb04:	5004d5fa 	srli	r2,r10,23
  10eb08:	8020927a 	slli	r16,r16,9
  10eb0c:	e038d5fa 	srli	fp,fp,23
  10eb10:	b0ecb03a 	or	r22,r22,r3
  10eb14:	5014927a 	slli	r10,r10,9
  10eb18:	80a0b03a 	or	r16,r16,r2
  10eb1c:	b02cc03a 	cmpne	r22,r22,zero
  10eb20:	b72cb03a 	or	r22,r22,fp
  10eb24:	8080402c 	andhi	r2,r16,256
  10eb28:	b2acb03a 	or	r22,r22,r10
  10eb2c:	10005c26 	beq	r2,zero,10eca0 <__muldf3+0x760>
  10eb30:	b004d07a 	srli	r2,r22,1
  10eb34:	800697fa 	slli	r3,r16,31
  10eb38:	b580004c 	andi	r22,r22,1
  10eb3c:	8020d07a 	srli	r16,r16,1
  10eb40:	15acb03a 	or	r22,r2,r22
  10eb44:	b0ecb03a 	or	r22,r22,r3
  10eb48:	48c0ffc4 	addi	r3,r9,1023
  10eb4c:	00c0370e 	bge	zero,r3,10ec2c <__muldf3+0x6ec>
  10eb50:	b08001cc 	andi	r2,r22,7
  10eb54:	10000726 	beq	r2,zero,10eb74 <__muldf3+0x634>
  10eb58:	b08003cc 	andi	r2,r22,15
  10eb5c:	10800120 	cmpeqi	r2,r2,4
  10eb60:	1000041e 	bne	r2,zero,10eb74 <__muldf3+0x634>
  10eb64:	b0800104 	addi	r2,r22,4
  10eb68:	15ad803a 	cmpltu	r22,r2,r22
  10eb6c:	85a1883a 	add	r16,r16,r22
  10eb70:	102d883a 	mov	r22,r2
  10eb74:	8080402c 	andhi	r2,r16,256
  10eb78:	10000426 	beq	r2,zero,10eb8c <__muldf3+0x64c>
  10eb7c:	00bfc034 	movhi	r2,65280
  10eb80:	10bfffc4 	addi	r2,r2,-1
  10eb84:	80a0703a 	and	r16,r16,r2
  10eb88:	48c10004 	addi	r3,r9,1024
  10eb8c:	1881ffc8 	cmpgei	r2,r3,2047
  10eb90:	103f0f1e 	bne	r2,zero,10e7d0 <__muldf3+0x290>
  10eb94:	8004977a 	slli	r2,r16,29
  10eb98:	b02cd0fa 	srli	r22,r22,3
  10eb9c:	8020927a 	slli	r16,r16,9
  10eba0:	18c1ffcc 	andi	r3,r3,2047
  10eba4:	15acb03a 	or	r22,r2,r22
  10eba8:	8020d33a 	srli	r16,r16,12
  10ebac:	003ebf06 	br	10e6ac <__muldf3+0x16c>
  10ebb0:	00800434 	movhi	r2,16
  10ebb4:	84000234 	orhi	r16,r16,8
  10ebb8:	10bfffc4 	addi	r2,r2,-1
  10ebbc:	80a0703a 	and	r16,r16,r2
  10ebc0:	a00d883a 	mov	r6,r20
  10ebc4:	003f1e06 	br	10e840 <__muldf3+0x300>
  10ebc8:	3009883a 	mov	r4,r6
  10ebcc:	da000115 	stw	r8,4(sp)
  10ebd0:	d9800015 	stw	r6,0(sp)
  10ebd4:	010f8c40 	call	10f8c4 <__clzsi2>
  10ebd8:	11400544 	addi	r5,r2,21
  10ebdc:	29000748 	cmpgei	r4,r5,29
  10ebe0:	10c00804 	addi	r3,r2,32
  10ebe4:	d9800017 	ldw	r6,0(sp)
  10ebe8:	da000117 	ldw	r8,4(sp)
  10ebec:	203eed26 	beq	r4,zero,10e7a4 <__muldf3+0x264>
  10ebf0:	147ffe04 	addi	r17,r2,-8
  10ebf4:	3462983a 	sll	r17,r6,r17
  10ebf8:	0025883a 	mov	r18,zero
  10ebfc:	003ef006 	br	10e7c0 <__muldf3+0x280>
  10ec00:	010f8c40 	call	10f8c4 <__clzsi2>
  10ec04:	11400544 	addi	r5,r2,21
  10ec08:	29000748 	cmpgei	r4,r5,29
  10ec0c:	10c00804 	addi	r3,r2,32
  10ec10:	d9800017 	ldw	r6,0(sp)
  10ec14:	d9c00117 	ldw	r7,4(sp)
  10ec18:	203ec426 	beq	r4,zero,10e72c <__muldf3+0x1ec>
  10ec1c:	143ffe04 	addi	r16,r2,-8
  10ec20:	9420983a 	sll	r16,r18,r16
  10ec24:	002d883a 	mov	r22,zero
  10ec28:	003ec706 	br	10e748 <__muldf3+0x208>
  10ec2c:	00800044 	movi	r2,1
  10ec30:	10c5c83a 	sub	r2,r2,r3
  10ec34:	11000e48 	cmpgei	r4,r2,57
  10ec38:	203e991e 	bne	r4,zero,10e6a0 <__muldf3+0x160>
  10ec3c:	11000808 	cmpgei	r4,r2,32
  10ec40:	2000191e 	bne	r4,zero,10eca8 <__muldf3+0x768>
  10ec44:	4a410784 	addi	r9,r9,1054
  10ec48:	8246983a 	sll	r3,r16,r9
  10ec4c:	b088d83a 	srl	r4,r22,r2
  10ec50:	b26c983a 	sll	r22,r22,r9
  10ec54:	80a0d83a 	srl	r16,r16,r2
  10ec58:	1904b03a 	or	r2,r3,r4
  10ec5c:	b02cc03a 	cmpne	r22,r22,zero
  10ec60:	1584b03a 	or	r2,r2,r22
  10ec64:	10c001cc 	andi	r3,r2,7
  10ec68:	18000726 	beq	r3,zero,10ec88 <__muldf3+0x748>
  10ec6c:	10c003cc 	andi	r3,r2,15
  10ec70:	18c00120 	cmpeqi	r3,r3,4
  10ec74:	1800041e 	bne	r3,zero,10ec88 <__muldf3+0x748>
  10ec78:	10c00104 	addi	r3,r2,4
  10ec7c:	1885803a 	cmpltu	r2,r3,r2
  10ec80:	80a1883a 	add	r16,r16,r2
  10ec84:	1805883a 	mov	r2,r3
  10ec88:	80c0202c 	andhi	r3,r16,128
  10ec8c:	18001b26 	beq	r3,zero,10ecfc <__muldf3+0x7bc>
  10ec90:	00c00044 	movi	r3,1
  10ec94:	0021883a 	mov	r16,zero
  10ec98:	002d883a 	mov	r22,zero
  10ec9c:	003e8306 	br	10e6ac <__muldf3+0x16c>
  10eca0:	4013883a 	mov	r9,r8
  10eca4:	003fa806 	br	10eb48 <__muldf3+0x608>
  10eca8:	013ff844 	movi	r4,-31
  10ecac:	20c7c83a 	sub	r3,r4,r3
  10ecb0:	10800820 	cmpeqi	r2,r2,32
  10ecb4:	80c6d83a 	srl	r3,r16,r3
  10ecb8:	1000031e 	bne	r2,zero,10ecc8 <__muldf3+0x788>
  10ecbc:	4a410f84 	addi	r9,r9,1086
  10ecc0:	8260983a 	sll	r16,r16,r9
  10ecc4:	b42cb03a 	or	r22,r22,r16
  10ecc8:	b02cc03a 	cmpne	r22,r22,zero
  10eccc:	b0c4b03a 	or	r2,r22,r3
  10ecd0:	158001cc 	andi	r22,r2,7
  10ecd4:	b000051e 	bne	r22,zero,10ecec <__muldf3+0x7ac>
  10ecd8:	0021883a 	mov	r16,zero
  10ecdc:	1004d0fa 	srli	r2,r2,3
  10ece0:	0007883a 	mov	r3,zero
  10ece4:	15acb03a 	or	r22,r2,r22
  10ece8:	003e7006 	br	10e6ac <__muldf3+0x16c>
  10ecec:	10c003cc 	andi	r3,r2,15
  10ecf0:	18c00118 	cmpnei	r3,r3,4
  10ecf4:	0021883a 	mov	r16,zero
  10ecf8:	183fdf1e 	bne	r3,zero,10ec78 <__muldf3+0x738>
  10ecfc:	8006927a 	slli	r3,r16,9
  10ed00:	802c977a 	slli	r22,r16,29
  10ed04:	1820d33a 	srli	r16,r3,12
  10ed08:	003ff406 	br	10ecdc <__muldf3+0x79c>
  10ed0c:	00800434 	movhi	r2,16
  10ed10:	84000234 	orhi	r16,r16,8
  10ed14:	10bfffc4 	addi	r2,r2,-1
  10ed18:	80a0703a 	and	r16,r16,r2
  10ed1c:	003ec806 	br	10e840 <__muldf3+0x300>

0010ed20 <__subdf3>:
  10ed20:	00800434 	movhi	r2,16
  10ed24:	3812d53a 	srli	r9,r7,20
  10ed28:	10bfffc4 	addi	r2,r2,-1
  10ed2c:	defffb04 	addi	sp,sp,-20
  10ed30:	2890703a 	and	r8,r5,r2
  10ed34:	3884703a 	and	r2,r7,r2
  10ed38:	2806d7fa 	srli	r3,r5,31
  10ed3c:	dcc00315 	stw	r19,12(sp)
  10ed40:	dc400115 	stw	r17,4(sp)
  10ed44:	280ad53a 	srli	r5,r5,20
  10ed48:	401090fa 	slli	r8,r8,3
  10ed4c:	2026d77a 	srli	r19,r4,29
  10ed50:	100490fa 	slli	r2,r2,3
  10ed54:	3022d77a 	srli	r17,r6,29
  10ed58:	4a81ffcc 	andi	r10,r9,2047
  10ed5c:	dc800215 	stw	r18,8(sp)
  10ed60:	dc000015 	stw	r16,0(sp)
  10ed64:	dfc00415 	stw	ra,16(sp)
  10ed68:	5241ffe0 	cmpeqi	r9,r10,2047
  10ed6c:	1825883a 	mov	r18,r3
  10ed70:	2c01ffcc 	andi	r16,r5,2047
  10ed74:	18c03fcc 	andi	r3,r3,255
  10ed78:	9a18b03a 	or	r12,r19,r8
  10ed7c:	201a90fa 	slli	r13,r4,3
  10ed80:	380ed7fa 	srli	r7,r7,31
  10ed84:	8896b03a 	or	r11,r17,r2
  10ed88:	301c90fa 	slli	r14,r6,3
  10ed8c:	4800711e 	bne	r9,zero,10ef54 <__subdf3+0x234>
  10ed90:	39c0005c 	xori	r7,r7,1
  10ed94:	8291c83a 	sub	r8,r16,r10
  10ed98:	19c05a26 	beq	r3,r7,10ef04 <__subdf3+0x1e4>
  10ed9c:	0200720e 	bge	zero,r8,10ef68 <__subdf3+0x248>
  10eda0:	50008126 	beq	r10,zero,10efa8 <__subdf3+0x288>
  10eda4:	8081ffd8 	cmpnei	r2,r16,2047
  10eda8:	10011626 	beq	r2,zero,10f204 <__subdf3+0x4e4>
  10edac:	5ac02034 	orhi	r11,r11,128
  10edb0:	40800e48 	cmpgei	r2,r8,57
  10edb4:	1000fe1e 	bne	r2,zero,10f1b0 <__subdf3+0x490>
  10edb8:	40800808 	cmpgei	r2,r8,32
  10edbc:	10015e1e 	bne	r2,zero,10f338 <__subdf3+0x618>
  10edc0:	00800804 	movi	r2,32
  10edc4:	1205c83a 	sub	r2,r2,r8
  10edc8:	58a2983a 	sll	r17,r11,r2
  10edcc:	7206d83a 	srl	r3,r14,r8
  10edd0:	709c983a 	sll	r14,r14,r2
  10edd4:	5a04d83a 	srl	r2,r11,r8
  10edd8:	88e2b03a 	or	r17,r17,r3
  10eddc:	701cc03a 	cmpne	r14,r14,zero
  10ede0:	8ba2b03a 	or	r17,r17,r14
  10ede4:	6099c83a 	sub	r12,r12,r2
  10ede8:	6c63c83a 	sub	r17,r13,r17
  10edec:	6c49803a 	cmpltu	r4,r13,r17
  10edf0:	6109c83a 	sub	r4,r12,r4
  10edf4:	2080202c 	andhi	r2,r4,128
  10edf8:	10009f26 	beq	r2,zero,10f078 <__subdf3+0x358>
  10edfc:	04c02034 	movhi	r19,128
  10ee00:	9cffffc4 	addi	r19,r19,-1
  10ee04:	24e6703a 	and	r19,r4,r19
  10ee08:	9800e026 	beq	r19,zero,10f18c <__subdf3+0x46c>
  10ee0c:	9809883a 	mov	r4,r19
  10ee10:	010f8c40 	call	10f8c4 <__clzsi2>
  10ee14:	123ffe04 	addi	r8,r2,-8
  10ee18:	01000804 	movi	r4,32
  10ee1c:	2209c83a 	sub	r4,r4,r8
  10ee20:	8906d83a 	srl	r3,r17,r4
  10ee24:	9a08983a 	sll	r4,r19,r8
  10ee28:	8a22983a 	sll	r17,r17,r8
  10ee2c:	1908b03a 	or	r4,r3,r4
  10ee30:	4400cf16 	blt	r8,r16,10f170 <__subdf3+0x450>
  10ee34:	4411c83a 	sub	r8,r8,r16
  10ee38:	40800044 	addi	r2,r8,1
  10ee3c:	10c00808 	cmpgei	r3,r2,32
  10ee40:	1801251e 	bne	r3,zero,10f2d8 <__subdf3+0x5b8>
  10ee44:	00c00804 	movi	r3,32
  10ee48:	1887c83a 	sub	r3,r3,r2
  10ee4c:	888ad83a 	srl	r5,r17,r2
  10ee50:	88e2983a 	sll	r17,r17,r3
  10ee54:	20c6983a 	sll	r3,r4,r3
  10ee58:	2088d83a 	srl	r4,r4,r2
  10ee5c:	8822c03a 	cmpne	r17,r17,zero
  10ee60:	1946b03a 	or	r3,r3,r5
  10ee64:	1c62b03a 	or	r17,r3,r17
  10ee68:	0021883a 	mov	r16,zero
  10ee6c:	888001cc 	andi	r2,r17,7
  10ee70:	10000726 	beq	r2,zero,10ee90 <__subdf3+0x170>
  10ee74:	888003cc 	andi	r2,r17,15
  10ee78:	10800120 	cmpeqi	r2,r2,4
  10ee7c:	1000041e 	bne	r2,zero,10ee90 <__subdf3+0x170>
  10ee80:	88c00104 	addi	r3,r17,4
  10ee84:	1c63803a 	cmpltu	r17,r3,r17
  10ee88:	2449883a 	add	r4,r4,r17
  10ee8c:	1823883a 	mov	r17,r3
  10ee90:	2080202c 	andhi	r2,r4,128
  10ee94:	10007a26 	beq	r2,zero,10f080 <__subdf3+0x360>
  10ee98:	82000044 	addi	r8,r16,1
  10ee9c:	4081ffe0 	cmpeqi	r2,r8,2047
  10eea0:	4201ffcc 	andi	r8,r8,2047
  10eea4:	10008c1e 	bne	r2,zero,10f0d8 <__subdf3+0x3b8>
  10eea8:	00bfe034 	movhi	r2,65408
  10eeac:	10bfffc4 	addi	r2,r2,-1
  10eeb0:	2084703a 	and	r2,r4,r2
  10eeb4:	1008927a 	slli	r4,r2,9
  10eeb8:	8822d0fa 	srli	r17,r17,3
  10eebc:	100c977a 	slli	r6,r2,29
  10eec0:	2008d33a 	srli	r4,r4,12
  10eec4:	3444b03a 	or	r2,r6,r17
  10eec8:	4010953a 	slli	r8,r8,20
  10eecc:	00c00434 	movhi	r3,16
  10eed0:	94803fcc 	andi	r18,r18,255
  10eed4:	902497fa 	slli	r18,r18,31
  10eed8:	18ffffc4 	addi	r3,r3,-1
  10eedc:	20c6703a 	and	r3,r4,r3
  10eee0:	1a06b03a 	or	r3,r3,r8
  10eee4:	1c86b03a 	or	r3,r3,r18
  10eee8:	dfc00417 	ldw	ra,16(sp)
  10eeec:	dcc00317 	ldw	r19,12(sp)
  10eef0:	dc800217 	ldw	r18,8(sp)
  10eef4:	dc400117 	ldw	r17,4(sp)
  10eef8:	dc000017 	ldw	r16,0(sp)
  10eefc:	dec00504 	addi	sp,sp,20
  10ef00:	f800283a 	ret
  10ef04:	0200320e 	bge	zero,r8,10efd0 <__subdf3+0x2b0>
  10ef08:	50004c26 	beq	r10,zero,10f03c <__subdf3+0x31c>
  10ef0c:	8081ffd8 	cmpnei	r2,r16,2047
  10ef10:	1000bc26 	beq	r2,zero,10f204 <__subdf3+0x4e4>
  10ef14:	5ac02034 	orhi	r11,r11,128
  10ef18:	40800e48 	cmpgei	r2,r8,57
  10ef1c:	1000641e 	bne	r2,zero,10f0b0 <__subdf3+0x390>
  10ef20:	40800808 	cmpgei	r2,r8,32
  10ef24:	10011726 	beq	r2,zero,10f384 <__subdf3+0x664>
  10ef28:	447ff804 	addi	r17,r8,-32
  10ef2c:	40800820 	cmpeqi	r2,r8,32
  10ef30:	5c46d83a 	srl	r3,r11,r17
  10ef34:	1000041e 	bne	r2,zero,10ef48 <__subdf3+0x228>
  10ef38:	00801004 	movi	r2,64
  10ef3c:	1205c83a 	sub	r2,r2,r8
  10ef40:	5884983a 	sll	r2,r11,r2
  10ef44:	709cb03a 	or	r14,r14,r2
  10ef48:	7022c03a 	cmpne	r17,r14,zero
  10ef4c:	88e2b03a 	or	r17,r17,r3
  10ef50:	00005906 	br	10f0b8 <__subdf3+0x398>
  10ef54:	5b8ab03a 	or	r5,r11,r14
  10ef58:	823e0044 	addi	r8,r16,-2047
  10ef5c:	28001a1e 	bne	r5,zero,10efc8 <__subdf3+0x2a8>
  10ef60:	39c0005c 	xori	r7,r7,1
  10ef64:	19c01a26 	beq	r3,r7,10efd0 <__subdf3+0x2b0>
  10ef68:	4000291e 	bne	r8,zero,10f010 <__subdf3+0x2f0>
  10ef6c:	80800044 	addi	r2,r16,1
  10ef70:	1081ff8c 	andi	r2,r2,2046
  10ef74:	1000911e 	bne	r2,zero,10f1bc <__subdf3+0x49c>
  10ef78:	6346b03a 	or	r3,r12,r13
  10ef7c:	5b84b03a 	or	r2,r11,r14
  10ef80:	8001551e 	bne	r16,zero,10f4d8 <__subdf3+0x7b8>
  10ef84:	18011b26 	beq	r3,zero,10f3f4 <__subdf3+0x6d4>
  10ef88:	1001641e 	bne	r2,zero,10f51c <__subdf3+0x7fc>
  10ef8c:	00880034 	movhi	r2,8192
  10ef90:	6022977a 	slli	r17,r12,29
  10ef94:	10bfffc4 	addi	r2,r2,-1
  10ef98:	2088703a 	and	r4,r4,r2
  10ef9c:	2444b03a 	or	r2,r4,r17
  10efa0:	6026d0fa 	srli	r19,r12,3
  10efa4:	00003d06 	br	10f09c <__subdf3+0x37c>
  10efa8:	5b84b03a 	or	r2,r11,r14
  10efac:	10008e26 	beq	r2,zero,10f1e8 <__subdf3+0x4c8>
  10efb0:	40bfffc4 	addi	r2,r8,-1
  10efb4:	10011f26 	beq	r2,zero,10f434 <__subdf3+0x714>
  10efb8:	4201ffd8 	cmpnei	r8,r8,2047
  10efbc:	40012d26 	beq	r8,zero,10f474 <__subdf3+0x754>
  10efc0:	1011883a 	mov	r8,r2
  10efc4:	003f7a06 	br	10edb0 <__subdf3+0x90>
  10efc8:	39c03fcc 	andi	r7,r7,255
  10efcc:	19ffe61e 	bne	r3,r7,10ef68 <__subdf3+0x248>
  10efd0:	4000931e 	bne	r8,zero,10f220 <__subdf3+0x500>
  10efd4:	80c00044 	addi	r3,r16,1
  10efd8:	1881ff8c 	andi	r2,r3,2046
  10efdc:	10012c1e 	bne	r2,zero,10f490 <__subdf3+0x770>
  10efe0:	6344b03a 	or	r2,r12,r13
  10efe4:	8000f91e 	bne	r16,zero,10f3cc <__subdf3+0x6ac>
  10efe8:	10017326 	beq	r2,zero,10f5b8 <__subdf3+0x898>
  10efec:	5b84b03a 	or	r2,r11,r14
  10eff0:	1001781e 	bne	r2,zero,10f5d4 <__subdf3+0x8b4>
  10eff4:	6004977a 	slli	r2,r12,29
  10eff8:	00c80034 	movhi	r3,8192
  10effc:	18ffffc4 	addi	r3,r3,-1
  10f000:	20c6703a 	and	r3,r4,r3
  10f004:	10c4b03a 	or	r2,r2,r3
  10f008:	6026d0fa 	srli	r19,r12,3
  10f00c:	00002306 	br	10f09c <__subdf3+0x37c>
  10f010:	5411c83a 	sub	r8,r10,r16
  10f014:	3825883a 	mov	r18,r7
  10f018:	8000991e 	bne	r16,zero,10f280 <__subdf3+0x560>
  10f01c:	6344b03a 	or	r2,r12,r13
  10f020:	1000e326 	beq	r2,zero,10f3b0 <__subdf3+0x690>
  10f024:	40bfffc4 	addi	r2,r8,-1
  10f028:	10015d26 	beq	r2,zero,10f5a0 <__subdf3+0x880>
  10f02c:	4201ffd8 	cmpnei	r8,r8,2047
  10f030:	4000f926 	beq	r8,zero,10f418 <__subdf3+0x6f8>
  10f034:	1011883a 	mov	r8,r2
  10f038:	00009406 	br	10f28c <__subdf3+0x56c>
  10f03c:	5b84b03a 	or	r2,r11,r14
  10f040:	10010226 	beq	r2,zero,10f44c <__subdf3+0x72c>
  10f044:	40bfffc4 	addi	r2,r8,-1
  10f048:	10000426 	beq	r2,zero,10f05c <__subdf3+0x33c>
  10f04c:	4201ffd8 	cmpnei	r8,r8,2047
  10f050:	40014126 	beq	r8,zero,10f558 <__subdf3+0x838>
  10f054:	1011883a 	mov	r8,r2
  10f058:	003faf06 	br	10ef18 <__subdf3+0x1f8>
  10f05c:	6ba3883a 	add	r17,r13,r14
  10f060:	62c9883a 	add	r4,r12,r11
  10f064:	8b5b803a 	cmpltu	r13,r17,r13
  10f068:	2349883a 	add	r4,r4,r13
  10f06c:	2080202c 	andhi	r2,r4,128
  10f070:	1000a61e 	bne	r2,zero,10f30c <__subdf3+0x5ec>
  10f074:	04000044 	movi	r16,1
  10f078:	888001cc 	andi	r2,r17,7
  10f07c:	103f7d1e 	bne	r2,zero,10ee74 <__subdf3+0x154>
  10f080:	8822d0fa 	srli	r17,r17,3
  10f084:	2004977a 	slli	r2,r4,29
  10f088:	2026d0fa 	srli	r19,r4,3
  10f08c:	8011883a 	mov	r8,r16
  10f090:	8884b03a 	or	r2,r17,r2
  10f094:	40c1ffe0 	cmpeqi	r3,r8,2047
  10f098:	18002d1e 	bne	r3,zero,10f150 <__subdf3+0x430>
  10f09c:	01000434 	movhi	r4,16
  10f0a0:	213fffc4 	addi	r4,r4,-1
  10f0a4:	9908703a 	and	r4,r19,r4
  10f0a8:	4201ffcc 	andi	r8,r8,2047
  10f0ac:	003f8606 	br	10eec8 <__subdf3+0x1a8>
  10f0b0:	5ba2b03a 	or	r17,r11,r14
  10f0b4:	8822c03a 	cmpne	r17,r17,zero
  10f0b8:	8b63883a 	add	r17,r17,r13
  10f0bc:	8b49803a 	cmpltu	r4,r17,r13
  10f0c0:	2309883a 	add	r4,r4,r12
  10f0c4:	2080202c 	andhi	r2,r4,128
  10f0c8:	103feb26 	beq	r2,zero,10f078 <__subdf3+0x358>
  10f0cc:	84000044 	addi	r16,r16,1
  10f0d0:	8081ffe0 	cmpeqi	r2,r16,2047
  10f0d4:	10008e26 	beq	r2,zero,10f310 <__subdf3+0x5f0>
  10f0d8:	0201ffc4 	movi	r8,2047
  10f0dc:	0009883a 	mov	r4,zero
  10f0e0:	0005883a 	mov	r2,zero
  10f0e4:	003f7806 	br	10eec8 <__subdf3+0x1a8>
  10f0e8:	6010977a 	slli	r8,r12,29
  10f0ec:	6026d0fa 	srli	r19,r12,3
  10f0f0:	1000bb26 	beq	r2,zero,10f3e0 <__subdf3+0x6c0>
  10f0f4:	01480034 	movhi	r5,8192
  10f0f8:	297fffc4 	addi	r5,r5,-1
  10f0fc:	2146703a 	and	r3,r4,r5
  10f100:	9880022c 	andhi	r2,r19,8
  10f104:	1a06b03a 	or	r3,r3,r8
  10f108:	10000826 	beq	r2,zero,10f12c <__subdf3+0x40c>
  10f10c:	5808d0fa 	srli	r4,r11,3
  10f110:	2080022c 	andhi	r2,r4,8
  10f114:	1000051e 	bne	r2,zero,10f12c <__subdf3+0x40c>
  10f118:	5804977a 	slli	r2,r11,29
  10f11c:	3146703a 	and	r3,r6,r5
  10f120:	3825883a 	mov	r18,r7
  10f124:	1886b03a 	or	r3,r3,r2
  10f128:	2027883a 	mov	r19,r4
  10f12c:	1804d77a 	srli	r2,r3,29
  10f130:	980890fa 	slli	r4,r19,3
  10f134:	01480034 	movhi	r5,8192
  10f138:	297fffc4 	addi	r5,r5,-1
  10f13c:	1108b03a 	or	r4,r2,r4
  10f140:	2004977a 	slli	r2,r4,29
  10f144:	2026d0fa 	srli	r19,r4,3
  10f148:	1946703a 	and	r3,r3,r5
  10f14c:	10c4b03a 	or	r2,r2,r3
  10f150:	14c6b03a 	or	r3,r2,r19
  10f154:	18014926 	beq	r3,zero,10f67c <__subdf3+0x95c>
  10f158:	00c00434 	movhi	r3,16
  10f15c:	99000234 	orhi	r4,r19,8
  10f160:	18ffffc4 	addi	r3,r3,-1
  10f164:	20c8703a 	and	r4,r4,r3
  10f168:	0201ffc4 	movi	r8,2047
  10f16c:	003f5606 	br	10eec8 <__subdf3+0x1a8>
  10f170:	00bfe034 	movhi	r2,65408
  10f174:	10bfffc4 	addi	r2,r2,-1
  10f178:	2088703a 	and	r4,r4,r2
  10f17c:	888001cc 	andi	r2,r17,7
  10f180:	8221c83a 	sub	r16,r16,r8
  10f184:	103f3b1e 	bne	r2,zero,10ee74 <__subdf3+0x154>
  10f188:	003fbd06 	br	10f080 <__subdf3+0x360>
  10f18c:	8809883a 	mov	r4,r17
  10f190:	010f8c40 	call	10f8c4 <__clzsi2>
  10f194:	12000604 	addi	r8,r2,24
  10f198:	40c00808 	cmpgei	r3,r8,32
  10f19c:	183f1e26 	beq	r3,zero,10ee18 <__subdf3+0xf8>
  10f1a0:	113ffe04 	addi	r4,r2,-8
  10f1a4:	8908983a 	sll	r4,r17,r4
  10f1a8:	0023883a 	mov	r17,zero
  10f1ac:	003f2006 	br	10ee30 <__subdf3+0x110>
  10f1b0:	5ba2b03a 	or	r17,r11,r14
  10f1b4:	8822c03a 	cmpne	r17,r17,zero
  10f1b8:	003f0b06 	br	10ede8 <__subdf3+0xc8>
  10f1bc:	6ba3c83a 	sub	r17,r13,r14
  10f1c0:	62e7c83a 	sub	r19,r12,r11
  10f1c4:	6c49803a 	cmpltu	r4,r13,r17
  10f1c8:	9927c83a 	sub	r19,r19,r4
  10f1cc:	9880202c 	andhi	r2,r19,128
  10f1d0:	1000bb1e 	bne	r2,zero,10f4c0 <__subdf3+0x7a0>
  10f1d4:	8cc4b03a 	or	r2,r17,r19
  10f1d8:	103f0b1e 	bne	r2,zero,10ee08 <__subdf3+0xe8>
  10f1dc:	0027883a 	mov	r19,zero
  10f1e0:	0025883a 	mov	r18,zero
  10f1e4:	003fad06 	br	10f09c <__subdf3+0x37c>
  10f1e8:	00880034 	movhi	r2,8192
  10f1ec:	6022977a 	slli	r17,r12,29
  10f1f0:	10bfffc4 	addi	r2,r2,-1
  10f1f4:	2088703a 	and	r4,r4,r2
  10f1f8:	2444b03a 	or	r2,r4,r17
  10f1fc:	6026d0fa 	srli	r19,r12,3
  10f200:	003fa406 	br	10f094 <__subdf3+0x374>
  10f204:	00880034 	movhi	r2,8192
  10f208:	6022977a 	slli	r17,r12,29
  10f20c:	10bfffc4 	addi	r2,r2,-1
  10f210:	2088703a 	and	r4,r4,r2
  10f214:	2444b03a 	or	r2,r4,r17
  10f218:	6026d0fa 	srli	r19,r12,3
  10f21c:	003fcc06 	br	10f150 <__subdf3+0x430>
  10f220:	5411c83a 	sub	r8,r10,r16
  10f224:	80004f26 	beq	r16,zero,10f364 <__subdf3+0x644>
  10f228:	5081ffd8 	cmpnei	r2,r10,2047
  10f22c:	1000b426 	beq	r2,zero,10f500 <__subdf3+0x7e0>
  10f230:	63002034 	orhi	r12,r12,128
  10f234:	40800e48 	cmpgei	r2,r8,57
  10f238:	1000c41e 	bne	r2,zero,10f54c <__subdf3+0x82c>
  10f23c:	40800808 	cmpgei	r2,r8,32
  10f240:	1000f91e 	bne	r2,zero,10f628 <__subdf3+0x908>
  10f244:	00800804 	movi	r2,32
  10f248:	1205c83a 	sub	r2,r2,r8
  10f24c:	60a2983a 	sll	r17,r12,r2
  10f250:	6a06d83a 	srl	r3,r13,r8
  10f254:	6884983a 	sll	r2,r13,r2
  10f258:	6210d83a 	srl	r8,r12,r8
  10f25c:	88e2b03a 	or	r17,r17,r3
  10f260:	1004c03a 	cmpne	r2,r2,zero
  10f264:	88a2b03a 	or	r17,r17,r2
  10f268:	5a17883a 	add	r11,r11,r8
  10f26c:	8ba3883a 	add	r17,r17,r14
  10f270:	8b85803a 	cmpltu	r2,r17,r14
  10f274:	12c9883a 	add	r4,r2,r11
  10f278:	5021883a 	mov	r16,r10
  10f27c:	003f9106 	br	10f0c4 <__subdf3+0x3a4>
  10f280:	5081ffd8 	cmpnei	r2,r10,2047
  10f284:	10006426 	beq	r2,zero,10f418 <__subdf3+0x6f8>
  10f288:	63002034 	orhi	r12,r12,128
  10f28c:	40800e48 	cmpgei	r2,r8,57
  10f290:	1000751e 	bne	r2,zero,10f468 <__subdf3+0x748>
  10f294:	40800808 	cmpgei	r2,r8,32
  10f298:	1000b61e 	bne	r2,zero,10f574 <__subdf3+0x854>
  10f29c:	00800804 	movi	r2,32
  10f2a0:	1205c83a 	sub	r2,r2,r8
  10f2a4:	60a2983a 	sll	r17,r12,r2
  10f2a8:	6a06d83a 	srl	r3,r13,r8
  10f2ac:	6884983a 	sll	r2,r13,r2
  10f2b0:	6210d83a 	srl	r8,r12,r8
  10f2b4:	88e2b03a 	or	r17,r17,r3
  10f2b8:	1004c03a 	cmpne	r2,r2,zero
  10f2bc:	88a2b03a 	or	r17,r17,r2
  10f2c0:	5a17c83a 	sub	r11,r11,r8
  10f2c4:	7463c83a 	sub	r17,r14,r17
  10f2c8:	7445803a 	cmpltu	r2,r14,r17
  10f2cc:	5889c83a 	sub	r4,r11,r2
  10f2d0:	5021883a 	mov	r16,r10
  10f2d4:	003ec706 	br	10edf4 <__subdf3+0xd4>
  10f2d8:	423ff844 	addi	r8,r8,-31
  10f2dc:	10c00820 	cmpeqi	r3,r2,32
  10f2e0:	2210d83a 	srl	r8,r4,r8
  10f2e4:	1800041e 	bne	r3,zero,10f2f8 <__subdf3+0x5d8>
  10f2e8:	00c01004 	movi	r3,64
  10f2ec:	1885c83a 	sub	r2,r3,r2
  10f2f0:	2088983a 	sll	r4,r4,r2
  10f2f4:	8922b03a 	or	r17,r17,r4
  10f2f8:	8822c03a 	cmpne	r17,r17,zero
  10f2fc:	8a22b03a 	or	r17,r17,r8
  10f300:	0009883a 	mov	r4,zero
  10f304:	0021883a 	mov	r16,zero
  10f308:	003f5b06 	br	10f078 <__subdf3+0x358>
  10f30c:	04000084 	movi	r16,2
  10f310:	00bfe034 	movhi	r2,65408
  10f314:	10bfffc4 	addi	r2,r2,-1
  10f318:	2084703a 	and	r2,r4,r2
  10f31c:	8806d07a 	srli	r3,r17,1
  10f320:	100a97fa 	slli	r5,r2,31
  10f324:	8c40004c 	andi	r17,r17,1
  10f328:	1c62b03a 	or	r17,r3,r17
  10f32c:	1008d07a 	srli	r4,r2,1
  10f330:	2c62b03a 	or	r17,r5,r17
  10f334:	003ecd06 	br	10ee6c <__subdf3+0x14c>
  10f338:	447ff804 	addi	r17,r8,-32
  10f33c:	40800820 	cmpeqi	r2,r8,32
  10f340:	5c46d83a 	srl	r3,r11,r17
  10f344:	1000041e 	bne	r2,zero,10f358 <__subdf3+0x638>
  10f348:	00801004 	movi	r2,64
  10f34c:	1205c83a 	sub	r2,r2,r8
  10f350:	5884983a 	sll	r2,r11,r2
  10f354:	709cb03a 	or	r14,r14,r2
  10f358:	7022c03a 	cmpne	r17,r14,zero
  10f35c:	88e2b03a 	or	r17,r17,r3
  10f360:	003ea106 	br	10ede8 <__subdf3+0xc8>
  10f364:	6344b03a 	or	r2,r12,r13
  10f368:	1000a526 	beq	r2,zero,10f600 <__subdf3+0x8e0>
  10f36c:	40bfffc4 	addi	r2,r8,-1
  10f370:	1000bd26 	beq	r2,zero,10f668 <__subdf3+0x948>
  10f374:	4201ffd8 	cmpnei	r8,r8,2047
  10f378:	40006126 	beq	r8,zero,10f500 <__subdf3+0x7e0>
  10f37c:	1011883a 	mov	r8,r2
  10f380:	003fac06 	br	10f234 <__subdf3+0x514>
  10f384:	00800804 	movi	r2,32
  10f388:	1205c83a 	sub	r2,r2,r8
  10f38c:	58a2983a 	sll	r17,r11,r2
  10f390:	7206d83a 	srl	r3,r14,r8
  10f394:	709c983a 	sll	r14,r14,r2
  10f398:	5a04d83a 	srl	r2,r11,r8
  10f39c:	88e2b03a 	or	r17,r17,r3
  10f3a0:	701cc03a 	cmpne	r14,r14,zero
  10f3a4:	8ba2b03a 	or	r17,r17,r14
  10f3a8:	6099883a 	add	r12,r12,r2
  10f3ac:	003f4206 	br	10f0b8 <__subdf3+0x398>
  10f3b0:	5808977a 	slli	r4,r11,29
  10f3b4:	00c80034 	movhi	r3,8192
  10f3b8:	18ffffc4 	addi	r3,r3,-1
  10f3bc:	30cc703a 	and	r6,r6,r3
  10f3c0:	2184b03a 	or	r2,r4,r6
  10f3c4:	5826d0fa 	srli	r19,r11,3
  10f3c8:	003f3206 	br	10f094 <__subdf3+0x374>
  10f3cc:	10004c26 	beq	r2,zero,10f500 <__subdf3+0x7e0>
  10f3d0:	5b9cb03a 	or	r14,r11,r14
  10f3d4:	6010977a 	slli	r8,r12,29
  10f3d8:	6026d0fa 	srli	r19,r12,3
  10f3dc:	703f451e 	bne	r14,zero,10f0f4 <__subdf3+0x3d4>
  10f3e0:	00880034 	movhi	r2,8192
  10f3e4:	10bfffc4 	addi	r2,r2,-1
  10f3e8:	2084703a 	and	r2,r4,r2
  10f3ec:	1204b03a 	or	r2,r2,r8
  10f3f0:	003f5706 	br	10f150 <__subdf3+0x430>
  10f3f4:	103f7926 	beq	r2,zero,10f1dc <__subdf3+0x4bc>
  10f3f8:	5804977a 	slli	r2,r11,29
  10f3fc:	00c80034 	movhi	r3,8192
  10f400:	18ffffc4 	addi	r3,r3,-1
  10f404:	30c6703a 	and	r3,r6,r3
  10f408:	10c4b03a 	or	r2,r2,r3
  10f40c:	5826d0fa 	srli	r19,r11,3
  10f410:	3825883a 	mov	r18,r7
  10f414:	003f2106 	br	10f09c <__subdf3+0x37c>
  10f418:	5804977a 	slli	r2,r11,29
  10f41c:	00c80034 	movhi	r3,8192
  10f420:	18ffffc4 	addi	r3,r3,-1
  10f424:	30c6703a 	and	r3,r6,r3
  10f428:	10c4b03a 	or	r2,r2,r3
  10f42c:	5826d0fa 	srli	r19,r11,3
  10f430:	003f4706 	br	10f150 <__subdf3+0x430>
  10f434:	6ba3c83a 	sub	r17,r13,r14
  10f438:	62c9c83a 	sub	r4,r12,r11
  10f43c:	6c5b803a 	cmpltu	r13,r13,r17
  10f440:	2349c83a 	sub	r4,r4,r13
  10f444:	04000044 	movi	r16,1
  10f448:	003e6a06 	br	10edf4 <__subdf3+0xd4>
  10f44c:	6004977a 	slli	r2,r12,29
  10f450:	00c80034 	movhi	r3,8192
  10f454:	18ffffc4 	addi	r3,r3,-1
  10f458:	20c8703a 	and	r4,r4,r3
  10f45c:	1104b03a 	or	r2,r2,r4
  10f460:	6026d0fa 	srli	r19,r12,3
  10f464:	003f0b06 	br	10f094 <__subdf3+0x374>
  10f468:	6366b03a 	or	r19,r12,r13
  10f46c:	9822c03a 	cmpne	r17,r19,zero
  10f470:	003f9406 	br	10f2c4 <__subdf3+0x5a4>
  10f474:	6004977a 	slli	r2,r12,29
  10f478:	00c80034 	movhi	r3,8192
  10f47c:	18ffffc4 	addi	r3,r3,-1
  10f480:	20c8703a 	and	r4,r4,r3
  10f484:	1104b03a 	or	r2,r2,r4
  10f488:	6026d0fa 	srli	r19,r12,3
  10f48c:	003f3006 	br	10f150 <__subdf3+0x430>
  10f490:	1881ffe0 	cmpeqi	r2,r3,2047
  10f494:	103f101e 	bne	r2,zero,10f0d8 <__subdf3+0x3b8>
  10f498:	6b9d883a 	add	r14,r13,r14
  10f49c:	62c9883a 	add	r4,r12,r11
  10f4a0:	7345803a 	cmpltu	r2,r14,r13
  10f4a4:	2085883a 	add	r2,r4,r2
  10f4a8:	102297fa 	slli	r17,r2,31
  10f4ac:	701cd07a 	srli	r14,r14,1
  10f4b0:	1008d07a 	srli	r4,r2,1
  10f4b4:	1821883a 	mov	r16,r3
  10f4b8:	8ba2b03a 	or	r17,r17,r14
  10f4bc:	003eee06 	br	10f078 <__subdf3+0x358>
  10f4c0:	7363c83a 	sub	r17,r14,r13
  10f4c4:	5b09c83a 	sub	r4,r11,r12
  10f4c8:	7467803a 	cmpltu	r19,r14,r17
  10f4cc:	24e7c83a 	sub	r19,r4,r19
  10f4d0:	3825883a 	mov	r18,r7
  10f4d4:	003e4c06 	br	10ee08 <__subdf3+0xe8>
  10f4d8:	183f031e 	bne	r3,zero,10f0e8 <__subdf3+0x3c8>
  10f4dc:	10005d26 	beq	r2,zero,10f654 <__subdf3+0x934>
  10f4e0:	00880034 	movhi	r2,8192
  10f4e4:	5806977a 	slli	r3,r11,29
  10f4e8:	10bfffc4 	addi	r2,r2,-1
  10f4ec:	3084703a 	and	r2,r6,r2
  10f4f0:	10c4b03a 	or	r2,r2,r3
  10f4f4:	5826d0fa 	srli	r19,r11,3
  10f4f8:	3825883a 	mov	r18,r7
  10f4fc:	003f1406 	br	10f150 <__subdf3+0x430>
  10f500:	00880034 	movhi	r2,8192
  10f504:	5806977a 	slli	r3,r11,29
  10f508:	10bfffc4 	addi	r2,r2,-1
  10f50c:	3084703a 	and	r2,r6,r2
  10f510:	10c4b03a 	or	r2,r2,r3
  10f514:	5826d0fa 	srli	r19,r11,3
  10f518:	003f0d06 	br	10f150 <__subdf3+0x430>
  10f51c:	6ba3c83a 	sub	r17,r13,r14
  10f520:	62c5c83a 	sub	r2,r12,r11
  10f524:	6c49803a 	cmpltu	r4,r13,r17
  10f528:	1109c83a 	sub	r4,r2,r4
  10f52c:	2080202c 	andhi	r2,r4,128
  10f530:	10003a26 	beq	r2,zero,10f61c <__subdf3+0x8fc>
  10f534:	7363c83a 	sub	r17,r14,r13
  10f538:	5b09c83a 	sub	r4,r11,r12
  10f53c:	745d803a 	cmpltu	r14,r14,r17
  10f540:	2389c83a 	sub	r4,r4,r14
  10f544:	3825883a 	mov	r18,r7
  10f548:	003e4806 	br	10ee6c <__subdf3+0x14c>
  10f54c:	6362b03a 	or	r17,r12,r13
  10f550:	8822c03a 	cmpne	r17,r17,zero
  10f554:	003f4506 	br	10f26c <__subdf3+0x54c>
  10f558:	6004977a 	slli	r2,r12,29
  10f55c:	00c80034 	movhi	r3,8192
  10f560:	18ffffc4 	addi	r3,r3,-1
  10f564:	20c6703a 	and	r3,r4,r3
  10f568:	10c4b03a 	or	r2,r2,r3
  10f56c:	6026d0fa 	srli	r19,r12,3
  10f570:	003ef706 	br	10f150 <__subdf3+0x430>
  10f574:	40bff804 	addi	r2,r8,-32
  10f578:	40c00820 	cmpeqi	r3,r8,32
  10f57c:	6084d83a 	srl	r2,r12,r2
  10f580:	1800041e 	bne	r3,zero,10f594 <__subdf3+0x874>
  10f584:	04c01004 	movi	r19,64
  10f588:	9a11c83a 	sub	r8,r19,r8
  10f58c:	6226983a 	sll	r19,r12,r8
  10f590:	6cdab03a 	or	r13,r13,r19
  10f594:	6822c03a 	cmpne	r17,r13,zero
  10f598:	88a2b03a 	or	r17,r17,r2
  10f59c:	003f4906 	br	10f2c4 <__subdf3+0x5a4>
  10f5a0:	7363c83a 	sub	r17,r14,r13
  10f5a4:	5b09c83a 	sub	r4,r11,r12
  10f5a8:	745d803a 	cmpltu	r14,r14,r17
  10f5ac:	2389c83a 	sub	r4,r4,r14
  10f5b0:	04000044 	movi	r16,1
  10f5b4:	003e0f06 	br	10edf4 <__subdf3+0xd4>
  10f5b8:	00880034 	movhi	r2,8192
  10f5bc:	5806977a 	slli	r3,r11,29
  10f5c0:	10bfffc4 	addi	r2,r2,-1
  10f5c4:	3084703a 	and	r2,r6,r2
  10f5c8:	10c4b03a 	or	r2,r2,r3
  10f5cc:	5826d0fa 	srli	r19,r11,3
  10f5d0:	003eb206 	br	10f09c <__subdf3+0x37c>
  10f5d4:	6ba3883a 	add	r17,r13,r14
  10f5d8:	62c9883a 	add	r4,r12,r11
  10f5dc:	8b5b803a 	cmpltu	r13,r17,r13
  10f5e0:	2349883a 	add	r4,r4,r13
  10f5e4:	2080202c 	andhi	r2,r4,128
  10f5e8:	103ea326 	beq	r2,zero,10f078 <__subdf3+0x358>
  10f5ec:	00bfe034 	movhi	r2,65408
  10f5f0:	10bfffc4 	addi	r2,r2,-1
  10f5f4:	2088703a 	and	r4,r4,r2
  10f5f8:	04000044 	movi	r16,1
  10f5fc:	003e9e06 	br	10f078 <__subdf3+0x358>
  10f600:	00880034 	movhi	r2,8192
  10f604:	5806977a 	slli	r3,r11,29
  10f608:	10bfffc4 	addi	r2,r2,-1
  10f60c:	3084703a 	and	r2,r6,r2
  10f610:	10c4b03a 	or	r2,r2,r3
  10f614:	5826d0fa 	srli	r19,r11,3
  10f618:	003e9e06 	br	10f094 <__subdf3+0x374>
  10f61c:	8904b03a 	or	r2,r17,r4
  10f620:	103eee26 	beq	r2,zero,10f1dc <__subdf3+0x4bc>
  10f624:	003e9406 	br	10f078 <__subdf3+0x358>
  10f628:	40bff804 	addi	r2,r8,-32
  10f62c:	40c00820 	cmpeqi	r3,r8,32
  10f630:	6084d83a 	srl	r2,r12,r2
  10f634:	1800041e 	bne	r3,zero,10f648 <__subdf3+0x928>
  10f638:	04c01004 	movi	r19,64
  10f63c:	9a11c83a 	sub	r8,r19,r8
  10f640:	6226983a 	sll	r19,r12,r8
  10f644:	6cdab03a 	or	r13,r13,r19
  10f648:	6822c03a 	cmpne	r17,r13,zero
  10f64c:	88a2b03a 	or	r17,r17,r2
  10f650:	003f0606 	br	10f26c <__subdf3+0x54c>
  10f654:	04c00434 	movhi	r19,16
  10f658:	9cffffc4 	addi	r19,r19,-1
  10f65c:	0025883a 	mov	r18,zero
  10f660:	00bfffc4 	movi	r2,-1
  10f664:	003ebc06 	br	10f158 <__subdf3+0x438>
  10f668:	6ba3883a 	add	r17,r13,r14
  10f66c:	62c9883a 	add	r4,r12,r11
  10f670:	8b9d803a 	cmpltu	r14,r17,r14
  10f674:	2389883a 	add	r4,r4,r14
  10f678:	003e7c06 	br	10f06c <__subdf3+0x34c>
  10f67c:	0005883a 	mov	r2,zero
  10f680:	0201ffc4 	movi	r8,2047
  10f684:	0009883a 	mov	r4,zero
  10f688:	003e0f06 	br	10eec8 <__subdf3+0x1a8>

0010f68c <__unorddf2>:
  10f68c:	2806d53a 	srli	r3,r5,20
  10f690:	3810d53a 	srli	r8,r7,20
  10f694:	00800434 	movhi	r2,16
  10f698:	18c1ffcc 	andi	r3,r3,2047
  10f69c:	10bfffc4 	addi	r2,r2,-1
  10f6a0:	18c1ffd8 	cmpnei	r3,r3,2047
  10f6a4:	288a703a 	and	r5,r5,r2
  10f6a8:	388e703a 	and	r7,r7,r2
  10f6ac:	4201ffcc 	andi	r8,r8,2047
  10f6b0:	18000426 	beq	r3,zero,10f6c4 <__unorddf2+0x38>
  10f6b4:	4201ffd8 	cmpnei	r8,r8,2047
  10f6b8:	40000626 	beq	r8,zero,10f6d4 <__unorddf2+0x48>
  10f6bc:	0005883a 	mov	r2,zero
  10f6c0:	f800283a 	ret
  10f6c4:	214ab03a 	or	r5,r4,r5
  10f6c8:	283ffa26 	beq	r5,zero,10f6b4 <__unorddf2+0x28>
  10f6cc:	00800044 	movi	r2,1
  10f6d0:	f800283a 	ret
  10f6d4:	398eb03a 	or	r7,r7,r6
  10f6d8:	3804c03a 	cmpne	r2,r7,zero
  10f6dc:	f800283a 	ret

0010f6e0 <__fixdfsi>:
  10f6e0:	280cd53a 	srli	r6,r5,20
  10f6e4:	00c00434 	movhi	r3,16
  10f6e8:	18ffffc4 	addi	r3,r3,-1
  10f6ec:	3181ffcc 	andi	r6,r6,2047
  10f6f0:	31c0ffd0 	cmplti	r7,r6,1023
  10f6f4:	28c6703a 	and	r3,r5,r3
  10f6f8:	280ad7fa 	srli	r5,r5,31
  10f6fc:	3800061e 	bne	r7,zero,10f718 <__fixdfsi+0x38>
  10f700:	30810790 	cmplti	r2,r6,1054
  10f704:	1000061e 	bne	r2,zero,10f720 <__fixdfsi+0x40>
  10f708:	00a00034 	movhi	r2,32768
  10f70c:	10bfffc4 	addi	r2,r2,-1
  10f710:	2885883a 	add	r2,r5,r2
  10f714:	f800283a 	ret
  10f718:	0005883a 	mov	r2,zero
  10f71c:	f800283a 	ret
  10f720:	00810cc4 	movi	r2,1075
  10f724:	118fc83a 	sub	r7,r2,r6
  10f728:	38800808 	cmpgei	r2,r7,32
  10f72c:	18c00434 	orhi	r3,r3,16
  10f730:	1000071e 	bne	r2,zero,10f750 <__fixdfsi+0x70>
  10f734:	30befb44 	addi	r2,r6,-1043
  10f738:	1886983a 	sll	r3,r3,r2
  10f73c:	21c4d83a 	srl	r2,r4,r7
  10f740:	1884b03a 	or	r2,r3,r2
  10f744:	283ff526 	beq	r5,zero,10f71c <__fixdfsi+0x3c>
  10f748:	0085c83a 	sub	r2,zero,r2
  10f74c:	f800283a 	ret
  10f750:	008104c4 	movi	r2,1043
  10f754:	1185c83a 	sub	r2,r2,r6
  10f758:	1884d83a 	srl	r2,r3,r2
  10f75c:	003ff906 	br	10f744 <__fixdfsi+0x64>

0010f760 <__floatsidf>:
  10f760:	defffd04 	addi	sp,sp,-12
  10f764:	dfc00215 	stw	ra,8(sp)
  10f768:	dc400115 	stw	r17,4(sp)
  10f76c:	dc000015 	stw	r16,0(sp)
  10f770:	20001326 	beq	r4,zero,10f7c0 <__floatsidf+0x60>
  10f774:	2021883a 	mov	r16,r4
  10f778:	2022d7fa 	srli	r17,r4,31
  10f77c:	20002116 	blt	r4,zero,10f804 <__floatsidf+0xa4>
  10f780:	8009883a 	mov	r4,r16
  10f784:	010f8c40 	call	10f8c4 <__clzsi2>
  10f788:	01010784 	movi	r4,1054
  10f78c:	2089c83a 	sub	r4,r4,r2
  10f790:	10c002c8 	cmpgei	r3,r2,11
  10f794:	2101ffcc 	andi	r4,r4,2047
  10f798:	18001c1e 	bne	r3,zero,10f80c <__floatsidf+0xac>
  10f79c:	018002c4 	movi	r6,11
  10f7a0:	308dc83a 	sub	r6,r6,r2
  10f7a4:	818ad83a 	srl	r5,r16,r6
  10f7a8:	00c00434 	movhi	r3,16
  10f7ac:	10800544 	addi	r2,r2,21
  10f7b0:	18ffffc4 	addi	r3,r3,-1
  10f7b4:	8084983a 	sll	r2,r16,r2
  10f7b8:	28ca703a 	and	r5,r5,r3
  10f7bc:	00000406 	br	10f7d0 <__floatsidf+0x70>
  10f7c0:	0023883a 	mov	r17,zero
  10f7c4:	0009883a 	mov	r4,zero
  10f7c8:	000b883a 	mov	r5,zero
  10f7cc:	0005883a 	mov	r2,zero
  10f7d0:	2008953a 	slli	r4,r4,20
  10f7d4:	8c403fcc 	andi	r17,r17,255
  10f7d8:	01800434 	movhi	r6,16
  10f7dc:	31bfffc4 	addi	r6,r6,-1
  10f7e0:	880697fa 	slli	r3,r17,31
  10f7e4:	298a703a 	and	r5,r5,r6
  10f7e8:	290ab03a 	or	r5,r5,r4
  10f7ec:	28c6b03a 	or	r3,r5,r3
  10f7f0:	dfc00217 	ldw	ra,8(sp)
  10f7f4:	dc400117 	ldw	r17,4(sp)
  10f7f8:	dc000017 	ldw	r16,0(sp)
  10f7fc:	dec00304 	addi	sp,sp,12
  10f800:	f800283a 	ret
  10f804:	0121c83a 	sub	r16,zero,r4
  10f808:	003fdd06 	br	10f780 <__floatsidf+0x20>
  10f80c:	10bffd44 	addi	r2,r2,-11
  10f810:	808a983a 	sll	r5,r16,r2
  10f814:	00800434 	movhi	r2,16
  10f818:	10bfffc4 	addi	r2,r2,-1
  10f81c:	288a703a 	and	r5,r5,r2
  10f820:	0005883a 	mov	r2,zero
  10f824:	003fea06 	br	10f7d0 <__floatsidf+0x70>

0010f828 <__floatunsidf>:
  10f828:	defffe04 	addi	sp,sp,-8
  10f82c:	dc000015 	stw	r16,0(sp)
  10f830:	dfc00115 	stw	ra,4(sp)
  10f834:	2021883a 	mov	r16,r4
  10f838:	20000f26 	beq	r4,zero,10f878 <__floatunsidf+0x50>
  10f83c:	010f8c40 	call	10f8c4 <__clzsi2>
  10f840:	01010784 	movi	r4,1054
  10f844:	2089c83a 	sub	r4,r4,r2
  10f848:	10c002c8 	cmpgei	r3,r2,11
  10f84c:	2101ffcc 	andi	r4,r4,2047
  10f850:	1800151e 	bne	r3,zero,10f8a8 <__floatunsidf+0x80>
  10f854:	00c002c4 	movi	r3,11
  10f858:	1887c83a 	sub	r3,r3,r2
  10f85c:	80c6d83a 	srl	r3,r16,r3
  10f860:	01400434 	movhi	r5,16
  10f864:	10800544 	addi	r2,r2,21
  10f868:	297fffc4 	addi	r5,r5,-1
  10f86c:	80a0983a 	sll	r16,r16,r2
  10f870:	1944703a 	and	r2,r3,r5
  10f874:	00000206 	br	10f880 <__floatunsidf+0x58>
  10f878:	0009883a 	mov	r4,zero
  10f87c:	0005883a 	mov	r2,zero
  10f880:	2008953a 	slli	r4,r4,20
  10f884:	00c00434 	movhi	r3,16
  10f888:	18ffffc4 	addi	r3,r3,-1
  10f88c:	10c6703a 	and	r3,r2,r3
  10f890:	1906b03a 	or	r3,r3,r4
  10f894:	8005883a 	mov	r2,r16
  10f898:	dfc00117 	ldw	ra,4(sp)
  10f89c:	dc000017 	ldw	r16,0(sp)
  10f8a0:	dec00204 	addi	sp,sp,8
  10f8a4:	f800283a 	ret
  10f8a8:	10bffd44 	addi	r2,r2,-11
  10f8ac:	8084983a 	sll	r2,r16,r2
  10f8b0:	00c00434 	movhi	r3,16
  10f8b4:	18ffffc4 	addi	r3,r3,-1
  10f8b8:	10c4703a 	and	r2,r2,r3
  10f8bc:	0021883a 	mov	r16,zero
  10f8c0:	003fef06 	br	10f880 <__floatunsidf+0x58>

0010f8c4 <__clzsi2>:
  10f8c4:	00bfffd4 	movui	r2,65535
  10f8c8:	11000b36 	bltu	r2,r4,10f8f8 <__clzsi2+0x34>
  10f8cc:	20804030 	cmpltui	r2,r4,256
  10f8d0:	1000071e 	bne	r2,zero,10f8f0 <__clzsi2+0x2c>
  10f8d4:	2008d23a 	srli	r4,r4,8
  10f8d8:	01400604 	movi	r5,24
  10f8dc:	00c00474 	movhi	r3,17
  10f8e0:	20c7883a 	add	r3,r4,r3
  10f8e4:	188dce43 	ldbu	r2,14137(r3)
  10f8e8:	2885c83a 	sub	r2,r5,r2
  10f8ec:	f800283a 	ret
  10f8f0:	01400804 	movi	r5,32
  10f8f4:	003ff906 	br	10f8dc <__clzsi2+0x18>
  10f8f8:	00804034 	movhi	r2,256
  10f8fc:	20800336 	bltu	r4,r2,10f90c <__clzsi2+0x48>
  10f900:	2008d63a 	srli	r4,r4,24
  10f904:	01400204 	movi	r5,8
  10f908:	003ff406 	br	10f8dc <__clzsi2+0x18>
  10f90c:	2008d43a 	srli	r4,r4,16
  10f910:	01400404 	movi	r5,16
  10f914:	003ff106 	br	10f8dc <__clzsi2+0x18>

0010f918 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  10f918:	defffe04 	addi	sp,sp,-8
  10f91c:	dfc00115 	stw	ra,4(sp)
  10f920:	df000015 	stw	fp,0(sp)
  10f924:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  10f928:	d0a01017 	ldw	r2,-32704(gp)
  10f92c:	10000326 	beq	r2,zero,10f93c <alt_get_errno+0x24>
  10f930:	d0a01017 	ldw	r2,-32704(gp)
  10f934:	103ee83a 	callr	r2
  10f938:	00000106 	br	10f940 <alt_get_errno+0x28>
  10f93c:	d0a02204 	addi	r2,gp,-32632
}
  10f940:	e037883a 	mov	sp,fp
  10f944:	dfc00117 	ldw	ra,4(sp)
  10f948:	df000017 	ldw	fp,0(sp)
  10f94c:	dec00204 	addi	sp,sp,8
  10f950:	f800283a 	ret

0010f954 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  10f954:	defffb04 	addi	sp,sp,-20
  10f958:	dfc00415 	stw	ra,16(sp)
  10f95c:	df000315 	stw	fp,12(sp)
  10f960:	df000304 	addi	fp,sp,12
  10f964:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  10f968:	e0bffd17 	ldw	r2,-12(fp)
  10f96c:	10000916 	blt	r2,zero,10f994 <close+0x40>
  10f970:	e0fffd17 	ldw	r3,-12(fp)
  10f974:	1805883a 	mov	r2,r3
  10f978:	1085883a 	add	r2,r2,r2
  10f97c:	10c5883a 	add	r2,r2,r3
  10f980:	100490ba 	slli	r2,r2,2
  10f984:	00c00074 	movhi	r3,1
  10f988:	18c27c04 	addi	r3,r3,2544
  10f98c:	10c5883a 	add	r2,r2,r3
  10f990:	00000106 	br	10f998 <close+0x44>
  10f994:	0005883a 	mov	r2,zero
  10f998:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
  10f99c:	e0bfff17 	ldw	r2,-4(fp)
  10f9a0:	10001926 	beq	r2,zero,10fa08 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  10f9a4:	e0bfff17 	ldw	r2,-4(fp)
  10f9a8:	10800017 	ldw	r2,0(r2)
  10f9ac:	10800417 	ldw	r2,16(r2)
  10f9b0:	10000626 	beq	r2,zero,10f9cc <close+0x78>
  10f9b4:	e0bfff17 	ldw	r2,-4(fp)
  10f9b8:	10800017 	ldw	r2,0(r2)
  10f9bc:	10800417 	ldw	r2,16(r2)
  10f9c0:	e13fff17 	ldw	r4,-4(fp)
  10f9c4:	103ee83a 	callr	r2
  10f9c8:	00000106 	br	10f9d0 <close+0x7c>
  10f9cc:	0005883a 	mov	r2,zero
  10f9d0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  10f9d4:	e13ffd17 	ldw	r4,-12(fp)
  10f9d8:	010ff540 	call	10ff54 <alt_release_fd>
    if (rval < 0)
  10f9dc:	e0bffe17 	ldw	r2,-8(fp)
  10f9e0:	1000070e 	bge	r2,zero,10fa00 <close+0xac>
    {
      ALT_ERRNO = -rval;
  10f9e4:	010f9180 	call	10f918 <alt_get_errno>
  10f9e8:	1007883a 	mov	r3,r2
  10f9ec:	e0bffe17 	ldw	r2,-8(fp)
  10f9f0:	0085c83a 	sub	r2,zero,r2
  10f9f4:	18800015 	stw	r2,0(r3)
      return -1;
  10f9f8:	00bfffc4 	movi	r2,-1
  10f9fc:	00000706 	br	10fa1c <close+0xc8>
    }
    return 0;
  10fa00:	0005883a 	mov	r2,zero
  10fa04:	00000506 	br	10fa1c <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  10fa08:	010f9180 	call	10f918 <alt_get_errno>
  10fa0c:	1007883a 	mov	r3,r2
  10fa10:	00801444 	movi	r2,81
  10fa14:	18800015 	stw	r2,0(r3)
    return -1;
  10fa18:	00bfffc4 	movi	r2,-1
  }
}
  10fa1c:	e037883a 	mov	sp,fp
  10fa20:	dfc00117 	ldw	ra,4(sp)
  10fa24:	df000017 	ldw	fp,0(sp)
  10fa28:	dec00204 	addi	sp,sp,8
  10fa2c:	f800283a 	ret

0010fa30 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  10fa30:	defffc04 	addi	sp,sp,-16
  10fa34:	df000315 	stw	fp,12(sp)
  10fa38:	df000304 	addi	fp,sp,12
  10fa3c:	e13fff15 	stw	r4,-4(fp)
  10fa40:	e17ffe15 	stw	r5,-8(fp)
  10fa44:	e1bffd15 	stw	r6,-12(fp)
  return len;
  10fa48:	e0bffd17 	ldw	r2,-12(fp)
}
  10fa4c:	e037883a 	mov	sp,fp
  10fa50:	df000017 	ldw	fp,0(sp)
  10fa54:	dec00104 	addi	sp,sp,4
  10fa58:	f800283a 	ret

0010fa5c <alt_get_errno>:
{
  10fa5c:	defffe04 	addi	sp,sp,-8
  10fa60:	dfc00115 	stw	ra,4(sp)
  10fa64:	df000015 	stw	fp,0(sp)
  10fa68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  10fa6c:	d0a01017 	ldw	r2,-32704(gp)
  10fa70:	10000326 	beq	r2,zero,10fa80 <alt_get_errno+0x24>
  10fa74:	d0a01017 	ldw	r2,-32704(gp)
  10fa78:	103ee83a 	callr	r2
  10fa7c:	00000106 	br	10fa84 <alt_get_errno+0x28>
  10fa80:	d0a02204 	addi	r2,gp,-32632
}
  10fa84:	e037883a 	mov	sp,fp
  10fa88:	dfc00117 	ldw	ra,4(sp)
  10fa8c:	df000017 	ldw	fp,0(sp)
  10fa90:	dec00204 	addi	sp,sp,8
  10fa94:	f800283a 	ret

0010fa98 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  10fa98:	defffb04 	addi	sp,sp,-20
  10fa9c:	dfc00415 	stw	ra,16(sp)
  10faa0:	df000315 	stw	fp,12(sp)
  10faa4:	df000304 	addi	fp,sp,12
  10faa8:	e13ffe15 	stw	r4,-8(fp)
  10faac:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  10fab0:	e0bffe17 	ldw	r2,-8(fp)
  10fab4:	10000916 	blt	r2,zero,10fadc <fstat+0x44>
  10fab8:	e0fffe17 	ldw	r3,-8(fp)
  10fabc:	1805883a 	mov	r2,r3
  10fac0:	1085883a 	add	r2,r2,r2
  10fac4:	10c5883a 	add	r2,r2,r3
  10fac8:	100490ba 	slli	r2,r2,2
  10facc:	00c00074 	movhi	r3,1
  10fad0:	18c27c04 	addi	r3,r3,2544
  10fad4:	10c5883a 	add	r2,r2,r3
  10fad8:	00000106 	br	10fae0 <fstat+0x48>
  10fadc:	0005883a 	mov	r2,zero
  10fae0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  10fae4:	e0bfff17 	ldw	r2,-4(fp)
  10fae8:	10001026 	beq	r2,zero,10fb2c <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  10faec:	e0bfff17 	ldw	r2,-4(fp)
  10faf0:	10800017 	ldw	r2,0(r2)
  10faf4:	10800817 	ldw	r2,32(r2)
  10faf8:	10000726 	beq	r2,zero,10fb18 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
  10fafc:	e0bfff17 	ldw	r2,-4(fp)
  10fb00:	10800017 	ldw	r2,0(r2)
  10fb04:	10800817 	ldw	r2,32(r2)
  10fb08:	e17ffd17 	ldw	r5,-12(fp)
  10fb0c:	e13fff17 	ldw	r4,-4(fp)
  10fb10:	103ee83a 	callr	r2
  10fb14:	00000a06 	br	10fb40 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  10fb18:	e0bffd17 	ldw	r2,-12(fp)
  10fb1c:	00c80004 	movi	r3,8192
  10fb20:	10c00115 	stw	r3,4(r2)
      return 0;
  10fb24:	0005883a 	mov	r2,zero
  10fb28:	00000506 	br	10fb40 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  10fb2c:	010fa5c0 	call	10fa5c <alt_get_errno>
  10fb30:	1007883a 	mov	r3,r2
  10fb34:	00801444 	movi	r2,81
  10fb38:	18800015 	stw	r2,0(r3)
    return -1;
  10fb3c:	00bfffc4 	movi	r2,-1
  }
}
  10fb40:	e037883a 	mov	sp,fp
  10fb44:	dfc00117 	ldw	ra,4(sp)
  10fb48:	df000017 	ldw	fp,0(sp)
  10fb4c:	dec00204 	addi	sp,sp,8
  10fb50:	f800283a 	ret

0010fb54 <alt_get_errno>:
{
  10fb54:	defffe04 	addi	sp,sp,-8
  10fb58:	dfc00115 	stw	ra,4(sp)
  10fb5c:	df000015 	stw	fp,0(sp)
  10fb60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  10fb64:	d0a01017 	ldw	r2,-32704(gp)
  10fb68:	10000326 	beq	r2,zero,10fb78 <alt_get_errno+0x24>
  10fb6c:	d0a01017 	ldw	r2,-32704(gp)
  10fb70:	103ee83a 	callr	r2
  10fb74:	00000106 	br	10fb7c <alt_get_errno+0x28>
  10fb78:	d0a02204 	addi	r2,gp,-32632
}
  10fb7c:	e037883a 	mov	sp,fp
  10fb80:	dfc00117 	ldw	ra,4(sp)
  10fb84:	df000017 	ldw	fp,0(sp)
  10fb88:	dec00204 	addi	sp,sp,8
  10fb8c:	f800283a 	ret

0010fb90 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  10fb90:	deffea04 	addi	sp,sp,-88
  10fb94:	dfc01515 	stw	ra,84(sp)
  10fb98:	df001415 	stw	fp,80(sp)
  10fb9c:	df001404 	addi	fp,sp,80
  10fba0:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  10fba4:	e0bfec17 	ldw	r2,-80(fp)
  10fba8:	10000916 	blt	r2,zero,10fbd0 <isatty+0x40>
  10fbac:	e0ffec17 	ldw	r3,-80(fp)
  10fbb0:	1805883a 	mov	r2,r3
  10fbb4:	1085883a 	add	r2,r2,r2
  10fbb8:	10c5883a 	add	r2,r2,r3
  10fbbc:	100490ba 	slli	r2,r2,2
  10fbc0:	00c00074 	movhi	r3,1
  10fbc4:	18c27c04 	addi	r3,r3,2544
  10fbc8:	10c5883a 	add	r2,r2,r3
  10fbcc:	00000106 	br	10fbd4 <isatty+0x44>
  10fbd0:	0005883a 	mov	r2,zero
  10fbd4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  10fbd8:	e0bfff17 	ldw	r2,-4(fp)
  10fbdc:	10000e26 	beq	r2,zero,10fc18 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  10fbe0:	e0bfff17 	ldw	r2,-4(fp)
  10fbe4:	10800017 	ldw	r2,0(r2)
  10fbe8:	10800817 	ldw	r2,32(r2)
  10fbec:	1000021e 	bne	r2,zero,10fbf8 <isatty+0x68>
    {
      return 1;
  10fbf0:	00800044 	movi	r2,1
  10fbf4:	00000d06 	br	10fc2c <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  10fbf8:	e0bfed04 	addi	r2,fp,-76
  10fbfc:	100b883a 	mov	r5,r2
  10fc00:	e13fec17 	ldw	r4,-80(fp)
  10fc04:	010fa980 	call	10fa98 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  10fc08:	e0bfee17 	ldw	r2,-72(fp)
  10fc0c:	10880020 	cmpeqi	r2,r2,8192
  10fc10:	10803fcc 	andi	r2,r2,255
  10fc14:	00000506 	br	10fc2c <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  10fc18:	010fb540 	call	10fb54 <alt_get_errno>
  10fc1c:	1007883a 	mov	r3,r2
  10fc20:	00801444 	movi	r2,81
  10fc24:	18800015 	stw	r2,0(r3)
    return 0;
  10fc28:	0005883a 	mov	r2,zero
  }
}
  10fc2c:	e037883a 	mov	sp,fp
  10fc30:	dfc00117 	ldw	ra,4(sp)
  10fc34:	df000017 	ldw	fp,0(sp)
  10fc38:	dec00204 	addi	sp,sp,8
  10fc3c:	f800283a 	ret

0010fc40 <alt_get_errno>:
{
  10fc40:	defffe04 	addi	sp,sp,-8
  10fc44:	dfc00115 	stw	ra,4(sp)
  10fc48:	df000015 	stw	fp,0(sp)
  10fc4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  10fc50:	d0a01017 	ldw	r2,-32704(gp)
  10fc54:	10000326 	beq	r2,zero,10fc64 <alt_get_errno+0x24>
  10fc58:	d0a01017 	ldw	r2,-32704(gp)
  10fc5c:	103ee83a 	callr	r2
  10fc60:	00000106 	br	10fc68 <alt_get_errno+0x28>
  10fc64:	d0a02204 	addi	r2,gp,-32632
}
  10fc68:	e037883a 	mov	sp,fp
  10fc6c:	dfc00117 	ldw	ra,4(sp)
  10fc70:	df000017 	ldw	fp,0(sp)
  10fc74:	dec00204 	addi	sp,sp,8
  10fc78:	f800283a 	ret

0010fc7c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  10fc7c:	defff904 	addi	sp,sp,-28
  10fc80:	dfc00615 	stw	ra,24(sp)
  10fc84:	df000515 	stw	fp,20(sp)
  10fc88:	df000504 	addi	fp,sp,20
  10fc8c:	e13ffd15 	stw	r4,-12(fp)
  10fc90:	e17ffc15 	stw	r5,-16(fp)
  10fc94:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  10fc98:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  10fc9c:	e0bffd17 	ldw	r2,-12(fp)
  10fca0:	10000916 	blt	r2,zero,10fcc8 <lseek+0x4c>
  10fca4:	e0fffd17 	ldw	r3,-12(fp)
  10fca8:	1805883a 	mov	r2,r3
  10fcac:	1085883a 	add	r2,r2,r2
  10fcb0:	10c5883a 	add	r2,r2,r3
  10fcb4:	100490ba 	slli	r2,r2,2
  10fcb8:	00c00074 	movhi	r3,1
  10fcbc:	18c27c04 	addi	r3,r3,2544
  10fcc0:	10c5883a 	add	r2,r2,r3
  10fcc4:	00000106 	br	10fccc <lseek+0x50>
  10fcc8:	0005883a 	mov	r2,zero
  10fccc:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
  10fcd0:	e0bffe17 	ldw	r2,-8(fp)
  10fcd4:	10001026 	beq	r2,zero,10fd18 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  10fcd8:	e0bffe17 	ldw	r2,-8(fp)
  10fcdc:	10800017 	ldw	r2,0(r2)
  10fce0:	10800717 	ldw	r2,28(r2)
  10fce4:	10000926 	beq	r2,zero,10fd0c <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  10fce8:	e0bffe17 	ldw	r2,-8(fp)
  10fcec:	10800017 	ldw	r2,0(r2)
  10fcf0:	10800717 	ldw	r2,28(r2)
  10fcf4:	e1bffb17 	ldw	r6,-20(fp)
  10fcf8:	e17ffc17 	ldw	r5,-16(fp)
  10fcfc:	e13ffe17 	ldw	r4,-8(fp)
  10fd00:	103ee83a 	callr	r2
  10fd04:	e0bfff15 	stw	r2,-4(fp)
  10fd08:	00000506 	br	10fd20 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  10fd0c:	00bfde84 	movi	r2,-134
  10fd10:	e0bfff15 	stw	r2,-4(fp)
  10fd14:	00000206 	br	10fd20 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
  10fd18:	00bfebc4 	movi	r2,-81
  10fd1c:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
  10fd20:	e0bfff17 	ldw	r2,-4(fp)
  10fd24:	1000070e 	bge	r2,zero,10fd44 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
  10fd28:	010fc400 	call	10fc40 <alt_get_errno>
  10fd2c:	1007883a 	mov	r3,r2
  10fd30:	e0bfff17 	ldw	r2,-4(fp)
  10fd34:	0085c83a 	sub	r2,zero,r2
  10fd38:	18800015 	stw	r2,0(r3)
    rc = -1;
  10fd3c:	00bfffc4 	movi	r2,-1
  10fd40:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
  10fd44:	e0bfff17 	ldw	r2,-4(fp)
}
  10fd48:	e037883a 	mov	sp,fp
  10fd4c:	dfc00117 	ldw	ra,4(sp)
  10fd50:	df000017 	ldw	fp,0(sp)
  10fd54:	dec00204 	addi	sp,sp,8
  10fd58:	f800283a 	ret

0010fd5c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  10fd5c:	defffd04 	addi	sp,sp,-12
  10fd60:	dfc00215 	stw	ra,8(sp)
  10fd64:	df000115 	stw	fp,4(sp)
  10fd68:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  10fd6c:	0009883a 	mov	r4,zero
  10fd70:	01103bc0 	call	1103bc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  10fd74:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  10fd78:	01103f40 	call	1103f4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  10fd7c:	01800474 	movhi	r6,17
  10fd80:	318e1204 	addi	r6,r6,14408
  10fd84:	01400474 	movhi	r5,17
  10fd88:	294e1204 	addi	r5,r5,14408
  10fd8c:	01000474 	movhi	r4,17
  10fd90:	210e1204 	addi	r4,r4,14408
  10fd94:	01128680 	call	112868 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  10fd98:	d0a02417 	ldw	r2,-32624(gp)
  10fd9c:	d0e02517 	ldw	r3,-32620(gp)
  10fda0:	d1202617 	ldw	r4,-32616(gp)
  10fda4:	200d883a 	mov	r6,r4
  10fda8:	180b883a 	mov	r5,r3
  10fdac:	1009883a 	mov	r4,r2
  10fdb0:	01007800 	call	100780 <main>
  10fdb4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  10fdb8:	01000044 	movi	r4,1
  10fdbc:	010f9540 	call	10f954 <close>
  exit (result);
  10fdc0:	e13fff17 	ldw	r4,-4(fp)
  10fdc4:	0112e680 	call	112e68 <exit>

0010fdc8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  10fdc8:	defffe04 	addi	sp,sp,-8
  10fdcc:	df000115 	stw	fp,4(sp)
  10fdd0:	df000104 	addi	fp,sp,4
  10fdd4:	e13fff15 	stw	r4,-4(fp)
}
  10fdd8:	0001883a 	nop
  10fddc:	e037883a 	mov	sp,fp
  10fde0:	df000017 	ldw	fp,0(sp)
  10fde4:	dec00104 	addi	sp,sp,4
  10fde8:	f800283a 	ret

0010fdec <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  10fdec:	defffe04 	addi	sp,sp,-8
  10fdf0:	df000115 	stw	fp,4(sp)
  10fdf4:	df000104 	addi	fp,sp,4
  10fdf8:	e13fff15 	stw	r4,-4(fp)
}
  10fdfc:	0001883a 	nop
  10fe00:	e037883a 	mov	sp,fp
  10fe04:	df000017 	ldw	fp,0(sp)
  10fe08:	dec00104 	addi	sp,sp,4
  10fe0c:	f800283a 	ret

0010fe10 <alt_get_errno>:
{
  10fe10:	defffe04 	addi	sp,sp,-8
  10fe14:	dfc00115 	stw	ra,4(sp)
  10fe18:	df000015 	stw	fp,0(sp)
  10fe1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  10fe20:	d0a01017 	ldw	r2,-32704(gp)
  10fe24:	10000326 	beq	r2,zero,10fe34 <alt_get_errno+0x24>
  10fe28:	d0a01017 	ldw	r2,-32704(gp)
  10fe2c:	103ee83a 	callr	r2
  10fe30:	00000106 	br	10fe38 <alt_get_errno+0x28>
  10fe34:	d0a02204 	addi	r2,gp,-32632
}
  10fe38:	e037883a 	mov	sp,fp
  10fe3c:	dfc00117 	ldw	ra,4(sp)
  10fe40:	df000017 	ldw	fp,0(sp)
  10fe44:	dec00204 	addi	sp,sp,8
  10fe48:	f800283a 	ret

0010fe4c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  10fe4c:	defff904 	addi	sp,sp,-28
  10fe50:	dfc00615 	stw	ra,24(sp)
  10fe54:	df000515 	stw	fp,20(sp)
  10fe58:	df000504 	addi	fp,sp,20
  10fe5c:	e13ffd15 	stw	r4,-12(fp)
  10fe60:	e17ffc15 	stw	r5,-16(fp)
  10fe64:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  10fe68:	e0bffd17 	ldw	r2,-12(fp)
  10fe6c:	10000916 	blt	r2,zero,10fe94 <read+0x48>
  10fe70:	e0fffd17 	ldw	r3,-12(fp)
  10fe74:	1805883a 	mov	r2,r3
  10fe78:	1085883a 	add	r2,r2,r2
  10fe7c:	10c5883a 	add	r2,r2,r3
  10fe80:	100490ba 	slli	r2,r2,2
  10fe84:	00c00074 	movhi	r3,1
  10fe88:	18c27c04 	addi	r3,r3,2544
  10fe8c:	10c5883a 	add	r2,r2,r3
  10fe90:	00000106 	br	10fe98 <read+0x4c>
  10fe94:	0005883a 	mov	r2,zero
  10fe98:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  10fe9c:	e0bfff17 	ldw	r2,-4(fp)
  10fea0:	10002226 	beq	r2,zero,10ff2c <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  10fea4:	e0bfff17 	ldw	r2,-4(fp)
  10fea8:	10800217 	ldw	r2,8(r2)
  10feac:	108000cc 	andi	r2,r2,3
  10feb0:	10800060 	cmpeqi	r2,r2,1
  10feb4:	1000181e 	bne	r2,zero,10ff18 <read+0xcc>
        (fd->dev->read))
  10feb8:	e0bfff17 	ldw	r2,-4(fp)
  10febc:	10800017 	ldw	r2,0(r2)
  10fec0:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  10fec4:	10001426 	beq	r2,zero,10ff18 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  10fec8:	e0bfff17 	ldw	r2,-4(fp)
  10fecc:	10800017 	ldw	r2,0(r2)
  10fed0:	10800517 	ldw	r2,20(r2)
  10fed4:	e0fffb17 	ldw	r3,-20(fp)
  10fed8:	180d883a 	mov	r6,r3
  10fedc:	e17ffc17 	ldw	r5,-16(fp)
  10fee0:	e13fff17 	ldw	r4,-4(fp)
  10fee4:	103ee83a 	callr	r2
  10fee8:	e0bffe15 	stw	r2,-8(fp)
  10feec:	e0bffe17 	ldw	r2,-8(fp)
  10fef0:	1000070e 	bge	r2,zero,10ff10 <read+0xc4>
        {
          ALT_ERRNO = -rval;
  10fef4:	010fe100 	call	10fe10 <alt_get_errno>
  10fef8:	1007883a 	mov	r3,r2
  10fefc:	e0bffe17 	ldw	r2,-8(fp)
  10ff00:	0085c83a 	sub	r2,zero,r2
  10ff04:	18800015 	stw	r2,0(r3)
          return -1;
  10ff08:	00bfffc4 	movi	r2,-1
  10ff0c:	00000c06 	br	10ff40 <read+0xf4>
        }
        return rval;
  10ff10:	e0bffe17 	ldw	r2,-8(fp)
  10ff14:	00000a06 	br	10ff40 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
  10ff18:	010fe100 	call	10fe10 <alt_get_errno>
  10ff1c:	1007883a 	mov	r3,r2
  10ff20:	00800344 	movi	r2,13
  10ff24:	18800015 	stw	r2,0(r3)
  10ff28:	00000406 	br	10ff3c <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  10ff2c:	010fe100 	call	10fe10 <alt_get_errno>
  10ff30:	1007883a 	mov	r3,r2
  10ff34:	00801444 	movi	r2,81
  10ff38:	18800015 	stw	r2,0(r3)
  }
  return -1;
  10ff3c:	00bfffc4 	movi	r2,-1
}
  10ff40:	e037883a 	mov	sp,fp
  10ff44:	dfc00117 	ldw	ra,4(sp)
  10ff48:	df000017 	ldw	fp,0(sp)
  10ff4c:	dec00204 	addi	sp,sp,8
  10ff50:	f800283a 	ret

0010ff54 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  10ff54:	defffe04 	addi	sp,sp,-8
  10ff58:	df000115 	stw	fp,4(sp)
  10ff5c:	df000104 	addi	fp,sp,4
  10ff60:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  10ff64:	e0bfff17 	ldw	r2,-4(fp)
  10ff68:	108000d0 	cmplti	r2,r2,3
  10ff6c:	1000101e 	bne	r2,zero,10ffb0 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
  10ff70:	e0ffff17 	ldw	r3,-4(fp)
  10ff74:	1805883a 	mov	r2,r3
  10ff78:	1085883a 	add	r2,r2,r2
  10ff7c:	10c5883a 	add	r2,r2,r3
  10ff80:	100490ba 	slli	r2,r2,2
  10ff84:	00c00074 	movhi	r3,1
  10ff88:	10c7883a 	add	r3,r2,r3
  10ff8c:	18027e15 	stw	zero,2552(r3)
    alt_fd_list[fd].dev      = 0;
  10ff90:	e0ffff17 	ldw	r3,-4(fp)
  10ff94:	1805883a 	mov	r2,r3
  10ff98:	1085883a 	add	r2,r2,r2
  10ff9c:	10c5883a 	add	r2,r2,r3
  10ffa0:	100490ba 	slli	r2,r2,2
  10ffa4:	00c00074 	movhi	r3,1
  10ffa8:	10c7883a 	add	r3,r2,r3
  10ffac:	18027c15 	stw	zero,2544(r3)
  }
}
  10ffb0:	0001883a 	nop
  10ffb4:	e037883a 	mov	sp,fp
  10ffb8:	df000017 	ldw	fp,0(sp)
  10ffbc:	dec00104 	addi	sp,sp,4
  10ffc0:	f800283a 	ret

0010ffc4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  10ffc4:	defff904 	addi	sp,sp,-28
  10ffc8:	df000615 	stw	fp,24(sp)
  10ffcc:	df000604 	addi	fp,sp,24
  10ffd0:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
  10ffd4:	0005303a 	rdctl	r2,status
  10ffd8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  10ffdc:	e0fffd17 	ldw	r3,-12(fp)
  10ffe0:	00bfff84 	movi	r2,-2
  10ffe4:	1884703a 	and	r2,r3,r2
  10ffe8:	1001703a 	wrctl	status,r2
  return context;
  10ffec:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  10fff0:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  10fff4:	d0a01117 	ldw	r2,-32700(gp)
  10fff8:	10c000c4 	addi	r3,r2,3
  10fffc:	00bfff04 	movi	r2,-4
  110000:	1884703a 	and	r2,r3,r2
  110004:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  110008:	d0e01117 	ldw	r3,-32700(gp)
  11000c:	e0bffa17 	ldw	r2,-24(fp)
  110010:	1887883a 	add	r3,r3,r2
  110014:	008000b4 	movhi	r2,2
  110018:	10a00004 	addi	r2,r2,-32768
  11001c:	10c0062e 	bgeu	r2,r3,110038 <sbrk+0x74>
  110020:	e0bfff17 	ldw	r2,-4(fp)
  110024:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  110028:	e0bffc17 	ldw	r2,-16(fp)
  11002c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  110030:	00bfffc4 	movi	r2,-1
  110034:	00000b06 	br	110064 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  110038:	d0a01117 	ldw	r2,-32700(gp)
  11003c:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
  110040:	d0e01117 	ldw	r3,-32700(gp)
  110044:	e0bffa17 	ldw	r2,-24(fp)
  110048:	1885883a 	add	r2,r3,r2
  11004c:	d0a01115 	stw	r2,-32700(gp)
  110050:	e0bfff17 	ldw	r2,-4(fp)
  110054:	e0bffb15 	stw	r2,-20(fp)
  110058:	e0bffb17 	ldw	r2,-20(fp)
  11005c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  110060:	e0bffe17 	ldw	r2,-8(fp)
} 
  110064:	e037883a 	mov	sp,fp
  110068:	df000017 	ldw	fp,0(sp)
  11006c:	dec00104 	addi	sp,sp,4
  110070:	f800283a 	ret

00110074 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  110074:	defffa04 	addi	sp,sp,-24
  110078:	df000515 	stw	fp,20(sp)
  11007c:	df000504 	addi	fp,sp,20
  110080:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
  110084:	0005303a 	rdctl	r2,status
  110088:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11008c:	e0fffc17 	ldw	r3,-16(fp)
  110090:	00bfff84 	movi	r2,-2
  110094:	1884703a 	and	r2,r3,r2
  110098:	1001703a 	wrctl	status,r2
  return context;
  11009c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  1100a0:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
  1100a4:	e0bffb17 	ldw	r2,-20(fp)
  1100a8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  1100ac:	e0bffd17 	ldw	r2,-12(fp)
  1100b0:	10800017 	ldw	r2,0(r2)
  1100b4:	e0fffd17 	ldw	r3,-12(fp)
  1100b8:	18c00117 	ldw	r3,4(r3)
  1100bc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  1100c0:	e0bffd17 	ldw	r2,-12(fp)
  1100c4:	10800117 	ldw	r2,4(r2)
  1100c8:	e0fffd17 	ldw	r3,-12(fp)
  1100cc:	18c00017 	ldw	r3,0(r3)
  1100d0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  1100d4:	e0bffd17 	ldw	r2,-12(fp)
  1100d8:	e0fffd17 	ldw	r3,-12(fp)
  1100dc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  1100e0:	e0bffd17 	ldw	r2,-12(fp)
  1100e4:	e0fffd17 	ldw	r3,-12(fp)
  1100e8:	10c00015 	stw	r3,0(r2)
  1100ec:	e0bfff17 	ldw	r2,-4(fp)
  1100f0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
  1100f4:	e0bffe17 	ldw	r2,-8(fp)
  1100f8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  1100fc:	0001883a 	nop
  110100:	e037883a 	mov	sp,fp
  110104:	df000017 	ldw	fp,0(sp)
  110108:	dec00104 	addi	sp,sp,4
  11010c:	f800283a 	ret

00110110 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  110110:	defffb04 	addi	sp,sp,-20
  110114:	dfc00415 	stw	ra,16(sp)
  110118:	df000315 	stw	fp,12(sp)
  11011c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  110120:	d0a01217 	ldw	r2,-32696(gp)
  110124:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  110128:	d0a02817 	ldw	r2,-32608(gp)
  11012c:	10800044 	addi	r2,r2,1
  110130:	d0a02815 	stw	r2,-32608(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  110134:	00002e06 	br	1101f0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  110138:	e0bfff17 	ldw	r2,-4(fp)
  11013c:	10800017 	ldw	r2,0(r2)
  110140:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  110144:	e0bfff17 	ldw	r2,-4(fp)
  110148:	10800403 	ldbu	r2,16(r2)
  11014c:	10803fcc 	andi	r2,r2,255
  110150:	10000426 	beq	r2,zero,110164 <alt_tick+0x54>
  110154:	d0a02817 	ldw	r2,-32608(gp)
  110158:	1000021e 	bne	r2,zero,110164 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  11015c:	e0bfff17 	ldw	r2,-4(fp)
  110160:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  110164:	e0bfff17 	ldw	r2,-4(fp)
  110168:	10800217 	ldw	r2,8(r2)
  11016c:	d0e02817 	ldw	r3,-32608(gp)
  110170:	18801d36 	bltu	r3,r2,1101e8 <alt_tick+0xd8>
  110174:	e0bfff17 	ldw	r2,-4(fp)
  110178:	10800403 	ldbu	r2,16(r2)
  11017c:	10803fcc 	andi	r2,r2,255
  110180:	1000191e 	bne	r2,zero,1101e8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  110184:	e0bfff17 	ldw	r2,-4(fp)
  110188:	10800317 	ldw	r2,12(r2)
  11018c:	e0ffff17 	ldw	r3,-4(fp)
  110190:	18c00517 	ldw	r3,20(r3)
  110194:	1809883a 	mov	r4,r3
  110198:	103ee83a 	callr	r2
  11019c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  1101a0:	e0bffd17 	ldw	r2,-12(fp)
  1101a4:	1000031e 	bne	r2,zero,1101b4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  1101a8:	e13fff17 	ldw	r4,-4(fp)
  1101ac:	01100740 	call	110074 <alt_alarm_stop>
  1101b0:	00000d06 	br	1101e8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  1101b4:	e0bfff17 	ldw	r2,-4(fp)
  1101b8:	10c00217 	ldw	r3,8(r2)
  1101bc:	e0bffd17 	ldw	r2,-12(fp)
  1101c0:	1887883a 	add	r3,r3,r2
  1101c4:	e0bfff17 	ldw	r2,-4(fp)
  1101c8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  1101cc:	e0bfff17 	ldw	r2,-4(fp)
  1101d0:	10c00217 	ldw	r3,8(r2)
  1101d4:	d0a02817 	ldw	r2,-32608(gp)
  1101d8:	1880032e 	bgeu	r3,r2,1101e8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  1101dc:	e0bfff17 	ldw	r2,-4(fp)
  1101e0:	00c00044 	movi	r3,1
  1101e4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  1101e8:	e0bffe17 	ldw	r2,-8(fp)
  1101ec:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
  1101f0:	e0ffff17 	ldw	r3,-4(fp)
  1101f4:	d0a01204 	addi	r2,gp,-32696
  1101f8:	18bfcf1e 	bne	r3,r2,110138 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  1101fc:	0001883a 	nop
}
  110200:	0001883a 	nop
  110204:	e037883a 	mov	sp,fp
  110208:	dfc00117 	ldw	ra,4(sp)
  11020c:	df000017 	ldw	fp,0(sp)
  110210:	dec00204 	addi	sp,sp,8
  110214:	f800283a 	ret

00110218 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  110218:	defffd04 	addi	sp,sp,-12
  11021c:	dfc00215 	stw	ra,8(sp)
  110220:	df000115 	stw	fp,4(sp)
  110224:	df000104 	addi	fp,sp,4
  110228:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  11022c:	e13fff17 	ldw	r4,-4(fp)
  110230:	01121e40 	call	1121e4 <alt_busy_sleep>
}
  110234:	e037883a 	mov	sp,fp
  110238:	dfc00117 	ldw	ra,4(sp)
  11023c:	df000017 	ldw	fp,0(sp)
  110240:	dec00204 	addi	sp,sp,8
  110244:	f800283a 	ret

00110248 <alt_get_errno>:
{
  110248:	defffe04 	addi	sp,sp,-8
  11024c:	dfc00115 	stw	ra,4(sp)
  110250:	df000015 	stw	fp,0(sp)
  110254:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  110258:	d0a01017 	ldw	r2,-32704(gp)
  11025c:	10000326 	beq	r2,zero,11026c <alt_get_errno+0x24>
  110260:	d0a01017 	ldw	r2,-32704(gp)
  110264:	103ee83a 	callr	r2
  110268:	00000106 	br	110270 <alt_get_errno+0x28>
  11026c:	d0a02204 	addi	r2,gp,-32632
}
  110270:	e037883a 	mov	sp,fp
  110274:	dfc00117 	ldw	ra,4(sp)
  110278:	df000017 	ldw	fp,0(sp)
  11027c:	dec00204 	addi	sp,sp,8
  110280:	f800283a 	ret

00110284 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  110284:	defff904 	addi	sp,sp,-28
  110288:	dfc00615 	stw	ra,24(sp)
  11028c:	df000515 	stw	fp,20(sp)
  110290:	df000504 	addi	fp,sp,20
  110294:	e13ffd15 	stw	r4,-12(fp)
  110298:	e17ffc15 	stw	r5,-16(fp)
  11029c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  1102a0:	e0bffd17 	ldw	r2,-12(fp)
  1102a4:	10000916 	blt	r2,zero,1102cc <write+0x48>
  1102a8:	e0fffd17 	ldw	r3,-12(fp)
  1102ac:	1805883a 	mov	r2,r3
  1102b0:	1085883a 	add	r2,r2,r2
  1102b4:	10c5883a 	add	r2,r2,r3
  1102b8:	100490ba 	slli	r2,r2,2
  1102bc:	00c00074 	movhi	r3,1
  1102c0:	18c27c04 	addi	r3,r3,2544
  1102c4:	10c5883a 	add	r2,r2,r3
  1102c8:	00000106 	br	1102d0 <write+0x4c>
  1102cc:	0005883a 	mov	r2,zero
  1102d0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
  1102d4:	e0bfff17 	ldw	r2,-4(fp)
  1102d8:	10002126 	beq	r2,zero,110360 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  1102dc:	e0bfff17 	ldw	r2,-4(fp)
  1102e0:	10800217 	ldw	r2,8(r2)
  1102e4:	108000cc 	andi	r2,r2,3
  1102e8:	10001826 	beq	r2,zero,11034c <write+0xc8>
  1102ec:	e0bfff17 	ldw	r2,-4(fp)
  1102f0:	10800017 	ldw	r2,0(r2)
  1102f4:	10800617 	ldw	r2,24(r2)
  1102f8:	10001426 	beq	r2,zero,11034c <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  1102fc:	e0bfff17 	ldw	r2,-4(fp)
  110300:	10800017 	ldw	r2,0(r2)
  110304:	10800617 	ldw	r2,24(r2)
  110308:	e0fffb17 	ldw	r3,-20(fp)
  11030c:	180d883a 	mov	r6,r3
  110310:	e17ffc17 	ldw	r5,-16(fp)
  110314:	e13fff17 	ldw	r4,-4(fp)
  110318:	103ee83a 	callr	r2
  11031c:	e0bffe15 	stw	r2,-8(fp)
  110320:	e0bffe17 	ldw	r2,-8(fp)
  110324:	1000070e 	bge	r2,zero,110344 <write+0xc0>
      {
        ALT_ERRNO = -rval;
  110328:	01102480 	call	110248 <alt_get_errno>
  11032c:	1007883a 	mov	r3,r2
  110330:	e0bffe17 	ldw	r2,-8(fp)
  110334:	0085c83a 	sub	r2,zero,r2
  110338:	18800015 	stw	r2,0(r3)
        return -1;
  11033c:	00bfffc4 	movi	r2,-1
  110340:	00000c06 	br	110374 <write+0xf0>
      }
      return rval;
  110344:	e0bffe17 	ldw	r2,-8(fp)
  110348:	00000a06 	br	110374 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
  11034c:	01102480 	call	110248 <alt_get_errno>
  110350:	1007883a 	mov	r3,r2
  110354:	00800344 	movi	r2,13
  110358:	18800015 	stw	r2,0(r3)
  11035c:	00000406 	br	110370 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  110360:	01102480 	call	110248 <alt_get_errno>
  110364:	1007883a 	mov	r3,r2
  110368:	00801444 	movi	r2,81
  11036c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  110370:	00bfffc4 	movi	r2,-1
}
  110374:	e037883a 	mov	sp,fp
  110378:	dfc00117 	ldw	ra,4(sp)
  11037c:	df000017 	ldw	fp,0(sp)
  110380:	dec00204 	addi	sp,sp,8
  110384:	f800283a 	ret

00110388 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  110388:	defffd04 	addi	sp,sp,-12
  11038c:	dfc00215 	stw	ra,8(sp)
  110390:	df000115 	stw	fp,4(sp)
  110394:	df000104 	addi	fp,sp,4
  110398:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  11039c:	d1600d04 	addi	r5,gp,-32716
  1103a0:	e13fff17 	ldw	r4,-4(fp)
  1103a4:	01123a00 	call	1123a0 <alt_dev_llist_insert>
}
  1103a8:	e037883a 	mov	sp,fp
  1103ac:	dfc00117 	ldw	ra,4(sp)
  1103b0:	df000017 	ldw	fp,0(sp)
  1103b4:	dec00204 	addi	sp,sp,8
  1103b8:	f800283a 	ret

001103bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  1103bc:	defffd04 	addi	sp,sp,-12
  1103c0:	dfc00215 	stw	ra,8(sp)
  1103c4:	df000115 	stw	fp,4(sp)
  1103c8:	df000104 	addi	fp,sp,4
  1103cc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  1103d0:	0112b5c0 	call	112b5c <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  1103d4:	00800044 	movi	r2,1
  1103d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  1103dc:	0001883a 	nop
  1103e0:	e037883a 	mov	sp,fp
  1103e4:	dfc00117 	ldw	ra,4(sp)
  1103e8:	df000017 	ldw	fp,0(sp)
  1103ec:	dec00204 	addi	sp,sp,8
  1103f0:	f800283a 	ret

001103f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  1103f4:	defffe04 	addi	sp,sp,-8
  1103f8:	dfc00115 	stw	ra,4(sp)
  1103fc:	df000015 	stw	fp,0(sp)
  110400:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  110404:	01c0fa04 	movi	r7,1000
  110408:	01800084 	movi	r6,2
  11040c:	000b883a 	mov	r5,zero
  110410:	01002004 	movi	r4,128
  110414:	011113c0 	call	11113c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  110418:	01800044 	movi	r6,1
  11041c:	000b883a 	mov	r5,zero
  110420:	01000074 	movhi	r4,1
  110424:	2102e604 	addi	r4,r4,2968
  110428:	01105c80 	call	1105c8 <altera_avalon_jtag_uart_init>
  11042c:	01000074 	movhi	r4,1
  110430:	2102dc04 	addi	r4,r4,2928
  110434:	01103880 	call	110388 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
  110438:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  11043c:	0001883a 	nop
    ALTERA_ONCHIP_FLASH_INIT ( ONCHIP_FLASH_0, onchip_flash_0);
  110440:	01000074 	movhi	r4,1
  110444:	2106f404 	addi	r4,r4,7120
  110448:	0111a600 	call	111a60 <altera_onchip_flash_init>
}
  11044c:	0001883a 	nop
  110450:	e037883a 	mov	sp,fp
  110454:	dfc00117 	ldw	ra,4(sp)
  110458:	df000017 	ldw	fp,0(sp)
  11045c:	dec00204 	addi	sp,sp,8
  110460:	f800283a 	ret

00110464 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  110464:	defffa04 	addi	sp,sp,-24
  110468:	dfc00515 	stw	ra,20(sp)
  11046c:	df000415 	stw	fp,16(sp)
  110470:	df000404 	addi	fp,sp,16
  110474:	e13ffe15 	stw	r4,-8(fp)
  110478:	e17ffd15 	stw	r5,-12(fp)
  11047c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  110480:	e0bffe17 	ldw	r2,-8(fp)
  110484:	10800017 	ldw	r2,0(r2)
  110488:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  11048c:	e0bfff17 	ldw	r2,-4(fp)
  110490:	10c00a04 	addi	r3,r2,40
  110494:	e0bffe17 	ldw	r2,-8(fp)
  110498:	10800217 	ldw	r2,8(r2)
  11049c:	100f883a 	mov	r7,r2
  1104a0:	e1bffc17 	ldw	r6,-16(fp)
  1104a4:	e17ffd17 	ldw	r5,-12(fp)
  1104a8:	1809883a 	mov	r4,r3
  1104ac:	0110a880 	call	110a88 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  1104b0:	e037883a 	mov	sp,fp
  1104b4:	dfc00117 	ldw	ra,4(sp)
  1104b8:	df000017 	ldw	fp,0(sp)
  1104bc:	dec00204 	addi	sp,sp,8
  1104c0:	f800283a 	ret

001104c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  1104c4:	defffa04 	addi	sp,sp,-24
  1104c8:	dfc00515 	stw	ra,20(sp)
  1104cc:	df000415 	stw	fp,16(sp)
  1104d0:	df000404 	addi	fp,sp,16
  1104d4:	e13ffe15 	stw	r4,-8(fp)
  1104d8:	e17ffd15 	stw	r5,-12(fp)
  1104dc:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  1104e0:	e0bffe17 	ldw	r2,-8(fp)
  1104e4:	10800017 	ldw	r2,0(r2)
  1104e8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  1104ec:	e0bfff17 	ldw	r2,-4(fp)
  1104f0:	10c00a04 	addi	r3,r2,40
  1104f4:	e0bffe17 	ldw	r2,-8(fp)
  1104f8:	10800217 	ldw	r2,8(r2)
  1104fc:	100f883a 	mov	r7,r2
  110500:	e1bffc17 	ldw	r6,-16(fp)
  110504:	e17ffd17 	ldw	r5,-12(fp)
  110508:	1809883a 	mov	r4,r3
  11050c:	0110ca40 	call	110ca4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  110510:	e037883a 	mov	sp,fp
  110514:	dfc00117 	ldw	ra,4(sp)
  110518:	df000017 	ldw	fp,0(sp)
  11051c:	dec00204 	addi	sp,sp,8
  110520:	f800283a 	ret

00110524 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  110524:	defffc04 	addi	sp,sp,-16
  110528:	dfc00315 	stw	ra,12(sp)
  11052c:	df000215 	stw	fp,8(sp)
  110530:	df000204 	addi	fp,sp,8
  110534:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  110538:	e0bffe17 	ldw	r2,-8(fp)
  11053c:	10800017 	ldw	r2,0(r2)
  110540:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  110544:	e0bfff17 	ldw	r2,-4(fp)
  110548:	10c00a04 	addi	r3,r2,40
  11054c:	e0bffe17 	ldw	r2,-8(fp)
  110550:	10800217 	ldw	r2,8(r2)
  110554:	100b883a 	mov	r5,r2
  110558:	1809883a 	mov	r4,r3
  11055c:	011092c0 	call	11092c <altera_avalon_jtag_uart_close>
}
  110560:	e037883a 	mov	sp,fp
  110564:	dfc00117 	ldw	ra,4(sp)
  110568:	df000017 	ldw	fp,0(sp)
  11056c:	dec00204 	addi	sp,sp,8
  110570:	f800283a 	ret

00110574 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  110574:	defffa04 	addi	sp,sp,-24
  110578:	dfc00515 	stw	ra,20(sp)
  11057c:	df000415 	stw	fp,16(sp)
  110580:	df000404 	addi	fp,sp,16
  110584:	e13ffe15 	stw	r4,-8(fp)
  110588:	e17ffd15 	stw	r5,-12(fp)
  11058c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  110590:	e0bffe17 	ldw	r2,-8(fp)
  110594:	10800017 	ldw	r2,0(r2)
  110598:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  11059c:	e0bfff17 	ldw	r2,-4(fp)
  1105a0:	10800a04 	addi	r2,r2,40
  1105a4:	e1bffc17 	ldw	r6,-16(fp)
  1105a8:	e17ffd17 	ldw	r5,-12(fp)
  1105ac:	1009883a 	mov	r4,r2
  1105b0:	01109940 	call	110994 <altera_avalon_jtag_uart_ioctl>
}
  1105b4:	e037883a 	mov	sp,fp
  1105b8:	dfc00117 	ldw	ra,4(sp)
  1105bc:	df000017 	ldw	fp,0(sp)
  1105c0:	dec00204 	addi	sp,sp,8
  1105c4:	f800283a 	ret

001105c8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  1105c8:	defffa04 	addi	sp,sp,-24
  1105cc:	dfc00515 	stw	ra,20(sp)
  1105d0:	df000415 	stw	fp,16(sp)
  1105d4:	df000404 	addi	fp,sp,16
  1105d8:	e13fff15 	stw	r4,-4(fp)
  1105dc:	e17ffe15 	stw	r5,-8(fp)
  1105e0:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  1105e4:	e0bfff17 	ldw	r2,-4(fp)
  1105e8:	00c00044 	movi	r3,1
  1105ec:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  1105f0:	e0bfff17 	ldw	r2,-4(fp)
  1105f4:	10800017 	ldw	r2,0(r2)
  1105f8:	10800104 	addi	r2,r2,4
  1105fc:	1007883a 	mov	r3,r2
  110600:	e0bfff17 	ldw	r2,-4(fp)
  110604:	10800817 	ldw	r2,32(r2)
  110608:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  11060c:	e0bffe17 	ldw	r2,-8(fp)
  110610:	e0fffd17 	ldw	r3,-12(fp)
  110614:	d8000015 	stw	zero,0(sp)
  110618:	e1ffff17 	ldw	r7,-4(fp)
  11061c:	01800474 	movhi	r6,17
  110620:	3181a204 	addi	r6,r6,1672
  110624:	180b883a 	mov	r5,r3
  110628:	1009883a 	mov	r4,r2
  11062c:	01125000 	call	112500 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  110630:	e0bfff17 	ldw	r2,-4(fp)
  110634:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  110638:	e0bfff17 	ldw	r2,-4(fp)
  11063c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  110640:	d0e02717 	ldw	r3,-32612(gp)
  110644:	e1ffff17 	ldw	r7,-4(fp)
  110648:	01800474 	movhi	r6,17
  11064c:	31822304 	addi	r6,r6,2188
  110650:	180b883a 	mov	r5,r3
  110654:	1009883a 	mov	r4,r2
  110658:	01120b80 	call	1120b8 <alt_alarm_start>
  11065c:	1000040e 	bge	r2,zero,110670 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  110660:	e0ffff17 	ldw	r3,-4(fp)
  110664:	00a00034 	movhi	r2,32768
  110668:	10bfffc4 	addi	r2,r2,-1
  11066c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  110670:	0001883a 	nop
  110674:	e037883a 	mov	sp,fp
  110678:	dfc00117 	ldw	ra,4(sp)
  11067c:	df000017 	ldw	fp,0(sp)
  110680:	dec00204 	addi	sp,sp,8
  110684:	f800283a 	ret

00110688 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  110688:	defff804 	addi	sp,sp,-32
  11068c:	df000715 	stw	fp,28(sp)
  110690:	df000704 	addi	fp,sp,28
  110694:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  110698:	e0bff917 	ldw	r2,-28(fp)
  11069c:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  1106a0:	e0bffd17 	ldw	r2,-12(fp)
  1106a4:	10800017 	ldw	r2,0(r2)
  1106a8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  1106ac:	e0bffc17 	ldw	r2,-16(fp)
  1106b0:	10800104 	addi	r2,r2,4
  1106b4:	10800037 	ldwio	r2,0(r2)
  1106b8:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  1106bc:	e0bffb17 	ldw	r2,-20(fp)
  1106c0:	1080c00c 	andi	r2,r2,768
  1106c4:	10006b26 	beq	r2,zero,110874 <altera_avalon_jtag_uart_irq+0x1ec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  1106c8:	e0bffb17 	ldw	r2,-20(fp)
  1106cc:	1080400c 	andi	r2,r2,256
  1106d0:	10003426 	beq	r2,zero,1107a4 <altera_avalon_jtag_uart_irq+0x11c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  1106d4:	00800074 	movhi	r2,1
  1106d8:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  1106dc:	e0bffd17 	ldw	r2,-12(fp)
  1106e0:	10800a17 	ldw	r2,40(r2)
  1106e4:	10800044 	addi	r2,r2,1
  1106e8:	1081ffcc 	andi	r2,r2,2047
  1106ec:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  1106f0:	e0bffd17 	ldw	r2,-12(fp)
  1106f4:	10800b17 	ldw	r2,44(r2)
  1106f8:	e0fffa17 	ldw	r3,-24(fp)
  1106fc:	18801426 	beq	r3,r2,110750 <altera_avalon_jtag_uart_irq+0xc8>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  110700:	e0bffc17 	ldw	r2,-16(fp)
  110704:	10800037 	ldwio	r2,0(r2)
  110708:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  11070c:	e0bfff17 	ldw	r2,-4(fp)
  110710:	10a0000c 	andi	r2,r2,32768
  110714:	10001026 	beq	r2,zero,110758 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  110718:	e0bffd17 	ldw	r2,-12(fp)
  11071c:	10800a17 	ldw	r2,40(r2)
  110720:	e0ffff17 	ldw	r3,-4(fp)
  110724:	1809883a 	mov	r4,r3
  110728:	e0fffd17 	ldw	r3,-12(fp)
  11072c:	1885883a 	add	r2,r3,r2
  110730:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  110734:	e0bffd17 	ldw	r2,-12(fp)
  110738:	10800a17 	ldw	r2,40(r2)
  11073c:	10800044 	addi	r2,r2,1
  110740:	10c1ffcc 	andi	r3,r2,2047
  110744:	e0bffd17 	ldw	r2,-12(fp)
  110748:	10c00a15 	stw	r3,40(r2)
      {
  11074c:	003fe306 	br	1106dc <altera_avalon_jtag_uart_irq+0x54>
          break;
  110750:	0001883a 	nop
  110754:	00000106 	br	11075c <altera_avalon_jtag_uart_irq+0xd4>
          break;
  110758:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  11075c:	e0bfff17 	ldw	r2,-4(fp)
  110760:	10bfffec 	andhi	r2,r2,65535
  110764:	10000f26 	beq	r2,zero,1107a4 <altera_avalon_jtag_uart_irq+0x11c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  110768:	e0bffd17 	ldw	r2,-12(fp)
  11076c:	10c00817 	ldw	r3,32(r2)
  110770:	00bfff84 	movi	r2,-2
  110774:	1886703a 	and	r3,r3,r2
  110778:	e0bffd17 	ldw	r2,-12(fp)
  11077c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  110780:	e0bffc17 	ldw	r2,-16(fp)
  110784:	10800104 	addi	r2,r2,4
  110788:	1007883a 	mov	r3,r2
  11078c:	e0bffd17 	ldw	r2,-12(fp)
  110790:	10800817 	ldw	r2,32(r2)
  110794:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  110798:	e0bffc17 	ldw	r2,-16(fp)
  11079c:	10800104 	addi	r2,r2,4
  1107a0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  1107a4:	e0bffb17 	ldw	r2,-20(fp)
  1107a8:	1080800c 	andi	r2,r2,512
  1107ac:	103fbf26 	beq	r2,zero,1106ac <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  1107b0:	e0bffb17 	ldw	r2,-20(fp)
  1107b4:	1004d43a 	srli	r2,r2,16
  1107b8:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  1107bc:	00001306 	br	11080c <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  1107c0:	e0bffc17 	ldw	r2,-16(fp)
  1107c4:	e0fffd17 	ldw	r3,-12(fp)
  1107c8:	18c00d17 	ldw	r3,52(r3)
  1107cc:	e13ffd17 	ldw	r4,-12(fp)
  1107d0:	20c7883a 	add	r3,r4,r3
  1107d4:	18c20e03 	ldbu	r3,2104(r3)
  1107d8:	18c03fcc 	andi	r3,r3,255
  1107dc:	18c0201c 	xori	r3,r3,128
  1107e0:	18ffe004 	addi	r3,r3,-128
  1107e4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  1107e8:	e0bffd17 	ldw	r2,-12(fp)
  1107ec:	10800d17 	ldw	r2,52(r2)
  1107f0:	10800044 	addi	r2,r2,1
  1107f4:	10c1ffcc 	andi	r3,r2,2047
  1107f8:	e0bffd17 	ldw	r2,-12(fp)
  1107fc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  110800:	e0bffe17 	ldw	r2,-8(fp)
  110804:	10bfffc4 	addi	r2,r2,-1
  110808:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
  11080c:	e0bffe17 	ldw	r2,-8(fp)
  110810:	10000526 	beq	r2,zero,110828 <altera_avalon_jtag_uart_irq+0x1a0>
  110814:	e0bffd17 	ldw	r2,-12(fp)
  110818:	10c00d17 	ldw	r3,52(r2)
  11081c:	e0bffd17 	ldw	r2,-12(fp)
  110820:	10800c17 	ldw	r2,48(r2)
  110824:	18bfe61e 	bne	r3,r2,1107c0 <altera_avalon_jtag_uart_irq+0x138>
      }

      if (space > 0)
  110828:	e0bffe17 	ldw	r2,-8(fp)
  11082c:	103f9f26 	beq	r2,zero,1106ac <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  110830:	e0bffd17 	ldw	r2,-12(fp)
  110834:	10c00817 	ldw	r3,32(r2)
  110838:	00bfff44 	movi	r2,-3
  11083c:	1886703a 	and	r3,r3,r2
  110840:	e0bffd17 	ldw	r2,-12(fp)
  110844:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  110848:	e0bffd17 	ldw	r2,-12(fp)
  11084c:	10800017 	ldw	r2,0(r2)
  110850:	10800104 	addi	r2,r2,4
  110854:	1007883a 	mov	r3,r2
  110858:	e0bffd17 	ldw	r2,-12(fp)
  11085c:	10800817 	ldw	r2,32(r2)
  110860:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  110864:	e0bffc17 	ldw	r2,-16(fp)
  110868:	10800104 	addi	r2,r2,4
  11086c:	10800037 	ldwio	r2,0(r2)
  {
  110870:	003f8e06 	br	1106ac <altera_avalon_jtag_uart_irq+0x24>
      break;
  110874:	0001883a 	nop
      }
    }
  }
}
  110878:	0001883a 	nop
  11087c:	e037883a 	mov	sp,fp
  110880:	df000017 	ldw	fp,0(sp)
  110884:	dec00104 	addi	sp,sp,4
  110888:	f800283a 	ret

0011088c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  11088c:	defffc04 	addi	sp,sp,-16
  110890:	df000315 	stw	fp,12(sp)
  110894:	df000304 	addi	fp,sp,12
  110898:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  11089c:	e0bffd17 	ldw	r2,-12(fp)
  1108a0:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  1108a4:	e0bfff17 	ldw	r2,-4(fp)
  1108a8:	10800017 	ldw	r2,0(r2)
  1108ac:	10800104 	addi	r2,r2,4
  1108b0:	10800037 	ldwio	r2,0(r2)
  1108b4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  1108b8:	e0bffe17 	ldw	r2,-8(fp)
  1108bc:	1081000c 	andi	r2,r2,1024
  1108c0:	10000b26 	beq	r2,zero,1108f0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  1108c4:	e0bfff17 	ldw	r2,-4(fp)
  1108c8:	10800017 	ldw	r2,0(r2)
  1108cc:	10800104 	addi	r2,r2,4
  1108d0:	1007883a 	mov	r3,r2
  1108d4:	e0bfff17 	ldw	r2,-4(fp)
  1108d8:	10800817 	ldw	r2,32(r2)
  1108dc:	10810014 	ori	r2,r2,1024
  1108e0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  1108e4:	e0bfff17 	ldw	r2,-4(fp)
  1108e8:	10000915 	stw	zero,36(r2)
  1108ec:	00000a06 	br	110918 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  1108f0:	e0bfff17 	ldw	r2,-4(fp)
  1108f4:	10c00917 	ldw	r3,36(r2)
  1108f8:	00a00034 	movhi	r2,32768
  1108fc:	10bfff04 	addi	r2,r2,-4
  110900:	10c00536 	bltu	r2,r3,110918 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  110904:	e0bfff17 	ldw	r2,-4(fp)
  110908:	10800917 	ldw	r2,36(r2)
  11090c:	10c00044 	addi	r3,r2,1
  110910:	e0bfff17 	ldw	r2,-4(fp)
  110914:	10c00915 	stw	r3,36(r2)
  110918:	d0a02717 	ldw	r2,-32612(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  11091c:	e037883a 	mov	sp,fp
  110920:	df000017 	ldw	fp,0(sp)
  110924:	dec00104 	addi	sp,sp,4
  110928:	f800283a 	ret

0011092c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  11092c:	defffd04 	addi	sp,sp,-12
  110930:	df000215 	stw	fp,8(sp)
  110934:	df000204 	addi	fp,sp,8
  110938:	e13fff15 	stw	r4,-4(fp)
  11093c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  110940:	00000506 	br	110958 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  110944:	e0bffe17 	ldw	r2,-8(fp)
  110948:	1090000c 	andi	r2,r2,16384
  11094c:	10000226 	beq	r2,zero,110958 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  110950:	00bffd44 	movi	r2,-11
  110954:	00000b06 	br	110984 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  110958:	e0bfff17 	ldw	r2,-4(fp)
  11095c:	10c00d17 	ldw	r3,52(r2)
  110960:	e0bfff17 	ldw	r2,-4(fp)
  110964:	10800c17 	ldw	r2,48(r2)
  110968:	18800526 	beq	r3,r2,110980 <altera_avalon_jtag_uart_close+0x54>
  11096c:	e0bfff17 	ldw	r2,-4(fp)
  110970:	10c00917 	ldw	r3,36(r2)
  110974:	e0bfff17 	ldw	r2,-4(fp)
  110978:	10800117 	ldw	r2,4(r2)
  11097c:	18bff136 	bltu	r3,r2,110944 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
  110980:	0005883a 	mov	r2,zero
}
  110984:	e037883a 	mov	sp,fp
  110988:	df000017 	ldw	fp,0(sp)
  11098c:	dec00104 	addi	sp,sp,4
  110990:	f800283a 	ret

00110994 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  110994:	defffa04 	addi	sp,sp,-24
  110998:	df000515 	stw	fp,20(sp)
  11099c:	df000504 	addi	fp,sp,20
  1109a0:	e13ffd15 	stw	r4,-12(fp)
  1109a4:	e17ffc15 	stw	r5,-16(fp)
  1109a8:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
  1109ac:	00bff9c4 	movi	r2,-25
  1109b0:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
  1109b4:	e0bffc17 	ldw	r2,-16(fp)
  1109b8:	109a8060 	cmpeqi	r2,r2,27137
  1109bc:	1000041e 	bne	r2,zero,1109d0 <altera_avalon_jtag_uart_ioctl+0x3c>
  1109c0:	e0bffc17 	ldw	r2,-16(fp)
  1109c4:	109a80a0 	cmpeqi	r2,r2,27138
  1109c8:	1000181e 	bne	r2,zero,110a2c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
  1109cc:	00002906 	br	110a74 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
  1109d0:	e0bffd17 	ldw	r2,-12(fp)
  1109d4:	10c00117 	ldw	r3,4(r2)
  1109d8:	00a00034 	movhi	r2,32768
  1109dc:	10bfffc4 	addi	r2,r2,-1
  1109e0:	18802126 	beq	r3,r2,110a68 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
  1109e4:	e0bffb17 	ldw	r2,-20(fp)
  1109e8:	10800017 	ldw	r2,0(r2)
  1109ec:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  1109f0:	e0bffe17 	ldw	r2,-8(fp)
  1109f4:	10800090 	cmplti	r2,r2,2
  1109f8:	1000061e 	bne	r2,zero,110a14 <altera_avalon_jtag_uart_ioctl+0x80>
  1109fc:	e0fffe17 	ldw	r3,-8(fp)
  110a00:	00a00034 	movhi	r2,32768
  110a04:	10bfffc4 	addi	r2,r2,-1
  110a08:	18800226 	beq	r3,r2,110a14 <altera_avalon_jtag_uart_ioctl+0x80>
  110a0c:	e0bffe17 	ldw	r2,-8(fp)
  110a10:	00000206 	br	110a1c <altera_avalon_jtag_uart_ioctl+0x88>
  110a14:	00a00034 	movhi	r2,32768
  110a18:	10bfff84 	addi	r2,r2,-2
  110a1c:	e0fffd17 	ldw	r3,-12(fp)
  110a20:	18800115 	stw	r2,4(r3)
      rc = 0;
  110a24:	e03fff15 	stw	zero,-4(fp)
    break;
  110a28:	00000f06 	br	110a68 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
  110a2c:	e0bffd17 	ldw	r2,-12(fp)
  110a30:	10c00117 	ldw	r3,4(r2)
  110a34:	00a00034 	movhi	r2,32768
  110a38:	10bfffc4 	addi	r2,r2,-1
  110a3c:	18800c26 	beq	r3,r2,110a70 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  110a40:	e0bffd17 	ldw	r2,-12(fp)
  110a44:	10c00917 	ldw	r3,36(r2)
  110a48:	e0bffd17 	ldw	r2,-12(fp)
  110a4c:	10800117 	ldw	r2,4(r2)
  110a50:	1885803a 	cmpltu	r2,r3,r2
  110a54:	10c03fcc 	andi	r3,r2,255
  110a58:	e0bffb17 	ldw	r2,-20(fp)
  110a5c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  110a60:	e03fff15 	stw	zero,-4(fp)
    break;
  110a64:	00000206 	br	110a70 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
  110a68:	0001883a 	nop
  110a6c:	00000106 	br	110a74 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
  110a70:	0001883a 	nop
  }

  return rc;
  110a74:	e0bfff17 	ldw	r2,-4(fp)
}
  110a78:	e037883a 	mov	sp,fp
  110a7c:	df000017 	ldw	fp,0(sp)
  110a80:	dec00104 	addi	sp,sp,4
  110a84:	f800283a 	ret

00110a88 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  110a88:	defff304 	addi	sp,sp,-52
  110a8c:	dfc00c15 	stw	ra,48(sp)
  110a90:	df000b15 	stw	fp,44(sp)
  110a94:	df000b04 	addi	fp,sp,44
  110a98:	e13ff815 	stw	r4,-32(fp)
  110a9c:	e17ff715 	stw	r5,-36(fp)
  110aa0:	e1bff615 	stw	r6,-40(fp)
  110aa4:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
  110aa8:	e0bff717 	ldw	r2,-36(fp)
  110aac:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  110ab0:	00004706 	br	110bd0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  110ab4:	e0bff817 	ldw	r2,-32(fp)
  110ab8:	10800a17 	ldw	r2,40(r2)
  110abc:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
  110ac0:	e0bff817 	ldw	r2,-32(fp)
  110ac4:	10800b17 	ldw	r2,44(r2)
  110ac8:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
  110acc:	e0fffd17 	ldw	r3,-12(fp)
  110ad0:	e0bffc17 	ldw	r2,-16(fp)
  110ad4:	18800536 	bltu	r3,r2,110aec <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  110ad8:	e0fffd17 	ldw	r3,-12(fp)
  110adc:	e0bffc17 	ldw	r2,-16(fp)
  110ae0:	1885c83a 	sub	r2,r3,r2
  110ae4:	e0bffe15 	stw	r2,-8(fp)
  110ae8:	00000406 	br	110afc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  110aec:	00c20004 	movi	r3,2048
  110af0:	e0bffc17 	ldw	r2,-16(fp)
  110af4:	1885c83a 	sub	r2,r3,r2
  110af8:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
  110afc:	e0bffe17 	ldw	r2,-8(fp)
  110b00:	10001e26 	beq	r2,zero,110b7c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  110b04:	e0fff617 	ldw	r3,-40(fp)
  110b08:	e0bffe17 	ldw	r2,-8(fp)
  110b0c:	1880022e 	bgeu	r3,r2,110b18 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  110b10:	e0bff617 	ldw	r2,-40(fp)
  110b14:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  110b18:	e0bff817 	ldw	r2,-32(fp)
  110b1c:	10c00e04 	addi	r3,r2,56
  110b20:	e0bffc17 	ldw	r2,-16(fp)
  110b24:	1885883a 	add	r2,r3,r2
  110b28:	e1bffe17 	ldw	r6,-8(fp)
  110b2c:	100b883a 	mov	r5,r2
  110b30:	e13fff17 	ldw	r4,-4(fp)
  110b34:	0102e880 	call	102e88 <memcpy>
      ptr   += n;
  110b38:	e0ffff17 	ldw	r3,-4(fp)
  110b3c:	e0bffe17 	ldw	r2,-8(fp)
  110b40:	1885883a 	add	r2,r3,r2
  110b44:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
  110b48:	e0fff617 	ldw	r3,-40(fp)
  110b4c:	e0bffe17 	ldw	r2,-8(fp)
  110b50:	1885c83a 	sub	r2,r3,r2
  110b54:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  110b58:	e0fffc17 	ldw	r3,-16(fp)
  110b5c:	e0bffe17 	ldw	r2,-8(fp)
  110b60:	1885883a 	add	r2,r3,r2
  110b64:	10c1ffcc 	andi	r3,r2,2047
  110b68:	e0bff817 	ldw	r2,-32(fp)
  110b6c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  110b70:	e0bff617 	ldw	r2,-40(fp)
  110b74:	00bfcf16 	blt	zero,r2,110ab4 <altera_avalon_jtag_uart_read+0x2c>
  110b78:	00000106 	br	110b80 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
  110b7c:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
  110b80:	e0ffff17 	ldw	r3,-4(fp)
  110b84:	e0bff717 	ldw	r2,-36(fp)
  110b88:	1880141e 	bne	r3,r2,110bdc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  110b8c:	e0bff517 	ldw	r2,-44(fp)
  110b90:	1090000c 	andi	r2,r2,16384
  110b94:	1000131e 	bne	r2,zero,110be4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  110b98:	0001883a 	nop
  110b9c:	e0bff817 	ldw	r2,-32(fp)
  110ba0:	10800a17 	ldw	r2,40(r2)
  110ba4:	e0fffd17 	ldw	r3,-12(fp)
  110ba8:	1880051e 	bne	r3,r2,110bc0 <altera_avalon_jtag_uart_read+0x138>
  110bac:	e0bff817 	ldw	r2,-32(fp)
  110bb0:	10c00917 	ldw	r3,36(r2)
  110bb4:	e0bff817 	ldw	r2,-32(fp)
  110bb8:	10800117 	ldw	r2,4(r2)
  110bbc:	18bff736 	bltu	r3,r2,110b9c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  110bc0:	e0bff817 	ldw	r2,-32(fp)
  110bc4:	10800a17 	ldw	r2,40(r2)
  110bc8:	e0fffd17 	ldw	r3,-12(fp)
  110bcc:	18800726 	beq	r3,r2,110bec <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
  110bd0:	e0bff617 	ldw	r2,-40(fp)
  110bd4:	00bfb716 	blt	zero,r2,110ab4 <altera_avalon_jtag_uart_read+0x2c>
  110bd8:	00000506 	br	110bf0 <altera_avalon_jtag_uart_read+0x168>
      break;
  110bdc:	0001883a 	nop
  110be0:	00000306 	br	110bf0 <altera_avalon_jtag_uart_read+0x168>
      break;
  110be4:	0001883a 	nop
  110be8:	00000106 	br	110bf0 <altera_avalon_jtag_uart_read+0x168>
      break;
  110bec:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  110bf0:	e0ffff17 	ldw	r3,-4(fp)
  110bf4:	e0bff717 	ldw	r2,-36(fp)
  110bf8:	18801826 	beq	r3,r2,110c5c <altera_avalon_jtag_uart_read+0x1d4>
  NIOS2_READ_STATUS (context);
  110bfc:	0005303a 	rdctl	r2,status
  110c00:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  110c04:	e0fff917 	ldw	r3,-28(fp)
  110c08:	00bfff84 	movi	r2,-2
  110c0c:	1884703a 	and	r2,r3,r2
  110c10:	1001703a 	wrctl	status,r2
  return context;
  110c14:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  110c18:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  110c1c:	e0bff817 	ldw	r2,-32(fp)
  110c20:	10800817 	ldw	r2,32(r2)
  110c24:	10c00054 	ori	r3,r2,1
  110c28:	e0bff817 	ldw	r2,-32(fp)
  110c2c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  110c30:	e0bff817 	ldw	r2,-32(fp)
  110c34:	10800017 	ldw	r2,0(r2)
  110c38:	10800104 	addi	r2,r2,4
  110c3c:	1007883a 	mov	r3,r2
  110c40:	e0bff817 	ldw	r2,-32(fp)
  110c44:	10800817 	ldw	r2,32(r2)
  110c48:	18800035 	stwio	r2,0(r3)
  110c4c:	e0bffb17 	ldw	r2,-20(fp)
  110c50:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
  110c54:	e0bffa17 	ldw	r2,-24(fp)
  110c58:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  110c5c:	e0ffff17 	ldw	r3,-4(fp)
  110c60:	e0bff717 	ldw	r2,-36(fp)
  110c64:	18800426 	beq	r3,r2,110c78 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  110c68:	e0ffff17 	ldw	r3,-4(fp)
  110c6c:	e0bff717 	ldw	r2,-36(fp)
  110c70:	1885c83a 	sub	r2,r3,r2
  110c74:	00000606 	br	110c90 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  110c78:	e0bff517 	ldw	r2,-44(fp)
  110c7c:	1090000c 	andi	r2,r2,16384
  110c80:	10000226 	beq	r2,zero,110c8c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  110c84:	00bffd44 	movi	r2,-11
  110c88:	00000106 	br	110c90 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  110c8c:	00bffec4 	movi	r2,-5
}
  110c90:	e037883a 	mov	sp,fp
  110c94:	dfc00117 	ldw	ra,4(sp)
  110c98:	df000017 	ldw	fp,0(sp)
  110c9c:	dec00204 	addi	sp,sp,8
  110ca0:	f800283a 	ret

00110ca4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  110ca4:	defff304 	addi	sp,sp,-52
  110ca8:	dfc00c15 	stw	ra,48(sp)
  110cac:	df000b15 	stw	fp,44(sp)
  110cb0:	df000b04 	addi	fp,sp,44
  110cb4:	e13ff815 	stw	r4,-32(fp)
  110cb8:	e17ff715 	stw	r5,-36(fp)
  110cbc:	e1bff615 	stw	r6,-40(fp)
  110cc0:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  110cc4:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  110cc8:	e0bff717 	ldw	r2,-36(fp)
  110ccc:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  110cd0:	00003706 	br	110db0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  110cd4:	e0bff817 	ldw	r2,-32(fp)
  110cd8:	10800c17 	ldw	r2,48(r2)
  110cdc:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
  110ce0:	e0bff817 	ldw	r2,-32(fp)
  110ce4:	10800d17 	ldw	r2,52(r2)
  110ce8:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
  110cec:	e0fffc17 	ldw	r3,-16(fp)
  110cf0:	e0bfff17 	ldw	r2,-4(fp)
  110cf4:	1880062e 	bgeu	r3,r2,110d10 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  110cf8:	e0ffff17 	ldw	r3,-4(fp)
  110cfc:	e0bffc17 	ldw	r2,-16(fp)
  110d00:	1885c83a 	sub	r2,r3,r2
  110d04:	10bfffc4 	addi	r2,r2,-1
  110d08:	e0bffe15 	stw	r2,-8(fp)
  110d0c:	00000b06 	br	110d3c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  110d10:	e0bfff17 	ldw	r2,-4(fp)
  110d14:	10000526 	beq	r2,zero,110d2c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  110d18:	00c20004 	movi	r3,2048
  110d1c:	e0bffc17 	ldw	r2,-16(fp)
  110d20:	1885c83a 	sub	r2,r3,r2
  110d24:	e0bffe15 	stw	r2,-8(fp)
  110d28:	00000406 	br	110d3c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  110d2c:	00c1ffc4 	movi	r3,2047
  110d30:	e0bffc17 	ldw	r2,-16(fp)
  110d34:	1885c83a 	sub	r2,r3,r2
  110d38:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
  110d3c:	e0bffe17 	ldw	r2,-8(fp)
  110d40:	10001e26 	beq	r2,zero,110dbc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  110d44:	e0fff617 	ldw	r3,-40(fp)
  110d48:	e0bffe17 	ldw	r2,-8(fp)
  110d4c:	1880022e 	bgeu	r3,r2,110d58 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  110d50:	e0bff617 	ldw	r2,-40(fp)
  110d54:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  110d58:	e0bff817 	ldw	r2,-32(fp)
  110d5c:	10c20e04 	addi	r3,r2,2104
  110d60:	e0bffc17 	ldw	r2,-16(fp)
  110d64:	1885883a 	add	r2,r3,r2
  110d68:	e1bffe17 	ldw	r6,-8(fp)
  110d6c:	e17ff717 	ldw	r5,-36(fp)
  110d70:	1009883a 	mov	r4,r2
  110d74:	0102e880 	call	102e88 <memcpy>
      ptr   += n;
  110d78:	e0fff717 	ldw	r3,-36(fp)
  110d7c:	e0bffe17 	ldw	r2,-8(fp)
  110d80:	1885883a 	add	r2,r3,r2
  110d84:	e0bff715 	stw	r2,-36(fp)
      count -= n;
  110d88:	e0fff617 	ldw	r3,-40(fp)
  110d8c:	e0bffe17 	ldw	r2,-8(fp)
  110d90:	1885c83a 	sub	r2,r3,r2
  110d94:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  110d98:	e0fffc17 	ldw	r3,-16(fp)
  110d9c:	e0bffe17 	ldw	r2,-8(fp)
  110da0:	1885883a 	add	r2,r3,r2
  110da4:	10c1ffcc 	andi	r3,r2,2047
  110da8:	e0bff817 	ldw	r2,-32(fp)
  110dac:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
  110db0:	e0bff617 	ldw	r2,-40(fp)
  110db4:	00bfc716 	blt	zero,r2,110cd4 <altera_avalon_jtag_uart_write+0x30>
  110db8:	00000106 	br	110dc0 <altera_avalon_jtag_uart_write+0x11c>
        break;
  110dbc:	0001883a 	nop
  NIOS2_READ_STATUS (context);
  110dc0:	0005303a 	rdctl	r2,status
  110dc4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  110dc8:	e0fff917 	ldw	r3,-28(fp)
  110dcc:	00bfff84 	movi	r2,-2
  110dd0:	1884703a 	and	r2,r3,r2
  110dd4:	1001703a 	wrctl	status,r2
  return context;
  110dd8:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  110ddc:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  110de0:	e0bff817 	ldw	r2,-32(fp)
  110de4:	10800817 	ldw	r2,32(r2)
  110de8:	10c00094 	ori	r3,r2,2
  110dec:	e0bff817 	ldw	r2,-32(fp)
  110df0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  110df4:	e0bff817 	ldw	r2,-32(fp)
  110df8:	10800017 	ldw	r2,0(r2)
  110dfc:	10800104 	addi	r2,r2,4
  110e00:	1007883a 	mov	r3,r2
  110e04:	e0bff817 	ldw	r2,-32(fp)
  110e08:	10800817 	ldw	r2,32(r2)
  110e0c:	18800035 	stwio	r2,0(r3)
  110e10:	e0bffb17 	ldw	r2,-20(fp)
  110e14:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
  110e18:	e0bffa17 	ldw	r2,-24(fp)
  110e1c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  110e20:	e0bff617 	ldw	r2,-40(fp)
  110e24:	0080100e 	bge	zero,r2,110e68 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  110e28:	e0bff517 	ldw	r2,-44(fp)
  110e2c:	1090000c 	andi	r2,r2,16384
  110e30:	1000101e 	bne	r2,zero,110e74 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  110e34:	0001883a 	nop
  110e38:	e0bff817 	ldw	r2,-32(fp)
  110e3c:	10800d17 	ldw	r2,52(r2)
  110e40:	e0ffff17 	ldw	r3,-4(fp)
  110e44:	1880051e 	bne	r3,r2,110e5c <altera_avalon_jtag_uart_write+0x1b8>
  110e48:	e0bff817 	ldw	r2,-32(fp)
  110e4c:	10c00917 	ldw	r3,36(r2)
  110e50:	e0bff817 	ldw	r2,-32(fp)
  110e54:	10800117 	ldw	r2,4(r2)
  110e58:	18bff736 	bltu	r3,r2,110e38 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  110e5c:	e0bff817 	ldw	r2,-32(fp)
  110e60:	10800917 	ldw	r2,36(r2)
  110e64:	1000051e 	bne	r2,zero,110e7c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  110e68:	e0bff617 	ldw	r2,-40(fp)
  110e6c:	00bfd016 	blt	zero,r2,110db0 <altera_avalon_jtag_uart_write+0x10c>
  110e70:	00000306 	br	110e80 <altera_avalon_jtag_uart_write+0x1dc>
        break;
  110e74:	0001883a 	nop
  110e78:	00000106 	br	110e80 <altera_avalon_jtag_uart_write+0x1dc>
         break;
  110e7c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  110e80:	e0fff717 	ldw	r3,-36(fp)
  110e84:	e0bffd17 	ldw	r2,-12(fp)
  110e88:	18800426 	beq	r3,r2,110e9c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  110e8c:	e0fff717 	ldw	r3,-36(fp)
  110e90:	e0bffd17 	ldw	r2,-12(fp)
  110e94:	1885c83a 	sub	r2,r3,r2
  110e98:	00000606 	br	110eb4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  110e9c:	e0bff517 	ldw	r2,-44(fp)
  110ea0:	1090000c 	andi	r2,r2,16384
  110ea4:	10000226 	beq	r2,zero,110eb0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  110ea8:	00bffd44 	movi	r2,-11
  110eac:	00000106 	br	110eb4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  110eb0:	00bffec4 	movi	r2,-5
}
  110eb4:	e037883a 	mov	sp,fp
  110eb8:	dfc00117 	ldw	ra,4(sp)
  110ebc:	df000017 	ldw	fp,0(sp)
  110ec0:	dec00204 	addi	sp,sp,8
  110ec4:	f800283a 	ret

00110ec8 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  110ec8:	defff404 	addi	sp,sp,-48
  110ecc:	df000b15 	stw	fp,44(sp)
  110ed0:	df000b04 	addi	fp,sp,44
  110ed4:	e13ff815 	stw	r4,-32(fp)
  110ed8:	e17ff715 	stw	r5,-36(fp)
  110edc:	e1bff615 	stw	r6,-40(fp)
  110ee0:	e1fff515 	stw	r7,-44(fp)
  const alt_u8 * write_end = write_data + write_length;
  110ee4:	e0fff517 	ldw	r3,-44(fp)
  110ee8:	e0bff617 	ldw	r2,-40(fp)
  110eec:	1885883a 	add	r2,r3,r2
  110ef0:	e0bffc15 	stw	r2,-16(fp)
  alt_u8 * read_end = read_data + read_length;
  110ef4:	e0c00217 	ldw	r3,8(fp)
  110ef8:	e0800117 	ldw	r2,4(fp)
  110efc:	1885883a 	add	r2,r3,r2
  110f00:	e0bffb15 	stw	r2,-20(fp)

  alt_u32 write_zeros = read_length;
  110f04:	e0800117 	ldw	r2,4(fp)
  110f08:	e0bfff15 	stw	r2,-4(fp)
  alt_u32 read_ignore = write_length;
  110f0c:	e0bff617 	ldw	r2,-40(fp)
  110f10:	e0bffe15 	stw	r2,-8(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
  110f14:	00800044 	movi	r2,1
  110f18:	e0bffd15 	stw	r2,-12(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  110f1c:	e0bff817 	ldw	r2,-32(fp)
  110f20:	10800504 	addi	r2,r2,20
  110f24:	1009883a 	mov	r4,r2
  110f28:	00c00044 	movi	r3,1
  110f2c:	e0bff717 	ldw	r2,-36(fp)
  110f30:	1884983a 	sll	r2,r3,r2
  110f34:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
  110f38:	e0800317 	ldw	r2,12(fp)
  110f3c:	1080008c 	andi	r2,r2,2
  110f40:	1000051e 	bne	r2,zero,110f58 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  110f44:	e0bff817 	ldw	r2,-32(fp)
  110f48:	10800304 	addi	r2,r2,12
  110f4c:	1007883a 	mov	r3,r2
  110f50:	00810004 	movi	r2,1024
  110f54:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
  110f58:	e0bff817 	ldw	r2,-32(fp)
  110f5c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  110f60:	e0bff817 	ldw	r2,-32(fp)
  110f64:	10800204 	addi	r2,r2,8
  110f68:	10800037 	ldwio	r2,0(r2)
  110f6c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  110f70:	e0bffa17 	ldw	r2,-24(fp)
  110f74:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  110f78:	10000226 	beq	r2,zero,110f84 <alt_avalon_spi_command+0xbc>
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  110f7c:	e0bffd17 	ldw	r2,-12(fp)
  110f80:	1000031e 	bne	r2,zero,110f90 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  110f84:	e0bffa17 	ldw	r2,-24(fp)
  110f88:	1080200c 	andi	r2,r2,128
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  110f8c:	103ff426 	beq	r2,zero,110f60 <alt_avalon_spi_command+0x98>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  110f90:	e0bffa17 	ldw	r2,-24(fp)
  110f94:	1080100c 	andi	r2,r2,64
  110f98:	10001e26 	beq	r2,zero,111014 <alt_avalon_spi_command+0x14c>
  110f9c:	e0bffd17 	ldw	r2,-12(fp)
  110fa0:	00801c0e 	bge	zero,r2,111014 <alt_avalon_spi_command+0x14c>
    {
      credits--;
  110fa4:	e0bffd17 	ldw	r2,-12(fp)
  110fa8:	10bfffc4 	addi	r2,r2,-1
  110fac:	e0bffd15 	stw	r2,-12(fp)

      if (write_data < write_end)
  110fb0:	e0fff517 	ldw	r3,-44(fp)
  110fb4:	e0bffc17 	ldw	r2,-16(fp)
  110fb8:	18800a2e 	bgeu	r3,r2,110fe4 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
  110fbc:	e0bff817 	ldw	r2,-32(fp)
  110fc0:	10800104 	addi	r2,r2,4
  110fc4:	1009883a 	mov	r4,r2
  110fc8:	e0bff517 	ldw	r2,-44(fp)
  110fcc:	10c00044 	addi	r3,r2,1
  110fd0:	e0fff515 	stw	r3,-44(fp)
  110fd4:	10800003 	ldbu	r2,0(r2)
  110fd8:	10803fcc 	andi	r2,r2,255
  110fdc:	20800035 	stwio	r2,0(r4)
  110fe0:	00000c06 	br	111014 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
  110fe4:	e0bfff17 	ldw	r2,-4(fp)
  110fe8:	10000826 	beq	r2,zero,11100c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
  110fec:	e0bfff17 	ldw	r2,-4(fp)
  110ff0:	10bfffc4 	addi	r2,r2,-1
  110ff4:	e0bfff15 	stw	r2,-4(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  110ff8:	e0bff817 	ldw	r2,-32(fp)
  110ffc:	10800104 	addi	r2,r2,4
  111000:	0007883a 	mov	r3,zero
  111004:	10c00035 	stwio	r3,0(r2)
  111008:	00000206 	br	111014 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
  11100c:	00bf0004 	movi	r2,-1024
  111010:	e0bffd15 	stw	r2,-12(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
  111014:	e0bffa17 	ldw	r2,-24(fp)
  111018:	1080200c 	andi	r2,r2,128
  11101c:	103fd026 	beq	r2,zero,110f60 <alt_avalon_spi_command+0x98>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
  111020:	e0bff817 	ldw	r2,-32(fp)
  111024:	10800037 	ldwio	r2,0(r2)
  111028:	e0bff915 	stw	r2,-28(fp)

      if (read_ignore > 0)
  11102c:	e0bffe17 	ldw	r2,-8(fp)
  111030:	10000426 	beq	r2,zero,111044 <alt_avalon_spi_command+0x17c>
        read_ignore--;
  111034:	e0bffe17 	ldw	r2,-8(fp)
  111038:	10bfffc4 	addi	r2,r2,-1
  11103c:	e0bffe15 	stw	r2,-8(fp)
  111040:	00000506 	br	111058 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
  111044:	e0800217 	ldw	r2,8(fp)
  111048:	10c00044 	addi	r3,r2,1
  11104c:	e0c00215 	stw	r3,8(fp)
  111050:	e0fff917 	ldw	r3,-28(fp)
  111054:	10c00005 	stb	r3,0(r2)
      credits++;
  111058:	e0bffd17 	ldw	r2,-12(fp)
  11105c:	10800044 	addi	r2,r2,1
  111060:	e0bffd15 	stw	r2,-12(fp)

      if (read_ignore == 0 && read_data == read_end)
  111064:	e0bffe17 	ldw	r2,-8(fp)
  111068:	103fbd1e 	bne	r2,zero,110f60 <alt_avalon_spi_command+0x98>
  11106c:	e0c00217 	ldw	r3,8(fp)
  111070:	e0bffb17 	ldw	r2,-20(fp)
  111074:	18bfba1e 	bne	r3,r2,110f60 <alt_avalon_spi_command+0x98>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  111078:	e0bff817 	ldw	r2,-32(fp)
  11107c:	10800204 	addi	r2,r2,8
  111080:	10800037 	ldwio	r2,0(r2)
  111084:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  111088:	e0bffa17 	ldw	r2,-24(fp)
  11108c:	1080080c 	andi	r2,r2,32
  111090:	103ff926 	beq	r2,zero,111078 <alt_avalon_spi_command+0x1b0>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
  111094:	e0800317 	ldw	r2,12(fp)
  111098:	1080004c 	andi	r2,r2,1
  11109c:	1000041e 	bne	r2,zero,1110b0 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
  1110a0:	e0bff817 	ldw	r2,-32(fp)
  1110a4:	10800304 	addi	r2,r2,12
  1110a8:	0007883a 	mov	r3,zero
  1110ac:	10c00035 	stwio	r3,0(r2)

  return read_length;
  1110b0:	e0800117 	ldw	r2,4(fp)
}
  1110b4:	e037883a 	mov	sp,fp
  1110b8:	df000017 	ldw	fp,0(sp)
  1110bc:	dec00104 	addi	sp,sp,4
  1110c0:	f800283a 	ret

001110c4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  1110c4:	defffa04 	addi	sp,sp,-24
  1110c8:	dfc00515 	stw	ra,20(sp)
  1110cc:	df000415 	stw	fp,16(sp)
  1110d0:	df000404 	addi	fp,sp,16
  1110d4:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  1110d8:	0007883a 	mov	r3,zero
  1110dc:	e0bffc17 	ldw	r2,-16(fp)
  1110e0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  1110e4:	e0bffc17 	ldw	r2,-16(fp)
  1110e8:	10800104 	addi	r2,r2,4
  1110ec:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
  1110f0:	0005303a 	rdctl	r2,status
  1110f4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1110f8:	e0fffd17 	ldw	r3,-12(fp)
  1110fc:	00bfff84 	movi	r2,-2
  111100:	1884703a 	and	r2,r3,r2
  111104:	1001703a 	wrctl	status,r2
  return context;
  111108:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  11110c:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
  111110:	01101100 	call	110110 <alt_tick>
  111114:	e0bfff17 	ldw	r2,-4(fp)
  111118:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
  11111c:	e0bffe17 	ldw	r2,-8(fp)
  111120:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  111124:	0001883a 	nop
  111128:	e037883a 	mov	sp,fp
  11112c:	dfc00117 	ldw	ra,4(sp)
  111130:	df000017 	ldw	fp,0(sp)
  111134:	dec00204 	addi	sp,sp,8
  111138:	f800283a 	ret

0011113c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  11113c:	defff804 	addi	sp,sp,-32
  111140:	dfc00715 	stw	ra,28(sp)
  111144:	df000615 	stw	fp,24(sp)
  111148:	df000604 	addi	fp,sp,24
  11114c:	e13ffe15 	stw	r4,-8(fp)
  111150:	e17ffd15 	stw	r5,-12(fp)
  111154:	e1bffc15 	stw	r6,-16(fp)
  111158:	e1fffb15 	stw	r7,-20(fp)
  11115c:	e0bffb17 	ldw	r2,-20(fp)
  111160:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  111164:	d0a02717 	ldw	r2,-32612(gp)
  111168:	1000021e 	bne	r2,zero,111174 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  11116c:	e0bfff17 	ldw	r2,-4(fp)
  111170:	d0a02715 	stw	r2,-32612(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  111174:	e0bffe17 	ldw	r2,-8(fp)
  111178:	10800104 	addi	r2,r2,4
  11117c:	00c001c4 	movi	r3,7
  111180:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  111184:	d8000015 	stw	zero,0(sp)
  111188:	e1fffe17 	ldw	r7,-8(fp)
  11118c:	01800474 	movhi	r6,17
  111190:	31843104 	addi	r6,r6,4292
  111194:	e17ffc17 	ldw	r5,-16(fp)
  111198:	e13ffd17 	ldw	r4,-12(fp)
  11119c:	01125000 	call	112500 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  1111a0:	0001883a 	nop
  1111a4:	e037883a 	mov	sp,fp
  1111a8:	dfc00117 	ldw	ra,4(sp)
  1111ac:	df000017 	ldw	fp,0(sp)
  1111b0:	dec00204 	addi	sp,sp,8
  1111b4:	f800283a 	ret

001111b8 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  1111b8:	defffd04 	addi	sp,sp,-12
  1111bc:	dfc00215 	stw	ra,8(sp)
  1111c0:	df000115 	stw	fp,4(sp)
  1111c4:	df000104 	addi	fp,sp,4
  1111c8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
  1111cc:	d1601604 	addi	r5,gp,-32680
  1111d0:	e13fff17 	ldw	r4,-4(fp)
  1111d4:	01123a00 	call	1123a0 <alt_dev_llist_insert>
}
  1111d8:	e037883a 	mov	sp,fp
  1111dc:	dfc00117 	ldw	ra,4(sp)
  1111e0:	df000017 	ldw	fp,0(sp)
  1111e4:	dec00204 	addi	sp,sp,8
  1111e8:	f800283a 	ret

001111ec <alt_onchip_flash_read>:
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
  1111ec:	defff704 	addi	sp,sp,-36
  1111f0:	dfc00815 	stw	ra,32(sp)
  1111f4:	df000715 	stw	fp,28(sp)
  1111f8:	df000704 	addi	fp,sp,28
  1111fc:	e13ffc15 	stw	r4,-16(fp)
  111200:	e17ffb15 	stw	r5,-20(fp)
  111204:	e1bffa15 	stw	r6,-24(fp)
  111208:	e1fff915 	stw	r7,-28(fp)
    int ret_code = 0;
  11120c:	e03fff15 	stw	zero,-4(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
  111210:	e0bffc17 	ldw	r2,-16(fp)
  111214:	e0bffe15 	stw	r2,-8(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
  111218:	e0bffe17 	ldw	r2,-8(fp)
  11121c:	10800b17 	ldw	r2,44(r2)
  111220:	e0fffb17 	ldw	r3,-20(fp)
  111224:	1880060e 	bge	r3,r2,111240 <alt_onchip_flash_read+0x54>
  111228:	e0fffb17 	ldw	r3,-20(fp)
  11122c:	e0bff917 	ldw	r2,-28(fp)
  111230:	1885883a 	add	r2,r3,r2
  111234:	e0fffe17 	ldw	r3,-8(fp)
  111238:	18c00b17 	ldw	r3,44(r3)
  11123c:	1880020e 	bge	r3,r2,111248 <alt_onchip_flash_read+0x5c>
        return -EFAULT;
  111240:	00bffc84 	movi	r2,-14
  111244:	00001706 	br	1112a4 <alt_onchip_flash_read+0xb8>
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
  111248:	e0bffe17 	ldw	r2,-8(fp)
  11124c:	10c00a17 	ldw	r3,40(r2)
  111250:	e0bffb17 	ldw	r2,-20(fp)
  111254:	1885883a 	add	r2,r3,r2
  111258:	e0fff917 	ldw	r3,-28(fp)
  11125c:	180d883a 	mov	r6,r3
  111260:	100b883a 	mov	r5,r2
  111264:	e13ffa17 	ldw	r4,-24(fp)
  111268:	0102e880 	call	102e88 <memcpy>

    if (NULL != flash->csr_base) {
  11126c:	e0bffe17 	ldw	r2,-8(fp)
  111270:	10802f17 	ldw	r2,188(r2)
  111274:	10000a26 	beq	r2,zero,1112a0 <alt_onchip_flash_read+0xb4>
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
  111278:	e0bffe17 	ldw	r2,-8(fp)
  11127c:	10802f17 	ldw	r2,188(r2)
  111280:	10800037 	ldwio	r2,0(r2)
  111284:	1080010c 	andi	r2,r2,4
  111288:	e0bffd15 	stw	r2,-12(fp)
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
  11128c:	e0bffd17 	ldw	r2,-12(fp)
  111290:	10800120 	cmpeqi	r2,r2,4
  111294:	1000021e 	bne	r2,zero,1112a0 <alt_onchip_flash_read+0xb4>
            /* Read failed.  Return error.*/
            ret_code = -EIO;
  111298:	00bffec4 	movi	r2,-5
  11129c:	e0bfff15 	stw	r2,-4(fp)
        }
    }
    return ret_code;
  1112a0:	e0bfff17 	ldw	r2,-4(fp)
}
  1112a4:	e037883a 	mov	sp,fp
  1112a8:	dfc00117 	ldw	ra,4(sp)
  1112ac:	df000017 	ldw	fp,0(sp)
  1112b0:	dec00204 	addi	sp,sp,8
  1112b4:	f800283a 	ret

001112b8 <alt_onchip_flash_get_info>:
(
    alt_flash_fd *fd,
    flash_region **info,
    int          *number_of_regions
)
{
  1112b8:	defffa04 	addi	sp,sp,-24
  1112bc:	df000515 	stw	fp,20(sp)
  1112c0:	df000504 	addi	fp,sp,20
  1112c4:	e13ffd15 	stw	r4,-12(fp)
  1112c8:	e17ffc15 	stw	r5,-16(fp)
  1112cc:	e1bffb15 	stw	r6,-20(fp)
    int ret_code = 0;
  1112d0:	e03fff15 	stw	zero,-4(fp)

    alt_flash_dev* flash = (alt_flash_dev*)fd;
  1112d4:	e0bffd17 	ldw	r2,-12(fp)
  1112d8:	e0bffe15 	stw	r2,-8(fp)

    if (NULL != number_of_regions)
  1112dc:	e0bffb17 	ldw	r2,-20(fp)
  1112e0:	10000426 	beq	r2,zero,1112f4 <alt_onchip_flash_get_info+0x3c>
    {
        /* Pass the number of region to user */
        *number_of_regions = flash->number_of_regions;
  1112e4:	e0bffe17 	ldw	r2,-8(fp)
  1112e8:	10c00c17 	ldw	r3,48(r2)
  1112ec:	e0bffb17 	ldw	r2,-20(fp)
  1112f0:	10c00015 	stw	r3,0(r2)
    }

    if (!flash->number_of_regions)
  1112f4:	e0bffe17 	ldw	r2,-8(fp)
  1112f8:	10800c17 	ldw	r2,48(r2)
  1112fc:	1000031e 	bne	r2,zero,11130c <alt_onchip_flash_get_info+0x54>
    {
        ret_code = -ENOMEM;
  111300:	00bffd04 	movi	r2,-12
  111304:	e0bfff15 	stw	r2,-4(fp)
  111308:	00000d06 	br	111340 <alt_onchip_flash_get_info+0x88>
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
  11130c:	e0bffe17 	ldw	r2,-8(fp)
  111310:	10800c17 	ldw	r2,48(r2)
  111314:	10800250 	cmplti	r2,r2,9
  111318:	1000031e 	bne	r2,zero,111328 <alt_onchip_flash_get_info+0x70>
    {
        ret_code = -EFAULT;
  11131c:	00bffc84 	movi	r2,-14
  111320:	e0bfff15 	stw	r2,-4(fp)
  111324:	00000606 	br	111340 <alt_onchip_flash_get_info+0x88>
    }
    else
    {
        if (NULL != info)
  111328:	e0bffc17 	ldw	r2,-16(fp)
  11132c:	10000426 	beq	r2,zero,111340 <alt_onchip_flash_get_info+0x88>
        {
            /* Pass the table of erase blocks to user */
            *info = &flash->region_info[0];
  111330:	e0bffe17 	ldw	r2,-8(fp)
  111334:	10c00d04 	addi	r3,r2,52
  111338:	e0bffc17 	ldw	r2,-16(fp)
  11133c:	10c00015 	stw	r3,0(r2)
        }
    }

    return ret_code;
  111340:	e0bfff17 	ldw	r2,-4(fp)
}
  111344:	e037883a 	mov	sp,fp
  111348:	df000017 	ldw	fp,0(sp)
  11134c:	dec00104 	addi	sp,sp,4
  111350:	f800283a 	ret

00111354 <alt_onchip_flash_erase_block>:
int alt_onchip_flash_erase_block
(
    alt_flash_dev *flash_info,
    int           block_offset
)
{
  111354:	defff904 	addi	sp,sp,-28
  111358:	dfc00615 	stw	ra,24(sp)
  11135c:	df000515 	stw	fp,20(sp)
  111360:	df000504 	addi	fp,sp,20
  111364:	e13ffc15 	stw	r4,-16(fp)
  111368:	e17ffb15 	stw	r5,-20(fp)
    int ret_code = 0;
  11136c:	e03fff15 	stw	zero,-4(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
  111370:	e0bffc17 	ldw	r2,-16(fp)
  111374:	e0bffe15 	stw	r2,-8(fp)
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
  111378:	e0bffe17 	ldw	r2,-8(fp)
  11137c:	10800b17 	ldw	r2,44(r2)
  111380:	e0fffb17 	ldw	r3,-20(fp)
  111384:	18800216 	blt	r3,r2,111390 <alt_onchip_flash_erase_block+0x3c>
        return -EFAULT;
  111388:	00bffc84 	movi	r2,-14
  11138c:	00004606 	br	1114a8 <alt_onchip_flash_erase_block+0x154>
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
  111390:	e0bffe17 	ldw	r2,-8(fp)
  111394:	10802f17 	ldw	r2,188(r2)
  111398:	10000326 	beq	r2,zero,1113a8 <alt_onchip_flash_erase_block+0x54>
  11139c:	e0bffe17 	ldw	r2,-8(fp)
  1113a0:	10802e17 	ldw	r2,184(r2)
  1113a4:	10000226 	beq	r2,zero,1113b0 <alt_onchip_flash_erase_block+0x5c>
        return -ENODEV;
  1113a8:	00bffb44 	movi	r2,-19
  1113ac:	00003e06 	br	1114a8 <alt_onchip_flash_erase_block+0x154>
    }

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
  1113b0:	e0bffe17 	ldw	r2,-8(fp)
  1113b4:	10803f17 	ldw	r2,252(r2)
  1113b8:	10ffffc4 	addi	r3,r2,-1
  1113bc:	e0bffb17 	ldw	r2,-20(fp)
  1113c0:	1884703a 	and	r2,r3,r2
  1113c4:	10000226 	beq	r2,zero,1113d0 <alt_onchip_flash_erase_block+0x7c>
    {
        /* The address is not aligned */
        return -EINVAL;
  1113c8:	00bffa84 	movi	r2,-22
  1113cc:	00003606 	br	1114a8 <alt_onchip_flash_erase_block+0x154>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  1113d0:	e13ffe17 	ldw	r4,-8(fp)
  1113d4:	0111f000 	call	111f00 <alt_onchip_flash_poll_for_status_to_go_idle>
  1113d8:	e0bfff15 	stw	r2,-4(fp)
    if (ret_code != 0)
  1113dc:	e0bfff17 	ldw	r2,-4(fp)
  1113e0:	10000226 	beq	r2,zero,1113ec <alt_onchip_flash_erase_block+0x98>
    {
        return ret_code;
  1113e4:	e0bfff17 	ldw	r2,-4(fp)
  1113e8:	00002f06 	br	1114a8 <alt_onchip_flash_erase_block+0x154>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  1113ec:	e0bffe17 	ldw	r2,-8(fp)
  1113f0:	10802f17 	ldw	r2,188(r2)
  1113f4:	10c00104 	addi	r3,r2,4
  1113f8:	e0bffe17 	ldw	r2,-8(fp)
  1113fc:	10802f17 	ldw	r2,188(r2)
  111400:	10800104 	addi	r2,r2,4
  111404:	10800037 	ldwio	r2,0(r2)
  111408:	113c002c 	andhi	r4,r2,61440
  11140c:	00802034 	movhi	r2,128
  111410:	10bfffc4 	addi	r2,r2,-1
  111414:	2084b03a 	or	r2,r4,r2
  111418:	18800035 	stwio	r2,0(r3)

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;
  11141c:	e0bffb17 	ldw	r2,-20(fp)
  111420:	1000010e 	bge	r2,zero,111428 <alt_onchip_flash_erase_block+0xd4>
  111424:	108000c4 	addi	r2,r2,3
  111428:	1005d0ba 	srai	r2,r2,2
  11142c:	e0bffd15 	stw	r2,-12(fp)

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
  111430:	e0bffe17 	ldw	r2,-8(fp)
  111434:	10802f17 	ldw	r2,188(r2)
  111438:	10800104 	addi	r2,r2,4
  11143c:	e0fffe17 	ldw	r3,-8(fp)
  111440:	18c02f17 	ldw	r3,188(r3)
  111444:	18c00104 	addi	r3,r3,4
  111448:	18c00037 	ldwio	r3,0(r3)
  11144c:	193c002c 	andhi	r4,r3,61440
  111450:	e0fffd17 	ldw	r3,-12(fp)
  111454:	18c01c34 	orhi	r3,r3,112
  111458:	20c6b03a 	or	r3,r4,r3
  11145c:	10c00035 	stwio	r3,0(r2)

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  111460:	e13ffe17 	ldw	r4,-8(fp)
  111464:	0111f000 	call	111f00 <alt_onchip_flash_poll_for_status_to_go_idle>
  111468:	e0bfff15 	stw	r2,-4(fp)

    /* Wait until flash controller indicate erase passed */
    ret_code = alt_onchip_flash_poll_for_status_erase_passed(flash);
  11146c:	e13ffe17 	ldw	r4,-8(fp)
  111470:	0111f900 	call	111f90 <alt_onchip_flash_poll_for_status_erase_passed>
  111474:	e0bfff15 	stw	r2,-4(fp)

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  111478:	e0bffe17 	ldw	r2,-8(fp)
  11147c:	10802f17 	ldw	r2,188(r2)
  111480:	10c00104 	addi	r3,r2,4
  111484:	e0bffe17 	ldw	r2,-8(fp)
  111488:	10802f17 	ldw	r2,188(r2)
  11148c:	10800104 	addi	r2,r2,4
  111490:	11000037 	ldwio	r4,0(r2)
  111494:	00840034 	movhi	r2,4096
  111498:	10bfffc4 	addi	r2,r2,-1
  11149c:	2084b03a 	or	r2,r4,r2
  1114a0:	18800035 	stwio	r2,0(r3)

    return ret_code;
  1114a4:	e0bfff17 	ldw	r2,-4(fp)
}
  1114a8:	e037883a 	mov	sp,fp
  1114ac:	dfc00117 	ldw	ra,4(sp)
  1114b0:	df000017 	ldw	fp,0(sp)
  1114b4:	dec00204 	addi	sp,sp,8
  1114b8:	f800283a 	ret

001114bc <alt_onchip_flash_write_block>:
    int           block_offset,
    int           data_offset,
    const void    *data,
    int           length
)
{
  1114bc:	defff204 	addi	sp,sp,-56
  1114c0:	dfc00d15 	stw	ra,52(sp)
  1114c4:	df000c15 	stw	fp,48(sp)
  1114c8:	df000c04 	addi	fp,sp,48
  1114cc:	e13ff715 	stw	r4,-36(fp)
  1114d0:	e17ff615 	stw	r5,-40(fp)
  1114d4:	e1bff515 	stw	r6,-44(fp)
  1114d8:	e1fff415 	stw	r7,-48(fp)
    int ret_code = 0;
  1114dc:	e03fff15 	stw	zero,-4(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
  1114e0:	e0bff717 	ldw	r2,-36(fp)
  1114e4:	e0bffb15 	stw	r2,-20(fp)
    int buffer_offset = 0;
  1114e8:	e03ffe15 	stw	zero,-8(fp)
    int length_of_current_write;
    int current_data_offset = data_offset;
  1114ec:	e0bff517 	ldw	r2,-44(fp)
  1114f0:	e0bffd15 	stw	r2,-12(fp)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
  1114f4:	e0bffb17 	ldw	r2,-20(fp)
  1114f8:	10800b17 	ldw	r2,44(r2)
    if (
  1114fc:	e0fff617 	ldw	r3,-40(fp)
  111500:	18800a0e 	bge	r3,r2,11152c <alt_onchip_flash_write_block+0x70>
        (data_offset >= flash->dev.length) ||
  111504:	e0bffb17 	ldw	r2,-20(fp)
  111508:	10800b17 	ldw	r2,44(r2)
        (block_offset >= flash->dev.length) ||
  11150c:	e0fff517 	ldw	r3,-44(fp)
  111510:	1880060e 	bge	r3,r2,11152c <alt_onchip_flash_write_block+0x70>
        (length > (flash->dev.length - data_offset))
  111514:	e0bffb17 	ldw	r2,-20(fp)
  111518:	10c00b17 	ldw	r3,44(r2)
  11151c:	e0bff517 	ldw	r2,-44(fp)
  111520:	1887c83a 	sub	r3,r3,r2
        (data_offset >= flash->dev.length) ||
  111524:	e0800217 	ldw	r2,8(fp)
  111528:	1880020e 	bge	r3,r2,111534 <alt_onchip_flash_write_block+0x78>
    ) {
        return -EFAULT;
  11152c:	00bffc84 	movi	r2,-14
  111530:	00009306 	br	111780 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
  111534:	e0bffb17 	ldw	r2,-20(fp)
  111538:	10802f17 	ldw	r2,188(r2)
  11153c:	10000326 	beq	r2,zero,11154c <alt_onchip_flash_write_block+0x90>
  111540:	e0bffb17 	ldw	r2,-20(fp)
  111544:	10802e17 	ldw	r2,184(r2)
  111548:	10000226 	beq	r2,zero,111554 <alt_onchip_flash_write_block+0x98>
        return -ENODEV;
  11154c:	00bffb44 	movi	r2,-19
  111550:	00008b06 	br	111780 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  111554:	e13ffb17 	ldw	r4,-20(fp)
  111558:	0111f000 	call	111f00 <alt_onchip_flash_poll_for_status_to_go_idle>
  11155c:	e0bfff15 	stw	r2,-4(fp)
    if (ret_code != 0)
  111560:	e0bfff17 	ldw	r2,-4(fp)
  111564:	10000226 	beq	r2,zero,111570 <alt_onchip_flash_write_block+0xb4>
    {
        return ret_code;
  111568:	e0bfff17 	ldw	r2,-4(fp)
  11156c:	00008406 	br	111780 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  111570:	e0bffb17 	ldw	r2,-20(fp)
  111574:	10802f17 	ldw	r2,188(r2)
  111578:	10c00104 	addi	r3,r2,4
  11157c:	e0bffb17 	ldw	r2,-20(fp)
  111580:	10802f17 	ldw	r2,188(r2)
  111584:	10800104 	addi	r2,r2,4
  111588:	10800037 	ldwio	r2,0(r2)
  11158c:	113c002c 	andhi	r4,r2,61440
  111590:	00802034 	movhi	r2,128
  111594:	10bfffc4 	addi	r2,r2,-1
  111598:	2084b03a 	or	r2,r4,r2
  11159c:	18800035 	stwio	r2,0(r3)

    /* Check data length */
    while (length)
  1115a0:	00006506 	br	111738 <alt_onchip_flash_write_block+0x27c>
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
  1115a4:	00bfffc4 	movi	r2,-1
  1115a8:	e0bff815 	stw	r2,-32(fp)

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
  1115ac:	e0bffd17 	ldw	r2,-12(fp)
  1115b0:	108000cc 	andi	r2,r2,3
  1115b4:	10001e1e 	bne	r2,zero,111630 <alt_onchip_flash_write_block+0x174>
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  1115b8:	e0bffd17 	ldw	r2,-12(fp)
  1115bc:	10c00104 	addi	r3,r2,4
  1115c0:	00bfff04 	movi	r2,-4
  1115c4:	1884703a 	and	r2,r3,r2
  1115c8:	e0bffc15 	stw	r2,-16(fp)
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
  1115cc:	e0fffc17 	ldw	r3,-16(fp)
  1115d0:	e0bffd17 	ldw	r2,-12(fp)
  1115d4:	1887c83a 	sub	r3,r3,r2
  1115d8:	e0800217 	ldw	r2,8(fp)
  1115dc:	1880010e 	bge	r3,r2,1115e4 <alt_onchip_flash_write_block+0x128>
  1115e0:	1805883a 	mov	r2,r3
  1115e4:	e0bffa15 	stw	r2,-24(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
  1115e8:	e0bffe17 	ldw	r2,-8(fp)
  1115ec:	e0fff417 	ldw	r3,-48(fp)
  1115f0:	1887883a 	add	r3,r3,r2
  1115f4:	e13ffa17 	ldw	r4,-24(fp)
  1115f8:	e0bff804 	addi	r2,fp,-32
  1115fc:	200d883a 	mov	r6,r4
  111600:	180b883a 	mov	r5,r3
  111604:	1009883a 	mov	r4,r2
  111608:	0102e880 	call	102e88 <memcpy>
            buffer_offset += length_of_current_write;
  11160c:	e0fffe17 	ldw	r3,-8(fp)
  111610:	e0bffa17 	ldw	r2,-24(fp)
  111614:	1885883a 	add	r2,r3,r2
  111618:	e0bffe15 	stw	r2,-8(fp)
            length -= length_of_current_write;
  11161c:	e0c00217 	ldw	r3,8(fp)
  111620:	e0bffa17 	ldw	r2,-24(fp)
  111624:	1885c83a 	sub	r2,r3,r2
  111628:	e0800215 	stw	r2,8(fp)
  11162c:	00003006 	br	1116f0 <alt_onchip_flash_write_block+0x234>
        } else {
            /* Calculate how many padding bytes need to be added before the start of a data offset */
            int padding = current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  111630:	e0bffd17 	ldw	r2,-12(fp)
  111634:	108000cc 	andi	r2,r2,3
  111638:	e0bff915 	stw	r2,-28(fp)

            /* Calculate new 4-byte aligned data offset */
            current_data_offset = current_data_offset - padding;
  11163c:	e0fffd17 	ldw	r3,-12(fp)
  111640:	e0bff917 	ldw	r2,-28(fp)
  111644:	1885c83a 	sub	r2,r3,r2
  111648:	e0bffd15 	stw	r2,-12(fp)
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  11164c:	e0bffd17 	ldw	r2,-12(fp)
  111650:	10c00104 	addi	r3,r2,4
  111654:	00bfff04 	movi	r2,-4
  111658:	1884703a 	and	r2,r3,r2
  11165c:	e0bffc15 	stw	r2,-16(fp)
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
  111660:	e0fffc17 	ldw	r3,-16(fp)
  111664:	e0bffd17 	ldw	r2,-12(fp)
  111668:	1889c83a 	sub	r4,r3,r2
  11166c:	e0c00217 	ldw	r3,8(fp)
  111670:	e0bff917 	ldw	r2,-28(fp)
  111674:	1887883a 	add	r3,r3,r2
  111678:	2005883a 	mov	r2,r4
  11167c:	1880010e 	bge	r3,r2,111684 <alt_onchip_flash_write_block+0x1c8>
  111680:	1805883a 	mov	r2,r3
  111684:	e0bffa15 	stw	r2,-24(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
  111688:	e0fff804 	addi	r3,fp,-32
  11168c:	e0bff917 	ldw	r2,-28(fp)
  111690:	1885883a 	add	r2,r3,r2
  111694:	100f883a 	mov	r7,r2
  111698:	e0bffe17 	ldw	r2,-8(fp)
  11169c:	e0fff417 	ldw	r3,-48(fp)
  1116a0:	1889883a 	add	r4,r3,r2
  1116a4:	e0fffa17 	ldw	r3,-24(fp)
  1116a8:	e0bff917 	ldw	r2,-28(fp)
  1116ac:	1885c83a 	sub	r2,r3,r2
  1116b0:	100d883a 	mov	r6,r2
  1116b4:	200b883a 	mov	r5,r4
  1116b8:	3809883a 	mov	r4,r7
  1116bc:	0102e880 	call	102e88 <memcpy>
            buffer_offset += length_of_current_write - padding;
  1116c0:	e0fffa17 	ldw	r3,-24(fp)
  1116c4:	e0bff917 	ldw	r2,-28(fp)
  1116c8:	1885c83a 	sub	r2,r3,r2
  1116cc:	e0fffe17 	ldw	r3,-8(fp)
  1116d0:	1885883a 	add	r2,r3,r2
  1116d4:	e0bffe15 	stw	r2,-8(fp)
            length -= length_of_current_write - padding;
  1116d8:	e0fffa17 	ldw	r3,-24(fp)
  1116dc:	e0bff917 	ldw	r2,-28(fp)
  1116e0:	1885c83a 	sub	r2,r3,r2
  1116e4:	e0c00217 	ldw	r3,8(fp)
  1116e8:	1885c83a 	sub	r2,r3,r2
  1116ec:	e0800215 	stw	r2,8(fp)
        }

        /* Writing to flash via IO 32 bits at a time */
        IOWR_32DIRECT(flash->dev.base_addr, current_data_offset, chunk_of_data);
  1116f0:	e0bffb17 	ldw	r2,-20(fp)
  1116f4:	10c00a17 	ldw	r3,40(r2)
  1116f8:	e0bffd17 	ldw	r2,-12(fp)
  1116fc:	1885883a 	add	r2,r3,r2
  111700:	e0fff817 	ldw	r3,-32(fp)
  111704:	10c00035 	stwio	r3,0(r2)

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  111708:	e13ffb17 	ldw	r4,-20(fp)
  11170c:	0111f000 	call	111f00 <alt_onchip_flash_poll_for_status_to_go_idle>
  111710:	e0bfff15 	stw	r2,-4(fp)
        if (ret_code != 0)
  111714:	e0bfff17 	ldw	r2,-4(fp)
  111718:	10000a1e 	bne	r2,zero,111744 <alt_onchip_flash_write_block+0x288>
        {
            break;
        }

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
  11171c:	e13ffb17 	ldw	r4,-20(fp)
  111720:	01120240 	call	112024 <alt_onchip_flash_poll_for_status_write_passed>
  111724:	e0bfff15 	stw	r2,-4(fp)
        if (ret_code != 0)
  111728:	e0bfff17 	ldw	r2,-4(fp)
  11172c:	1000071e 	bne	r2,zero,11174c <alt_onchip_flash_write_block+0x290>
        {
            break;
        }

        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
  111730:	e0bffc17 	ldw	r2,-16(fp)
  111734:	e0bffd15 	stw	r2,-12(fp)
    while (length)
  111738:	e0800217 	ldw	r2,8(fp)
  11173c:	103f991e 	bne	r2,zero,1115a4 <alt_onchip_flash_write_block+0xe8>
  111740:	00000306 	br	111750 <alt_onchip_flash_write_block+0x294>
            break;
  111744:	0001883a 	nop
  111748:	00000106 	br	111750 <alt_onchip_flash_write_block+0x294>
            break;
  11174c:	0001883a 	nop
    }

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  111750:	e0bffb17 	ldw	r2,-20(fp)
  111754:	10802f17 	ldw	r2,188(r2)
  111758:	10c00104 	addi	r3,r2,4
  11175c:	e0bffb17 	ldw	r2,-20(fp)
  111760:	10802f17 	ldw	r2,188(r2)
  111764:	10800104 	addi	r2,r2,4
  111768:	11000037 	ldwio	r4,0(r2)
  11176c:	00840034 	movhi	r2,4096
  111770:	10bfffc4 	addi	r2,r2,-1
  111774:	2084b03a 	or	r2,r4,r2
  111778:	18800035 	stwio	r2,0(r3)

    return ret_code;
  11177c:	e0bfff17 	ldw	r2,-4(fp)
}
  111780:	e037883a 	mov	sp,fp
  111784:	dfc00117 	ldw	ra,4(sp)
  111788:	df000017 	ldw	fp,0(sp)
  11178c:	dec00204 	addi	sp,sp,8
  111790:	f800283a 	ret

00111794 <alt_onchip_flash_write>:
    alt_flash_dev *flash_info,
    int           offset,
    const void    *src_addr,
    int           length
)
{
  111794:	defff104 	addi	sp,sp,-60
  111798:	dfc00e15 	stw	ra,56(sp)
  11179c:	df000d15 	stw	fp,52(sp)
  1117a0:	df000d04 	addi	fp,sp,52
  1117a4:	e13ff715 	stw	r4,-36(fp)
  1117a8:	e17ff615 	stw	r5,-40(fp)
  1117ac:	e1bff515 	stw	r6,-44(fp)
  1117b0:	e1fff415 	stw	r7,-48(fp)
    int         ret_code = 0;
  1117b4:	e03fff15 	stw	zero,-4(fp)
    int         i,j;
    int         data_to_write;
    int         current_offset;
    int         full_length = length;
  1117b8:	e0bff417 	ldw	r2,-48(fp)
  1117bc:	e0bffb15 	stw	r2,-20(fp)
    int         start_offset = offset;
  1117c0:	e0bff617 	ldw	r2,-40(fp)
  1117c4:	e0bffa15 	stw	r2,-24(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
  1117c8:	e0bff717 	ldw	r2,-36(fp)
  1117cc:	e0bff915 	stw	r2,-28(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
  1117d0:	e0bff917 	ldw	r2,-28(fp)
  1117d4:	10800b17 	ldw	r2,44(r2)
  1117d8:	e0fff617 	ldw	r3,-40(fp)
  1117dc:	1880060e 	bge	r3,r2,1117f8 <alt_onchip_flash_write+0x64>
  1117e0:	e0bff917 	ldw	r2,-28(fp)
  1117e4:	10c00b17 	ldw	r3,44(r2)
  1117e8:	e0bff617 	ldw	r2,-40(fp)
  1117ec:	1887c83a 	sub	r3,r3,r2
  1117f0:	e0bff417 	ldw	r2,-48(fp)
  1117f4:	1880020e 	bge	r3,r2,111800 <alt_onchip_flash_write+0x6c>
    {
        return -EFAULT;
  1117f8:	00bffc84 	movi	r2,-14
  1117fc:	00009306 	br	111a4c <alt_onchip_flash_write+0x2b8>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
  111800:	e03ffe15 	stw	zero,-8(fp)
  111804:	00008206 	br	111a10 <alt_onchip_flash_write+0x27c>
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
  111808:	e0fff917 	ldw	r3,-28(fp)
  11180c:	e0bffe17 	ldw	r2,-8(fp)
  111810:	1004913a 	slli	r2,r2,4
  111814:	1885883a 	add	r2,r3,r2
  111818:	10800d17 	ldw	r2,52(r2)
  11181c:	e0fff617 	ldw	r3,-40(fp)
  111820:	18807816 	blt	r3,r2,111a04 <alt_onchip_flash_write+0x270>
            (offset < (flash->dev.region_info[i].offset +
  111824:	e0fff917 	ldw	r3,-28(fp)
  111828:	e0bffe17 	ldw	r2,-8(fp)
  11182c:	1004913a 	slli	r2,r2,4
  111830:	1885883a 	add	r2,r3,r2
  111834:	10c00d17 	ldw	r3,52(r2)
            flash->dev.region_info[i].region_size)))
  111838:	e13ff917 	ldw	r4,-28(fp)
  11183c:	e0bffe17 	ldw	r2,-8(fp)
  111840:	1004913a 	slli	r2,r2,4
  111844:	2085883a 	add	r2,r4,r2
  111848:	10800e17 	ldw	r2,56(r2)
            (offset < (flash->dev.region_info[i].offset +
  11184c:	1885883a 	add	r2,r3,r2
        if((offset >= flash->dev.region_info[i].offset) &&
  111850:	e0fff617 	ldw	r3,-40(fp)
  111854:	18806b0e 	bge	r3,r2,111a04 <alt_onchip_flash_write+0x270>
        {
            current_offset = flash->dev.region_info[i].offset;
  111858:	e0fff917 	ldw	r3,-28(fp)
  11185c:	e0bffe17 	ldw	r2,-8(fp)
  111860:	1004913a 	slli	r2,r2,4
  111864:	1885883a 	add	r2,r3,r2
  111868:	10800d17 	ldw	r2,52(r2)
  11186c:	e0bffc15 	stw	r2,-16(fp)

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
  111870:	e03ffd15 	stw	zero,-12(fp)
  111874:	00005c06 	br	1119e8 <alt_onchip_flash_write+0x254>
            {
                if ((offset >= current_offset ) &&
  111878:	e0fff617 	ldw	r3,-40(fp)
  11187c:	e0bffc17 	ldw	r2,-16(fp)
  111880:	18804d16 	blt	r3,r2,1119b8 <alt_onchip_flash_write+0x224>
                    (offset < (current_offset +
                    flash->dev.region_info[i].block_size)))
  111884:	e0fff917 	ldw	r3,-28(fp)
  111888:	e0bffe17 	ldw	r2,-8(fp)
  11188c:	10800104 	addi	r2,r2,4
  111890:	1004913a 	slli	r2,r2,4
  111894:	1885883a 	add	r2,r3,r2
  111898:	10c00017 	ldw	r3,0(r2)
                    (offset < (current_offset +
  11189c:	e0bffc17 	ldw	r2,-16(fp)
  1118a0:	1885883a 	add	r2,r3,r2
                if ((offset >= current_offset ) &&
  1118a4:	e0fff617 	ldw	r3,-40(fp)
  1118a8:	1880430e 	bge	r3,r2,1119b8 <alt_onchip_flash_write+0x224>
                {
                    /*
                    * Check if the contents of the block are different
                    * from the data we wish to put there
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
  1118ac:	e0fff917 	ldw	r3,-28(fp)
  1118b0:	e0bffe17 	ldw	r2,-8(fp)
  1118b4:	10800104 	addi	r2,r2,4
  1118b8:	1004913a 	slli	r2,r2,4
  1118bc:	1885883a 	add	r2,r3,r2
  1118c0:	10c00017 	ldw	r3,0(r2)
  1118c4:	e0bffc17 	ldw	r2,-16(fp)
  1118c8:	1887883a 	add	r3,r3,r2
  1118cc:	e0bff617 	ldw	r2,-40(fp)
  1118d0:	1885c83a 	sub	r2,r3,r2
  1118d4:	e0bff815 	stw	r2,-32(fp)
                    data_to_write = MIN(data_to_write, length);
  1118d8:	e0fff817 	ldw	r3,-32(fp)
  1118dc:	e0bff417 	ldw	r2,-48(fp)
  1118e0:	1880010e 	bge	r3,r2,1118e8 <alt_onchip_flash_write+0x154>
  1118e4:	1805883a 	mov	r2,r3
  1118e8:	e0bff815 	stw	r2,-32(fp)
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
  1118ec:	e0bff917 	ldw	r2,-28(fp)
  1118f0:	10c00a17 	ldw	r3,40(r2)
  1118f4:	e0bff617 	ldw	r2,-40(fp)
  1118f8:	1885883a 	add	r2,r3,r2
  1118fc:	e0fff817 	ldw	r3,-32(fp)
  111900:	180d883a 	mov	r6,r3
  111904:	100b883a 	mov	r5,r2
  111908:	e13ff517 	ldw	r4,-44(fp)
  11190c:	0112e9c0 	call	112e9c <memcmp>
  111910:	10001326 	beq	r2,zero,111960 <alt_onchip_flash_write+0x1cc>
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);
  111914:	e0bff917 	ldw	r2,-28(fp)
  111918:	10800817 	ldw	r2,32(r2)
  11191c:	e0fff917 	ldw	r3,-28(fp)
  111920:	e17ffc17 	ldw	r5,-16(fp)
  111924:	1809883a 	mov	r4,r3
  111928:	103ee83a 	callr	r2
  11192c:	e0bfff15 	stw	r2,-4(fp)

                        if (!ret_code)
  111930:	e0bfff17 	ldw	r2,-4(fp)
  111934:	10000a1e 	bne	r2,zero,111960 <alt_onchip_flash_write+0x1cc>
                        {
                            ret_code = (*flash->dev.write_block)(
  111938:	e0bff917 	ldw	r2,-28(fp)
  11193c:	10800917 	ldw	r2,36(r2)
  111940:	e13ff917 	ldw	r4,-28(fp)
  111944:	e0fff817 	ldw	r3,-32(fp)
  111948:	d8c00015 	stw	r3,0(sp)
  11194c:	e1fff517 	ldw	r7,-44(fp)
  111950:	e1bff617 	ldw	r6,-40(fp)
  111954:	e17ffc17 	ldw	r5,-16(fp)
  111958:	103ee83a 	callr	r2
  11195c:	e0bfff15 	stw	r2,-4(fp)
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
  111960:	e0fff417 	ldw	r3,-48(fp)
  111964:	e0bff817 	ldw	r2,-32(fp)
  111968:	18802e26 	beq	r3,r2,111a24 <alt_onchip_flash_write+0x290>
  11196c:	e0bfff17 	ldw	r2,-4(fp)
  111970:	10002c1e 	bne	r2,zero,111a24 <alt_onchip_flash_write+0x290>
                    {
                        goto finished;
                    }

                    length -= data_to_write;
  111974:	e0fff417 	ldw	r3,-48(fp)
  111978:	e0bff817 	ldw	r2,-32(fp)
  11197c:	1885c83a 	sub	r2,r3,r2
  111980:	e0bff415 	stw	r2,-48(fp)
                    offset = current_offset + flash->dev.region_info[i].block_size;
  111984:	e0fff917 	ldw	r3,-28(fp)
  111988:	e0bffe17 	ldw	r2,-8(fp)
  11198c:	10800104 	addi	r2,r2,4
  111990:	1004913a 	slli	r2,r2,4
  111994:	1885883a 	add	r2,r3,r2
  111998:	10800017 	ldw	r2,0(r2)
  11199c:	e0fffc17 	ldw	r3,-16(fp)
  1119a0:	1885883a 	add	r2,r3,r2
  1119a4:	e0bff615 	stw	r2,-40(fp)
                    src_addr = (alt_u8*)src_addr + data_to_write;
  1119a8:	e0bff817 	ldw	r2,-32(fp)
  1119ac:	e0fff517 	ldw	r3,-44(fp)
  1119b0:	1885883a 	add	r2,r3,r2
  1119b4:	e0bff515 	stw	r2,-44(fp)
                }
                current_offset += flash->dev.region_info[i].block_size;
  1119b8:	e0fff917 	ldw	r3,-28(fp)
  1119bc:	e0bffe17 	ldw	r2,-8(fp)
  1119c0:	10800104 	addi	r2,r2,4
  1119c4:	1004913a 	slli	r2,r2,4
  1119c8:	1885883a 	add	r2,r3,r2
  1119cc:	10800017 	ldw	r2,0(r2)
  1119d0:	e0fffc17 	ldw	r3,-16(fp)
  1119d4:	1885883a 	add	r2,r3,r2
  1119d8:	e0bffc15 	stw	r2,-16(fp)
            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
  1119dc:	e0bffd17 	ldw	r2,-12(fp)
  1119e0:	10800044 	addi	r2,r2,1
  1119e4:	e0bffd15 	stw	r2,-12(fp)
  1119e8:	e0fff917 	ldw	r3,-28(fp)
  1119ec:	e0bffe17 	ldw	r2,-8(fp)
  1119f0:	1004913a 	slli	r2,r2,4
  1119f4:	1885883a 	add	r2,r3,r2
  1119f8:	10800f17 	ldw	r2,60(r2)
  1119fc:	e0fffd17 	ldw	r3,-12(fp)
  111a00:	18bf9d16 	blt	r3,r2,111878 <alt_onchip_flash_write+0xe4>
    for(i=0;i<flash->dev.number_of_regions;i++)
  111a04:	e0bffe17 	ldw	r2,-8(fp)
  111a08:	10800044 	addi	r2,r2,1
  111a0c:	e0bffe15 	stw	r2,-8(fp)
  111a10:	e0bff917 	ldw	r2,-28(fp)
  111a14:	10800c17 	ldw	r2,48(r2)
  111a18:	e0fffe17 	ldw	r3,-8(fp)
  111a1c:	18bf7a16 	blt	r3,r2,111808 <alt_onchip_flash_write+0x74>
            }
        }
    }

finished:
  111a20:	00000106 	br	111a28 <alt_onchip_flash_write+0x294>
                        goto finished;
  111a24:	0001883a 	nop
    alt_dcache_flush((alt_u8*)flash->dev.base_addr+start_offset, full_length);
  111a28:	e0bff917 	ldw	r2,-28(fp)
  111a2c:	10c00a17 	ldw	r3,40(r2)
  111a30:	e0bffa17 	ldw	r2,-24(fp)
  111a34:	1885883a 	add	r2,r3,r2
  111a38:	e0fffb17 	ldw	r3,-20(fp)
  111a3c:	180b883a 	mov	r5,r3
  111a40:	1009883a 	mov	r4,r2
  111a44:	011233c0 	call	11233c <alt_dcache_flush>
    return ret_code;
  111a48:	e0bfff17 	ldw	r2,-4(fp)
}
  111a4c:	e037883a 	mov	sp,fp
  111a50:	dfc00117 	ldw	ra,4(sp)
  111a54:	df000017 	ldw	fp,0(sp)
  111a58:	dec00204 	addi	sp,sp,8
  111a5c:	f800283a 	ret

00111a60 <altera_onchip_flash_init>:
**/
void altera_onchip_flash_init
(
    alt_onchip_flash_dev *flash
)
{
  111a60:	defff504 	addi	sp,sp,-44
  111a64:	dfc00a15 	stw	ra,40(sp)
  111a68:	df000915 	stw	fp,36(sp)
  111a6c:	dc000815 	stw	r16,32(sp)
  111a70:	df000904 	addi	fp,sp,36
  111a74:	e13ff715 	stw	r4,-36(fp)
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
  111a78:	e03ffd15 	stw	zero,-12(fp)
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
  111a7c:	e03ffc15 	stw	zero,-16(fp)
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
  111a80:	e03ffb15 	stw	zero,-20(fp)
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
  111a84:	e03ffa15 	stw	zero,-24(fp)
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
  111a88:	e03ff915 	stw	zero,-28(fp)

    /* Set up flash_region data structures. */
    number_of_regions = 0;
  111a8c:	e03ffe15 	stw	zero,-8(fp)
    region_info = &flash->dev.region_info[0];
  111a90:	e0bff717 	ldw	r2,-36(fp)
  111a94:	10800d04 	addi	r2,r2,52
  111a98:	e0bff815 	stw	r2,-32(fp)

    if (flash->csr_base != NULL) {
  111a9c:	e0bff717 	ldw	r2,-36(fp)
  111aa0:	10802f17 	ldw	r2,188(r2)
  111aa4:	10001926 	beq	r2,zero,111b0c <altera_onchip_flash_init+0xac>
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
  111aa8:	e0bff717 	ldw	r2,-36(fp)
  111aac:	10802f17 	ldw	r2,188(r2)
  111ab0:	10800037 	ldwio	r2,0(r2)
  111ab4:	1080080c 	andi	r2,r2,32
  111ab8:	e0bffd15 	stw	r2,-12(fp)
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
  111abc:	e0bff717 	ldw	r2,-36(fp)
  111ac0:	10802f17 	ldw	r2,188(r2)
  111ac4:	10800037 	ldwio	r2,0(r2)
  111ac8:	1080100c 	andi	r2,r2,64
  111acc:	e0bffc15 	stw	r2,-16(fp)
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
  111ad0:	e0bff717 	ldw	r2,-36(fp)
  111ad4:	10802f17 	ldw	r2,188(r2)
  111ad8:	10800037 	ldwio	r2,0(r2)
  111adc:	1080200c 	andi	r2,r2,128
  111ae0:	e0bffb15 	stw	r2,-20(fp)
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
  111ae4:	e0bff717 	ldw	r2,-36(fp)
  111ae8:	10802f17 	ldw	r2,188(r2)
  111aec:	10800037 	ldwio	r2,0(r2)
  111af0:	1080400c 	andi	r2,r2,256
  111af4:	e0bffa15 	stw	r2,-24(fp)
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
  111af8:	e0bff717 	ldw	r2,-36(fp)
  111afc:	10802f17 	ldw	r2,188(r2)
  111b00:	10800037 	ldwio	r2,0(r2)
  111b04:	1080800c 	andi	r2,r2,512
  111b08:	e0bff915 	stw	r2,-28(fp)
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
  111b0c:	e0bff717 	ldw	r2,-36(fp)
  111b10:	10803017 	ldw	r2,192(r2)
  111b14:	10800058 	cmpnei	r2,r2,1
  111b18:	10002c1e 	bne	r2,zero,111bcc <altera_onchip_flash_init+0x16c>
  111b1c:	e0bffd17 	ldw	r2,-12(fp)
  111b20:	10800820 	cmpeqi	r2,r2,32
  111b24:	1000291e 	bne	r2,zero,111bcc <altera_onchip_flash_init+0x16c>

        region_info[number_of_regions].offset = flash->sector1_start_addr;
  111b28:	e0bffe17 	ldw	r2,-8(fp)
  111b2c:	1004913a 	slli	r2,r2,4
  111b30:	e0fff817 	ldw	r3,-32(fp)
  111b34:	1885883a 	add	r2,r3,r2
  111b38:	e0fff717 	ldw	r3,-36(fp)
  111b3c:	18c03117 	ldw	r3,196(r3)
  111b40:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
  111b44:	e0bff717 	ldw	r2,-36(fp)
  111b48:	10c03217 	ldw	r3,200(r2)
  111b4c:	e0bff717 	ldw	r2,-36(fp)
  111b50:	10803117 	ldw	r2,196(r2)
  111b54:	1887c83a 	sub	r3,r3,r2
  111b58:	e0bffe17 	ldw	r2,-8(fp)
  111b5c:	1004913a 	slli	r2,r2,4
  111b60:	e13ff817 	ldw	r4,-32(fp)
  111b64:	2085883a 	add	r2,r4,r2
  111b68:	18c00044 	addi	r3,r3,1
  111b6c:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  111b70:	e0fff717 	ldw	r3,-36(fp)
  111b74:	e0bffe17 	ldw	r2,-8(fp)
  111b78:	1004913a 	slli	r2,r2,4
  111b7c:	1885883a 	add	r2,r3,r2
  111b80:	11000e17 	ldw	r4,56(r2)
  111b84:	e0bff717 	ldw	r2,-36(fp)
  111b88:	11403f17 	ldw	r5,252(r2)
  111b8c:	e0bffe17 	ldw	r2,-8(fp)
  111b90:	1004913a 	slli	r2,r2,4
  111b94:	e0fff817 	ldw	r3,-32(fp)
  111b98:	18a1883a 	add	r16,r3,r2
  111b9c:	0102ca80 	call	102ca8 <__divsi3>
  111ba0:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  111ba4:	e0bffe17 	ldw	r2,-8(fp)
  111ba8:	1004913a 	slli	r2,r2,4
  111bac:	e0fff817 	ldw	r3,-32(fp)
  111bb0:	1885883a 	add	r2,r3,r2
  111bb4:	e0fff717 	ldw	r3,-36(fp)
  111bb8:	18c03f17 	ldw	r3,252(r3)
  111bbc:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  111bc0:	e0bffe17 	ldw	r2,-8(fp)
  111bc4:	10800044 	addi	r2,r2,1
  111bc8:	e0bffe15 	stw	r2,-8(fp)
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
  111bcc:	e0bff717 	ldw	r2,-36(fp)
  111bd0:	10803317 	ldw	r2,204(r2)
  111bd4:	10800058 	cmpnei	r2,r2,1
  111bd8:	10002c1e 	bne	r2,zero,111c8c <altera_onchip_flash_init+0x22c>
  111bdc:	e0bffc17 	ldw	r2,-16(fp)
  111be0:	10801020 	cmpeqi	r2,r2,64
  111be4:	1000291e 	bne	r2,zero,111c8c <altera_onchip_flash_init+0x22c>

        region_info[number_of_regions].offset = flash->sector2_start_addr;
  111be8:	e0bffe17 	ldw	r2,-8(fp)
  111bec:	1004913a 	slli	r2,r2,4
  111bf0:	e0fff817 	ldw	r3,-32(fp)
  111bf4:	1885883a 	add	r2,r3,r2
  111bf8:	e0fff717 	ldw	r3,-36(fp)
  111bfc:	18c03417 	ldw	r3,208(r3)
  111c00:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
  111c04:	e0bff717 	ldw	r2,-36(fp)
  111c08:	10c03517 	ldw	r3,212(r2)
  111c0c:	e0bff717 	ldw	r2,-36(fp)
  111c10:	10803417 	ldw	r2,208(r2)
  111c14:	1887c83a 	sub	r3,r3,r2
  111c18:	e0bffe17 	ldw	r2,-8(fp)
  111c1c:	1004913a 	slli	r2,r2,4
  111c20:	e13ff817 	ldw	r4,-32(fp)
  111c24:	2085883a 	add	r2,r4,r2
  111c28:	18c00044 	addi	r3,r3,1
  111c2c:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  111c30:	e0fff717 	ldw	r3,-36(fp)
  111c34:	e0bffe17 	ldw	r2,-8(fp)
  111c38:	1004913a 	slli	r2,r2,4
  111c3c:	1885883a 	add	r2,r3,r2
  111c40:	11000e17 	ldw	r4,56(r2)
  111c44:	e0bff717 	ldw	r2,-36(fp)
  111c48:	11403f17 	ldw	r5,252(r2)
  111c4c:	e0bffe17 	ldw	r2,-8(fp)
  111c50:	1004913a 	slli	r2,r2,4
  111c54:	e0fff817 	ldw	r3,-32(fp)
  111c58:	18a1883a 	add	r16,r3,r2
  111c5c:	0102ca80 	call	102ca8 <__divsi3>
  111c60:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  111c64:	e0bffe17 	ldw	r2,-8(fp)
  111c68:	1004913a 	slli	r2,r2,4
  111c6c:	e0fff817 	ldw	r3,-32(fp)
  111c70:	1885883a 	add	r2,r3,r2
  111c74:	e0fff717 	ldw	r3,-36(fp)
  111c78:	18c03f17 	ldw	r3,252(r3)
  111c7c:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  111c80:	e0bffe17 	ldw	r2,-8(fp)
  111c84:	10800044 	addi	r2,r2,1
  111c88:	e0bffe15 	stw	r2,-8(fp)
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
  111c8c:	e0bff717 	ldw	r2,-36(fp)
  111c90:	10803617 	ldw	r2,216(r2)
  111c94:	10800058 	cmpnei	r2,r2,1
  111c98:	10002c1e 	bne	r2,zero,111d4c <altera_onchip_flash_init+0x2ec>
  111c9c:	e0bffb17 	ldw	r2,-20(fp)
  111ca0:	10802020 	cmpeqi	r2,r2,128
  111ca4:	1000291e 	bne	r2,zero,111d4c <altera_onchip_flash_init+0x2ec>

        region_info[number_of_regions].offset = flash->sector3_start_addr;
  111ca8:	e0bffe17 	ldw	r2,-8(fp)
  111cac:	1004913a 	slli	r2,r2,4
  111cb0:	e0fff817 	ldw	r3,-32(fp)
  111cb4:	1885883a 	add	r2,r3,r2
  111cb8:	e0fff717 	ldw	r3,-36(fp)
  111cbc:	18c03717 	ldw	r3,220(r3)
  111cc0:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
  111cc4:	e0bff717 	ldw	r2,-36(fp)
  111cc8:	10c03817 	ldw	r3,224(r2)
  111ccc:	e0bff717 	ldw	r2,-36(fp)
  111cd0:	10803717 	ldw	r2,220(r2)
  111cd4:	1887c83a 	sub	r3,r3,r2
  111cd8:	e0bffe17 	ldw	r2,-8(fp)
  111cdc:	1004913a 	slli	r2,r2,4
  111ce0:	e13ff817 	ldw	r4,-32(fp)
  111ce4:	2085883a 	add	r2,r4,r2
  111ce8:	18c00044 	addi	r3,r3,1
  111cec:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  111cf0:	e0fff717 	ldw	r3,-36(fp)
  111cf4:	e0bffe17 	ldw	r2,-8(fp)
  111cf8:	1004913a 	slli	r2,r2,4
  111cfc:	1885883a 	add	r2,r3,r2
  111d00:	11000e17 	ldw	r4,56(r2)
  111d04:	e0bff717 	ldw	r2,-36(fp)
  111d08:	11403f17 	ldw	r5,252(r2)
  111d0c:	e0bffe17 	ldw	r2,-8(fp)
  111d10:	1004913a 	slli	r2,r2,4
  111d14:	e0fff817 	ldw	r3,-32(fp)
  111d18:	18a1883a 	add	r16,r3,r2
  111d1c:	0102ca80 	call	102ca8 <__divsi3>
  111d20:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  111d24:	e0bffe17 	ldw	r2,-8(fp)
  111d28:	1004913a 	slli	r2,r2,4
  111d2c:	e0fff817 	ldw	r3,-32(fp)
  111d30:	1885883a 	add	r2,r3,r2
  111d34:	e0fff717 	ldw	r3,-36(fp)
  111d38:	18c03f17 	ldw	r3,252(r3)
  111d3c:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  111d40:	e0bffe17 	ldw	r2,-8(fp)
  111d44:	10800044 	addi	r2,r2,1
  111d48:	e0bffe15 	stw	r2,-8(fp)
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
  111d4c:	e0bff717 	ldw	r2,-36(fp)
  111d50:	10803917 	ldw	r2,228(r2)
  111d54:	10800058 	cmpnei	r2,r2,1
  111d58:	10002c1e 	bne	r2,zero,111e0c <altera_onchip_flash_init+0x3ac>
  111d5c:	e0bffa17 	ldw	r2,-24(fp)
  111d60:	10804020 	cmpeqi	r2,r2,256
  111d64:	1000291e 	bne	r2,zero,111e0c <altera_onchip_flash_init+0x3ac>

        region_info[number_of_regions].offset = flash->sector4_start_addr;
  111d68:	e0bffe17 	ldw	r2,-8(fp)
  111d6c:	1004913a 	slli	r2,r2,4
  111d70:	e0fff817 	ldw	r3,-32(fp)
  111d74:	1885883a 	add	r2,r3,r2
  111d78:	e0fff717 	ldw	r3,-36(fp)
  111d7c:	18c03a17 	ldw	r3,232(r3)
  111d80:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
  111d84:	e0bff717 	ldw	r2,-36(fp)
  111d88:	10c03b17 	ldw	r3,236(r2)
  111d8c:	e0bff717 	ldw	r2,-36(fp)
  111d90:	10803a17 	ldw	r2,232(r2)
  111d94:	1887c83a 	sub	r3,r3,r2
  111d98:	e0bffe17 	ldw	r2,-8(fp)
  111d9c:	1004913a 	slli	r2,r2,4
  111da0:	e13ff817 	ldw	r4,-32(fp)
  111da4:	2085883a 	add	r2,r4,r2
  111da8:	18c00044 	addi	r3,r3,1
  111dac:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  111db0:	e0fff717 	ldw	r3,-36(fp)
  111db4:	e0bffe17 	ldw	r2,-8(fp)
  111db8:	1004913a 	slli	r2,r2,4
  111dbc:	1885883a 	add	r2,r3,r2
  111dc0:	11000e17 	ldw	r4,56(r2)
  111dc4:	e0bff717 	ldw	r2,-36(fp)
  111dc8:	11403f17 	ldw	r5,252(r2)
  111dcc:	e0bffe17 	ldw	r2,-8(fp)
  111dd0:	1004913a 	slli	r2,r2,4
  111dd4:	e0fff817 	ldw	r3,-32(fp)
  111dd8:	18a1883a 	add	r16,r3,r2
  111ddc:	0102ca80 	call	102ca8 <__divsi3>
  111de0:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  111de4:	e0bffe17 	ldw	r2,-8(fp)
  111de8:	1004913a 	slli	r2,r2,4
  111dec:	e0fff817 	ldw	r3,-32(fp)
  111df0:	1885883a 	add	r2,r3,r2
  111df4:	e0fff717 	ldw	r3,-36(fp)
  111df8:	18c03f17 	ldw	r3,252(r3)
  111dfc:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  111e00:	e0bffe17 	ldw	r2,-8(fp)
  111e04:	10800044 	addi	r2,r2,1
  111e08:	e0bffe15 	stw	r2,-8(fp)
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
  111e0c:	e0bff717 	ldw	r2,-36(fp)
  111e10:	10803c17 	ldw	r2,240(r2)
  111e14:	10800058 	cmpnei	r2,r2,1
  111e18:	10002c1e 	bne	r2,zero,111ecc <altera_onchip_flash_init+0x46c>
  111e1c:	e0bff917 	ldw	r2,-28(fp)
  111e20:	10808020 	cmpeqi	r2,r2,512
  111e24:	1000291e 	bne	r2,zero,111ecc <altera_onchip_flash_init+0x46c>

        region_info[number_of_regions].offset = flash->sector5_start_addr;
  111e28:	e0bffe17 	ldw	r2,-8(fp)
  111e2c:	1004913a 	slli	r2,r2,4
  111e30:	e0fff817 	ldw	r3,-32(fp)
  111e34:	1885883a 	add	r2,r3,r2
  111e38:	e0fff717 	ldw	r3,-36(fp)
  111e3c:	18c03d17 	ldw	r3,244(r3)
  111e40:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
  111e44:	e0bff717 	ldw	r2,-36(fp)
  111e48:	10c03e17 	ldw	r3,248(r2)
  111e4c:	e0bff717 	ldw	r2,-36(fp)
  111e50:	10803d17 	ldw	r2,244(r2)
  111e54:	1887c83a 	sub	r3,r3,r2
  111e58:	e0bffe17 	ldw	r2,-8(fp)
  111e5c:	1004913a 	slli	r2,r2,4
  111e60:	e13ff817 	ldw	r4,-32(fp)
  111e64:	2085883a 	add	r2,r4,r2
  111e68:	18c00044 	addi	r3,r3,1
  111e6c:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  111e70:	e0fff717 	ldw	r3,-36(fp)
  111e74:	e0bffe17 	ldw	r2,-8(fp)
  111e78:	1004913a 	slli	r2,r2,4
  111e7c:	1885883a 	add	r2,r3,r2
  111e80:	11000e17 	ldw	r4,56(r2)
  111e84:	e0bff717 	ldw	r2,-36(fp)
  111e88:	11403f17 	ldw	r5,252(r2)
  111e8c:	e0bffe17 	ldw	r2,-8(fp)
  111e90:	1004913a 	slli	r2,r2,4
  111e94:	e0fff817 	ldw	r3,-32(fp)
  111e98:	18a1883a 	add	r16,r3,r2
  111e9c:	0102ca80 	call	102ca8 <__divsi3>
  111ea0:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  111ea4:	e0bffe17 	ldw	r2,-8(fp)
  111ea8:	1004913a 	slli	r2,r2,4
  111eac:	e0fff817 	ldw	r3,-32(fp)
  111eb0:	1885883a 	add	r2,r3,r2
  111eb4:	e0fff717 	ldw	r3,-36(fp)
  111eb8:	18c03f17 	ldw	r3,252(r3)
  111ebc:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  111ec0:	e0bffe17 	ldw	r2,-8(fp)
  111ec4:	10800044 	addi	r2,r2,1
  111ec8:	e0bffe15 	stw	r2,-8(fp)
    }

    /* Update number of regions. */
    flash->dev.number_of_regions = number_of_regions;
  111ecc:	e0bff717 	ldw	r2,-36(fp)
  111ed0:	e0fffe17 	ldw	r3,-8(fp)
  111ed4:	10c00c15 	stw	r3,48(r2)

    /*
    *  Register this device as a valid flash device type
    */
    alt_flash_device_register(&(flash->dev));
  111ed8:	e0bff717 	ldw	r2,-36(fp)
  111edc:	1009883a 	mov	r4,r2
  111ee0:	01111b80 	call	1111b8 <alt_flash_device_register>
}
  111ee4:	0001883a 	nop
  111ee8:	e6ffff04 	addi	sp,fp,-4
  111eec:	dfc00217 	ldw	ra,8(sp)
  111ef0:	df000117 	ldw	fp,4(sp)
  111ef4:	dc000017 	ldw	r16,0(sp)
  111ef8:	dec00304 	addi	sp,sp,12
  111efc:	f800283a 	ret

00111f00 <alt_onchip_flash_poll_for_status_to_go_idle>:
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
  111f00:	defffa04 	addi	sp,sp,-24
  111f04:	dfc00515 	stw	ra,20(sp)
  111f08:	df000415 	stw	fp,16(sp)
  111f0c:	df000404 	addi	fp,sp,16
  111f10:	e13ffc15 	stw	r4,-16(fp)
    int ret_code = 0;
  111f14:	e03fff15 	stw	zero,-4(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  111f18:	008002f4 	movhi	r2,11
  111f1c:	10ab9804 	addi	r2,r2,-20896
  111f20:	e0bffd15 	stw	r2,-12(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  111f24:	008002f4 	movhi	r2,11
  111f28:	10ab9804 	addi	r2,r2,-20896
  111f2c:	e0bffe15 	stw	r2,-8(fp)

    while (
  111f30:	00000c06 	br	111f64 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
  111f34:	01000044 	movi	r4,1
  111f38:	01121e40 	call	1121e4 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  111f3c:	e0bffd17 	ldw	r2,-12(fp)
  111f40:	10000826 	beq	r2,zero,111f64 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
            count_down--;
  111f44:	e0bffe17 	ldw	r2,-8(fp)
  111f48:	10bfffc4 	addi	r2,r2,-1
  111f4c:	e0bffe15 	stw	r2,-8(fp)
            if (count_down == 0) {
  111f50:	e0bffe17 	ldw	r2,-8(fp)
  111f54:	1000031e 	bne	r2,zero,111f64 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  111f58:	00bfe304 	movi	r2,-116
  111f5c:	e0bfff15 	stw	r2,-4(fp)
                break;
  111f60:	00000506 	br	111f78 <alt_onchip_flash_poll_for_status_to_go_idle+0x78>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  111f64:	e0bffc17 	ldw	r2,-16(fp)
  111f68:	10802f17 	ldw	r2,188(r2)
  111f6c:	10800037 	ldwio	r2,0(r2)
  111f70:	108000cc 	andi	r2,r2,3
    while (
  111f74:	103fef1e 	bne	r2,zero,111f34 <alt_onchip_flash_poll_for_status_to_go_idle+0x34>
            }
        }
    }

    return ret_code;
  111f78:	e0bfff17 	ldw	r2,-4(fp)
}
  111f7c:	e037883a 	mov	sp,fp
  111f80:	dfc00117 	ldw	ra,4(sp)
  111f84:	df000017 	ldw	fp,0(sp)
  111f88:	dec00204 	addi	sp,sp,8
  111f8c:	f800283a 	ret

00111f90 <alt_onchip_flash_poll_for_status_erase_passed>:
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
  111f90:	defffa04 	addi	sp,sp,-24
  111f94:	dfc00515 	stw	ra,20(sp)
  111f98:	df000415 	stw	fp,16(sp)
  111f9c:	df000404 	addi	fp,sp,16
  111fa0:	e13ffc15 	stw	r4,-16(fp)
    int ret_code = 0;
  111fa4:	e03fff15 	stw	zero,-4(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  111fa8:	008002f4 	movhi	r2,11
  111fac:	10ab9804 	addi	r2,r2,-20896
  111fb0:	e0bffd15 	stw	r2,-12(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  111fb4:	008002f4 	movhi	r2,11
  111fb8:	10ab9804 	addi	r2,r2,-20896
  111fbc:	e0bffe15 	stw	r2,-8(fp)

    while (
  111fc0:	00000c06 	br	111ff4 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
  111fc4:	01000044 	movi	r4,1
  111fc8:	01121e40 	call	1121e4 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  111fcc:	e0bffd17 	ldw	r2,-12(fp)
  111fd0:	10000826 	beq	r2,zero,111ff4 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
            count_down--;
  111fd4:	e0bffe17 	ldw	r2,-8(fp)
  111fd8:	10bfffc4 	addi	r2,r2,-1
  111fdc:	e0bffe15 	stw	r2,-8(fp)
            if (count_down == 0) {
  111fe0:	e0bffe17 	ldw	r2,-8(fp)
  111fe4:	1000031e 	bne	r2,zero,111ff4 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  111fe8:	00bfe304 	movi	r2,-116
  111fec:	e0bfff15 	stw	r2,-4(fp)
                break;
  111ff0:	00000606 	br	11200c <alt_onchip_flash_poll_for_status_erase_passed+0x7c>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  111ff4:	e0bffc17 	ldw	r2,-16(fp)
  111ff8:	10802f17 	ldw	r2,188(r2)
  111ffc:	10800037 	ldwio	r2,0(r2)
  112000:	1080040c 	andi	r2,r2,16
    while (
  112004:	10800418 	cmpnei	r2,r2,16
  112008:	103fee1e 	bne	r2,zero,111fc4 <alt_onchip_flash_poll_for_status_erase_passed+0x34>
            }
        }
    }

    return ret_code;
  11200c:	e0bfff17 	ldw	r2,-4(fp)
}
  112010:	e037883a 	mov	sp,fp
  112014:	dfc00117 	ldw	ra,4(sp)
  112018:	df000017 	ldw	fp,0(sp)
  11201c:	dec00204 	addi	sp,sp,8
  112020:	f800283a 	ret

00112024 <alt_onchip_flash_poll_for_status_write_passed>:
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
  112024:	defffa04 	addi	sp,sp,-24
  112028:	dfc00515 	stw	ra,20(sp)
  11202c:	df000415 	stw	fp,16(sp)
  112030:	df000404 	addi	fp,sp,16
  112034:	e13ffc15 	stw	r4,-16(fp)
    int ret_code = 0;
  112038:	e03fff15 	stw	zero,-4(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  11203c:	008002f4 	movhi	r2,11
  112040:	10ab9804 	addi	r2,r2,-20896
  112044:	e0bffd15 	stw	r2,-12(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  112048:	008002f4 	movhi	r2,11
  11204c:	10ab9804 	addi	r2,r2,-20896
  112050:	e0bffe15 	stw	r2,-8(fp)

    while (
  112054:	00000c06 	br	112088 <alt_onchip_flash_poll_for_status_write_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
  112058:	01000044 	movi	r4,1
  11205c:	01121e40 	call	1121e4 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  112060:	e0bffd17 	ldw	r2,-12(fp)
  112064:	10000826 	beq	r2,zero,112088 <alt_onchip_flash_poll_for_status_write_passed+0x64>
            count_down--;
  112068:	e0bffe17 	ldw	r2,-8(fp)
  11206c:	10bfffc4 	addi	r2,r2,-1
  112070:	e0bffe15 	stw	r2,-8(fp)
            if (count_down == 0) {
  112074:	e0bffe17 	ldw	r2,-8(fp)
  112078:	1000031e 	bne	r2,zero,112088 <alt_onchip_flash_poll_for_status_write_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  11207c:	00bfe304 	movi	r2,-116
  112080:	e0bfff15 	stw	r2,-4(fp)
                break;
  112084:	00000606 	br	1120a0 <alt_onchip_flash_poll_for_status_write_passed+0x7c>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  112088:	e0bffc17 	ldw	r2,-16(fp)
  11208c:	10802f17 	ldw	r2,188(r2)
  112090:	10800037 	ldwio	r2,0(r2)
  112094:	1080020c 	andi	r2,r2,8
    while (
  112098:	10800218 	cmpnei	r2,r2,8
  11209c:	103fee1e 	bne	r2,zero,112058 <alt_onchip_flash_poll_for_status_write_passed+0x34>
            }
        }
    }

    return ret_code;
  1120a0:	e0bfff17 	ldw	r2,-4(fp)
}
  1120a4:	e037883a 	mov	sp,fp
  1120a8:	dfc00117 	ldw	ra,4(sp)
  1120ac:	df000017 	ldw	fp,0(sp)
  1120b0:	dec00204 	addi	sp,sp,8
  1120b4:	f800283a 	ret

001120b8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  1120b8:	defff504 	addi	sp,sp,-44
  1120bc:	df000a15 	stw	fp,40(sp)
  1120c0:	df000a04 	addi	fp,sp,40
  1120c4:	e13ff915 	stw	r4,-28(fp)
  1120c8:	e17ff815 	stw	r5,-32(fp)
  1120cc:	e1bff715 	stw	r6,-36(fp)
  1120d0:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  1120d4:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
  1120d8:	d0a02717 	ldw	r2,-32612(gp)
  
  if (alt_ticks_per_second ())
  1120dc:	10003c26 	beq	r2,zero,1121d0 <alt_alarm_start+0x118>
  {
    if (alarm)
  1120e0:	e0bff917 	ldw	r2,-28(fp)
  1120e4:	10003826 	beq	r2,zero,1121c8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  1120e8:	e0bff917 	ldw	r2,-28(fp)
  1120ec:	e0fff717 	ldw	r3,-36(fp)
  1120f0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  1120f4:	e0bff917 	ldw	r2,-28(fp)
  1120f8:	e0fff617 	ldw	r3,-40(fp)
  1120fc:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
  112100:	0005303a 	rdctl	r2,status
  112104:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  112108:	e0fffd17 	ldw	r3,-12(fp)
  11210c:	00bfff84 	movi	r2,-2
  112110:	1884703a 	and	r2,r3,r2
  112114:	1001703a 	wrctl	status,r2
  return context;
  112118:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
  11211c:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  112120:	d0a02817 	ldw	r2,-32608(gp)
      
      current_nticks = alt_nticks();
  112124:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  112128:	e0fff817 	ldw	r3,-32(fp)
  11212c:	e0bfff17 	ldw	r2,-4(fp)
  112130:	1885883a 	add	r2,r3,r2
  112134:	10c00044 	addi	r3,r2,1
  112138:	e0bff917 	ldw	r2,-28(fp)
  11213c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  112140:	e0bff917 	ldw	r2,-28(fp)
  112144:	10c00217 	ldw	r3,8(r2)
  112148:	e0bfff17 	ldw	r2,-4(fp)
  11214c:	1880042e 	bgeu	r3,r2,112160 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  112150:	e0bff917 	ldw	r2,-28(fp)
  112154:	00c00044 	movi	r3,1
  112158:	10c00405 	stb	r3,16(r2)
  11215c:	00000206 	br	112168 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  112160:	e0bff917 	ldw	r2,-28(fp)
  112164:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  112168:	e0bff917 	ldw	r2,-28(fp)
  11216c:	d0e01204 	addi	r3,gp,-32696
  112170:	e0fffb15 	stw	r3,-20(fp)
  112174:	e0bffa15 	stw	r2,-24(fp)
  entry->previous = list;
  112178:	e0bffa17 	ldw	r2,-24(fp)
  11217c:	e0fffb17 	ldw	r3,-20(fp)
  112180:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  112184:	e0bffb17 	ldw	r2,-20(fp)
  112188:	10c00017 	ldw	r3,0(r2)
  11218c:	e0bffa17 	ldw	r2,-24(fp)
  112190:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
  112194:	e0bffb17 	ldw	r2,-20(fp)
  112198:	10800017 	ldw	r2,0(r2)
  11219c:	e0fffa17 	ldw	r3,-24(fp)
  1121a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  1121a4:	e0bffb17 	ldw	r2,-20(fp)
  1121a8:	e0fffa17 	ldw	r3,-24(fp)
  1121ac:	10c00015 	stw	r3,0(r2)
  1121b0:	e0bffe17 	ldw	r2,-8(fp)
  1121b4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  1121b8:	e0bffc17 	ldw	r2,-16(fp)
  1121bc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  1121c0:	0005883a 	mov	r2,zero
  1121c4:	00000306 	br	1121d4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  1121c8:	00bffa84 	movi	r2,-22
  1121cc:	00000106 	br	1121d4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  1121d0:	00bfde84 	movi	r2,-134
  }
}
  1121d4:	e037883a 	mov	sp,fp
  1121d8:	df000017 	ldw	fp,0(sp)
  1121dc:	dec00104 	addi	sp,sp,4
  1121e0:	f800283a 	ret

001121e4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  1121e4:	defffa04 	addi	sp,sp,-24
  1121e8:	dfc00515 	stw	ra,20(sp)
  1121ec:	df000415 	stw	fp,16(sp)
  1121f0:	df000404 	addi	fp,sp,16
  1121f4:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
  1121f8:	00800244 	movi	r2,9
  1121fc:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  112200:	014003f4 	movhi	r5,15
  112204:	29509004 	addi	r5,r5,16960
  112208:	e13ffe17 	ldw	r4,-8(fp)
  11220c:	0102e600 	call	102e60 <__mulsi3>
  112210:	100b883a 	mov	r5,r2
  112214:	0100bef4 	movhi	r4,763
  112218:	213c2004 	addi	r4,r4,-3968
  11221c:	0102da00 	call	102da0 <__udivsi3>
  big_loops = us / (INT_MAX/
  112220:	100b883a 	mov	r5,r2
  112224:	01200034 	movhi	r4,32768
  112228:	213fffc4 	addi	r4,r4,-1
  11222c:	0102da00 	call	102da0 <__udivsi3>
  112230:	100b883a 	mov	r5,r2
  112234:	e13ffc17 	ldw	r4,-16(fp)
  112238:	0102da00 	call	102da0 <__udivsi3>
  11223c:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
  112240:	e0bffd17 	ldw	r2,-12(fp)
  112244:	10002a26 	beq	r2,zero,1122f0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  112248:	e03fff15 	stw	zero,-4(fp)
  11224c:	00001706 	br	1122ac <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  112250:	00a00034 	movhi	r2,32768
  112254:	10bfffc4 	addi	r2,r2,-1
  112258:	10bfffc4 	addi	r2,r2,-1
  11225c:	103ffe1e 	bne	r2,zero,112258 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  112260:	014003f4 	movhi	r5,15
  112264:	29509004 	addi	r5,r5,16960
  112268:	e13ffe17 	ldw	r4,-8(fp)
  11226c:	0102e600 	call	102e60 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
  112270:	100b883a 	mov	r5,r2
  112274:	0100bef4 	movhi	r4,763
  112278:	213c2004 	addi	r4,r4,-3968
  11227c:	0102da00 	call	102da0 <__udivsi3>
  112280:	100b883a 	mov	r5,r2
  112284:	01200034 	movhi	r4,32768
  112288:	213fffc4 	addi	r4,r4,-1
  11228c:	0102da00 	call	102da0 <__udivsi3>
  112290:	1007883a 	mov	r3,r2
  112294:	e0bffc17 	ldw	r2,-16(fp)
  112298:	10c5c83a 	sub	r2,r2,r3
  11229c:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
  1122a0:	e0bfff17 	ldw	r2,-4(fp)
  1122a4:	10800044 	addi	r2,r2,1
  1122a8:	e0bfff15 	stw	r2,-4(fp)
  1122ac:	e0ffff17 	ldw	r3,-4(fp)
  1122b0:	e0bffd17 	ldw	r2,-12(fp)
  1122b4:	18bfe616 	blt	r3,r2,112250 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  1122b8:	014003f4 	movhi	r5,15
  1122bc:	29509004 	addi	r5,r5,16960
  1122c0:	e13ffe17 	ldw	r4,-8(fp)
  1122c4:	0102e600 	call	102e60 <__mulsi3>
  1122c8:	100b883a 	mov	r5,r2
  1122cc:	0100bef4 	movhi	r4,763
  1122d0:	213c2004 	addi	r4,r4,-3968
  1122d4:	0102da00 	call	102da0 <__udivsi3>
  1122d8:	e17ffc17 	ldw	r5,-16(fp)
  1122dc:	1009883a 	mov	r4,r2
  1122e0:	0102e600 	call	102e60 <__mulsi3>
    __asm__ volatile (
  1122e4:	10bfffc4 	addi	r2,r2,-1
  1122e8:	103ffe1e 	bne	r2,zero,1122e4 <alt_busy_sleep+0x100>
  1122ec:	00000d06 	br	112324 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  1122f0:	014003f4 	movhi	r5,15
  1122f4:	29509004 	addi	r5,r5,16960
  1122f8:	e13ffe17 	ldw	r4,-8(fp)
  1122fc:	0102e600 	call	102e60 <__mulsi3>
  112300:	100b883a 	mov	r5,r2
  112304:	0100bef4 	movhi	r4,763
  112308:	213c2004 	addi	r4,r4,-3968
  11230c:	0102da00 	call	102da0 <__udivsi3>
  112310:	e17ffc17 	ldw	r5,-16(fp)
  112314:	1009883a 	mov	r4,r2
  112318:	0102e600 	call	102e60 <__mulsi3>
    __asm__ volatile (
  11231c:	10bfffc4 	addi	r2,r2,-1
  112320:	00bffe16 	blt	zero,r2,11231c <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  112324:	0005883a 	mov	r2,zero
}
  112328:	e037883a 	mov	sp,fp
  11232c:	dfc00117 	ldw	ra,4(sp)
  112330:	df000017 	ldw	fp,0(sp)
  112334:	dec00204 	addi	sp,sp,8
  112338:	f800283a 	ret

0011233c <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
  11233c:	defffd04 	addi	sp,sp,-12
  112340:	df000215 	stw	fp,8(sp)
  112344:	df000204 	addi	fp,sp,8
  112348:	e13fff15 	stw	r4,-4(fp)
  11234c:	e17ffe15 	stw	r5,-8(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  112350:	0001883a 	nop
  112354:	e037883a 	mov	sp,fp
  112358:	df000017 	ldw	fp,0(sp)
  11235c:	dec00104 	addi	sp,sp,4
  112360:	f800283a 	ret

00112364 <alt_get_errno>:
{
  112364:	defffe04 	addi	sp,sp,-8
  112368:	dfc00115 	stw	ra,4(sp)
  11236c:	df000015 	stw	fp,0(sp)
  112370:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  112374:	d0a01017 	ldw	r2,-32704(gp)
  112378:	10000326 	beq	r2,zero,112388 <alt_get_errno+0x24>
  11237c:	d0a01017 	ldw	r2,-32704(gp)
  112380:	103ee83a 	callr	r2
  112384:	00000106 	br	11238c <alt_get_errno+0x28>
  112388:	d0a02204 	addi	r2,gp,-32632
}
  11238c:	e037883a 	mov	sp,fp
  112390:	dfc00117 	ldw	ra,4(sp)
  112394:	df000017 	ldw	fp,0(sp)
  112398:	dec00204 	addi	sp,sp,8
  11239c:	f800283a 	ret

001123a0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  1123a0:	defffa04 	addi	sp,sp,-24
  1123a4:	dfc00515 	stw	ra,20(sp)
  1123a8:	df000415 	stw	fp,16(sp)
  1123ac:	df000404 	addi	fp,sp,16
  1123b0:	e13ffd15 	stw	r4,-12(fp)
  1123b4:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  1123b8:	e0bffd17 	ldw	r2,-12(fp)
  1123bc:	10000326 	beq	r2,zero,1123cc <alt_dev_llist_insert+0x2c>
  1123c0:	e0bffd17 	ldw	r2,-12(fp)
  1123c4:	10800217 	ldw	r2,8(r2)
  1123c8:	1000061e 	bne	r2,zero,1123e4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  1123cc:	01123640 	call	112364 <alt_get_errno>
  1123d0:	1007883a 	mov	r3,r2
  1123d4:	00800584 	movi	r2,22
  1123d8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  1123dc:	00bffa84 	movi	r2,-22
  1123e0:	00001306 	br	112430 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  1123e4:	e0bffd17 	ldw	r2,-12(fp)
  1123e8:	e0fffc17 	ldw	r3,-16(fp)
  1123ec:	e0ffff15 	stw	r3,-4(fp)
  1123f0:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
  1123f4:	e0bffe17 	ldw	r2,-8(fp)
  1123f8:	e0ffff17 	ldw	r3,-4(fp)
  1123fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  112400:	e0bfff17 	ldw	r2,-4(fp)
  112404:	10c00017 	ldw	r3,0(r2)
  112408:	e0bffe17 	ldw	r2,-8(fp)
  11240c:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
  112410:	e0bfff17 	ldw	r2,-4(fp)
  112414:	10800017 	ldw	r2,0(r2)
  112418:	e0fffe17 	ldw	r3,-8(fp)
  11241c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  112420:	e0bfff17 	ldw	r2,-4(fp)
  112424:	e0fffe17 	ldw	r3,-8(fp)
  112428:	10c00015 	stw	r3,0(r2)

  return 0;  
  11242c:	0005883a 	mov	r2,zero
}
  112430:	e037883a 	mov	sp,fp
  112434:	dfc00117 	ldw	ra,4(sp)
  112438:	df000017 	ldw	fp,0(sp)
  11243c:	dec00204 	addi	sp,sp,8
  112440:	f800283a 	ret

00112444 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  112444:	defffc04 	addi	sp,sp,-16
  112448:	dfc00315 	stw	ra,12(sp)
  11244c:	df000215 	stw	fp,8(sp)
  112450:	df000204 	addi	fp,sp,8
  112454:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
  112458:	d1601604 	addi	r5,gp,-32680
  11245c:	e13ffe17 	ldw	r4,-8(fp)
  112460:	0112b800 	call	112b80 <alt_find_dev>
  112464:	e0bfff15 	stw	r2,-4(fp)

  if ((dev) && dev->open)
  112468:	e0bfff17 	ldw	r2,-4(fp)
  11246c:	10000926 	beq	r2,zero,112494 <alt_flash_open_dev+0x50>
  112470:	e0bfff17 	ldw	r2,-4(fp)
  112474:	10800317 	ldw	r2,12(r2)
  112478:	10000626 	beq	r2,zero,112494 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
  11247c:	e0bfff17 	ldw	r2,-4(fp)
  112480:	10800317 	ldw	r2,12(r2)
  112484:	e17ffe17 	ldw	r5,-8(fp)
  112488:	e13fff17 	ldw	r4,-4(fp)
  11248c:	103ee83a 	callr	r2
  112490:	00000106 	br	112498 <alt_flash_open_dev+0x54>
  }

  return dev;
  112494:	e0bfff17 	ldw	r2,-4(fp)
}
  112498:	e037883a 	mov	sp,fp
  11249c:	dfc00117 	ldw	ra,4(sp)
  1124a0:	df000017 	ldw	fp,0(sp)
  1124a4:	dec00204 	addi	sp,sp,8
  1124a8:	f800283a 	ret

001124ac <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  1124ac:	defffd04 	addi	sp,sp,-12
  1124b0:	dfc00215 	stw	ra,8(sp)
  1124b4:	df000115 	stw	fp,4(sp)
  1124b8:	df000104 	addi	fp,sp,4
  1124bc:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
  1124c0:	e0bfff17 	ldw	r2,-4(fp)
  1124c4:	10000826 	beq	r2,zero,1124e8 <alt_flash_close_dev+0x3c>
  1124c8:	e0bfff17 	ldw	r2,-4(fp)
  1124cc:	10800417 	ldw	r2,16(r2)
  1124d0:	10000526 	beq	r2,zero,1124e8 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
  1124d4:	e0bfff17 	ldw	r2,-4(fp)
  1124d8:	10800417 	ldw	r2,16(r2)
  1124dc:	e13fff17 	ldw	r4,-4(fp)
  1124e0:	103ee83a 	callr	r2
  }
  return;
  1124e4:	0001883a 	nop
  1124e8:	0001883a 	nop
}
  1124ec:	e037883a 	mov	sp,fp
  1124f0:	dfc00117 	ldw	ra,4(sp)
  1124f4:	df000017 	ldw	fp,0(sp)
  1124f8:	dec00204 	addi	sp,sp,8
  1124fc:	f800283a 	ret

00112500 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  112500:	defff904 	addi	sp,sp,-28
  112504:	dfc00615 	stw	ra,24(sp)
  112508:	df000515 	stw	fp,20(sp)
  11250c:	df000504 	addi	fp,sp,20
  112510:	e13fff15 	stw	r4,-4(fp)
  112514:	e17ffe15 	stw	r5,-8(fp)
  112518:	e1bffd15 	stw	r6,-12(fp)
  11251c:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  112520:	e0800217 	ldw	r2,8(fp)
  112524:	d8800015 	stw	r2,0(sp)
  112528:	e1fffc17 	ldw	r7,-16(fp)
  11252c:	e1bffd17 	ldw	r6,-12(fp)
  112530:	e17ffe17 	ldw	r5,-8(fp)
  112534:	e13fff17 	ldw	r4,-4(fp)
  112538:	01126b00 	call	1126b0 <alt_iic_isr_register>
}  
  11253c:	e037883a 	mov	sp,fp
  112540:	dfc00117 	ldw	ra,4(sp)
  112544:	df000017 	ldw	fp,0(sp)
  112548:	dec00204 	addi	sp,sp,8
  11254c:	f800283a 	ret

00112550 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  112550:	defff904 	addi	sp,sp,-28
  112554:	df000615 	stw	fp,24(sp)
  112558:	df000604 	addi	fp,sp,24
  11255c:	e13ffb15 	stw	r4,-20(fp)
  112560:	e17ffa15 	stw	r5,-24(fp)
  112564:	e0bffa17 	ldw	r2,-24(fp)
  112568:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
  11256c:	0005303a 	rdctl	r2,status
  112570:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  112574:	e0fffe17 	ldw	r3,-8(fp)
  112578:	00bfff84 	movi	r2,-2
  11257c:	1884703a 	and	r2,r3,r2
  112580:	1001703a 	wrctl	status,r2
  return context;
  112584:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  112588:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  11258c:	00c00044 	movi	r3,1
  112590:	e0bfff17 	ldw	r2,-4(fp)
  112594:	1884983a 	sll	r2,r3,r2
  112598:	1007883a 	mov	r3,r2
  11259c:	d0a02917 	ldw	r2,-32604(gp)
  1125a0:	1884b03a 	or	r2,r3,r2
  1125a4:	d0a02915 	stw	r2,-32604(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  1125a8:	d0a02917 	ldw	r2,-32604(gp)
  1125ac:	100170fa 	wrctl	ienable,r2
  1125b0:	e0bffd17 	ldw	r2,-12(fp)
  1125b4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  1125b8:	e0bffc17 	ldw	r2,-16(fp)
  1125bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  1125c0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  1125c4:	0001883a 	nop
}
  1125c8:	e037883a 	mov	sp,fp
  1125cc:	df000017 	ldw	fp,0(sp)
  1125d0:	dec00104 	addi	sp,sp,4
  1125d4:	f800283a 	ret

001125d8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  1125d8:	defff904 	addi	sp,sp,-28
  1125dc:	df000615 	stw	fp,24(sp)
  1125e0:	df000604 	addi	fp,sp,24
  1125e4:	e13ffb15 	stw	r4,-20(fp)
  1125e8:	e17ffa15 	stw	r5,-24(fp)
  1125ec:	e0bffa17 	ldw	r2,-24(fp)
  1125f0:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
  1125f4:	0005303a 	rdctl	r2,status
  1125f8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1125fc:	e0fffe17 	ldw	r3,-8(fp)
  112600:	00bfff84 	movi	r2,-2
  112604:	1884703a 	and	r2,r3,r2
  112608:	1001703a 	wrctl	status,r2
  return context;
  11260c:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
  112610:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
  112614:	00c00044 	movi	r3,1
  112618:	e0bfff17 	ldw	r2,-4(fp)
  11261c:	1884983a 	sll	r2,r3,r2
  112620:	0084303a 	nor	r2,zero,r2
  112624:	1007883a 	mov	r3,r2
  112628:	d0a02917 	ldw	r2,-32604(gp)
  11262c:	1884703a 	and	r2,r3,r2
  112630:	d0a02915 	stw	r2,-32604(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  112634:	d0a02917 	ldw	r2,-32604(gp)
  112638:	100170fa 	wrctl	ienable,r2
  11263c:	e0bffd17 	ldw	r2,-12(fp)
  112640:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
  112644:	e0bffc17 	ldw	r2,-16(fp)
  112648:	1001703a 	wrctl	status,r2
  return 0;
  11264c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  112650:	0001883a 	nop
}
  112654:	e037883a 	mov	sp,fp
  112658:	df000017 	ldw	fp,0(sp)
  11265c:	dec00104 	addi	sp,sp,4
  112660:	f800283a 	ret

00112664 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  112664:	defffc04 	addi	sp,sp,-16
  112668:	df000315 	stw	fp,12(sp)
  11266c:	df000304 	addi	fp,sp,12
  112670:	e13ffe15 	stw	r4,-8(fp)
  112674:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  112678:	000530fa 	rdctl	r2,ienable
  11267c:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  112680:	00c00044 	movi	r3,1
  112684:	e0bffd17 	ldw	r2,-12(fp)
  112688:	1884983a 	sll	r2,r3,r2
  11268c:	1007883a 	mov	r3,r2
  112690:	e0bfff17 	ldw	r2,-4(fp)
  112694:	1884703a 	and	r2,r3,r2
  112698:	1004c03a 	cmpne	r2,r2,zero
  11269c:	10803fcc 	andi	r2,r2,255
}
  1126a0:	e037883a 	mov	sp,fp
  1126a4:	df000017 	ldw	fp,0(sp)
  1126a8:	dec00104 	addi	sp,sp,4
  1126ac:	f800283a 	ret

001126b0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  1126b0:	defff504 	addi	sp,sp,-44
  1126b4:	dfc00a15 	stw	ra,40(sp)
  1126b8:	df000915 	stw	fp,36(sp)
  1126bc:	df000904 	addi	fp,sp,36
  1126c0:	e13ffa15 	stw	r4,-24(fp)
  1126c4:	e17ff915 	stw	r5,-28(fp)
  1126c8:	e1bff815 	stw	r6,-32(fp)
  1126cc:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
  1126d0:	00bffa84 	movi	r2,-22
  1126d4:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  1126d8:	e0bff917 	ldw	r2,-28(fp)
  1126dc:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  1126e0:	e0bffe17 	ldw	r2,-8(fp)
  1126e4:	10800808 	cmpgei	r2,r2,32
  1126e8:	1000241e 	bne	r2,zero,11277c <alt_iic_isr_register+0xcc>
  NIOS2_READ_STATUS (context);
  1126ec:	0005303a 	rdctl	r2,status
  1126f0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1126f4:	e0fffc17 	ldw	r3,-16(fp)
  1126f8:	00bfff84 	movi	r2,-2
  1126fc:	1884703a 	and	r2,r3,r2
  112700:	1001703a 	wrctl	status,r2
  return context;
  112704:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  112708:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
  11270c:	e0bffe17 	ldw	r2,-8(fp)
  112710:	100890fa 	slli	r4,r2,3
  112714:	e0fff817 	ldw	r3,-32(fp)
  112718:	00800074 	movhi	r2,1
  11271c:	2085883a 	add	r2,r4,r2
  112720:	10c7c515 	stw	r3,7956(r2)
    alt_irq[id].context = isr_context;
  112724:	e0bffe17 	ldw	r2,-8(fp)
  112728:	100890fa 	slli	r4,r2,3
  11272c:	e0fff717 	ldw	r3,-36(fp)
  112730:	00800074 	movhi	r2,1
  112734:	2085883a 	add	r2,r4,r2
  112738:	10c7c615 	stw	r3,7960(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  11273c:	e0bff817 	ldw	r2,-32(fp)
  112740:	10000526 	beq	r2,zero,112758 <alt_iic_isr_register+0xa8>
  112744:	e0bffe17 	ldw	r2,-8(fp)
  112748:	100b883a 	mov	r5,r2
  11274c:	e13ffa17 	ldw	r4,-24(fp)
  112750:	01125500 	call	112550 <alt_ic_irq_enable>
  112754:	00000406 	br	112768 <alt_iic_isr_register+0xb8>
  112758:	e0bffe17 	ldw	r2,-8(fp)
  11275c:	100b883a 	mov	r5,r2
  112760:	e13ffa17 	ldw	r4,-24(fp)
  112764:	01125d80 	call	1125d8 <alt_ic_irq_disable>
  112768:	e0bfff15 	stw	r2,-4(fp)
  11276c:	e0bffd17 	ldw	r2,-12(fp)
  112770:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
  112774:	e0bffb17 	ldw	r2,-20(fp)
  112778:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  11277c:	e0bfff17 	ldw	r2,-4(fp)
}
  112780:	e037883a 	mov	sp,fp
  112784:	dfc00117 	ldw	ra,4(sp)
  112788:	df000017 	ldw	fp,0(sp)
  11278c:	dec00204 	addi	sp,sp,8
  112790:	f800283a 	ret

00112794 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  112794:	defff904 	addi	sp,sp,-28
  112798:	dfc00615 	stw	ra,24(sp)
  11279c:	df000515 	stw	fp,20(sp)
  1127a0:	df000504 	addi	fp,sp,20
  1127a4:	e13ffe15 	stw	r4,-8(fp)
  1127a8:	e17ffd15 	stw	r5,-12(fp)
  1127ac:	e1bffc15 	stw	r6,-16(fp)
  1127b0:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
  1127b4:	e1bffb17 	ldw	r6,-20(fp)
  1127b8:	e17ffc17 	ldw	r5,-16(fp)
  1127bc:	e13ffd17 	ldw	r4,-12(fp)
  1127c0:	01129fc0 	call	1129fc <open>
  1127c4:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
  1127c8:	e0bfff17 	ldw	r2,-4(fp)
  1127cc:	10002016 	blt	r2,zero,112850 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
  1127d0:	e0ffff17 	ldw	r3,-4(fp)
  1127d4:	1805883a 	mov	r2,r3
  1127d8:	1085883a 	add	r2,r2,r2
  1127dc:	10c5883a 	add	r2,r2,r3
  1127e0:	100490ba 	slli	r2,r2,2
  1127e4:	00c00074 	movhi	r3,1
  1127e8:	10c7883a 	add	r3,r2,r3
  1127ec:	18c27c17 	ldw	r3,2544(r3)
  1127f0:	e0bffe17 	ldw	r2,-8(fp)
  1127f4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  1127f8:	e0ffff17 	ldw	r3,-4(fp)
  1127fc:	1805883a 	mov	r2,r3
  112800:	1085883a 	add	r2,r2,r2
  112804:	10c5883a 	add	r2,r2,r3
  112808:	100490ba 	slli	r2,r2,2
  11280c:	00c00074 	movhi	r3,1
  112810:	10c7883a 	add	r3,r2,r3
  112814:	18c27d17 	ldw	r3,2548(r3)
  112818:	e0bffe17 	ldw	r2,-8(fp)
  11281c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  112820:	e0ffff17 	ldw	r3,-4(fp)
  112824:	1805883a 	mov	r2,r3
  112828:	1085883a 	add	r2,r2,r2
  11282c:	10c5883a 	add	r2,r2,r3
  112830:	100490ba 	slli	r2,r2,2
  112834:	00c00074 	movhi	r3,1
  112838:	10c7883a 	add	r3,r2,r3
  11283c:	18c27e17 	ldw	r3,2552(r3)
  112840:	e0bffe17 	ldw	r2,-8(fp)
  112844:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  112848:	e13fff17 	ldw	r4,-4(fp)
  11284c:	010ff540 	call	10ff54 <alt_release_fd>
  }
} 
  112850:	0001883a 	nop
  112854:	e037883a 	mov	sp,fp
  112858:	dfc00117 	ldw	ra,4(sp)
  11285c:	df000017 	ldw	fp,0(sp)
  112860:	dec00204 	addi	sp,sp,8
  112864:	f800283a 	ret

00112868 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  112868:	defffb04 	addi	sp,sp,-20
  11286c:	dfc00415 	stw	ra,16(sp)
  112870:	df000315 	stw	fp,12(sp)
  112874:	df000304 	addi	fp,sp,12
  112878:	e13fff15 	stw	r4,-4(fp)
  11287c:	e17ffe15 	stw	r5,-8(fp)
  112880:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  112884:	01c07fc4 	movi	r7,511
  112888:	01800044 	movi	r6,1
  11288c:	e17fff17 	ldw	r5,-4(fp)
  112890:	01000074 	movhi	r4,1
  112894:	21027f04 	addi	r4,r4,2556
  112898:	01127940 	call	112794 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  11289c:	01c07fc4 	movi	r7,511
  1128a0:	000d883a 	mov	r6,zero
  1128a4:	e17ffe17 	ldw	r5,-8(fp)
  1128a8:	01000074 	movhi	r4,1
  1128ac:	21027c04 	addi	r4,r4,2544
  1128b0:	01127940 	call	112794 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  1128b4:	01c07fc4 	movi	r7,511
  1128b8:	01800044 	movi	r6,1
  1128bc:	e17ffd17 	ldw	r5,-12(fp)
  1128c0:	01000074 	movhi	r4,1
  1128c4:	21028204 	addi	r4,r4,2568
  1128c8:	01127940 	call	112794 <alt_open_fd>
}  
  1128cc:	0001883a 	nop
  1128d0:	e037883a 	mov	sp,fp
  1128d4:	dfc00117 	ldw	ra,4(sp)
  1128d8:	df000017 	ldw	fp,0(sp)
  1128dc:	dec00204 	addi	sp,sp,8
  1128e0:	f800283a 	ret

001128e4 <alt_get_errno>:
{
  1128e4:	defffe04 	addi	sp,sp,-8
  1128e8:	dfc00115 	stw	ra,4(sp)
  1128ec:	df000015 	stw	fp,0(sp)
  1128f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  1128f4:	d0a01017 	ldw	r2,-32704(gp)
  1128f8:	10000326 	beq	r2,zero,112908 <alt_get_errno+0x24>
  1128fc:	d0a01017 	ldw	r2,-32704(gp)
  112900:	103ee83a 	callr	r2
  112904:	00000106 	br	11290c <alt_get_errno+0x28>
  112908:	d0a02204 	addi	r2,gp,-32632
}
  11290c:	e037883a 	mov	sp,fp
  112910:	dfc00117 	ldw	ra,4(sp)
  112914:	df000017 	ldw	fp,0(sp)
  112918:	dec00204 	addi	sp,sp,8
  11291c:	f800283a 	ret

00112920 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  112920:	defffd04 	addi	sp,sp,-12
  112924:	df000215 	stw	fp,8(sp)
  112928:	df000204 	addi	fp,sp,8
  11292c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  112930:	e0bffe17 	ldw	r2,-8(fp)
  112934:	10800217 	ldw	r2,8(r2)
  112938:	10d00034 	orhi	r3,r2,16384
  11293c:	e0bffe17 	ldw	r2,-8(fp)
  112940:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  112944:	e03fff15 	stw	zero,-4(fp)
  112948:	00002306 	br	1129d8 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  11294c:	e0ffff17 	ldw	r3,-4(fp)
  112950:	1805883a 	mov	r2,r3
  112954:	1085883a 	add	r2,r2,r2
  112958:	10c5883a 	add	r2,r2,r3
  11295c:	100490ba 	slli	r2,r2,2
  112960:	00c00074 	movhi	r3,1
  112964:	10c7883a 	add	r3,r2,r3
  112968:	18c27c17 	ldw	r3,2544(r3)
  11296c:	e0bffe17 	ldw	r2,-8(fp)
  112970:	10800017 	ldw	r2,0(r2)
  112974:	1880151e 	bne	r3,r2,1129cc <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  112978:	e0ffff17 	ldw	r3,-4(fp)
  11297c:	1805883a 	mov	r2,r3
  112980:	1085883a 	add	r2,r2,r2
  112984:	10c5883a 	add	r2,r2,r3
  112988:	100490ba 	slli	r2,r2,2
  11298c:	00c00074 	movhi	r3,1
  112990:	10c7883a 	add	r3,r2,r3
  112994:	18827e17 	ldw	r2,2552(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
  112998:	10000c0e 	bge	r2,zero,1129cc <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
  11299c:	e0ffff17 	ldw	r3,-4(fp)
  1129a0:	1805883a 	mov	r2,r3
  1129a4:	1085883a 	add	r2,r2,r2
  1129a8:	10c5883a 	add	r2,r2,r3
  1129ac:	100490ba 	slli	r2,r2,2
  1129b0:	00c00074 	movhi	r3,1
  1129b4:	18c27c04 	addi	r3,r3,2544
  1129b8:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  1129bc:	e0fffe17 	ldw	r3,-8(fp)
  1129c0:	18800226 	beq	r3,r2,1129cc <alt_file_locked+0xac>
    {
      return -EACCES;
  1129c4:	00bffcc4 	movi	r2,-13
  1129c8:	00000806 	br	1129ec <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
  1129cc:	e0bfff17 	ldw	r2,-4(fp)
  1129d0:	10800044 	addi	r2,r2,1
  1129d4:	e0bfff15 	stw	r2,-4(fp)
  1129d8:	d0a00f17 	ldw	r2,-32708(gp)
  1129dc:	1007883a 	mov	r3,r2
  1129e0:	e0bfff17 	ldw	r2,-4(fp)
  1129e4:	18bfd92e 	bgeu	r3,r2,11294c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  1129e8:	0005883a 	mov	r2,zero
}
  1129ec:	e037883a 	mov	sp,fp
  1129f0:	df000017 	ldw	fp,0(sp)
  1129f4:	dec00104 	addi	sp,sp,4
  1129f8:	f800283a 	ret

001129fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  1129fc:	defff604 	addi	sp,sp,-40
  112a00:	dfc00915 	stw	ra,36(sp)
  112a04:	df000815 	stw	fp,32(sp)
  112a08:	df000804 	addi	fp,sp,32
  112a0c:	e13ffa15 	stw	r4,-24(fp)
  112a10:	e17ff915 	stw	r5,-28(fp)
  112a14:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  112a18:	00bfffc4 	movi	r2,-1
  112a1c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
  112a20:	00bffb44 	movi	r2,-19
  112a24:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
  112a28:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  112a2c:	d1600d04 	addi	r5,gp,-32716
  112a30:	e13ffa17 	ldw	r4,-24(fp)
  112a34:	0112b800 	call	112b80 <alt_find_dev>
  112a38:	e0bfff15 	stw	r2,-4(fp)
  112a3c:	e0bfff17 	ldw	r2,-4(fp)
  112a40:	1000051e 	bne	r2,zero,112a58 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  112a44:	e13ffa17 	ldw	r4,-24(fp)
  112a48:	0112c100 	call	112c10 <alt_find_file>
  112a4c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
  112a50:	00800044 	movi	r2,1
  112a54:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  112a58:	e0bfff17 	ldw	r2,-4(fp)
  112a5c:	10002c26 	beq	r2,zero,112b10 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
  112a60:	e13fff17 	ldw	r4,-4(fp)
  112a64:	0112d180 	call	112d18 <alt_get_fd>
  112a68:	e0bffe15 	stw	r2,-8(fp)
  112a6c:	e0bffe17 	ldw	r2,-8(fp)
  112a70:	1000030e 	bge	r2,zero,112a80 <open+0x84>
    {
      status = index;
  112a74:	e0bffe17 	ldw	r2,-8(fp)
  112a78:	e0bffd15 	stw	r2,-12(fp)
  112a7c:	00002606 	br	112b18 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
  112a80:	e0fffe17 	ldw	r3,-8(fp)
  112a84:	1805883a 	mov	r2,r3
  112a88:	1085883a 	add	r2,r2,r2
  112a8c:	10c5883a 	add	r2,r2,r3
  112a90:	100490ba 	slli	r2,r2,2
  112a94:	00c00074 	movhi	r3,1
  112a98:	18c27c04 	addi	r3,r3,2544
  112a9c:	10c5883a 	add	r2,r2,r3
  112aa0:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  112aa4:	e0fff917 	ldw	r3,-28(fp)
  112aa8:	00900034 	movhi	r2,16384
  112aac:	10bfffc4 	addi	r2,r2,-1
  112ab0:	1886703a 	and	r3,r3,r2
  112ab4:	e0bffb17 	ldw	r2,-20(fp)
  112ab8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  112abc:	e0bffc17 	ldw	r2,-16(fp)
  112ac0:	1000051e 	bne	r2,zero,112ad8 <open+0xdc>
  112ac4:	e13ffb17 	ldw	r4,-20(fp)
  112ac8:	01129200 	call	112920 <alt_file_locked>
  112acc:	e0bffd15 	stw	r2,-12(fp)
  112ad0:	e0bffd17 	ldw	r2,-12(fp)
  112ad4:	10001016 	blt	r2,zero,112b18 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  112ad8:	e0bfff17 	ldw	r2,-4(fp)
  112adc:	10800317 	ldw	r2,12(r2)
  112ae0:	10000826 	beq	r2,zero,112b04 <open+0x108>
  112ae4:	e0bfff17 	ldw	r2,-4(fp)
  112ae8:	10800317 	ldw	r2,12(r2)
  112aec:	e1fff817 	ldw	r7,-32(fp)
  112af0:	e1bff917 	ldw	r6,-28(fp)
  112af4:	e17ffa17 	ldw	r5,-24(fp)
  112af8:	e13ffb17 	ldw	r4,-20(fp)
  112afc:	103ee83a 	callr	r2
  112b00:	00000106 	br	112b08 <open+0x10c>
  112b04:	0005883a 	mov	r2,zero
  112b08:	e0bffd15 	stw	r2,-12(fp)
  112b0c:	00000206 	br	112b18 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  112b10:	00bffb44 	movi	r2,-19
  112b14:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  112b18:	e0bffd17 	ldw	r2,-12(fp)
  112b1c:	1000090e 	bge	r2,zero,112b44 <open+0x148>
  {
    alt_release_fd (index);  
  112b20:	e13ffe17 	ldw	r4,-8(fp)
  112b24:	010ff540 	call	10ff54 <alt_release_fd>
    ALT_ERRNO = -status;
  112b28:	01128e40 	call	1128e4 <alt_get_errno>
  112b2c:	1007883a 	mov	r3,r2
  112b30:	e0bffd17 	ldw	r2,-12(fp)
  112b34:	0085c83a 	sub	r2,zero,r2
  112b38:	18800015 	stw	r2,0(r3)
    return -1;
  112b3c:	00bfffc4 	movi	r2,-1
  112b40:	00000106 	br	112b48 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
  112b44:	e0bffe17 	ldw	r2,-8(fp)
}
  112b48:	e037883a 	mov	sp,fp
  112b4c:	dfc00117 	ldw	ra,4(sp)
  112b50:	df000017 	ldw	fp,0(sp)
  112b54:	dec00204 	addi	sp,sp,8
  112b58:	f800283a 	ret

00112b5c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  112b5c:	deffff04 	addi	sp,sp,-4
  112b60:	df000015 	stw	fp,0(sp)
  112b64:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  112b68:	000170fa 	wrctl	ienable,zero
}
  112b6c:	0001883a 	nop
  112b70:	e037883a 	mov	sp,fp
  112b74:	df000017 	ldw	fp,0(sp)
  112b78:	dec00104 	addi	sp,sp,4
  112b7c:	f800283a 	ret

00112b80 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  112b80:	defffa04 	addi	sp,sp,-24
  112b84:	dfc00515 	stw	ra,20(sp)
  112b88:	df000415 	stw	fp,16(sp)
  112b8c:	df000404 	addi	fp,sp,16
  112b90:	e13ffd15 	stw	r4,-12(fp)
  112b94:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
  112b98:	e0bffc17 	ldw	r2,-16(fp)
  112b9c:	10800017 	ldw	r2,0(r2)
  112ba0:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  112ba4:	e13ffd17 	ldw	r4,-12(fp)
  112ba8:	01030ec0 	call	1030ec <strlen>
  112bac:	10800044 	addi	r2,r2,1
  112bb0:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  112bb4:	00000d06 	br	112bec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  112bb8:	e0bfff17 	ldw	r2,-4(fp)
  112bbc:	10800217 	ldw	r2,8(r2)
  112bc0:	e0fffe17 	ldw	r3,-8(fp)
  112bc4:	180d883a 	mov	r6,r3
  112bc8:	e17ffd17 	ldw	r5,-12(fp)
  112bcc:	1009883a 	mov	r4,r2
  112bd0:	0112e9c0 	call	112e9c <memcmp>
  112bd4:	1000021e 	bne	r2,zero,112be0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  112bd8:	e0bfff17 	ldw	r2,-4(fp)
  112bdc:	00000706 	br	112bfc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  112be0:	e0bfff17 	ldw	r2,-4(fp)
  112be4:	10800017 	ldw	r2,0(r2)
  112be8:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
  112bec:	e0ffff17 	ldw	r3,-4(fp)
  112bf0:	e0bffc17 	ldw	r2,-16(fp)
  112bf4:	18bff01e 	bne	r3,r2,112bb8 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
  112bf8:	0005883a 	mov	r2,zero
}
  112bfc:	e037883a 	mov	sp,fp
  112c00:	dfc00117 	ldw	ra,4(sp)
  112c04:	df000017 	ldw	fp,0(sp)
  112c08:	dec00204 	addi	sp,sp,8
  112c0c:	f800283a 	ret

00112c10 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  112c10:	defffb04 	addi	sp,sp,-20
  112c14:	dfc00415 	stw	ra,16(sp)
  112c18:	df000315 	stw	fp,12(sp)
  112c1c:	df000304 	addi	fp,sp,12
  112c20:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  112c24:	d0a00b17 	ldw	r2,-32724(gp)
  112c28:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  112c2c:	00003106 	br	112cf4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  112c30:	e0bfff17 	ldw	r2,-4(fp)
  112c34:	10800217 	ldw	r2,8(r2)
  112c38:	1009883a 	mov	r4,r2
  112c3c:	01030ec0 	call	1030ec <strlen>
  112c40:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  112c44:	e0bfff17 	ldw	r2,-4(fp)
  112c48:	10c00217 	ldw	r3,8(r2)
  112c4c:	e0bffe17 	ldw	r2,-8(fp)
  112c50:	10bfffc4 	addi	r2,r2,-1
  112c54:	1885883a 	add	r2,r3,r2
  112c58:	10800003 	ldbu	r2,0(r2)
  112c5c:	10803fcc 	andi	r2,r2,255
  112c60:	1080201c 	xori	r2,r2,128
  112c64:	10bfe004 	addi	r2,r2,-128
  112c68:	10800bd8 	cmpnei	r2,r2,47
  112c6c:	1000031e 	bne	r2,zero,112c7c <alt_find_file+0x6c>
    {
      len -= 1;
  112c70:	e0bffe17 	ldw	r2,-8(fp)
  112c74:	10bfffc4 	addi	r2,r2,-1
  112c78:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  112c7c:	e0bffe17 	ldw	r2,-8(fp)
  112c80:	e0fffd17 	ldw	r3,-12(fp)
  112c84:	1885883a 	add	r2,r3,r2
  112c88:	10800003 	ldbu	r2,0(r2)
  112c8c:	10803fcc 	andi	r2,r2,255
  112c90:	1080201c 	xori	r2,r2,128
  112c94:	10bfe004 	addi	r2,r2,-128
  112c98:	10800be0 	cmpeqi	r2,r2,47
  112c9c:	1000081e 	bne	r2,zero,112cc0 <alt_find_file+0xb0>
  112ca0:	e0bffe17 	ldw	r2,-8(fp)
  112ca4:	e0fffd17 	ldw	r3,-12(fp)
  112ca8:	1885883a 	add	r2,r3,r2
  112cac:	10800003 	ldbu	r2,0(r2)
  112cb0:	10803fcc 	andi	r2,r2,255
  112cb4:	1080201c 	xori	r2,r2,128
  112cb8:	10bfe004 	addi	r2,r2,-128
  112cbc:	10000a1e 	bne	r2,zero,112ce8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  112cc0:	e0bfff17 	ldw	r2,-4(fp)
  112cc4:	10800217 	ldw	r2,8(r2)
  112cc8:	e0fffe17 	ldw	r3,-8(fp)
  112ccc:	180d883a 	mov	r6,r3
  112cd0:	e17ffd17 	ldw	r5,-12(fp)
  112cd4:	1009883a 	mov	r4,r2
  112cd8:	0112e9c0 	call	112e9c <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
  112cdc:	1000021e 	bne	r2,zero,112ce8 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
  112ce0:	e0bfff17 	ldw	r2,-4(fp)
  112ce4:	00000706 	br	112d04 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  112ce8:	e0bfff17 	ldw	r2,-4(fp)
  112cec:	10800017 	ldw	r2,0(r2)
  112cf0:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
  112cf4:	e0ffff17 	ldw	r3,-4(fp)
  112cf8:	d0a00b04 	addi	r2,gp,-32724
  112cfc:	18bfcc1e 	bne	r3,r2,112c30 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
  112d00:	0005883a 	mov	r2,zero
}
  112d04:	e037883a 	mov	sp,fp
  112d08:	dfc00117 	ldw	ra,4(sp)
  112d0c:	df000017 	ldw	fp,0(sp)
  112d10:	dec00204 	addi	sp,sp,8
  112d14:	f800283a 	ret

00112d18 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  112d18:	defffc04 	addi	sp,sp,-16
  112d1c:	df000315 	stw	fp,12(sp)
  112d20:	df000304 	addi	fp,sp,12
  112d24:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
  112d28:	00bffa04 	movi	r2,-24
  112d2c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  112d30:	e03fff15 	stw	zero,-4(fp)
  112d34:	00001d06 	br	112dac <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  112d38:	e0ffff17 	ldw	r3,-4(fp)
  112d3c:	1805883a 	mov	r2,r3
  112d40:	1085883a 	add	r2,r2,r2
  112d44:	10c5883a 	add	r2,r2,r3
  112d48:	100490ba 	slli	r2,r2,2
  112d4c:	00c00074 	movhi	r3,1
  112d50:	10c7883a 	add	r3,r2,r3
  112d54:	18827c17 	ldw	r2,2544(r3)
  112d58:	1000111e 	bne	r2,zero,112da0 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  112d5c:	e0ffff17 	ldw	r3,-4(fp)
  112d60:	1805883a 	mov	r2,r3
  112d64:	1085883a 	add	r2,r2,r2
  112d68:	10c5883a 	add	r2,r2,r3
  112d6c:	100490ba 	slli	r2,r2,2
  112d70:	e13ffd17 	ldw	r4,-12(fp)
  112d74:	00c00074 	movhi	r3,1
  112d78:	10c7883a 	add	r3,r2,r3
  112d7c:	19027c15 	stw	r4,2544(r3)
      if (i > alt_max_fd)
  112d80:	d0e00f17 	ldw	r3,-32708(gp)
  112d84:	e0bfff17 	ldw	r2,-4(fp)
  112d88:	1880020e 	bge	r3,r2,112d94 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  112d8c:	e0bfff17 	ldw	r2,-4(fp)
  112d90:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
  112d94:	e0bfff17 	ldw	r2,-4(fp)
  112d98:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  112d9c:	00000706 	br	112dbc <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
  112da0:	e0bfff17 	ldw	r2,-4(fp)
  112da4:	10800044 	addi	r2,r2,1
  112da8:	e0bfff15 	stw	r2,-4(fp)
  112dac:	e0bfff17 	ldw	r2,-4(fp)
  112db0:	10800810 	cmplti	r2,r2,32
  112db4:	103fe01e 	bne	r2,zero,112d38 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
  112db8:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  112dbc:	e0bffe17 	ldw	r2,-8(fp)
}
  112dc0:	e037883a 	mov	sp,fp
  112dc4:	df000017 	ldw	fp,0(sp)
  112dc8:	dec00104 	addi	sp,sp,4
  112dcc:	f800283a 	ret

00112dd0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  112dd0:	defffe04 	addi	sp,sp,-8
  112dd4:	df000115 	stw	fp,4(sp)
  112dd8:	df000104 	addi	fp,sp,4
  112ddc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  112de0:	e0bfff17 	ldw	r2,-4(fp)
  112de4:	10bffe84 	addi	r2,r2,-6
  112de8:	10c00428 	cmpgeui	r3,r2,16
  112dec:	1800191e 	bne	r3,zero,112e54 <alt_exception_cause_generated_bad_addr+0x84>
  112df0:	100690ba 	slli	r3,r2,2
  112df4:	00800474 	movhi	r2,17
  112df8:	1885883a 	add	r2,r3,r2
  112dfc:	108b8117 	ldw	r2,11780(r2)
  112e00:	1000683a 	jmp	r2
  112e04:	00112e44 	movi	zero,17593
  112e08:	00112e44 	movi	zero,17593
  112e0c:	00112e54 	movui	zero,17593
  112e10:	00112e54 	movui	zero,17593
  112e14:	00112e54 	movui	zero,17593
  112e18:	00112e44 	movi	zero,17593
  112e1c:	00112e4c 	andi	zero,zero,17593
  112e20:	00112e54 	movui	zero,17593
  112e24:	00112e44 	movi	zero,17593
  112e28:	00112e44 	movi	zero,17593
  112e2c:	00112e54 	movui	zero,17593
  112e30:	00112e44 	movi	zero,17593
  112e34:	00112e4c 	andi	zero,zero,17593
  112e38:	00112e54 	movui	zero,17593
  112e3c:	00112e54 	movui	zero,17593
  112e40:	00112e44 	movi	zero,17593
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  112e44:	00800044 	movi	r2,1
  112e48:	00000306 	br	112e58 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  112e4c:	0005883a 	mov	r2,zero
  112e50:	00000106 	br	112e58 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
  112e54:	0005883a 	mov	r2,zero
  }
}
  112e58:	e037883a 	mov	sp,fp
  112e5c:	df000017 	ldw	fp,0(sp)
  112e60:	dec00104 	addi	sp,sp,4
  112e64:	f800283a 	ret

00112e68 <exit>:
  112e68:	defffe04 	addi	sp,sp,-8
  112e6c:	000b883a 	mov	r5,zero
  112e70:	dc000015 	stw	r16,0(sp)
  112e74:	dfc00115 	stw	ra,4(sp)
  112e78:	2021883a 	mov	r16,r4
  112e7c:	0112f280 	call	112f28 <__call_exitprocs>
  112e80:	00800074 	movhi	r2,1
  112e84:	11073b17 	ldw	r4,7404(r2)
  112e88:	20800f17 	ldw	r2,60(r4)
  112e8c:	10000126 	beq	r2,zero,112e94 <exit+0x2c>
  112e90:	103ee83a 	callr	r2
  112e94:	8009883a 	mov	r4,r16
  112e98:	01130400 	call	113040 <_exit>

00112e9c <memcmp>:
  112e9c:	30800130 	cmpltui	r2,r6,4
  112ea0:	10000b1e 	bne	r2,zero,112ed0 <memcmp+0x34>
  112ea4:	2144b03a 	or	r2,r4,r5
  112ea8:	108000cc 	andi	r2,r2,3
  112eac:	10001a1e 	bne	r2,zero,112f18 <memcmp+0x7c>
  112eb0:	20c00017 	ldw	r3,0(r4)
  112eb4:	28800017 	ldw	r2,0(r5)
  112eb8:	1880171e 	bne	r3,r2,112f18 <memcmp+0x7c>
  112ebc:	31bfff04 	addi	r6,r6,-4
  112ec0:	30800128 	cmpgeui	r2,r6,4
  112ec4:	21000104 	addi	r4,r4,4
  112ec8:	29400104 	addi	r5,r5,4
  112ecc:	103ff81e 	bne	r2,zero,112eb0 <memcmp+0x14>
  112ed0:	30ffffc4 	addi	r3,r6,-1
  112ed4:	30000e26 	beq	r6,zero,112f10 <memcmp+0x74>
  112ed8:	29800003 	ldbu	r6,0(r5)
  112edc:	20800003 	ldbu	r2,0(r4)
  112ee0:	30800f1e 	bne	r6,r2,112f20 <memcmp+0x84>
  112ee4:	18800044 	addi	r2,r3,1
  112ee8:	20c00044 	addi	r3,r4,1
  112eec:	2089883a 	add	r4,r4,r2
  112ef0:	00000506 	br	112f08 <memcmp+0x6c>
  112ef4:	18800003 	ldbu	r2,0(r3)
  112ef8:	29800003 	ldbu	r6,0(r5)
  112efc:	18c00044 	addi	r3,r3,1
  112f00:	10803fcc 	andi	r2,r2,255
  112f04:	1180061e 	bne	r2,r6,112f20 <memcmp+0x84>
  112f08:	29400044 	addi	r5,r5,1
  112f0c:	193ff91e 	bne	r3,r4,112ef4 <memcmp+0x58>
  112f10:	0005883a 	mov	r2,zero
  112f14:	f800283a 	ret
  112f18:	30ffffc4 	addi	r3,r6,-1
  112f1c:	003fee06 	br	112ed8 <memcmp+0x3c>
  112f20:	1185c83a 	sub	r2,r2,r6
  112f24:	f800283a 	ret

00112f28 <__call_exitprocs>:
  112f28:	defff704 	addi	sp,sp,-36
  112f2c:	00800074 	movhi	r2,1
  112f30:	ddc00715 	stw	r23,28(sp)
  112f34:	15c73b17 	ldw	r23,7404(r2)
  112f38:	dd400515 	stw	r21,20(sp)
  112f3c:	dd000415 	stw	r20,16(sp)
  112f40:	dcc00315 	stw	r19,12(sp)
  112f44:	dfc00815 	stw	ra,32(sp)
  112f48:	dd800615 	stw	r22,24(sp)
  112f4c:	dc800215 	stw	r18,8(sp)
  112f50:	dc400115 	stw	r17,4(sp)
  112f54:	dc000015 	stw	r16,0(sp)
  112f58:	2029883a 	mov	r20,r4
  112f5c:	282b883a 	mov	r21,r5
  112f60:	04c00044 	movi	r19,1
  112f64:	bc805217 	ldw	r18,328(r23)
  112f68:	90000d26 	beq	r18,zero,112fa0 <__call_exitprocs+0x78>
  112f6c:	94000117 	ldw	r16,4(r18)
  112f70:	847fffc4 	addi	r17,r16,-1
  112f74:	88000a16 	blt	r17,zero,112fa0 <__call_exitprocs+0x78>
  112f78:	84000044 	addi	r16,r16,1
  112f7c:	802090ba 	slli	r16,r16,2
  112f80:	9421883a 	add	r16,r18,r16
  112f84:	a8001126 	beq	r21,zero,112fcc <__call_exitprocs+0xa4>
  112f88:	80804017 	ldw	r2,256(r16)
  112f8c:	15400f26 	beq	r2,r21,112fcc <__call_exitprocs+0xa4>
  112f90:	8c7fffc4 	addi	r17,r17,-1
  112f94:	88bfffd8 	cmpnei	r2,r17,-1
  112f98:	843fff04 	addi	r16,r16,-4
  112f9c:	103ff91e 	bne	r2,zero,112f84 <__call_exitprocs+0x5c>
  112fa0:	dfc00817 	ldw	ra,32(sp)
  112fa4:	ddc00717 	ldw	r23,28(sp)
  112fa8:	dd800617 	ldw	r22,24(sp)
  112fac:	dd400517 	ldw	r21,20(sp)
  112fb0:	dd000417 	ldw	r20,16(sp)
  112fb4:	dcc00317 	ldw	r19,12(sp)
  112fb8:	dc800217 	ldw	r18,8(sp)
  112fbc:	dc400117 	ldw	r17,4(sp)
  112fc0:	dc000017 	ldw	r16,0(sp)
  112fc4:	dec00904 	addi	sp,sp,36
  112fc8:	f800283a 	ret
  112fcc:	90800117 	ldw	r2,4(r18)
  112fd0:	81800017 	ldw	r6,0(r16)
  112fd4:	10bfffc4 	addi	r2,r2,-1
  112fd8:	14401526 	beq	r2,r17,113030 <__call_exitprocs+0x108>
  112fdc:	80000015 	stw	zero,0(r16)
  112fe0:	303feb26 	beq	r6,zero,112f90 <__call_exitprocs+0x68>
  112fe4:	9c46983a 	sll	r3,r19,r17
  112fe8:	90806217 	ldw	r2,392(r18)
  112fec:	95800117 	ldw	r22,4(r18)
  112ff0:	1884703a 	and	r2,r3,r2
  112ff4:	1000061e 	bne	r2,zero,113010 <__call_exitprocs+0xe8>
  112ff8:	303ee83a 	callr	r6
  112ffc:	90800117 	ldw	r2,4(r18)
  113000:	15bfd81e 	bne	r2,r22,112f64 <__call_exitprocs+0x3c>
  113004:	b8805217 	ldw	r2,328(r23)
  113008:	14bfe126 	beq	r2,r18,112f90 <__call_exitprocs+0x68>
  11300c:	003fd506 	br	112f64 <__call_exitprocs+0x3c>
  113010:	90806317 	ldw	r2,396(r18)
  113014:	81002017 	ldw	r4,128(r16)
  113018:	1886703a 	and	r3,r3,r2
  11301c:	1800061e 	bne	r3,zero,113038 <__call_exitprocs+0x110>
  113020:	200b883a 	mov	r5,r4
  113024:	a009883a 	mov	r4,r20
  113028:	303ee83a 	callr	r6
  11302c:	003ff306 	br	112ffc <__call_exitprocs+0xd4>
  113030:	94400115 	stw	r17,4(r18)
  113034:	003fea06 	br	112fe0 <__call_exitprocs+0xb8>
  113038:	303ee83a 	callr	r6
  11303c:	003fef06 	br	112ffc <__call_exitprocs+0xd4>

00113040 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  113040:	defffd04 	addi	sp,sp,-12
  113044:	df000215 	stw	fp,8(sp)
  113048:	df000204 	addi	fp,sp,8
  11304c:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  113050:	0001883a 	nop
  113054:	e0bffe17 	ldw	r2,-8(fp)
  113058:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  11305c:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  113060:	10000226 	beq	r2,zero,11306c <_exit+0x2c>
    ALT_SIM_FAIL();
  113064:	002af070 	cmpltui	zero,zero,43969
  113068:	00000106 	br	113070 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  11306c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  113070:	003fff06 	br	113070 <_exit+0x30>
